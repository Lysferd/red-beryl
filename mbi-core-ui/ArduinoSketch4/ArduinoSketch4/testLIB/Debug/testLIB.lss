
testLIB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000eb2  00800200  0000cdbc  0000ce50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000cdbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000535  008010b2  008010b2  0000dd02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000dd02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000dd60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000da8  00000000  00000000  0000dda0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002c510  00000000  00000000  0000eb48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000058b4  00000000  00000000  0003b058  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000b6b4  00000000  00000000  0004090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000389c  00000000  00000000  0004bfc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000620c  00000000  00000000  0004f85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00016fc7  00000000  00000000  00055a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000f30  00000000  00000000  0006ca2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c4       	rjmp	.+2188   	; 0x88e <__ctors_end>
       2:	00 00       	nop
       4:	74 c4       	rjmp	.+2280   	; 0x8ee <__bad_interrupt>
       6:	00 00       	nop
       8:	72 c4       	rjmp	.+2276   	; 0x8ee <__bad_interrupt>
       a:	00 00       	nop
       c:	70 c4       	rjmp	.+2272   	; 0x8ee <__bad_interrupt>
       e:	00 00       	nop
      10:	6e c4       	rjmp	.+2268   	; 0x8ee <__bad_interrupt>
      12:	00 00       	nop
      14:	6c c4       	rjmp	.+2264   	; 0x8ee <__bad_interrupt>
      16:	00 00       	nop
      18:	6a c4       	rjmp	.+2260   	; 0x8ee <__bad_interrupt>
      1a:	00 00       	nop
      1c:	68 c4       	rjmp	.+2256   	; 0x8ee <__bad_interrupt>
      1e:	00 00       	nop
      20:	66 c4       	rjmp	.+2252   	; 0x8ee <__bad_interrupt>
      22:	00 00       	nop
      24:	64 c4       	rjmp	.+2248   	; 0x8ee <__bad_interrupt>
      26:	00 00       	nop
      28:	62 c4       	rjmp	.+2244   	; 0x8ee <__bad_interrupt>
      2a:	00 00       	nop
      2c:	60 c4       	rjmp	.+2240   	; 0x8ee <__bad_interrupt>
      2e:	00 00       	nop
      30:	5e c4       	rjmp	.+2236   	; 0x8ee <__bad_interrupt>
      32:	00 00       	nop
      34:	5c c4       	rjmp	.+2232   	; 0x8ee <__bad_interrupt>
      36:	00 00       	nop
      38:	5a c4       	rjmp	.+2228   	; 0x8ee <__bad_interrupt>
      3a:	00 00       	nop
      3c:	58 c4       	rjmp	.+2224   	; 0x8ee <__bad_interrupt>
      3e:	00 00       	nop
      40:	56 c4       	rjmp	.+2220   	; 0x8ee <__bad_interrupt>
      42:	00 00       	nop
      44:	54 c4       	rjmp	.+2216   	; 0x8ee <__bad_interrupt>
      46:	00 00       	nop
      48:	52 c4       	rjmp	.+2212   	; 0x8ee <__bad_interrupt>
      4a:	00 00       	nop
      4c:	50 c4       	rjmp	.+2208   	; 0x8ee <__bad_interrupt>
      4e:	00 00       	nop
      50:	4e c4       	rjmp	.+2204   	; 0x8ee <__bad_interrupt>
      52:	00 00       	nop
      54:	4c c4       	rjmp	.+2200   	; 0x8ee <__bad_interrupt>
      56:	00 00       	nop
      58:	4a c4       	rjmp	.+2196   	; 0x8ee <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_23>
      60:	46 c4       	rjmp	.+2188   	; 0x8ee <__bad_interrupt>
      62:	00 00       	nop
      64:	3c c6       	rjmp	.+3192   	; 0xcde <__vector_25>
      66:	00 00       	nop
      68:	70 c6       	rjmp	.+3296   	; 0xd4a <__vector_26>
      6a:	00 00       	nop
      6c:	40 c4       	rjmp	.+2176   	; 0x8ee <__bad_interrupt>
      6e:	00 00       	nop
      70:	3e c4       	rjmp	.+2172   	; 0x8ee <__bad_interrupt>
      72:	00 00       	nop
      74:	3c c4       	rjmp	.+2168   	; 0x8ee <__bad_interrupt>
      76:	00 00       	nop
      78:	3a c4       	rjmp	.+2164   	; 0x8ee <__bad_interrupt>
      7a:	00 00       	nop
      7c:	38 c4       	rjmp	.+2160   	; 0x8ee <__bad_interrupt>
      7e:	00 00       	nop
      80:	36 c4       	rjmp	.+2156   	; 0x8ee <__bad_interrupt>
      82:	00 00       	nop
      84:	34 c4       	rjmp	.+2152   	; 0x8ee <__bad_interrupt>
      86:	00 00       	nop
      88:	32 c4       	rjmp	.+2148   	; 0x8ee <__bad_interrupt>
      8a:	00 00       	nop
      8c:	30 c4       	rjmp	.+2144   	; 0x8ee <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 f1 49 	jmp	0x93e2	; 0x93e2 <__vector_36>
      94:	0c 94 27 4a 	jmp	0x944e	; 0x944e <__vector_37>
      98:	2a c4       	rjmp	.+2132   	; 0x8ee <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 9e 59 	jmp	0xb33c	; 0xb33c <__vector_39>
      a0:	26 c4       	rjmp	.+2124   	; 0x8ee <__bad_interrupt>
      a2:	00 00       	nop
      a4:	24 c4       	rjmp	.+2120   	; 0x8ee <__bad_interrupt>
      a6:	00 00       	nop
      a8:	22 c4       	rjmp	.+2116   	; 0x8ee <__bad_interrupt>
      aa:	00 00       	nop
      ac:	20 c4       	rjmp	.+2112   	; 0x8ee <__bad_interrupt>
      ae:	00 00       	nop
      b0:	1e c4       	rjmp	.+2108   	; 0x8ee <__bad_interrupt>
      b2:	00 00       	nop
      b4:	1c c4       	rjmp	.+2104   	; 0x8ee <__bad_interrupt>
      b6:	00 00       	nop
      b8:	1a c4       	rjmp	.+2100   	; 0x8ee <__bad_interrupt>
      ba:	00 00       	nop
      bc:	18 c4       	rjmp	.+2096   	; 0x8ee <__bad_interrupt>
      be:	00 00       	nop
      c0:	16 c4       	rjmp	.+2092   	; 0x8ee <__bad_interrupt>
      c2:	00 00       	nop
      c4:	14 c4       	rjmp	.+2088   	; 0x8ee <__bad_interrupt>
      c6:	00 00       	nop
      c8:	12 c4       	rjmp	.+2084   	; 0x8ee <__bad_interrupt>
      ca:	00 00       	nop
      cc:	10 c4       	rjmp	.+2080   	; 0x8ee <__bad_interrupt>
      ce:	00 00       	nop
      d0:	0e c4       	rjmp	.+2076   	; 0x8ee <__bad_interrupt>
      d2:	00 00       	nop
      d4:	0c c4       	rjmp	.+2072   	; 0x8ee <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0a c4       	rjmp	.+2068   	; 0x8ee <__bad_interrupt>
      da:	00 00       	nop
      dc:	08 c4       	rjmp	.+2064   	; 0x8ee <__bad_interrupt>
      de:	00 00       	nop
      e0:	06 c4       	rjmp	.+2060   	; 0x8ee <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c9 4a       	sbci	r28, 0xA9	; 169
      e6:	cc 4a       	sbci	r28, 0xAC	; 172
      e8:	bb 4a       	sbci	r27, 0xAB	; 171
      ea:	bf 4a       	sbci	r27, 0xAF	; 175
      ec:	c5 4a       	sbci	r28, 0xA5	; 165
      ee:	03 4b       	sbci	r16, 0xB3	; 179
      f0:	d0 4a       	sbci	r29, 0xA0	; 160
      f2:	d4 4a       	sbci	r29, 0xA4	; 164
      f4:	da 4a       	sbci	r29, 0xAA	; 170
      f6:	de 4a       	sbci	r29, 0xAE	; 174
      f8:	e2 4a       	sbci	r30, 0xA2	; 162
      fa:	e8 4a       	sbci	r30, 0xA8	; 168
      fc:	ec 4a       	sbci	r30, 0xAC	; 172
      fe:	f0 4a       	sbci	r31, 0xA0	; 160
     100:	03 4b       	sbci	r16, 0xB3	; 179
     102:	f6 4a       	sbci	r31, 0xA6	; 166
     104:	fa 4a       	sbci	r31, 0xAA	; 170
     106:	fe 4a       	sbci	r31, 0xAE	; 174
     108:	08 4a       	sbci	r16, 0xA8	; 168
     10a:	d7 3b       	cpi	r29, 0xB7	; 183
     10c:	3b ce       	rjmp	.-906    	; 0xfffffd84 <__eeprom_end+0xff7efd84>
     10e:	01 6e       	ori	r16, 0xE1	; 225
     110:	84 bc       	out	0x24, r8	; 36
     112:	bf fd       	.word	0xfdbf	; ????
     114:	c1 2f       	mov	r28, r17
     116:	3d 6c       	ori	r19, 0xCD	; 205
     118:	74 31       	cpi	r23, 0x14	; 20
     11a:	9a bd       	out	0x2a, r25	; 42
     11c:	56 83       	std	Z+6, r21	; 0x06
     11e:	3d da       	rcall	.-2950   	; 0xfffff59a <__eeprom_end+0xff7ef59a>
     120:	3d 00       	.word	0x003d	; ????
     122:	c7 7f       	andi	r28, 0xF7	; 247
     124:	11 be       	out	0x31, r1	; 49
     126:	d9 e4       	ldi	r29, 0x49	; 73
     128:	bb 4c       	sbci	r27, 0xCB	; 203
     12a:	3e 91       	ld	r19, -X
     12c:	6b aa       	std	Y+51, r6	; 0x33
     12e:	aa be       	out	0x3a, r10	; 58
     130:	00 00       	nop
     132:	00 80       	ld	r0, Z
     134:	3f 05       	cpc	r19, r15
     136:	a8 4c       	sbci	r26, 0xC8	; 200
     138:	cd b2       	in	r12, 0x1d	; 29
     13a:	d4 4e       	sbci	r29, 0xE4	; 228
     13c:	b9 38       	cpi	r27, 0x89	; 137
     13e:	36 a9       	ldd	r19, Z+54	; 0x36
     140:	02 0c       	add	r0, r2
     142:	50 b9       	out	0x00, r21	; 0
     144:	91 86       	std	Z+9, r9	; 0x09
     146:	88 08       	sbc	r8, r8
     148:	3c a6       	std	Y+44, r3	; 0x2c
     14a:	aa aa       	std	Y+50, r10	; 0x32
     14c:	2a be       	out	0x3a, r2	; 58
     14e:	00 00       	nop
     150:	00 80       	ld	r0, Z
     152:	3f 00       	.word	0x003f	; ????

00000154 <__trampolines_end>:
     154:	00 40       	sbci	r16, 0x00	; 0
     156:	7a 10       	cpse	r7, r10
     158:	f3 5a       	subi	r31, 0xA3	; 163
     15a:	00 a0       	ldd	r0, Z+32	; 0x20
     15c:	72 4e       	sbci	r23, 0xE2	; 226
     15e:	18 09       	sbc	r17, r8
     160:	00 10       	cpse	r0, r0
     162:	a5 d4       	rcall	.+2378   	; 0xaae <_Z14serialEventRunv+0x6e>
     164:	e8 00       	.word	0x00e8	; ????
     166:	00 e8       	ldi	r16, 0x80	; 128
     168:	76 48       	sbci	r23, 0x86	; 134
     16a:	17 00       	.word	0x0017	; ????
     16c:	00 e4       	ldi	r16, 0x40	; 64
     16e:	0b 54       	subi	r16, 0x4B	; 75
     170:	02 00       	.word	0x0002	; ????
     172:	00 ca       	rjmp	.-3072   	; 0xfffff574 <__eeprom_end+0xff7ef574>
     174:	9a 3b       	cpi	r25, 0xBA	; 186
     176:	00 00       	nop
     178:	00 e1       	ldi	r16, 0x10	; 16
     17a:	f5 05       	cpc	r31, r5
     17c:	00 00       	nop
     17e:	80 96       	adiw	r24, 0x20	; 32
     180:	98 00       	.word	0x0098	; ????
     182:	00 00       	nop
     184:	40 42       	sbci	r20, 0x20	; 32
     186:	0f 00       	.word	0x000f	; ????
     188:	00 00       	nop
     18a:	a0 86       	std	Z+8, r10	; 0x08
     18c:	01 00       	.word	0x0001	; ????
     18e:	00 00       	nop
     190:	10 27       	eor	r17, r16
     192:	00 00       	nop
     194:	00 00       	nop
     196:	e8 03       	fmulsu	r22, r16
     198:	00 00       	nop
     19a:	00 00       	nop
     19c:	64 00       	.word	0x0064	; ????
     19e:	00 00       	nop
     1a0:	00 00       	nop
     1a2:	0a 00       	.word	0x000a	; ????
     1a4:	00 00       	nop
     1a6:	00 00       	nop
     1a8:	01 00       	.word	0x0001	; ????
     1aa:	00 00       	nop
     1ac:	00 00       	nop
     1ae:	2c 76       	andi	r18, 0x6C	; 108
     1b0:	d8 88       	ldd	r13, Y+16	; 0x10
     1b2:	dc 67       	ori	r29, 0x7C	; 124
     1b4:	4f 08       	sbc	r4, r15
     1b6:	23 df       	rcall	.-442    	; 0xfffffffe <__eeprom_end+0xff7efffe>
     1b8:	c1 df       	rcall	.-126    	; 0x13c <__SREG__+0xfd>
     1ba:	ae 59       	subi	r26, 0x9E	; 158
     1bc:	e1 b1       	in	r30, 0x01	; 1
     1be:	b7 96       	adiw	r30, 0x27	; 39
     1c0:	e5 e3       	ldi	r30, 0x35	; 53
     1c2:	e4 53       	subi	r30, 0x34	; 52
     1c4:	c6 3a       	cpi	r28, 0xA6	; 166
     1c6:	e6 51       	subi	r30, 0x16	; 22
     1c8:	99 76       	andi	r25, 0x69	; 105
     1ca:	96 e8       	ldi	r25, 0x86	; 134
     1cc:	e6 c2       	rjmp	.+1484   	; 0x79a <__LOCK_REGION_LENGTH__+0x39a>
     1ce:	84 26       	eor	r8, r20
     1d0:	eb 89       	ldd	r30, Y+19	; 0x13
     1d2:	8c 9b       	sbis	0x11, 4	; 17
     1d4:	62 ed       	ldi	r22, 0xD2	; 210
     1d6:	40 7c       	andi	r20, 0xC0	; 192
     1d8:	6f fc       	.word	0xfc6f	; ????
     1da:	ef bc       	out	0x2f, r14	; 47
     1dc:	9c 9f       	mul	r25, r28
     1de:	40 f2       	brcs	.-112    	; 0x170 <__trampolines_end+0x1c>
     1e0:	ba a5       	ldd	r27, Y+42	; 0x2a
     1e2:	6f a5       	ldd	r22, Y+47	; 0x2f
     1e4:	f4 90       	lpm	r15, Z
     1e6:	05 5a       	subi	r16, 0xA5	; 165
     1e8:	2a f7       	brpl	.-54     	; 0x1b4 <__trampolines_end+0x60>
     1ea:	5c 93       	st	X, r21
     1ec:	6b 6c       	ori	r22, 0xCB	; 203
     1ee:	f9 67       	ori	r31, 0x79	; 121
     1f0:	6d c1       	rjmp	.+730    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
     1f2:	1b fc       	.word	0xfc1b	; ????
     1f4:	e0 e4       	ldi	r30, 0x40	; 64
     1f6:	0d 47       	sbci	r16, 0x7D	; 125
     1f8:	fe f5       	brtc	.+126    	; 0x278 <digital_pin_to_timer_PGM+0x12>
     1fa:	20 e6       	ldi	r18, 0x60	; 96
     1fc:	b5 00       	.word	0x00b5	; ????
     1fe:	d0 ed       	ldi	r29, 0xD0	; 208
     200:	90 2e       	mov	r9, r16
     202:	03 00       	.word	0x0003	; ????
     204:	94 35       	cpi	r25, 0x54	; 84
     206:	77 05       	cpc	r23, r7
     208:	00 80       	ld	r0, Z
     20a:	84 1e       	adc	r8, r20
     20c:	08 00       	.word	0x0008	; ????
     20e:	00 20       	and	r0, r0
     210:	4e 0a       	sbc	r4, r30
     212:	00 00       	nop
     214:	00 c8       	rjmp	.-4096   	; 0xfffff216 <__eeprom_end+0xff7ef216>
     216:	0c 33       	cpi	r16, 0x3C	; 60
     218:	33 33       	cpi	r19, 0x33	; 51
     21a:	33 0f       	add	r19, r19
     21c:	98 6e       	ori	r25, 0xE8	; 232
     21e:	12 83       	std	Z+2, r17	; 0x02
     220:	11 41       	sbci	r17, 0x11	; 17
     222:	ef 8d       	ldd	r30, Y+31	; 0x1f
     224:	21 14       	cp	r2, r1
     226:	89 3b       	cpi	r24, 0xB9	; 185
     228:	e6 55       	subi	r30, 0x56	; 86
     22a:	16 cf       	rjmp	.-468    	; 0x58 <__SREG__+0x19>
     22c:	fe e6       	ldi	r31, 0x6E	; 110
     22e:	db 18       	sub	r13, r11
     230:	d1 84       	ldd	r13, Z+9	; 0x09
     232:	4b 38       	cpi	r20, 0x8B	; 139
     234:	1b f7       	brvc	.-58     	; 0x1fc <__trampolines_end+0xa8>
     236:	7c 1d       	adc	r23, r12
     238:	90 1d       	adc	r25, r0
     23a:	a4 bb       	out	0x14, r26	; 20
     23c:	e4 24       	eor	r14, r4
     23e:	20 32       	cpi	r18, 0x20	; 32
     240:	84 72       	andi	r24, 0x24	; 36
     242:	5e 22       	and	r5, r30
     244:	81 00       	.word	0x0081	; ????
     246:	c9 f1       	breq	.+114    	; 0x2ba <digital_pin_to_bit_mask_PGM+0xe>
     248:	24 ec       	ldi	r18, 0xC4	; 196
     24a:	a1 e5       	ldi	r26, 0x51	; 81
     24c:	3d 27       	eor	r19, r29

0000024e <_ZL7BT2_bmp>:
     24e:	00 18 54 32 1c 32 54 18                             ..T2.2T.

00000256 <_ZL12bat_6x16_bmp>:
     256:	00 00 3f ff 20 01 e0 01 e0 01 20 01 3f ff 00 00     ..?. ..... .?...

00000266 <digital_pin_to_timer_PGM>:
     266:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     292:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000002ac <digital_pin_to_bit_mask_PGM>:
     2ac:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     2bc:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     2cc:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     2dc:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     2ec:	04 08 10 20 40 80                                   ... @.

000002f2 <digital_pin_to_port_PGM>:
     2f2:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     302:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     312:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     322:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     332:	0b 0b 0b 0b 0b 0b                                   ......

00000338 <port_to_input_PGM>:
     338:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     348:	00 01 00 00 03 01 06 01 09 01                       ..........

00000352 <port_to_output_PGM>:
     352:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     362:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000036c <port_to_mode_PGM>:
     36c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     37c:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000386 <_ZL4font>:
     386:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     396:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     3a6:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     3b6:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     3c6:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     3d6:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     3e6:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     3f6:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     406:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     416:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     426:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     436:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     446:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     456:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     466:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     476:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     486:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     496:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     4a6:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     4b6:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     4c6:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     4d6:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     4e6:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     4f6:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     506:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     516:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     526:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     536:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     546:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     556:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     566:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     576:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     586:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     596:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     5a6:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     5b6:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     5c6:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     5d6:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     5e6:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     5f6:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     606:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     616:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     626:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     636:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     646:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     656:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     666:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     676:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     686:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     696:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     6a6:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     6b6:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     6c6:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     6d6:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     6e6:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     6f6:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     706:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     716:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     726:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     736:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     746:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     756:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     766:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     776:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     786:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     796:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     7a6:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     7b6:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     7c6:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     7d6:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     7e6:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     7f6:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     806:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     816:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     826:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     836:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     846:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     856:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     866:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     876:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000886 <__ctors_start>:
     886:	df 04       	cpc	r13, r15
     888:	d7 06       	cpc	r13, r23
     88a:	ec 49       	sbci	r30, 0x9C	; 156
     88c:	5b 4a       	sbci	r21, 0xAB	; 171

0000088e <__ctors_end>:
     88e:	11 24       	eor	r1, r1
     890:	1f be       	out	0x3f, r1	; 63
     892:	cf ef       	ldi	r28, 0xFF	; 255
     894:	d1 e2       	ldi	r29, 0x21	; 33
     896:	de bf       	out	0x3e, r29	; 62
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	00 e0       	ldi	r16, 0x00	; 0
     89c:	0c bf       	out	0x3c, r16	; 60

0000089e <__do_copy_data>:
     89e:	10 e1       	ldi	r17, 0x10	; 16
     8a0:	a0 e0       	ldi	r26, 0x00	; 0
     8a2:	b2 e0       	ldi	r27, 0x02	; 2
     8a4:	ec eb       	ldi	r30, 0xBC	; 188
     8a6:	fd ec       	ldi	r31, 0xCD	; 205
     8a8:	00 e0       	ldi	r16, 0x00	; 0
     8aa:	0b bf       	out	0x3b, r16	; 59
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <__do_copy_data+0x14>
     8ae:	07 90       	elpm	r0, Z+
     8b0:	0d 92       	st	X+, r0
     8b2:	a2 3b       	cpi	r26, 0xB2	; 178
     8b4:	b1 07       	cpc	r27, r17
     8b6:	d9 f7       	brne	.-10     	; 0x8ae <__do_copy_data+0x10>

000008b8 <__do_clear_bss>:
     8b8:	25 e1       	ldi	r18, 0x15	; 21
     8ba:	a2 eb       	ldi	r26, 0xB2	; 178
     8bc:	b0 e1       	ldi	r27, 0x10	; 16
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <.do_clear_bss_start>

000008c0 <.do_clear_bss_loop>:
     8c0:	1d 92       	st	X+, r1

000008c2 <.do_clear_bss_start>:
     8c2:	a7 3e       	cpi	r26, 0xE7	; 231
     8c4:	b2 07       	cpc	r27, r18
     8c6:	e1 f7       	brne	.-8      	; 0x8c0 <.do_clear_bss_loop>

000008c8 <__do_global_ctors>:
     8c8:	14 e0       	ldi	r17, 0x04	; 4
     8ca:	c7 e4       	ldi	r28, 0x47	; 71
     8cc:	d4 e0       	ldi	r29, 0x04	; 4
     8ce:	00 e0       	ldi	r16, 0x00	; 0
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <__do_global_ctors+0x16>
     8d2:	21 97       	sbiw	r28, 0x01	; 1
     8d4:	01 09       	sbc	r16, r1
     8d6:	80 2f       	mov	r24, r16
     8d8:	fe 01       	movw	r30, r28
     8da:	0e 94 92 5e 	call	0xbd24	; 0xbd24 <__tablejump2__>
     8de:	c3 34       	cpi	r28, 0x43	; 67
     8e0:	d1 07       	cpc	r29, r17
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	08 07       	cpc	r16, r24
     8e6:	a9 f7       	brne	.-22     	; 0x8d2 <__do_global_ctors+0xa>
     8e8:	90 d2       	rcall	.+1312   	; 0xe0a <main>
     8ea:	0c 94 dc 66 	jmp	0xcdb8	; 0xcdb8 <_exit>

000008ee <__bad_interrupt>:
     8ee:	88 cb       	rjmp	.-2288   	; 0x0 <__vectors>

000008f0 <setup>:
  return __brkval ? &top - __brkval : &top - __malloc_heap_start;
#endif  // __arm__
}


void setup() {
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     8f4:	26 e0       	ldi	r18, 0x06	; 6
     8f6:	40 e0       	ldi	r20, 0x00	; 0
     8f8:	5b e4       	ldi	r21, 0x4B	; 75
     8fa:	60 e0       	ldi	r22, 0x00	; 0
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 ec       	ldi	r24, 0xC0	; 192
     900:	90 e1       	ldi	r25, 0x10	; 16
     902:	62 d1       	rcall	.+708    	; 0xbc8 <_ZN14HardwareSerial5beginEmh>
  // put your setup code here, to run once:
  
  Serial.begin(19200); 
  Wire.begin();
     904:	84 e8       	ldi	r24, 0x84	; 132
     906:	94 e1       	ldi	r25, 0x14	; 20
     908:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <_ZN7TwoWire5beginEv>
  
  rb = new red_beryl();
     90c:	8d ee       	ldi	r24, 0xED	; 237
     90e:	94 e0       	ldi	r25, 0x04	; 4
     910:	86 d2       	rcall	.+1292   	; 0xe1e <_Znwj>
     912:	ec 01       	movw	r28, r24
     914:	0e 94 22 23 	call	0x4644	; 0x4644 <_ZN9red_berylC1Ev>
     918:	d0 93 bf 10 	sts	0x10BF, r29	; 0x8010bf <rb+0x1>
     91c:	c0 93 be 10 	sts	0x10BE, r28	; 0x8010be <rb>
  fang.beryl = rb;  
     920:	d0 93 bd 10 	sts	0x10BD, r29	; 0x8010bd <__data_end+0xb>
     924:	c0 93 bc 10 	sts	0x10BC, r28	; 0x8010bc <__data_end+0xa>
  Serial.println("Iniciou! Atmel Studio!!!");
     928:	61 e3       	ldi	r22, 0x31	; 49
     92a:	74 e0       	ldi	r23, 0x04	; 4
     92c:	80 ec       	ldi	r24, 0xC0	; 192
     92e:	90 e1       	ldi	r25, 0x10	; 16
}
     930:	df 91       	pop	r29
  Serial.begin(19200); 
  Wire.begin();
  
  rb = new red_beryl();
  fang.beryl = rb;  
  Serial.println("Iniciou! Atmel Studio!!!");
     932:	cf 91       	pop	r28
     934:	c4 c2       	rjmp	.+1416   	; 0xebe <_ZN5Print7printlnEPKc>

00000936 <loop>:
}

void loop() {
  fang.ler_serial();
     936:	82 eb       	ldi	r24, 0xB2	; 178
     938:	90 e1       	ldi	r25, 0x10	; 16
     93a:	0e 94 dc 44 	call	0x89b8	; 0x89b8 <_ZN8red_fang10ler_serialEv>
  rb->display.clearDisplay();
     93e:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <rb>
     942:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <rb+0x1>
     946:	45 96       	adiw	r24, 0x15	; 21
     948:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(!rb->notificationTimer(fang.isBeingUsed()))
     94c:	82 eb       	ldi	r24, 0xB2	; 178
     94e:	90 e1       	ldi	r25, 0x10	; 16
     950:	0e 94 97 3f 	call	0x7f2e	; 0x7f2e <_ZN8red_fang11isBeingUsedEv>
     954:	68 2f       	mov	r22, r24
     956:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <rb>
     95a:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <rb+0x1>
     95e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN9red_beryl17notificationTimerEb>
     962:	81 11       	cpse	r24, r1
     964:	06 c0       	rjmp	.+12     	; 0x972 <loop+0x3c>
  {
    rb->checarPin();
     966:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <rb>
     96a:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <rb+0x1>
     96e:	0e 94 78 24 	call	0x48f0	; 0x48f0 <_ZN9red_beryl9checarPinEv>
  }
  rb->menu();
     972:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <rb>
     976:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <rb+0x1>
     97a:	0e 94 93 32 	call	0x6526	; 0x6526 <_ZN9red_beryl4menuEv>
  rb->upperBar();
     97e:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <rb>
     982:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <rb+0x1>
     986:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN9red_beryl8upperBarEv>
  rb->clock.checkTime();
     98a:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <rb>
     98e:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <rb+0x1>
     992:	8f 54       	subi	r24, 0x4F	; 79
     994:	9f 4f       	sbci	r25, 0xFF	; 255
     996:	0e 94 c9 47 	call	0x8f92	; 0x8f92 <_ZN10red_quartz9checkTimeEv>
  rb->notification();
     99a:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <rb>
     99e:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <rb+0x1>
     9a2:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <_ZN9red_beryl12notificationEv>
  rb->display.display();
     9a6:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <rb>
     9aa:	90 91 bf 10 	lds	r25, 0x10BF	; 0x8010bf <rb+0x1>
     9ae:	45 96       	adiw	r24, 0x15	; 21
     9b0:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16Adafruit_SSD13067displayEv>
  delay(10);
     9b4:	6a e0       	ldi	r22, 0x0A	; 10
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	dc c4       	rjmp	.+2488   	; 0x1376 <delay>

000009be <_GLOBAL__sub_I_rb>:
//End of Auto generated function prototypes by Atmel Studio



red_beryl *rb;
red_fang fang;
     9be:	82 eb       	ldi	r24, 0xB2	; 178
     9c0:	90 e1       	ldi	r25, 0x10	; 16
     9c2:	0c 94 8d 39 	jmp	0x731a	; 0x731a <_ZN8red_fangC1Ev>

000009c6 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     9c6:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     9c8:	91 8d       	ldd	r25, Z+25	; 0x19
     9ca:	22 8d       	ldd	r18, Z+26	; 0x1a
     9cc:	89 2f       	mov	r24, r25
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	80 5c       	subi	r24, 0xC0	; 192
     9d2:	9f 4f       	sbci	r25, 0xFF	; 255
     9d4:	82 1b       	sub	r24, r18
     9d6:	91 09       	sbc	r25, r1
}
     9d8:	8f 73       	andi	r24, 0x3F	; 63
     9da:	99 27       	eor	r25, r25
     9dc:	08 95       	ret

000009de <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     9de:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     9e0:	91 8d       	ldd	r25, Z+25	; 0x19
     9e2:	82 8d       	ldd	r24, Z+26	; 0x1a
     9e4:	98 17       	cp	r25, r24
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     9e8:	82 8d       	ldd	r24, Z+26	; 0x1a
     9ea:	e8 0f       	add	r30, r24
     9ec:	f1 1d       	adc	r31, r1
     9ee:	85 8d       	ldd	r24, Z+29	; 0x1d
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     9f8:	08 95       	ret

000009fa <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     9fa:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     9fc:	91 8d       	ldd	r25, Z+25	; 0x19
     9fe:	82 8d       	ldd	r24, Z+26	; 0x1a
     a00:	98 17       	cp	r25, r24
     a02:	61 f0       	breq	.+24     	; 0xa1c <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     a04:	82 8d       	ldd	r24, Z+26	; 0x1a
     a06:	df 01       	movw	r26, r30
     a08:	a8 0f       	add	r26, r24
     a0a:	b1 1d       	adc	r27, r1
     a0c:	5d 96       	adiw	r26, 0x1d	; 29
     a0e:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     a10:	92 8d       	ldd	r25, Z+26	; 0x1a
     a12:	9f 5f       	subi	r25, 0xFF	; 255
     a14:	9f 73       	andi	r25, 0x3F	; 63
     a16:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     a20:	08 95       	ret

00000a22 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     a22:	fc 01       	movw	r30, r24
     a24:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     a26:	44 8d       	ldd	r20, Z+28	; 0x1c
     a28:	25 2f       	mov	r18, r21
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	84 2f       	mov	r24, r20
     a2e:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     a30:	82 1b       	sub	r24, r18
     a32:	93 0b       	sbc	r25, r19
     a34:	54 17       	cp	r21, r20
     a36:	10 f0       	brcs	.+4      	; 0xa3c <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     a38:	cf 96       	adiw	r24, 0x3f	; 63
     a3a:	08 95       	ret
  return tail - head - 1;
     a3c:	01 97       	sbiw	r24, 0x01	; 1
}
     a3e:	08 95       	ret

00000a40 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     a40:	8e ec       	ldi	r24, 0xCE	; 206
     a42:	96 e0       	ldi	r25, 0x06	; 6
     a44:	89 2b       	or	r24, r25
     a46:	39 f0       	breq	.+14     	; 0xa56 <_Z14serialEventRunv+0x16>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	90 e0       	ldi	r25, 0x00	; 0
     a4c:	89 2b       	or	r24, r25
     a4e:	19 f0       	breq	.+6      	; 0xa56 <_Z14serialEventRunv+0x16>
     a50:	a5 d1       	rcall	.+842    	; 0xd9c <_Z17Serial0_availablev>
     a52:	81 11       	cpse	r24, r1
     a54:	25 c0       	rjmp	.+74     	; 0xaa0 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     a56:	81 e5       	ldi	r24, 0x51	; 81
     a58:	9a e4       	ldi	r25, 0x4A	; 74
     a5a:	89 2b       	or	r24, r25
     a5c:	41 f0       	breq	.+16     	; 0xa6e <_Z14serialEventRunv+0x2e>
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	89 2b       	or	r24, r25
     a64:	21 f0       	breq	.+8      	; 0xa6e <_Z14serialEventRunv+0x2e>
     a66:	0e 94 51 4a 	call	0x94a2	; 0x94a2 <_Z17Serial1_availablev>
     a6a:	81 11       	cpse	r24, r1
     a6c:	1c c0       	rjmp	.+56     	; 0xaa6 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	89 2b       	or	r24, r25
     a74:	41 f0       	breq	.+16     	; 0xa86 <_Z14serialEventRunv+0x46>
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	89 2b       	or	r24, r25
     a7c:	21 f0       	breq	.+8      	; 0xa86 <_Z14serialEventRunv+0x46>
     a7e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a82:	81 11       	cpse	r24, r1
     a84:	13 c0       	rjmp	.+38     	; 0xaac <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	89 2b       	or	r24, r25
     a8c:	a1 f0       	breq	.+40     	; 0xab6 <_Z14serialEventRunv+0x76>
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	89 2b       	or	r24, r25
     a94:	81 f0       	breq	.+32     	; 0xab6 <_Z14serialEventRunv+0x76>
     a96:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     a9a:	81 11       	cpse	r24, r1
     a9c:	0a c0       	rjmp	.+20     	; 0xab2 <_Z14serialEventRunv+0x72>
     a9e:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     aa0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     aa4:	d8 cf       	rjmp	.-80     	; 0xa56 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     aa6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     aaa:	e1 cf       	rjmp	.-62     	; 0xa6e <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     aac:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ab0:	ea cf       	rjmp	.-44     	; 0xa86 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     ab2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     ab6:	08 95       	ret

00000ab8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     ab8:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     aba:	84 8d       	ldd	r24, Z+28	; 0x1c
     abc:	df 01       	movw	r26, r30
     abe:	a8 0f       	add	r26, r24
     ac0:	b1 1d       	adc	r27, r1
     ac2:	a3 5a       	subi	r26, 0xA3	; 163
     ac4:	bf 4f       	sbci	r27, 0xFF	; 255
     ac6:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     ac8:	84 8d       	ldd	r24, Z+28	; 0x1c
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	8f 73       	andi	r24, 0x3F	; 63
     ad0:	99 27       	eor	r25, r25
     ad2:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     ad4:	a6 89       	ldd	r26, Z+22	; 0x16
     ad6:	b7 89       	ldd	r27, Z+23	; 0x17
     ad8:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     ada:	a0 89       	ldd	r26, Z+16	; 0x10
     adc:	b1 89       	ldd	r27, Z+17	; 0x11
     ade:	8c 91       	ld	r24, X
     ae0:	80 64       	ori	r24, 0x40	; 64
     ae2:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     ae4:	93 8d       	ldd	r25, Z+27	; 0x1b
     ae6:	84 8d       	ldd	r24, Z+28	; 0x1c
     ae8:	98 13       	cpse	r25, r24
     aea:	06 c0       	rjmp	.+12     	; 0xaf8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     aec:	02 88       	ldd	r0, Z+18	; 0x12
     aee:	f3 89       	ldd	r31, Z+19	; 0x13
     af0:	e0 2d       	mov	r30, r0
     af2:	80 81       	ld	r24, Z
     af4:	8f 7d       	andi	r24, 0xDF	; 223
     af6:	80 83       	st	Z, r24
     af8:	08 95       	ret

00000afa <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	0f 93       	push	r16
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	ec 01       	movw	r28, r24
  _written = true;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     b0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     b0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b10:	98 13       	cpse	r25, r24
     b12:	05 c0       	rjmp	.+10     	; 0xb1e <_ZN14HardwareSerial5writeEh+0x24>
     b14:	e8 89       	ldd	r30, Y+16	; 0x10
     b16:	f9 89       	ldd	r31, Y+17	; 0x11
     b18:	80 81       	ld	r24, Z
     b1a:	85 fd       	sbrc	r24, 5
     b1c:	23 c0       	rjmp	.+70     	; 0xb64 <_ZN14HardwareSerial5writeEh+0x6a>
     b1e:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     b20:	0b 8d       	ldd	r16, Y+27	; 0x1b
     b22:	10 e0       	ldi	r17, 0x00	; 0
     b24:	0f 5f       	subi	r16, 0xFF	; 255
     b26:	1f 4f       	sbci	r17, 0xFF	; 255
     b28:	0f 73       	andi	r16, 0x3F	; 63
     b2a:	11 27       	eor	r17, r17
     b2c:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     b2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b30:	e8 12       	cpse	r14, r24
     b32:	0b c0       	rjmp	.+22     	; 0xb4a <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	07 fc       	sbrc	r0, 7
     b38:	fa cf       	rjmp	.-12     	; 0xb2e <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     b3a:	e8 89       	ldd	r30, Y+16	; 0x10
     b3c:	f9 89       	ldd	r31, Y+17	; 0x11
     b3e:	80 81       	ld	r24, Z
     b40:	85 ff       	sbrs	r24, 5
     b42:	f5 cf       	rjmp	.-22     	; 0xb2e <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     b44:	ce 01       	movw	r24, r28
     b46:	b8 df       	rcall	.-144    	; 0xab8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     b48:	f2 cf       	rjmp	.-28     	; 0xb2e <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     b4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b4c:	fe 01       	movw	r30, r28
     b4e:	e8 0f       	add	r30, r24
     b50:	f1 1d       	adc	r31, r1
     b52:	e3 5a       	subi	r30, 0xA3	; 163
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     b58:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     b5a:	ea 89       	ldd	r30, Y+18	; 0x12
     b5c:	fb 89       	ldd	r31, Y+19	; 0x13
     b5e:	80 81       	ld	r24, Z
     b60:	80 62       	ori	r24, 0x20	; 32
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     b64:	ee 89       	ldd	r30, Y+22	; 0x16
     b66:	ff 89       	ldd	r31, Y+23	; 0x17
     b68:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     b6a:	e8 89       	ldd	r30, Y+16	; 0x10
     b6c:	f9 89       	ldd	r31, Y+17	; 0x11
     b6e:	80 81       	ld	r24, Z
     b70:	80 64       	ori	r24, 0x40	; 64
     b72:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	08 95       	ret

00000b86 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     b8c:	88 8d       	ldd	r24, Y+24	; 0x18
     b8e:	88 23       	and	r24, r24
     b90:	c1 f0       	breq	.+48     	; 0xbc2 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     b92:	ea 89       	ldd	r30, Y+18	; 0x12
     b94:	fb 89       	ldd	r31, Y+19	; 0x13
     b96:	80 81       	ld	r24, Z
     b98:	85 fd       	sbrc	r24, 5
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <_ZN14HardwareSerial5flushEv+0x20>
     b9c:	a8 89       	ldd	r26, Y+16	; 0x10
     b9e:	b9 89       	ldd	r27, Y+17	; 0x11
     ba0:	8c 91       	ld	r24, X
     ba2:	86 fd       	sbrc	r24, 6
     ba4:	0e c0       	rjmp	.+28     	; 0xbc2 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	07 fc       	sbrc	r0, 7
     baa:	f5 cf       	rjmp	.-22     	; 0xb96 <_ZN14HardwareSerial5flushEv+0x10>
     bac:	80 81       	ld	r24, Z
     bae:	85 ff       	sbrs	r24, 5
     bb0:	f2 cf       	rjmp	.-28     	; 0xb96 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     bb2:	a8 89       	ldd	r26, Y+16	; 0x10
     bb4:	b9 89       	ldd	r27, Y+17	; 0x11
     bb6:	8c 91       	ld	r24, X
     bb8:	85 ff       	sbrs	r24, 5
     bba:	ed cf       	rjmp	.-38     	; 0xb96 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     bbc:	ce 01       	movw	r24, r28
     bbe:	7c df       	rcall	.-264    	; 0xab8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     bc0:	e8 cf       	rjmp	.-48     	; 0xb92 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	ec 01       	movw	r28, r24
     bd8:	6a 01       	movw	r12, r20
     bda:	7b 01       	movw	r14, r22
     bdc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     bde:	e8 89       	ldd	r30, Y+16	; 0x10
     be0:	f9 89       	ldd	r31, Y+17	; 0x11
     be2:	82 e0       	ldi	r24, 0x02	; 2
     be4:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     be6:	41 15       	cp	r20, r1
     be8:	51 4e       	sbci	r21, 0xE1	; 225
     bea:	61 05       	cpc	r22, r1
     bec:	71 05       	cpc	r23, r1
     bee:	b1 f0       	breq	.+44     	; 0xc1c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	79 e0       	ldi	r23, 0x09	; 9
     bf4:	8d e3       	ldi	r24, 0x3D	; 61
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	a7 01       	movw	r20, r14
     bfa:	96 01       	movw	r18, r12
     bfc:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <__udivmodsi4>
     c00:	da 01       	movw	r26, r20
     c02:	c9 01       	movw	r24, r18
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	a1 09       	sbc	r26, r1
     c08:	b1 09       	sbc	r27, r1
     c0a:	b6 95       	lsr	r27
     c0c:	a7 95       	ror	r26
     c0e:	97 95       	ror	r25
     c10:	87 95       	ror	r24
     c12:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     c14:	21 15       	cp	r18, r1
     c16:	80 e1       	ldi	r24, 0x10	; 16
     c18:	38 07       	cpc	r19, r24
     c1a:	a8 f0       	brcs	.+42     	; 0xc46 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     c1c:	e8 89       	ldd	r30, Y+16	; 0x10
     c1e:	f9 89       	ldd	r31, Y+17	; 0x11
     c20:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     c22:	60 e8       	ldi	r22, 0x80	; 128
     c24:	74 e8       	ldi	r23, 0x84	; 132
     c26:	8e e1       	ldi	r24, 0x1E	; 30
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a7 01       	movw	r20, r14
     c2c:	96 01       	movw	r18, r12
     c2e:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <__udivmodsi4>
     c32:	da 01       	movw	r26, r20
     c34:	c9 01       	movw	r24, r18
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	a1 09       	sbc	r26, r1
     c3a:	b1 09       	sbc	r27, r1
     c3c:	b6 95       	lsr	r27
     c3e:	a7 95       	ror	r26
     c40:	97 95       	ror	r25
     c42:	87 95       	ror	r24
     c44:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     c46:	ec 85       	ldd	r30, Y+12	; 0x0c
     c48:	fd 85       	ldd	r31, Y+13	; 0x0d
     c4a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     c4c:	ee 85       	ldd	r30, Y+14	; 0x0e
     c4e:	ff 85       	ldd	r31, Y+15	; 0x0f
     c50:	20 83       	st	Z, r18

  _written = false;
     c52:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     c54:	ec 89       	ldd	r30, Y+20	; 0x14
     c56:	fd 89       	ldd	r31, Y+21	; 0x15
     c58:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     c5a:	ea 89       	ldd	r30, Y+18	; 0x12
     c5c:	fb 89       	ldd	r31, Y+19	; 0x13
     c5e:	80 81       	ld	r24, Z
     c60:	80 61       	ori	r24, 0x10	; 16
     c62:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     c64:	ea 89       	ldd	r30, Y+18	; 0x12
     c66:	fb 89       	ldd	r31, Y+19	; 0x13
     c68:	80 81       	ld	r24, Z
     c6a:	88 60       	ori	r24, 0x08	; 8
     c6c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     c6e:	ea 89       	ldd	r30, Y+18	; 0x12
     c70:	fb 89       	ldd	r31, Y+19	; 0x13
     c72:	80 81       	ld	r24, Z
     c74:	80 68       	ori	r24, 0x80	; 128
     c76:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     c78:	ea 89       	ldd	r30, Y+18	; 0x12
     c7a:	fb 89       	ldd	r31, Y+19	; 0x13
     c7c:	80 81       	ld	r24, Z
     c7e:	8f 7d       	andi	r24, 0xDF	; 223
     c80:	80 83       	st	Z, r24
}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	cf 90       	pop	r12
     c90:	08 95       	ret

00000c92 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  flush();
     c98:	e8 81       	ld	r30, Y
     c9a:	f9 81       	ldd	r31, Y+1	; 0x01
     c9c:	06 80       	ldd	r0, Z+6	; 0x06
     c9e:	f7 81       	ldd	r31, Z+7	; 0x07
     ca0:	e0 2d       	mov	r30, r0
     ca2:	19 95       	eicall

  cbi(*_ucsrb, RXEN0);
     ca4:	ea 89       	ldd	r30, Y+18	; 0x12
     ca6:	fb 89       	ldd	r31, Y+19	; 0x13
     ca8:	80 81       	ld	r24, Z
     caa:	8f 7e       	andi	r24, 0xEF	; 239
     cac:	80 83       	st	Z, r24
  cbi(*_ucsrb, TXEN0);
     cae:	ea 89       	ldd	r30, Y+18	; 0x12
     cb0:	fb 89       	ldd	r31, Y+19	; 0x13
     cb2:	80 81       	ld	r24, Z
     cb4:	87 7f       	andi	r24, 0xF7	; 247
     cb6:	80 83       	st	Z, r24
  cbi(*_ucsrb, RXCIE0);
     cb8:	ea 89       	ldd	r30, Y+18	; 0x12
     cba:	fb 89       	ldd	r31, Y+19	; 0x13
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     cc2:	ea 89       	ldd	r30, Y+18	; 0x12
     cc4:	fb 89       	ldd	r31, Y+19	; 0x13
     cc6:	80 81       	ld	r24, Z
     cc8:	8f 7d       	andi	r24, 0xDF	; 223
     cca:	80 83       	st	Z, r24
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
     ccc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     cce:	89 8f       	std	Y+25, r24	; 0x19
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	08 95       	ret

00000cdc <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     cdc:	08 95       	ret

00000cde <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	0b b6       	in	r0, 0x3b	; 59
     cea:	0f 92       	push	r0
     cec:	2f 93       	push	r18
     cee:	8f 93       	push	r24
     cf0:	9f 93       	push	r25
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     cf6:	e0 91 d0 10 	lds	r30, 0x10D0	; 0x8010d0 <Serial+0x10>
     cfa:	f0 91 d1 10 	lds	r31, 0x10D1	; 0x8010d1 <Serial+0x11>
     cfe:	80 81       	ld	r24, Z
     d00:	e0 91 d6 10 	lds	r30, 0x10D6	; 0x8010d6 <Serial+0x16>
     d04:	f0 91 d7 10 	lds	r31, 0x10D7	; 0x8010d7 <Serial+0x17>
     d08:	82 fd       	sbrc	r24, 2
     d0a:	12 c0       	rjmp	.+36     	; 0xd30 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     d0c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     d0e:	80 91 d9 10 	lds	r24, 0x10D9	; 0x8010d9 <Serial+0x19>
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     d16:	20 91 da 10 	lds	r18, 0x10DA	; 0x8010da <Serial+0x1a>
     d1a:	82 17       	cp	r24, r18
     d1c:	51 f0       	breq	.+20     	; 0xd32 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     d1e:	e0 91 d9 10 	lds	r30, 0x10D9	; 0x8010d9 <Serial+0x19>
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	e0 54       	subi	r30, 0x40	; 64
     d26:	ff 4e       	sbci	r31, 0xEF	; 239
     d28:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     d2a:	80 93 d9 10 	sts	0x10D9, r24	; 0x8010d9 <Serial+0x19>
     d2e:	01 c0       	rjmp	.+2      	; 0xd32 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     d30:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     d32:	ff 91       	pop	r31
     d34:	ef 91       	pop	r30
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0b be       	out	0x3b, r0	; 59
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     d4a:	1f 92       	push	r1
     d4c:	0f 92       	push	r0
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	0f 92       	push	r0
     d52:	11 24       	eor	r1, r1
     d54:	0b b6       	in	r0, 0x3b	; 59
     d56:	0f 92       	push	r0
     d58:	2f 93       	push	r18
     d5a:	3f 93       	push	r19
     d5c:	4f 93       	push	r20
     d5e:	5f 93       	push	r21
     d60:	6f 93       	push	r22
     d62:	7f 93       	push	r23
     d64:	8f 93       	push	r24
     d66:	9f 93       	push	r25
     d68:	af 93       	push	r26
     d6a:	bf 93       	push	r27
     d6c:	ef 93       	push	r30
     d6e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     d70:	80 ec       	ldi	r24, 0xC0	; 192
     d72:	90 e1       	ldi	r25, 0x10	; 16
     d74:	a1 de       	rcall	.-702    	; 0xab8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d76:	ff 91       	pop	r31
     d78:	ef 91       	pop	r30
     d7a:	bf 91       	pop	r27
     d7c:	af 91       	pop	r26
     d7e:	9f 91       	pop	r25
     d80:	8f 91       	pop	r24
     d82:	7f 91       	pop	r23
     d84:	6f 91       	pop	r22
     d86:	5f 91       	pop	r21
     d88:	4f 91       	pop	r20
     d8a:	3f 91       	pop	r19
     d8c:	2f 91       	pop	r18
     d8e:	0f 90       	pop	r0
     d90:	0b be       	out	0x3b, r0	; 59
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     d9c:	80 ec       	ldi	r24, 0xC0	; 192
     d9e:	90 e1       	ldi	r25, 0x10	; 16
     da0:	12 de       	rcall	.-988    	; 0x9c6 <_ZN14HardwareSerial9availableEv>
     da2:	21 e0       	ldi	r18, 0x01	; 1
     da4:	89 2b       	or	r24, r25
     da6:	09 f4       	brne	.+2      	; 0xdaa <_Z17Serial0_availablev+0xe>
     da8:	20 e0       	ldi	r18, 0x00	; 0
}
     daa:	82 2f       	mov	r24, r18
     dac:	08 95       	ret

00000dae <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     dae:	e0 ec       	ldi	r30, 0xC0	; 192
     db0:	f0 e1       	ldi	r31, 0x10	; 16
     db2:	13 82       	std	Z+3, r1	; 0x03
     db4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     db6:	88 ee       	ldi	r24, 0xE8	; 232
     db8:	93 e0       	ldi	r25, 0x03	; 3
     dba:	a0 e0       	ldi	r26, 0x00	; 0
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	84 83       	std	Z+4, r24	; 0x04
     dc0:	95 83       	std	Z+5, r25	; 0x05
     dc2:	a6 83       	std	Z+6, r26	; 0x06
     dc4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     dc6:	8e e4       	ldi	r24, 0x4E	; 78
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	80 83       	st	Z, r24
     dce:	85 ec       	ldi	r24, 0xC5	; 197
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	95 87       	std	Z+13, r25	; 0x0d
     dd4:	84 87       	std	Z+12, r24	; 0x0c
     dd6:	84 ec       	ldi	r24, 0xC4	; 196
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	97 87       	std	Z+15, r25	; 0x0f
     ddc:	86 87       	std	Z+14, r24	; 0x0e
     dde:	80 ec       	ldi	r24, 0xC0	; 192
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	91 8b       	std	Z+17, r25	; 0x11
     de4:	80 8b       	std	Z+16, r24	; 0x10
     de6:	81 ec       	ldi	r24, 0xC1	; 193
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	93 8b       	std	Z+19, r25	; 0x13
     dec:	82 8b       	std	Z+18, r24	; 0x12
     dee:	82 ec       	ldi	r24, 0xC2	; 194
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	95 8b       	std	Z+21, r25	; 0x15
     df4:	84 8b       	std	Z+20, r24	; 0x14
     df6:	86 ec       	ldi	r24, 0xC6	; 198
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	97 8b       	std	Z+23, r25	; 0x17
     dfc:	86 8b       	std	Z+22, r24	; 0x16
     dfe:	11 8e       	std	Z+25, r1	; 0x19
     e00:	12 8e       	std	Z+26, r1	; 0x1a
     e02:	13 8e       	std	Z+27, r1	; 0x1b
     e04:	14 8e       	std	Z+28, r1	; 0x1c
     e06:	08 95       	ret

00000e08 <initVariant>:
     e08:	08 95       	ret

00000e0a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     e0a:	ef d2       	rcall	.+1502   	; 0x13ea <init>

	initVariant();
     e0c:	fd df       	rcall	.-6      	; 0xe08 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     e0e:	70 dd       	rcall	.-1312   	; 0x8f0 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     e10:	c0 e2       	ldi	r28, 0x20	; 32
     e12:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     e14:	90 dd       	rcall	.-1248   	; 0x936 <loop>
		if (serialEventRun) serialEventRun();
     e16:	20 97       	sbiw	r28, 0x00	; 0
     e18:	e9 f3       	breq	.-6      	; 0xe14 <main+0xa>
     e1a:	12 de       	rcall	.-988    	; 0xa40 <_Z14serialEventRunv>
     e1c:	fb cf       	rjmp	.-10     	; 0xe14 <main+0xa>

00000e1e <_Znwj>:
     e1e:	0c 94 e6 5e 	jmp	0xbdcc	; 0xbdcc <malloc>

00000e22 <_Znaj>:
void *operator new(size_t size) {
  return malloc(size);
}

void *operator new[](size_t size) {
  return malloc(size);
     e22:	0c 94 e6 5e 	jmp	0xbdcc	; 0xbdcc <malloc>

00000e26 <_ZdaPv>:
void operator delete(void * ptr) {
  free(ptr);
}

void operator delete[](void * ptr) {
  free(ptr);
     e26:	0c 94 7e 5f 	jmp	0xbefc	; 0xbefc <free>

00000e2a <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     e2a:	cf 92       	push	r12
     e2c:	df 92       	push	r13
     e2e:	ef 92       	push	r14
     e30:	ff 92       	push	r15
     e32:	0f 93       	push	r16
     e34:	1f 93       	push	r17
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	6c 01       	movw	r12, r24
     e3c:	7a 01       	movw	r14, r20
     e3e:	8b 01       	movw	r16, r22
     e40:	c0 e0       	ldi	r28, 0x00	; 0
     e42:	d0 e0       	ldi	r29, 0x00	; 0
     e44:	ce 15       	cp	r28, r14
     e46:	df 05       	cpc	r29, r15
     e48:	81 f0       	breq	.+32     	; 0xe6a <_ZN5Print5writeEPKhj+0x40>
     e4a:	d8 01       	movw	r26, r16
     e4c:	6d 91       	ld	r22, X+
     e4e:	8d 01       	movw	r16, r26
     e50:	d6 01       	movw	r26, r12
     e52:	ed 91       	ld	r30, X+
     e54:	fc 91       	ld	r31, X
     e56:	01 90       	ld	r0, Z+
     e58:	f0 81       	ld	r31, Z
     e5a:	e0 2d       	mov	r30, r0
     e5c:	c6 01       	movw	r24, r12
     e5e:	19 95       	eicall
     e60:	89 2b       	or	r24, r25
     e62:	11 f0       	breq	.+4      	; 0xe68 <_ZN5Print5writeEPKhj+0x3e>
     e64:	21 96       	adiw	r28, 0x01	; 1
     e66:	ee cf       	rjmp	.-36     	; 0xe44 <_ZN5Print5writeEPKhj+0x1a>
     e68:	7e 01       	movw	r14, r28
     e6a:	c7 01       	movw	r24, r14
     e6c:	df 91       	pop	r29
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	0f 91       	pop	r16
     e74:	ff 90       	pop	r15
     e76:	ef 90       	pop	r14
     e78:	df 90       	pop	r13
     e7a:	cf 90       	pop	r12
     e7c:	08 95       	ret

00000e7e <_ZN5Print5writeEPKc>:
     e7e:	61 15       	cp	r22, r1
     e80:	71 05       	cpc	r23, r1
     e82:	79 f0       	breq	.+30     	; 0xea2 <_ZN5Print5writeEPKc+0x24>
     e84:	fb 01       	movw	r30, r22
     e86:	01 90       	ld	r0, Z+
     e88:	00 20       	and	r0, r0
     e8a:	e9 f7       	brne	.-6      	; 0xe86 <_ZN5Print5writeEPKc+0x8>
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	af 01       	movw	r20, r30
     e90:	46 1b       	sub	r20, r22
     e92:	57 0b       	sbc	r21, r23
     e94:	dc 01       	movw	r26, r24
     e96:	ed 91       	ld	r30, X+
     e98:	fc 91       	ld	r31, X
     e9a:	02 80       	ldd	r0, Z+2	; 0x02
     e9c:	f3 81       	ldd	r31, Z+3	; 0x03
     e9e:	e0 2d       	mov	r30, r0
     ea0:	19 94       	eijmp
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	08 95       	ret

00000ea8 <_ZN5Print5printEPKc>:
     ea8:	ea cf       	rjmp	.-44     	; 0xe7e <_ZN5Print5writeEPKc>

00000eaa <_ZN5Print5printEc>:
     eaa:	dc 01       	movw	r26, r24
     eac:	ed 91       	ld	r30, X+
     eae:	fc 91       	ld	r31, X
     eb0:	01 90       	ld	r0, Z+
     eb2:	f0 81       	ld	r31, Z
     eb4:	e0 2d       	mov	r30, r0
     eb6:	19 94       	eijmp

00000eb8 <_ZN5Print7printlnEv>:
     eb8:	6c e5       	ldi	r22, 0x5C	; 92
     eba:	74 e0       	ldi	r23, 0x04	; 4
     ebc:	e0 cf       	rjmp	.-64     	; 0xe7e <_ZN5Print5writeEPKc>

00000ebe <_ZN5Print7printlnEPKc>:
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	ec 01       	movw	r28, r24
     ec8:	da df       	rcall	.-76     	; 0xe7e <_ZN5Print5writeEPKc>
     eca:	8c 01       	movw	r16, r24
     ecc:	ce 01       	movw	r24, r28
     ece:	f4 df       	rcall	.-24     	; 0xeb8 <_ZN5Print7printlnEv>
     ed0:	80 0f       	add	r24, r16
     ed2:	91 1f       	adc	r25, r17
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <_ZN5Print11printNumberEmh>:
     ede:	8f 92       	push	r8
     ee0:	9f 92       	push	r9
     ee2:	af 92       	push	r10
     ee4:	bf 92       	push	r11
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	a1 97       	sbiw	r28, 0x21	; 33
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	f8 94       	cli
     efc:	de bf       	out	0x3e, r29	; 62
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	cd bf       	out	0x3d, r28	; 61
     f02:	7c 01       	movw	r14, r24
     f04:	fa 01       	movw	r30, r20
     f06:	cb 01       	movw	r24, r22
     f08:	19 a2       	std	Y+33, r1	; 0x21
     f0a:	22 30       	cpi	r18, 0x02	; 2
     f0c:	08 f4       	brcc	.+2      	; 0xf10 <_ZN5Print11printNumberEmh+0x32>
     f0e:	2a e0       	ldi	r18, 0x0A	; 10
     f10:	8e 01       	movw	r16, r28
     f12:	0f 5d       	subi	r16, 0xDF	; 223
     f14:	1f 4f       	sbci	r17, 0xFF	; 255
     f16:	82 2e       	mov	r8, r18
     f18:	91 2c       	mov	r9, r1
     f1a:	a1 2c       	mov	r10, r1
     f1c:	b1 2c       	mov	r11, r1
     f1e:	bf 01       	movw	r22, r30
     f20:	a5 01       	movw	r20, r10
     f22:	94 01       	movw	r18, r8
     f24:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <__udivmodsi4>
     f28:	f9 01       	movw	r30, r18
     f2a:	ca 01       	movw	r24, r20
     f2c:	01 50       	subi	r16, 0x01	; 1
     f2e:	11 09       	sbc	r17, r1
     f30:	6a 30       	cpi	r22, 0x0A	; 10
     f32:	10 f4       	brcc	.+4      	; 0xf38 <_ZN5Print11printNumberEmh+0x5a>
     f34:	60 5d       	subi	r22, 0xD0	; 208
     f36:	01 c0       	rjmp	.+2      	; 0xf3a <_ZN5Print11printNumberEmh+0x5c>
     f38:	69 5c       	subi	r22, 0xC9	; 201
     f3a:	d8 01       	movw	r26, r16
     f3c:	6c 93       	st	X, r22
     f3e:	23 2b       	or	r18, r19
     f40:	24 2b       	or	r18, r20
     f42:	25 2b       	or	r18, r21
     f44:	61 f7       	brne	.-40     	; 0xf1e <_ZN5Print11printNumberEmh+0x40>
     f46:	b8 01       	movw	r22, r16
     f48:	c7 01       	movw	r24, r14
     f4a:	99 df       	rcall	.-206    	; 0xe7e <_ZN5Print5writeEPKc>
     f4c:	a1 96       	adiw	r28, 0x21	; 33
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	f8 94       	cli
     f52:	de bf       	out	0x3e, r29	; 62
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	cd bf       	out	0x3d, r28	; 61
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	ff 90       	pop	r15
     f62:	ef 90       	pop	r14
     f64:	bf 90       	pop	r11
     f66:	af 90       	pop	r10
     f68:	9f 90       	pop	r9
     f6a:	8f 90       	pop	r8
     f6c:	08 95       	ret

00000f6e <_ZN5Print5printEmi>:
     f6e:	21 15       	cp	r18, r1
     f70:	31 05       	cpc	r19, r1
     f72:	41 f4       	brne	.+16     	; 0xf84 <_ZN5Print5printEmi+0x16>
     f74:	dc 01       	movw	r26, r24
     f76:	ed 91       	ld	r30, X+
     f78:	fc 91       	ld	r31, X
     f7a:	01 90       	ld	r0, Z+
     f7c:	f0 81       	ld	r31, Z
     f7e:	e0 2d       	mov	r30, r0
     f80:	64 2f       	mov	r22, r20
     f82:	19 94       	eijmp
     f84:	ac cf       	rjmp	.-168    	; 0xede <_ZN5Print11printNumberEmh>

00000f86 <_ZN5Print5printEhi>:
     f86:	9a 01       	movw	r18, r20
     f88:	46 2f       	mov	r20, r22
     f8a:	50 e0       	ldi	r21, 0x00	; 0
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	ee cf       	rjmp	.-36     	; 0xf6e <_ZN5Print5printEmi>

00000f92 <_ZN5Print7printlnEhi>:
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	ec 01       	movw	r28, r24
     f9c:	f4 df       	rcall	.-24     	; 0xf86 <_ZN5Print5printEhi>
     f9e:	8c 01       	movw	r16, r24
     fa0:	ce 01       	movw	r24, r28
     fa2:	8a df       	rcall	.-236    	; 0xeb8 <_ZN5Print7printlnEv>
     fa4:	80 0f       	add	r24, r16
     fa6:	91 1f       	adc	r25, r17
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	1f 91       	pop	r17
     fae:	0f 91       	pop	r16
     fb0:	08 95       	ret

00000fb2 <_ZN5Print5printEji>:
     fb2:	9a 01       	movw	r18, r20
     fb4:	ab 01       	movw	r20, r22
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	d9 cf       	rjmp	.-78     	; 0xf6e <_ZN5Print5printEmi>

00000fbc <_ZN5Print7printlnEji>:
     fbc:	0f 93       	push	r16
     fbe:	1f 93       	push	r17
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	ec 01       	movw	r28, r24
     fc6:	f5 df       	rcall	.-22     	; 0xfb2 <_ZN5Print5printEji>
     fc8:	8c 01       	movw	r16, r24
     fca:	ce 01       	movw	r24, r28
     fcc:	75 df       	rcall	.-278    	; 0xeb8 <_ZN5Print7printlnEv>
     fce:	80 0f       	add	r24, r16
     fd0:	91 1f       	adc	r25, r17
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
  if (base == 0) {
     fec:	21 15       	cp	r18, r1
     fee:	31 05       	cpc	r19, r1
     ff0:	81 f4       	brne	.+32     	; 0x1012 <_ZN5Print5printEli+0x36>
    return write(n);
     ff2:	dc 01       	movw	r26, r24
     ff4:	ed 91       	ld	r30, X+
     ff6:	fc 91       	ld	r31, X
     ff8:	01 90       	ld	r0, Z+
     ffa:	f0 81       	ld	r31, Z
     ffc:	e0 2d       	mov	r30, r0
     ffe:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	df 90       	pop	r13
    100e:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
    1010:	19 94       	eijmp
  } else if (base == 10) {
    1012:	2a 30       	cpi	r18, 0x0A	; 10
    1014:	31 05       	cpc	r19, r1
    1016:	f1 f4       	brne	.+60     	; 0x1054 <_ZN5Print5printEli+0x78>
    if (n < 0) {
    1018:	77 ff       	sbrs	r23, 7
    101a:	1b c0       	rjmp	.+54     	; 0x1052 <_ZN5Print5printEli+0x76>
    101c:	6a 01       	movw	r12, r20
    101e:	7b 01       	movw	r14, r22
    1020:	ec 01       	movw	r28, r24
      int t = print('-');
    1022:	6d e2       	ldi	r22, 0x2D	; 45
    1024:	42 df       	rcall	.-380    	; 0xeaa <_ZN5Print5printEc>
    1026:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
    1028:	44 27       	eor	r20, r20
    102a:	55 27       	eor	r21, r21
    102c:	ba 01       	movw	r22, r20
    102e:	4c 19       	sub	r20, r12
    1030:	5d 09       	sbc	r21, r13
    1032:	6e 09       	sbc	r22, r14
    1034:	7f 09       	sbc	r23, r15
    1036:	2a e0       	ldi	r18, 0x0A	; 10
    1038:	ce 01       	movw	r24, r28
    103a:	51 df       	rcall	.-350    	; 0xede <_ZN5Print11printNumberEmh>
    103c:	80 0f       	add	r24, r16
    103e:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
    1052:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
    1062:	cf 90       	pop	r12
    1064:	3c cf       	rjmp	.-392    	; 0xede <_ZN5Print11printNumberEmh>

00001066 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1066:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1068:	ab 01       	movw	r20, r22
    106a:	77 0f       	add	r23, r23
    106c:	66 0b       	sbc	r22, r22
    106e:	77 0b       	sbc	r23, r23
    1070:	b5 cf       	rjmp	.-150    	; 0xfdc <_ZN5Print5printEli>

00001072 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    107c:	f4 df       	rcall	.-24     	; 0x1066 <_ZN5Print5printEii>
    107e:	8c 01       	movw	r16, r24
  n += println();
    1080:	ce 01       	movw	r24, r28
    1082:	1a df       	rcall	.-460    	; 0xeb8 <_ZN5Print7printlnEv>
  return n;
}
    1084:	80 0f       	add	r24, r16
    1086:	91 1f       	adc	r25, r17
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	1f 91       	pop	r17
    108e:	0f 91       	pop	r16
    1090:	08 95       	ret

00001092 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    109c:	9f df       	rcall	.-194    	; 0xfdc <_ZN5Print5printEli>
    109e:	8c 01       	movw	r16, r24
  n += println();
    10a0:	ce 01       	movw	r24, r28
    10a2:	0a df       	rcall	.-492    	; 0xeb8 <_ZN5Print7printlnEv>
  return n;
}
    10a4:	80 0f       	add	r24, r16
    10a6:	91 1f       	adc	r25, r17
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	1f 91       	pop	r17
    10ae:	0f 91       	pop	r16
    10b0:	08 95       	ret

000010b2 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    10b2:	7f 92       	push	r7
    10b4:	8f 92       	push	r8
    10b6:	9f 92       	push	r9
    10b8:	af 92       	push	r10
    10ba:	bf 92       	push	r11
    10bc:	cf 92       	push	r12
    10be:	df 92       	push	r13
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	8c 01       	movw	r16, r24
    10ce:	6a 01       	movw	r12, r20
    10d0:	7b 01       	movw	r14, r22
    10d2:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    10d4:	9a 01       	movw	r18, r20
    10d6:	ab 01       	movw	r20, r22
    10d8:	c7 01       	movw	r24, r14
    10da:	b6 01       	movw	r22, r12
    10dc:	0e 94 fc 5d 	call	0xbbf8	; 0xbbf8 <__unordsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	19 f0       	breq	.+6      	; 0x10ea <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    10e4:	6f e5       	ldi	r22, 0x5F	; 95
    10e6:	74 e0       	ldi	r23, 0x04	; 4
    10e8:	27 c0       	rjmp	.+78     	; 0x1138 <_ZN5Print10printFloatEdh+0x86>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    10ea:	46 01       	movw	r8, r12
    10ec:	57 01       	movw	r10, r14
    10ee:	e8 94       	clt
    10f0:	b7 f8       	bld	r11, 7
    10f2:	2f ef       	ldi	r18, 0xFF	; 255
    10f4:	3f ef       	ldi	r19, 0xFF	; 255
    10f6:	4f e7       	ldi	r20, 0x7F	; 127
    10f8:	5f e7       	ldi	r21, 0x7F	; 127
    10fa:	c5 01       	movw	r24, r10
    10fc:	b4 01       	movw	r22, r8
    10fe:	0e 94 fc 5d 	call	0xbbf8	; 0xbbf8 <__unordsf2>
    1102:	81 11       	cpse	r24, r1
    1104:	0d c0       	rjmp	.+26     	; 0x1120 <_ZN5Print10printFloatEdh+0x6e>
    1106:	2f ef       	ldi	r18, 0xFF	; 255
    1108:	3f ef       	ldi	r19, 0xFF	; 255
    110a:	4f e7       	ldi	r20, 0x7F	; 127
    110c:	5f e7       	ldi	r21, 0x7F	; 127
    110e:	c5 01       	movw	r24, r10
    1110:	b4 01       	movw	r22, r8
    1112:	0e 94 93 5b 	call	0xb726	; 0xb726 <__cmpsf2>
    1116:	18 16       	cp	r1, r24
    1118:	1c f4       	brge	.+6      	; 0x1120 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    111a:	63 e6       	ldi	r22, 0x63	; 99
    111c:	74 e0       	ldi	r23, 0x04	; 4
    111e:	0c c0       	rjmp	.+24     	; 0x1138 <_ZN5Print10printFloatEdh+0x86>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    1120:	2f ef       	ldi	r18, 0xFF	; 255
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	5f e4       	ldi	r21, 0x4F	; 79
    1128:	c7 01       	movw	r24, r14
    112a:	b6 01       	movw	r22, r12
    112c:	0e 94 43 5d 	call	0xba86	; 0xba86 <__gesf2>
    1130:	18 16       	cp	r1, r24
    1132:	8c f4       	brge	.+34     	; 0x1156 <_ZN5Print10printFloatEdh+0xa4>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1134:	67 e6       	ldi	r22, 0x67	; 103
    1136:	74 e0       	ldi	r23, 0x04	; 4
    1138:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    113a:	df 91       	pop	r29
    113c:	cf 91       	pop	r28
    113e:	1f 91       	pop	r17
    1140:	0f 91       	pop	r16
    1142:	ff 90       	pop	r15
    1144:	ef 90       	pop	r14
    1146:	df 90       	pop	r13
    1148:	cf 90       	pop	r12
    114a:	bf 90       	pop	r11
    114c:	af 90       	pop	r10
    114e:	9f 90       	pop	r9
    1150:	8f 90       	pop	r8
    1152:	7f 90       	pop	r7
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1154:	94 ce       	rjmp	.-728    	; 0xe7e <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    1156:	2f ef       	ldi	r18, 0xFF	; 255
    1158:	3f ef       	ldi	r19, 0xFF	; 255
    115a:	4f e7       	ldi	r20, 0x7F	; 127
    115c:	5f ec       	ldi	r21, 0xCF	; 207
    115e:	c7 01       	movw	r24, r14
    1160:	b6 01       	movw	r22, r12
    1162:	0e 94 93 5b 	call	0xb726	; 0xb726 <__cmpsf2>
    1166:	87 fd       	sbrc	r24, 7
    1168:	e5 cf       	rjmp	.-54     	; 0x1134 <_ZN5Print10printFloatEdh+0x82>
  
  // Handle negative numbers
  if (number < 0.0)
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	a9 01       	movw	r20, r18
    1170:	c7 01       	movw	r24, r14
    1172:	b6 01       	movw	r22, r12
    1174:	0e 94 93 5b 	call	0xb726	; 0xb726 <__cmpsf2>
    1178:	87 ff       	sbrs	r24, 7
    117a:	09 c0       	rjmp	.+18     	; 0x118e <_ZN5Print10printFloatEdh+0xdc>
  {
     n += print('-');
    117c:	6d e2       	ldi	r22, 0x2D	; 45
    117e:	c8 01       	movw	r24, r16
    1180:	94 de       	rcall	.-728    	; 0xeaa <_ZN5Print5printEc>
    1182:	ec 01       	movw	r28, r24
     number = -number;
    1184:	f7 fa       	bst	r15, 7
    1186:	f0 94       	com	r15
    1188:	f7 f8       	bld	r15, 7
    118a:	f0 94       	com	r15
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <_ZN5Print10printFloatEdh+0xe0>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    118e:	c0 e0       	ldi	r28, 0x00	; 0
    1190:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1192:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    119c:	7b 14       	cp	r7, r11
    119e:	41 f0       	breq	.+16     	; 0x11b0 <_ZN5Print10printFloatEdh+0xfe>
    rounding /= 10.0;
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e2       	ldi	r20, 0x20	; 32
    11a6:	51 e4       	ldi	r21, 0x41	; 65
    11a8:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    11ac:	b3 94       	inc	r11
    11ae:	f6 cf       	rjmp	.-20     	; 0x119c <_ZN5Print10printFloatEdh+0xea>
    rounding /= 10.0;
  
  number += rounding;
    11b0:	a7 01       	movw	r20, r14
    11b2:	96 01       	movw	r18, r12
    11b4:	0e 94 cd 5a 	call	0xb59a	; 0xb59a <__addsf3>
    11b8:	6b 01       	movw	r12, r22
    11ba:	7c 01       	movw	r14, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    11bc:	0e 94 07 5c 	call	0xb80e	; 0xb80e <__fixunssfsi>
    11c0:	4b 01       	movw	r8, r22
    11c2:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    11c4:	2a e0       	ldi	r18, 0x0A	; 10
    11c6:	ab 01       	movw	r20, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	c8 01       	movw	r24, r16
    11cc:	88 de       	rcall	.-752    	; 0xede <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    11ce:	c8 0f       	add	r28, r24
    11d0:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    11d2:	77 20       	and	r7, r7
    11d4:	a9 f1       	breq	.+106    	; 0x1240 <_ZN5Print10printFloatEdh+0x18e>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    11d6:	c5 01       	movw	r24, r10
    11d8:	b4 01       	movw	r22, r8
    11da:	0e 94 33 5c 	call	0xb866	; 0xb866 <__floatunsisf>
    11de:	9b 01       	movw	r18, r22
    11e0:	ac 01       	movw	r20, r24
    11e2:	c7 01       	movw	r24, r14
    11e4:	b6 01       	movw	r22, r12
    11e6:	0e 94 cc 5a 	call	0xb598	; 0xb598 <__subsf3>
    11ea:	6b 01       	movw	r12, r22
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    11ec:	7c 01       	movw	r14, r24
    11ee:	6e e2       	ldi	r22, 0x2E	; 46
    11f0:	c8 01       	movw	r24, r16
    11f2:	5b de       	rcall	.-842    	; 0xeaa <_ZN5Print5printEc>
    11f4:	c8 0f       	add	r28, r24
    11f6:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e2       	ldi	r20, 0x20	; 32
    11fe:	51 e4       	ldi	r21, 0x41	; 65
    1200:	c7 01       	movw	r24, r14
    1202:	b6 01       	movw	r22, r12
    1204:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    1208:	4b 01       	movw	r8, r22
    120a:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    120c:	0e 94 07 5c 	call	0xb80e	; 0xb80e <__fixunssfsi>
    1210:	6b 01       	movw	r12, r22
    n += print(toPrint);
    1212:	7c 01       	movw	r14, r24
    1214:	4a e0       	ldi	r20, 0x0A	; 10
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	c8 01       	movw	r24, r16
    121a:	cb de       	rcall	.-618    	; 0xfb2 <_ZN5Print5printEji>
    121c:	c8 0f       	add	r28, r24
    121e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1220:	b6 01       	movw	r22, r12
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	0e 94 33 5c 	call	0xb866	; 0xb866 <__floatunsisf>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	c5 01       	movw	r24, r10
    1230:	b4 01       	movw	r22, r8
    1232:	0e 94 cc 5a 	call	0xb598	; 0xb598 <__subsf3>
    1236:	6b 01       	movw	r12, r22
    1238:	7c 01       	movw	r14, r24
    123a:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    123c:	71 10       	cpse	r7, r1
    123e:	dc cf       	rjmp	.-72     	; 0x11f8 <_ZN5Print10printFloatEdh+0x146>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1240:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	7f 90       	pop	r7
    125c:	08 95       	ret

0000125e <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    125e:	29 cf       	rjmp	.-430    	; 0x10b2 <_ZN5Print10printFloatEdh>

00001260 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1260:	0f 93       	push	r16
    1262:	1f 93       	push	r17
    1264:	cf 93       	push	r28
    1266:	df 93       	push	r29
    1268:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    126a:	23 df       	rcall	.-442    	; 0x10b2 <_ZN5Print10printFloatEdh>
    126c:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    126e:	ce 01       	movw	r24, r28
    1270:	23 de       	rcall	.-954    	; 0xeb8 <_ZN5Print7printlnEv>
  return n;
}
    1272:	80 0f       	add	r24, r16
    1274:	91 1f       	adc	r25, r17
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	08 95       	ret

00001280 <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	0f 92       	push	r0
    1288:	11 24       	eor	r1, r1
    128a:	2f 93       	push	r18
    128c:	3f 93       	push	r19
    128e:	8f 93       	push	r24
    1290:	9f 93       	push	r25
    1292:	af 93       	push	r26
    1294:	bf 93       	push	r27
    1296:	80 91 5e 11 	lds	r24, 0x115E	; 0x80115e <timer0_millis>
    129a:	90 91 5f 11 	lds	r25, 0x115F	; 0x80115f <timer0_millis+0x1>
    129e:	a0 91 60 11 	lds	r26, 0x1160	; 0x801160 <timer0_millis+0x2>
    12a2:	b0 91 61 11 	lds	r27, 0x1161	; 0x801161 <timer0_millis+0x3>
    12a6:	30 91 5d 11 	lds	r19, 0x115D	; 0x80115d <timer0_fract>
    12aa:	23 e0       	ldi	r18, 0x03	; 3
    12ac:	23 0f       	add	r18, r19
    12ae:	2d 37       	cpi	r18, 0x7D	; 125
    12b0:	20 f4       	brcc	.+8      	; 0x12ba <__vector_23+0x3a>
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	a1 1d       	adc	r26, r1
    12b6:	b1 1d       	adc	r27, r1
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <__vector_23+0x44>
    12ba:	26 e8       	ldi	r18, 0x86	; 134
    12bc:	23 0f       	add	r18, r19
    12be:	02 96       	adiw	r24, 0x02	; 2
    12c0:	a1 1d       	adc	r26, r1
    12c2:	b1 1d       	adc	r27, r1
    12c4:	20 93 5d 11 	sts	0x115D, r18	; 0x80115d <timer0_fract>
    12c8:	80 93 5e 11 	sts	0x115E, r24	; 0x80115e <timer0_millis>
    12cc:	90 93 5f 11 	sts	0x115F, r25	; 0x80115f <timer0_millis+0x1>
    12d0:	a0 93 60 11 	sts	0x1160, r26	; 0x801160 <timer0_millis+0x2>
    12d4:	b0 93 61 11 	sts	0x1161, r27	; 0x801161 <timer0_millis+0x3>
    12d8:	80 91 62 11 	lds	r24, 0x1162	; 0x801162 <timer0_overflow_count>
    12dc:	90 91 63 11 	lds	r25, 0x1163	; 0x801163 <timer0_overflow_count+0x1>
    12e0:	a0 91 64 11 	lds	r26, 0x1164	; 0x801164 <timer0_overflow_count+0x2>
    12e4:	b0 91 65 11 	lds	r27, 0x1165	; 0x801165 <timer0_overflow_count+0x3>
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	a1 1d       	adc	r26, r1
    12ec:	b1 1d       	adc	r27, r1
    12ee:	80 93 62 11 	sts	0x1162, r24	; 0x801162 <timer0_overflow_count>
    12f2:	90 93 63 11 	sts	0x1163, r25	; 0x801163 <timer0_overflow_count+0x1>
    12f6:	a0 93 64 11 	sts	0x1164, r26	; 0x801164 <timer0_overflow_count+0x2>
    12fa:	b0 93 65 11 	sts	0x1165, r27	; 0x801165 <timer0_overflow_count+0x3>
    12fe:	bf 91       	pop	r27
    1300:	af 91       	pop	r26
    1302:	9f 91       	pop	r25
    1304:	8f 91       	pop	r24
    1306:	3f 91       	pop	r19
    1308:	2f 91       	pop	r18
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <millis>:
    1314:	2f b7       	in	r18, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	60 91 5e 11 	lds	r22, 0x115E	; 0x80115e <timer0_millis>
    131c:	70 91 5f 11 	lds	r23, 0x115F	; 0x80115f <timer0_millis+0x1>
    1320:	80 91 60 11 	lds	r24, 0x1160	; 0x801160 <timer0_millis+0x2>
    1324:	90 91 61 11 	lds	r25, 0x1161	; 0x801161 <timer0_millis+0x3>
    1328:	2f bf       	out	0x3f, r18	; 63
    132a:	08 95       	ret

0000132c <micros>:
    132c:	3f b7       	in	r19, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	80 91 62 11 	lds	r24, 0x1162	; 0x801162 <timer0_overflow_count>
    1334:	90 91 63 11 	lds	r25, 0x1163	; 0x801163 <timer0_overflow_count+0x1>
    1338:	a0 91 64 11 	lds	r26, 0x1164	; 0x801164 <timer0_overflow_count+0x2>
    133c:	b0 91 65 11 	lds	r27, 0x1165	; 0x801165 <timer0_overflow_count+0x3>
    1340:	26 b5       	in	r18, 0x26	; 38
    1342:	a8 9b       	sbis	0x15, 0	; 21
    1344:	05 c0       	rjmp	.+10     	; 0x1350 <micros+0x24>
    1346:	2f 3f       	cpi	r18, 0xFF	; 255
    1348:	19 f0       	breq	.+6      	; 0x1350 <micros+0x24>
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	a1 1d       	adc	r26, r1
    134e:	b1 1d       	adc	r27, r1
    1350:	3f bf       	out	0x3f, r19	; 63
    1352:	ba 2f       	mov	r27, r26
    1354:	a9 2f       	mov	r26, r25
    1356:	98 2f       	mov	r25, r24
    1358:	88 27       	eor	r24, r24
    135a:	82 0f       	add	r24, r18
    135c:	91 1d       	adc	r25, r1
    135e:	a1 1d       	adc	r26, r1
    1360:	b1 1d       	adc	r27, r1
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	42 e0       	ldi	r20, 0x02	; 2
    1368:	66 0f       	add	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	88 1f       	adc	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	4a 95       	dec	r20
    1372:	d1 f7       	brne	.-12     	; 0x1368 <micros+0x3c>
    1374:	08 95       	ret

00001376 <delay>:
    1376:	8f 92       	push	r8
    1378:	9f 92       	push	r9
    137a:	af 92       	push	r10
    137c:	bf 92       	push	r11
    137e:	cf 92       	push	r12
    1380:	df 92       	push	r13
    1382:	ef 92       	push	r14
    1384:	ff 92       	push	r15
    1386:	6b 01       	movw	r12, r22
    1388:	7c 01       	movw	r14, r24
    138a:	d0 df       	rcall	.-96     	; 0x132c <micros>
    138c:	4b 01       	movw	r8, r22
    138e:	5c 01       	movw	r10, r24
    1390:	c1 14       	cp	r12, r1
    1392:	d1 04       	cpc	r13, r1
    1394:	e1 04       	cpc	r14, r1
    1396:	f1 04       	cpc	r15, r1
    1398:	f9 f0       	breq	.+62     	; 0x13d8 <delay+0x62>
    139a:	0e 94 88 4a 	call	0x9510	; 0x9510 <yield>
    139e:	c6 df       	rcall	.-116    	; 0x132c <micros>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	88 19       	sub	r24, r8
    13a6:	99 09       	sbc	r25, r9
    13a8:	aa 09       	sbc	r26, r10
    13aa:	bb 09       	sbc	r27, r11
    13ac:	88 3e       	cpi	r24, 0xE8	; 232
    13ae:	93 40       	sbci	r25, 0x03	; 3
    13b0:	a1 05       	cpc	r26, r1
    13b2:	b1 05       	cpc	r27, r1
    13b4:	68 f3       	brcs	.-38     	; 0x1390 <delay+0x1a>
    13b6:	21 e0       	ldi	r18, 0x01	; 1
    13b8:	c2 1a       	sub	r12, r18
    13ba:	d1 08       	sbc	r13, r1
    13bc:	e1 08       	sbc	r14, r1
    13be:	f1 08       	sbc	r15, r1
    13c0:	88 ee       	ldi	r24, 0xE8	; 232
    13c2:	88 0e       	add	r8, r24
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	98 1e       	adc	r9, r24
    13c8:	a1 1c       	adc	r10, r1
    13ca:	b1 1c       	adc	r11, r1
    13cc:	c1 14       	cp	r12, r1
    13ce:	d1 04       	cpc	r13, r1
    13d0:	e1 04       	cpc	r14, r1
    13d2:	f1 04       	cpc	r15, r1
    13d4:	21 f7       	brne	.-56     	; 0x139e <delay+0x28>
    13d6:	dc cf       	rjmp	.-72     	; 0x1390 <delay+0x1a>
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	9f 90       	pop	r9
    13e6:	8f 90       	pop	r8
    13e8:	08 95       	ret

000013ea <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    13ea:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    13ec:	84 b5       	in	r24, 0x24	; 36
    13ee:	82 60       	ori	r24, 0x02	; 2
    13f0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    13f2:	84 b5       	in	r24, 0x24	; 36
    13f4:	81 60       	ori	r24, 0x01	; 1
    13f6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    13f8:	85 b5       	in	r24, 0x25	; 37
    13fa:	82 60       	ori	r24, 0x02	; 2
    13fc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    13fe:	85 b5       	in	r24, 0x25	; 37
    1400:	81 60       	ori	r24, 0x01	; 1
    1402:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1404:	ee e6       	ldi	r30, 0x6E	; 110
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	81 60       	ori	r24, 0x01	; 1
    140c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    140e:	e1 e8       	ldi	r30, 0x81	; 129
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1414:	80 81       	ld	r24, Z
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    141a:	80 81       	ld	r24, Z
    141c:	81 60       	ori	r24, 0x01	; 1
    141e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1420:	e0 e8       	ldi	r30, 0x80	; 128
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	81 60       	ori	r24, 0x01	; 1
    1428:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    142a:	e1 eb       	ldi	r30, 0xB1	; 177
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	84 60       	ori	r24, 0x04	; 4
    1432:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1434:	e0 eb       	ldi	r30, 0xB0	; 176
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	81 60       	ori	r24, 0x01	; 1
    143c:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    143e:	e1 e9       	ldi	r30, 0x91	; 145
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	82 60       	ori	r24, 0x02	; 2
    1446:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1448:	80 81       	ld	r24, Z
    144a:	81 60       	ori	r24, 0x01	; 1
    144c:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    144e:	e0 e9       	ldi	r30, 0x90	; 144
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	81 60       	ori	r24, 0x01	; 1
    1456:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1458:	e1 ea       	ldi	r30, 0xA1	; 161
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	82 60       	ori	r24, 0x02	; 2
    1460:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1462:	80 81       	ld	r24, Z
    1464:	81 60       	ori	r24, 0x01	; 1
    1466:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1468:	e0 ea       	ldi	r30, 0xA0	; 160
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1472:	e1 e2       	ldi	r30, 0x21	; 33
    1474:	f1 e0       	ldi	r31, 0x01	; 1
    1476:	80 81       	ld	r24, Z
    1478:	82 60       	ori	r24, 0x02	; 2
    147a:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    147c:	80 81       	ld	r24, Z
    147e:	81 60       	ori	r24, 0x01	; 1
    1480:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1482:	e0 e2       	ldi	r30, 0x20	; 32
    1484:	f1 e0       	ldi	r31, 0x01	; 1
    1486:	80 81       	ld	r24, Z
    1488:	81 60       	ori	r24, 0x01	; 1
    148a:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    148c:	ea e7       	ldi	r30, 0x7A	; 122
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	84 60       	ori	r24, 0x04	; 4
    1494:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1496:	80 81       	ld	r24, Z
    1498:	82 60       	ori	r24, 0x02	; 2
    149a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    149c:	80 81       	ld	r24, Z
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    14a2:	80 81       	ld	r24, Z
    14a4:	80 68       	ori	r24, 0x80	; 128
    14a6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    14a8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    14ac:	08 95       	ret

000014ae <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    }
  }
  // the range of contrast to too small to be really useful
  // it is useful to dim the display
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	dc 01       	movw	r26, r24
    14b8:	fb 01       	movw	r30, r22
    14ba:	55 96       	adiw	r26, 0x15	; 21
    14bc:	8c 91       	ld	r24, X
    14be:	55 97       	sbiw	r26, 0x15	; 21
    14c0:	82 30       	cpi	r24, 0x02	; 2
    14c2:	89 f0       	breq	.+34     	; 0x14e6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x38>
    14c4:	83 30       	cpi	r24, 0x03	; 3
    14c6:	21 f1       	breq	.+72     	; 0x1510 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x62>
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	09 f0       	breq	.+2      	; 0x14ce <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x20>
    14cc:	e7 c0       	rjmp	.+462    	; 0x169c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1ee>
    14ce:	14 96       	adiw	r26, 0x04	; 4
    14d0:	8d 91       	ld	r24, X+
    14d2:	9c 91       	ld	r25, X
    14d4:	15 97       	sbiw	r26, 0x05	; 5
    14d6:	bc 01       	movw	r22, r24
    14d8:	64 1b       	sub	r22, r20
    14da:	75 0b       	sbc	r23, r21
    14dc:	ab 01       	movw	r20, r22
    14de:	41 50       	subi	r20, 0x01	; 1
    14e0:	51 09       	sbc	r21, r1
    14e2:	bf 01       	movw	r22, r30
    14e4:	1d c0       	rjmp	.+58     	; 0x1520 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x72>
    14e6:	14 96       	adiw	r26, 0x04	; 4
    14e8:	6d 91       	ld	r22, X+
    14ea:	7c 91       	ld	r23, X
    14ec:	15 97       	sbiw	r26, 0x05	; 5
    14ee:	cb 01       	movw	r24, r22
    14f0:	8e 1b       	sub	r24, r30
    14f2:	9f 0b       	sbc	r25, r31
    14f4:	fc 01       	movw	r30, r24
    14f6:	16 96       	adiw	r26, 0x06	; 6
    14f8:	8d 91       	ld	r24, X+
    14fa:	9c 91       	ld	r25, X
    14fc:	17 97       	sbiw	r26, 0x07	; 7
    14fe:	bc 01       	movw	r22, r24
    1500:	64 1b       	sub	r22, r20
    1502:	75 0b       	sbc	r23, r21
    1504:	ab 01       	movw	r20, r22
    1506:	41 50       	subi	r20, 0x01	; 1
    1508:	51 09       	sbc	r21, r1
    150a:	e2 1b       	sub	r30, r18
    150c:	f3 0b       	sbc	r31, r19
    150e:	c6 c0       	rjmp	.+396    	; 0x169c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1ee>
    1510:	16 96       	adiw	r26, 0x06	; 6
    1512:	6d 91       	ld	r22, X+
    1514:	7c 91       	ld	r23, X
    1516:	17 97       	sbiw	r26, 0x07	; 7
    1518:	6e 1b       	sub	r22, r30
    151a:	7f 0b       	sbc	r23, r31
    151c:	62 1b       	sub	r22, r18
    151e:	73 0b       	sbc	r23, r19
    1520:	57 fd       	sbrc	r21, 7
    1522:	1b c1       	rjmp	.+566    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1524:	14 96       	adiw	r26, 0x04	; 4
    1526:	8d 91       	ld	r24, X+
    1528:	9c 91       	ld	r25, X
    152a:	15 97       	sbiw	r26, 0x05	; 5
    152c:	48 17       	cp	r20, r24
    152e:	59 07       	cpc	r21, r25
    1530:	0c f0       	brlt	.+2      	; 0x1534 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x86>
    1532:	13 c1       	rjmp	.+550    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1534:	77 ff       	sbrs	r23, 7
    1536:	04 c0       	rjmp	.+8      	; 0x1540 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x92>
    1538:	26 0f       	add	r18, r22
    153a:	37 1f       	adc	r19, r23
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	16 96       	adiw	r26, 0x06	; 6
    1542:	8d 91       	ld	r24, X+
    1544:	9c 91       	ld	r25, X
    1546:	17 97       	sbiw	r26, 0x07	; 7
    1548:	fb 01       	movw	r30, r22
    154a:	e2 0f       	add	r30, r18
    154c:	f3 1f       	adc	r31, r19
    154e:	8e 17       	cp	r24, r30
    1550:	9f 07       	cpc	r25, r31
    1552:	1c f4       	brge	.+6      	; 0x155a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xac>
    1554:	9c 01       	movw	r18, r24
    1556:	26 1b       	sub	r18, r22
    1558:	37 0b       	sbc	r19, r23
    155a:	12 16       	cp	r1, r18
    155c:	13 06       	cpc	r1, r19
    155e:	0c f0       	brlt	.+2      	; 0x1562 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xb4>
    1560:	fc c0       	rjmp	.+504    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1562:	a2 2f       	mov	r26, r18
    1564:	86 2f       	mov	r24, r22
    1566:	86 95       	lsr	r24
    1568:	86 95       	lsr	r24
    156a:	86 95       	lsr	r24
    156c:	90 e8       	ldi	r25, 0x80	; 128
    156e:	89 9f       	mul	r24, r25
    1570:	40 0d       	add	r20, r0
    1572:	51 1d       	adc	r21, r1
    1574:	11 24       	eor	r1, r1
    1576:	fa 01       	movw	r30, r20
    1578:	ea 5e       	subi	r30, 0xEA	; 234
    157a:	fd 4f       	sbci	r31, 0xFD	; 253
    157c:	67 70       	andi	r22, 0x07	; 7
    157e:	a9 f1       	breq	.+106    	; 0x15ea <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x13c>
    1580:	98 e0       	ldi	r25, 0x08	; 8
    1582:	96 1b       	sub	r25, r22
    1584:	49 2f       	mov	r20, r25
    1586:	50 e0       	ldi	r21, 0x00	; 0
    1588:	ea 01       	movw	r28, r20
    158a:	c2 5f       	subi	r28, 0xF2	; 242
    158c:	dd 4f       	sbci	r29, 0xFD	; 253
    158e:	88 81       	ld	r24, Y
    1590:	29 17       	cp	r18, r25
    1592:	90 f4       	brcc	.+36     	; 0x15b8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x10a>
    1594:	42 1b       	sub	r20, r18
    1596:	51 09       	sbc	r21, r1
    1598:	2f ef       	ldi	r18, 0xFF	; 255
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf4>
    159e:	35 95       	asr	r19
    15a0:	27 95       	ror	r18
    15a2:	4a 95       	dec	r20
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0xf0>
    15a6:	82 23       	and	r24, r18
    15a8:	01 30       	cpi	r16, 0x01	; 1
    15aa:	11 05       	cpc	r17, r1
    15ac:	41 f0       	breq	.+16     	; 0x15be <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x110>
    15ae:	68 f0       	brcs	.+26     	; 0x15ca <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x11c>
    15b0:	02 30       	cpi	r16, 0x02	; 2
    15b2:	11 05       	cpc	r17, r1
    15b4:	89 f0       	breq	.+34     	; 0x15d8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x12a>
    15b6:	d1 c0       	rjmp	.+418    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    15b8:	01 30       	cpi	r16, 0x01	; 1
    15ba:	11 05       	cpc	r17, r1
    15bc:	19 f4       	brne	.+6      	; 0x15c4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x116>
    15be:	20 81       	ld	r18, Z
    15c0:	82 2b       	or	r24, r18
    15c2:	0c c0       	rjmp	.+24     	; 0x15dc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x12e>
    15c4:	01 30       	cpi	r16, 0x01	; 1
    15c6:	11 05       	cpc	r17, r1
    15c8:	20 f4       	brcc	.+8      	; 0x15d2 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x124>
    15ca:	80 95       	com	r24
    15cc:	20 81       	ld	r18, Z
    15ce:	82 23       	and	r24, r18
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x12e>
    15d2:	02 30       	cpi	r16, 0x02	; 2
    15d4:	11 05       	cpc	r17, r1
    15d6:	31 f4       	brne	.+12     	; 0x15e4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x136>
    15d8:	20 81       	ld	r18, Z
    15da:	82 27       	eor	r24, r18
    15dc:	80 83       	st	Z, r24
    15de:	a9 17       	cp	r26, r25
    15e0:	08 f4       	brcc	.+2      	; 0x15e4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x136>
    15e2:	bb c0       	rjmp	.+374    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    15e4:	a9 1b       	sub	r26, r25
    15e6:	e0 58       	subi	r30, 0x80	; 128
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	a8 30       	cpi	r26, 0x08	; 8
    15ec:	48 f1       	brcs	.+82     	; 0x1640 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x192>
    15ee:	02 30       	cpi	r16, 0x02	; 2
    15f0:	11 05       	cpc	r17, r1
    15f2:	59 f4       	brne	.+22     	; 0x160a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x15c>
    15f4:	ef 01       	movw	r28, r30
    15f6:	8a 2f       	mov	r24, r26
    15f8:	98 81       	ld	r25, Y
    15fa:	90 95       	com	r25
    15fc:	98 83       	st	Y, r25
    15fe:	c0 58       	subi	r28, 0x80	; 128
    1600:	df 4f       	sbci	r29, 0xFF	; 255
    1602:	88 50       	subi	r24, 0x08	; 8
    1604:	88 30       	cpi	r24, 0x08	; 8
    1606:	c0 f7       	brcc	.-16     	; 0x15f8 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x14a>
    1608:	33 c0       	rjmp	.+102    	; 0x1670 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1c2>
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	01 30       	cpi	r16, 0x01	; 1
    160e:	11 05       	cpc	r17, r1
    1610:	09 f0       	breq	.+2      	; 0x1614 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x166>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	81 95       	neg	r24
    1616:	ef 01       	movw	r28, r30
    1618:	9a 2f       	mov	r25, r26
    161a:	88 83       	st	Y, r24
    161c:	c0 58       	subi	r28, 0x80	; 128
    161e:	df 4f       	sbci	r29, 0xFF	; 255
    1620:	98 50       	subi	r25, 0x08	; 8
    1622:	98 30       	cpi	r25, 0x08	; 8
    1624:	d0 f7       	brcc	.-12     	; 0x161a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x16c>
    1626:	88 ef       	ldi	r24, 0xF8	; 248
    1628:	8a 0f       	add	r24, r26
    162a:	86 95       	lsr	r24
    162c:	86 95       	lsr	r24
    162e:	86 95       	lsr	r24
    1630:	60 e8       	ldi	r22, 0x80	; 128
    1632:	86 9f       	mul	r24, r22
    1634:	e0 0d       	add	r30, r0
    1636:	f1 1d       	adc	r31, r1
    1638:	11 24       	eor	r1, r1
    163a:	e0 58       	subi	r30, 0x80	; 128
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	a7 70       	andi	r26, 0x07	; 7
    1640:	aa 23       	and	r26, r26
    1642:	09 f4       	brne	.+2      	; 0x1646 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x198>
    1644:	8a c0       	rjmp	.+276    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	aa 5f       	subi	r26, 0xFA	; 250
    164a:	bd 4f       	sbci	r27, 0xFD	; 253
    164c:	8c 91       	ld	r24, X
    164e:	01 30       	cpi	r16, 0x01	; 1
    1650:	11 05       	cpc	r17, r1
    1652:	31 f0       	breq	.+12     	; 0x1660 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1b2>
    1654:	40 f0       	brcs	.+16     	; 0x1666 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1b8>
    1656:	02 30       	cpi	r16, 0x02	; 2
    1658:	11 05       	cpc	r17, r1
    165a:	09 f0       	breq	.+2      	; 0x165e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1b0>
    165c:	7e c0       	rjmp	.+252    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    165e:	1b c0       	rjmp	.+54     	; 0x1696 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1e8>
    1660:	90 81       	ld	r25, Z
    1662:	89 2b       	or	r24, r25
    1664:	03 c0       	rjmp	.+6      	; 0x166c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1be>
    1666:	80 95       	com	r24
    1668:	90 81       	ld	r25, Z
    166a:	89 23       	and	r24, r25
    166c:	80 83       	st	Z, r24
    166e:	75 c0       	rjmp	.+234    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1670:	88 ef       	ldi	r24, 0xF8	; 248
    1672:	8a 0f       	add	r24, r26
    1674:	86 95       	lsr	r24
    1676:	86 95       	lsr	r24
    1678:	86 95       	lsr	r24
    167a:	70 e8       	ldi	r23, 0x80	; 128
    167c:	87 9f       	mul	r24, r23
    167e:	e0 0d       	add	r30, r0
    1680:	f1 1d       	adc	r31, r1
    1682:	11 24       	eor	r1, r1
    1684:	e0 58       	subi	r30, 0x80	; 128
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	a7 70       	andi	r26, 0x07	; 7
    168a:	09 f4       	brne	.+2      	; 0x168e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1e0>
    168c:	66 c0       	rjmp	.+204    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	aa 5f       	subi	r26, 0xFA	; 250
    1692:	bd 4f       	sbci	r27, 0xFD	; 253
    1694:	8c 91       	ld	r24, X
    1696:	90 81       	ld	r25, Z
    1698:	89 27       	eor	r24, r25
    169a:	e8 cf       	rjmp	.-48     	; 0x166c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x1be>
    169c:	57 fd       	sbrc	r21, 7
    169e:	5d c0       	rjmp	.+186    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    16a0:	16 96       	adiw	r26, 0x06	; 6
    16a2:	8d 91       	ld	r24, X+
    16a4:	9c 91       	ld	r25, X
    16a6:	17 97       	sbiw	r26, 0x07	; 7
    16a8:	48 17       	cp	r20, r24
    16aa:	59 07       	cpc	r21, r25
    16ac:	0c f0       	brlt	.+2      	; 0x16b0 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x202>
    16ae:	55 c0       	rjmp	.+170    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    16b0:	f7 ff       	sbrs	r31, 7
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x20e>
    16b4:	2e 0f       	add	r18, r30
    16b6:	3f 1f       	adc	r19, r31
    16b8:	e0 e0       	ldi	r30, 0x00	; 0
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	14 96       	adiw	r26, 0x04	; 4
    16be:	8d 91       	ld	r24, X+
    16c0:	9c 91       	ld	r25, X
    16c2:	15 97       	sbiw	r26, 0x05	; 5
    16c4:	bf 01       	movw	r22, r30
    16c6:	62 0f       	add	r22, r18
    16c8:	73 1f       	adc	r23, r19
    16ca:	86 17       	cp	r24, r22
    16cc:	97 07       	cpc	r25, r23
    16ce:	1c f4       	brge	.+6      	; 0x16d6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x228>
    16d0:	9c 01       	movw	r18, r24
    16d2:	2e 1b       	sub	r18, r30
    16d4:	3f 0b       	sbc	r19, r31
    16d6:	12 16       	cp	r1, r18
    16d8:	13 06       	cpc	r1, r19
    16da:	0c f0       	brlt	.+2      	; 0x16de <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x230>
    16dc:	3e c0       	rjmp	.+124    	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    16de:	ca 01       	movw	r24, r20
    16e0:	57 fd       	sbrc	r21, 7
    16e2:	07 96       	adiw	r24, 0x07	; 7
    16e4:	63 e0       	ldi	r22, 0x03	; 3
    16e6:	95 95       	asr	r25
    16e8:	87 95       	ror	r24
    16ea:	6a 95       	dec	r22
    16ec:	e1 f7       	brne	.-8      	; 0x16e6 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x238>
    16ee:	96 95       	lsr	r25
    16f0:	98 2f       	mov	r25, r24
    16f2:	88 27       	eor	r24, r24
    16f4:	97 95       	ror	r25
    16f6:	87 95       	ror	r24
    16f8:	e8 0f       	add	r30, r24
    16fa:	f9 1f       	adc	r31, r25
    16fc:	ea 5e       	subi	r30, 0xEA	; 234
    16fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1700:	47 70       	andi	r20, 0x07	; 7
    1702:	55 27       	eor	r21, r21
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	01 c0       	rjmp	.+2      	; 0x170c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x25e>
    170a:	88 0f       	add	r24, r24
    170c:	4a 95       	dec	r20
    170e:	ea f7       	brpl	.-6      	; 0x170a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x25c>
    1710:	48 2f       	mov	r20, r24
    1712:	01 30       	cpi	r16, 0x01	; 1
    1714:	11 05       	cpc	r17, r1
    1716:	39 f0       	breq	.+14     	; 0x1726 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x278>
    1718:	78 f0       	brcs	.+30     	; 0x1738 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28a>
    171a:	02 30       	cpi	r16, 0x02	; 2
    171c:	11 05       	cpc	r17, r1
    171e:	e9 f4       	brne	.+58     	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1720:	2e 0f       	add	r18, r30
    1722:	3f 1f       	adc	r19, r31
    1724:	13 c0       	rjmp	.+38     	; 0x174c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x29e>
    1726:	2e 0f       	add	r18, r30
    1728:	3f 1f       	adc	r19, r31
    172a:	e2 17       	cp	r30, r18
    172c:	f3 07       	cpc	r31, r19
    172e:	a9 f0       	breq	.+42     	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1730:	80 81       	ld	r24, Z
    1732:	84 2b       	or	r24, r20
    1734:	81 93       	st	Z+, r24
    1736:	f9 cf       	rjmp	.-14     	; 0x172a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x27c>
    1738:	80 95       	com	r24
    173a:	2e 0f       	add	r18, r30
    173c:	3f 1f       	adc	r19, r31
    173e:	e2 17       	cp	r30, r18
    1740:	f3 07       	cpc	r31, r19
    1742:	59 f0       	breq	.+22     	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1744:	90 81       	ld	r25, Z
    1746:	98 23       	and	r25, r24
    1748:	91 93       	st	Z+, r25
    174a:	f9 cf       	rjmp	.-14     	; 0x173e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x290>
    174c:	e2 17       	cp	r30, r18
    174e:	f3 07       	cpc	r31, r19
    1750:	21 f0       	breq	.+8      	; 0x175a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x2ac>
    1752:	80 81       	ld	r24, Z
    1754:	84 27       	eor	r24, r20
    1756:	81 93       	st	Z+, r24
    1758:	f9 cf       	rjmp	.-14     	; 0x174c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x29e>
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	dc 01       	movw	r26, r24
    176e:	55 96       	adiw	r26, 0x15	; 21
    1770:	8c 91       	ld	r24, X
    1772:	55 97       	sbiw	r26, 0x15	; 21
    1774:	82 30       	cpi	r24, 0x02	; 2
    1776:	71 f0       	breq	.+28     	; 0x1794 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x30>
    1778:	83 30       	cpi	r24, 0x03	; 3
    177a:	09 f1       	breq	.+66     	; 0x17be <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x5a>
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	09 f0       	breq	.+2      	; 0x1782 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1e>
    1780:	8c c0       	rjmp	.+280    	; 0x189a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x136>
    1782:	14 96       	adiw	r26, 0x04	; 4
    1784:	ed 91       	ld	r30, X+
    1786:	fc 91       	ld	r31, X
    1788:	15 97       	sbiw	r26, 0x05	; 5
    178a:	e4 1b       	sub	r30, r20
    178c:	f5 0b       	sbc	r31, r21
    178e:	e2 1b       	sub	r30, r18
    1790:	f3 0b       	sbc	r31, r19
    1792:	20 c0       	rjmp	.+64     	; 0x17d4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    1794:	14 96       	adiw	r26, 0x04	; 4
    1796:	ed 91       	ld	r30, X+
    1798:	fc 91       	ld	r31, X
    179a:	15 97       	sbiw	r26, 0x05	; 5
    179c:	cf 01       	movw	r24, r30
    179e:	86 1b       	sub	r24, r22
    17a0:	97 0b       	sbc	r25, r23
    17a2:	bc 01       	movw	r22, r24
    17a4:	61 50       	subi	r22, 0x01	; 1
    17a6:	71 09       	sbc	r23, r1
    17a8:	16 96       	adiw	r26, 0x06	; 6
    17aa:	ed 91       	ld	r30, X+
    17ac:	fc 91       	ld	r31, X
    17ae:	17 97       	sbiw	r26, 0x07	; 7
    17b0:	cf 01       	movw	r24, r30
    17b2:	84 1b       	sub	r24, r20
    17b4:	95 0b       	sbc	r25, r21
    17b6:	ac 01       	movw	r20, r24
    17b8:	42 1b       	sub	r20, r18
    17ba:	53 0b       	sbc	r21, r19
    17bc:	6e c0       	rjmp	.+220    	; 0x189a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x136>
    17be:	16 96       	adiw	r26, 0x06	; 6
    17c0:	ed 91       	ld	r30, X+
    17c2:	fc 91       	ld	r31, X
    17c4:	17 97       	sbiw	r26, 0x07	; 7
    17c6:	cf 01       	movw	r24, r30
    17c8:	86 1b       	sub	r24, r22
    17ca:	97 0b       	sbc	r25, r23
    17cc:	bc 01       	movw	r22, r24
    17ce:	61 50       	subi	r22, 0x01	; 1
    17d0:	71 09       	sbc	r23, r1
    17d2:	fa 01       	movw	r30, r20
    17d4:	77 fd       	sbrc	r23, 7
    17d6:	1b c1       	rjmp	.+566    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    17d8:	16 96       	adiw	r26, 0x06	; 6
    17da:	8d 91       	ld	r24, X+
    17dc:	9c 91       	ld	r25, X
    17de:	17 97       	sbiw	r26, 0x07	; 7
    17e0:	68 17       	cp	r22, r24
    17e2:	79 07       	cpc	r23, r25
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x84>
    17e6:	13 c1       	rjmp	.+550    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    17e8:	f7 ff       	sbrs	r31, 7
    17ea:	04 c0       	rjmp	.+8      	; 0x17f4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x90>
    17ec:	2e 0f       	add	r18, r30
    17ee:	3f 1f       	adc	r19, r31
    17f0:	e0 e0       	ldi	r30, 0x00	; 0
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	14 96       	adiw	r26, 0x04	; 4
    17f6:	8d 91       	ld	r24, X+
    17f8:	9c 91       	ld	r25, X
    17fa:	15 97       	sbiw	r26, 0x05	; 5
    17fc:	af 01       	movw	r20, r30
    17fe:	42 0f       	add	r20, r18
    1800:	53 1f       	adc	r21, r19
    1802:	84 17       	cp	r24, r20
    1804:	95 07       	cpc	r25, r21
    1806:	1c f4       	brge	.+6      	; 0x180e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xaa>
    1808:	9c 01       	movw	r18, r24
    180a:	2e 1b       	sub	r18, r30
    180c:	3f 0b       	sbc	r19, r31
    180e:	12 16       	cp	r1, r18
    1810:	13 06       	cpc	r1, r19
    1812:	0c f0       	brlt	.+2      	; 0x1816 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xb2>
    1814:	fc c0       	rjmp	.+504    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    1816:	cb 01       	movw	r24, r22
    1818:	77 fd       	sbrc	r23, 7
    181a:	07 96       	adiw	r24, 0x07	; 7
    181c:	43 e0       	ldi	r20, 0x03	; 3
    181e:	95 95       	asr	r25
    1820:	87 95       	ror	r24
    1822:	4a 95       	dec	r20
    1824:	e1 f7       	brne	.-8      	; 0x181e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xba>
    1826:	96 95       	lsr	r25
    1828:	98 2f       	mov	r25, r24
    182a:	88 27       	eor	r24, r24
    182c:	97 95       	ror	r25
    182e:	87 95       	ror	r24
    1830:	e8 0f       	add	r30, r24
    1832:	f9 1f       	adc	r31, r25
    1834:	ea 5e       	subi	r30, 0xEA	; 234
    1836:	fd 4f       	sbci	r31, 0xFD	; 253
    1838:	67 70       	andi	r22, 0x07	; 7
    183a:	77 27       	eor	r23, r23
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xe0>
    1842:	88 0f       	add	r24, r24
    1844:	6a 95       	dec	r22
    1846:	ea f7       	brpl	.-6      	; 0x1842 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xde>
    1848:	48 2f       	mov	r20, r24
    184a:	01 30       	cpi	r16, 0x01	; 1
    184c:	11 05       	cpc	r17, r1
    184e:	41 f0       	breq	.+16     	; 0x1860 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xfc>
    1850:	88 f0       	brcs	.+34     	; 0x1874 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x110>
    1852:	02 30       	cpi	r16, 0x02	; 2
    1854:	11 05       	cpc	r17, r1
    1856:	09 f0       	breq	.+2      	; 0x185a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0xf6>
    1858:	da c0       	rjmp	.+436    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    185a:	2e 0f       	add	r18, r30
    185c:	3f 1f       	adc	r19, r31
    185e:	15 c0       	rjmp	.+42     	; 0x188a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x126>
    1860:	2e 0f       	add	r18, r30
    1862:	3f 1f       	adc	r19, r31
    1864:	e2 17       	cp	r30, r18
    1866:	f3 07       	cpc	r31, r19
    1868:	09 f4       	brne	.+2      	; 0x186c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x108>
    186a:	d1 c0       	rjmp	.+418    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    186c:	80 81       	ld	r24, Z
    186e:	84 2b       	or	r24, r20
    1870:	81 93       	st	Z+, r24
    1872:	f8 cf       	rjmp	.-16     	; 0x1864 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x100>
    1874:	80 95       	com	r24
    1876:	2e 0f       	add	r18, r30
    1878:	3f 1f       	adc	r19, r31
    187a:	e2 17       	cp	r30, r18
    187c:	f3 07       	cpc	r31, r19
    187e:	09 f4       	brne	.+2      	; 0x1882 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x11e>
    1880:	c6 c0       	rjmp	.+396    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    1882:	90 81       	ld	r25, Z
    1884:	98 23       	and	r25, r24
    1886:	91 93       	st	Z+, r25
    1888:	f8 cf       	rjmp	.-16     	; 0x187a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x116>
    188a:	e2 17       	cp	r30, r18
    188c:	f3 07       	cpc	r31, r19
    188e:	09 f4       	brne	.+2      	; 0x1892 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x12e>
    1890:	be c0       	rjmp	.+380    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    1892:	80 81       	ld	r24, Z
    1894:	84 27       	eor	r24, r20
    1896:	81 93       	st	Z+, r24
    1898:	f8 cf       	rjmp	.-16     	; 0x188a <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x126>
    189a:	77 fd       	sbrc	r23, 7
    189c:	b8 c0       	rjmp	.+368    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    189e:	14 96       	adiw	r26, 0x04	; 4
    18a0:	8d 91       	ld	r24, X+
    18a2:	9c 91       	ld	r25, X
    18a4:	15 97       	sbiw	r26, 0x05	; 5
    18a6:	68 17       	cp	r22, r24
    18a8:	79 07       	cpc	r23, r25
    18aa:	0c f0       	brlt	.+2      	; 0x18ae <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x14a>
    18ac:	b0 c0       	rjmp	.+352    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    18ae:	57 ff       	sbrs	r21, 7
    18b0:	04 c0       	rjmp	.+8      	; 0x18ba <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x156>
    18b2:	24 0f       	add	r18, r20
    18b4:	35 1f       	adc	r19, r21
    18b6:	40 e0       	ldi	r20, 0x00	; 0
    18b8:	50 e0       	ldi	r21, 0x00	; 0
    18ba:	16 96       	adiw	r26, 0x06	; 6
    18bc:	8d 91       	ld	r24, X+
    18be:	9c 91       	ld	r25, X
    18c0:	17 97       	sbiw	r26, 0x07	; 7
    18c2:	fa 01       	movw	r30, r20
    18c4:	e2 0f       	add	r30, r18
    18c6:	f3 1f       	adc	r31, r19
    18c8:	8e 17       	cp	r24, r30
    18ca:	9f 07       	cpc	r25, r31
    18cc:	1c f4       	brge	.+6      	; 0x18d4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x170>
    18ce:	9c 01       	movw	r18, r24
    18d0:	24 1b       	sub	r18, r20
    18d2:	35 0b       	sbc	r19, r21
    18d4:	12 16       	cp	r1, r18
    18d6:	13 06       	cpc	r1, r19
    18d8:	0c f0       	brlt	.+2      	; 0x18dc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x178>
    18da:	99 c0       	rjmp	.+306    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    18dc:	a2 2f       	mov	r26, r18
    18de:	84 2f       	mov	r24, r20
    18e0:	86 95       	lsr	r24
    18e2:	86 95       	lsr	r24
    18e4:	86 95       	lsr	r24
    18e6:	90 e8       	ldi	r25, 0x80	; 128
    18e8:	89 9f       	mul	r24, r25
    18ea:	60 0d       	add	r22, r0
    18ec:	71 1d       	adc	r23, r1
    18ee:	11 24       	eor	r1, r1
    18f0:	fb 01       	movw	r30, r22
    18f2:	ea 5e       	subi	r30, 0xEA	; 234
    18f4:	fd 4f       	sbci	r31, 0xFD	; 253
    18f6:	47 70       	andi	r20, 0x07	; 7
    18f8:	a9 f1       	breq	.+106    	; 0x1964 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x200>
    18fa:	98 e0       	ldi	r25, 0x08	; 8
    18fc:	94 1b       	sub	r25, r20
    18fe:	49 2f       	mov	r20, r25
    1900:	50 e0       	ldi	r21, 0x00	; 0
    1902:	ea 01       	movw	r28, r20
    1904:	c2 5f       	subi	r28, 0xF2	; 242
    1906:	dd 4f       	sbci	r29, 0xFD	; 253
    1908:	88 81       	ld	r24, Y
    190a:	29 17       	cp	r18, r25
    190c:	90 f4       	brcc	.+36     	; 0x1932 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1ce>
    190e:	42 1b       	sub	r20, r18
    1910:	51 09       	sbc	r21, r1
    1912:	2f ef       	ldi	r18, 0xFF	; 255
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1b8>
    1918:	35 95       	asr	r19
    191a:	27 95       	ror	r18
    191c:	4a 95       	dec	r20
    191e:	e2 f7       	brpl	.-8      	; 0x1918 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1b4>
    1920:	82 23       	and	r24, r18
    1922:	01 30       	cpi	r16, 0x01	; 1
    1924:	11 05       	cpc	r17, r1
    1926:	41 f0       	breq	.+16     	; 0x1938 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1d4>
    1928:	68 f0       	brcs	.+26     	; 0x1944 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1e0>
    192a:	02 30       	cpi	r16, 0x02	; 2
    192c:	11 05       	cpc	r17, r1
    192e:	89 f0       	breq	.+34     	; 0x1952 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1ee>
    1930:	6e c0       	rjmp	.+220    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    1932:	01 30       	cpi	r16, 0x01	; 1
    1934:	11 05       	cpc	r17, r1
    1936:	19 f4       	brne	.+6      	; 0x193e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1da>
    1938:	20 81       	ld	r18, Z
    193a:	82 2b       	or	r24, r18
    193c:	0c c0       	rjmp	.+24     	; 0x1956 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1f2>
    193e:	01 30       	cpi	r16, 0x01	; 1
    1940:	11 05       	cpc	r17, r1
    1942:	20 f4       	brcc	.+8      	; 0x194c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1e8>
    1944:	80 95       	com	r24
    1946:	20 81       	ld	r18, Z
    1948:	82 23       	and	r24, r18
    194a:	05 c0       	rjmp	.+10     	; 0x1956 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1f2>
    194c:	02 30       	cpi	r16, 0x02	; 2
    194e:	11 05       	cpc	r17, r1
    1950:	31 f4       	brne	.+12     	; 0x195e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1fa>
    1952:	20 81       	ld	r18, Z
    1954:	82 27       	eor	r24, r18
    1956:	80 83       	st	Z, r24
    1958:	a9 17       	cp	r26, r25
    195a:	08 f4       	brcc	.+2      	; 0x195e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x1fa>
    195c:	58 c0       	rjmp	.+176    	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    195e:	a9 1b       	sub	r26, r25
    1960:	e0 58       	subi	r30, 0x80	; 128
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	a8 30       	cpi	r26, 0x08	; 8
    1966:	48 f1       	brcs	.+82     	; 0x19ba <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x256>
    1968:	02 30       	cpi	r16, 0x02	; 2
    196a:	11 05       	cpc	r17, r1
    196c:	59 f4       	brne	.+22     	; 0x1984 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x220>
    196e:	ef 01       	movw	r28, r30
    1970:	8a 2f       	mov	r24, r26
    1972:	98 81       	ld	r25, Y
    1974:	90 95       	com	r25
    1976:	98 83       	st	Y, r25
    1978:	c0 58       	subi	r28, 0x80	; 128
    197a:	df 4f       	sbci	r29, 0xFF	; 255
    197c:	88 50       	subi	r24, 0x08	; 8
    197e:	88 30       	cpi	r24, 0x08	; 8
    1980:	c0 f7       	brcc	.-16     	; 0x1972 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x20e>
    1982:	30 c0       	rjmp	.+96     	; 0x19e4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x280>
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	01 30       	cpi	r16, 0x01	; 1
    1988:	11 05       	cpc	r17, r1
    198a:	09 f0       	breq	.+2      	; 0x198e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x22a>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	81 95       	neg	r24
    1990:	ef 01       	movw	r28, r30
    1992:	9a 2f       	mov	r25, r26
    1994:	88 83       	st	Y, r24
    1996:	c0 58       	subi	r28, 0x80	; 128
    1998:	df 4f       	sbci	r29, 0xFF	; 255
    199a:	98 50       	subi	r25, 0x08	; 8
    199c:	98 30       	cpi	r25, 0x08	; 8
    199e:	d0 f7       	brcc	.-12     	; 0x1994 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x230>
    19a0:	88 ef       	ldi	r24, 0xF8	; 248
    19a2:	8a 0f       	add	r24, r26
    19a4:	86 95       	lsr	r24
    19a6:	86 95       	lsr	r24
    19a8:	86 95       	lsr	r24
    19aa:	90 e8       	ldi	r25, 0x80	; 128
    19ac:	89 9f       	mul	r24, r25
    19ae:	e0 0d       	add	r30, r0
    19b0:	f1 1d       	adc	r31, r1
    19b2:	11 24       	eor	r1, r1
    19b4:	e0 58       	subi	r30, 0x80	; 128
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	a7 70       	andi	r26, 0x07	; 7
    19ba:	aa 23       	and	r26, r26
    19bc:	41 f1       	breq	.+80     	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	aa 5f       	subi	r26, 0xFA	; 250
    19c2:	bd 4f       	sbci	r27, 0xFD	; 253
    19c4:	8c 91       	ld	r24, X
    19c6:	01 30       	cpi	r16, 0x01	; 1
    19c8:	11 05       	cpc	r17, r1
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x272>
    19cc:	38 f0       	brcs	.+14     	; 0x19dc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x278>
    19ce:	02 30       	cpi	r16, 0x02	; 2
    19d0:	11 05       	cpc	r17, r1
    19d2:	e9 f4       	brne	.+58     	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    19d4:	19 c0       	rjmp	.+50     	; 0x1a08 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a4>
    19d6:	90 81       	ld	r25, Z
    19d8:	89 2b       	or	r24, r25
    19da:	18 c0       	rjmp	.+48     	; 0x1a0c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a8>
    19dc:	80 95       	com	r24
    19de:	90 81       	ld	r25, Z
    19e0:	89 23       	and	r24, r25
    19e2:	14 c0       	rjmp	.+40     	; 0x1a0c <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a8>
    19e4:	88 ef       	ldi	r24, 0xF8	; 248
    19e6:	8a 0f       	add	r24, r26
    19e8:	86 95       	lsr	r24
    19ea:	86 95       	lsr	r24
    19ec:	86 95       	lsr	r24
    19ee:	90 e8       	ldi	r25, 0x80	; 128
    19f0:	89 9f       	mul	r24, r25
    19f2:	e0 0d       	add	r30, r0
    19f4:	f1 1d       	adc	r31, r1
    19f6:	11 24       	eor	r1, r1
    19f8:	e0 58       	subi	r30, 0x80	; 128
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	a7 70       	andi	r26, 0x07	; 7
    19fe:	39 f0       	breq	.+14     	; 0x1a0e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2aa>
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	aa 5f       	subi	r26, 0xFA	; 250
    1a04:	bd 4f       	sbci	r27, 0xFD	; 253
    1a06:	8c 91       	ld	r24, X
    1a08:	90 81       	ld	r25, Z
    1a0a:	89 27       	eor	r24, r25
    1a0c:	80 83       	st	Z, r24
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <_ZN16Adafruit_SSD13069drawPixelEiij>:
    1a18:	cf 92       	push	r12
    1a1a:	df 92       	push	r13
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	7c 01       	movw	r14, r24
    1a2a:	8b 01       	movw	r16, r22
    1a2c:	ea 01       	movw	r28, r20
    1a2e:	69 01       	movw	r12, r18
    1a30:	77 fd       	sbrc	r23, 7
    1a32:	a0 c0       	rjmp	.+320    	; 0x1b74 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    1a34:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    1a38:	08 17       	cp	r16, r24
    1a3a:	19 07       	cpc	r17, r25
    1a3c:	0c f0       	brlt	.+2      	; 0x1a40 <_ZN16Adafruit_SSD13069drawPixelEiij+0x28>
    1a3e:	9a c0       	rjmp	.+308    	; 0x1b74 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    1a40:	d7 fd       	sbrc	r29, 7
    1a42:	98 c0       	rjmp	.+304    	; 0x1b74 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    1a44:	c7 01       	movw	r24, r14
    1a46:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    1a4a:	c8 17       	cp	r28, r24
    1a4c:	d9 07       	cpc	r29, r25
    1a4e:	0c f0       	brlt	.+2      	; 0x1a52 <_ZN16Adafruit_SSD13069drawPixelEiij+0x3a>
    1a50:	91 c0       	rjmp	.+290    	; 0x1b74 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    1a52:	c7 01       	movw	r24, r14
    1a54:	0e 94 33 52 	call	0xa466	; 0xa466 <_ZNK12Adafruit_GFX11getRotationEv>
    1a58:	82 30       	cpi	r24, 0x02	; 2
    1a5a:	09 f0       	breq	.+2      	; 0x1a5e <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    1a5c:	7f c0       	rjmp	.+254    	; 0x1b5c <_ZN16Adafruit_SSD13069drawPixelEiij+0x144>
    1a5e:	f7 01       	movw	r30, r14
    1a60:	84 81       	ldd	r24, Z+4	; 0x04
    1a62:	95 81       	ldd	r25, Z+5	; 0x05
    1a64:	9c 01       	movw	r18, r24
    1a66:	20 1b       	sub	r18, r16
    1a68:	31 0b       	sbc	r19, r17
    1a6a:	89 01       	movw	r16, r18
    1a6c:	01 50       	subi	r16, 0x01	; 1
    1a6e:	11 09       	sbc	r17, r1
    1a70:	86 81       	ldd	r24, Z+6	; 0x06
    1a72:	97 81       	ldd	r25, Z+7	; 0x07
    1a74:	fc 01       	movw	r30, r24
    1a76:	ec 1b       	sub	r30, r28
    1a78:	fd 0b       	sbc	r31, r29
    1a7a:	ef 01       	movw	r28, r30
    1a7c:	21 97       	sbiw	r28, 0x01	; 1
    1a7e:	0b c0       	rjmp	.+22     	; 0x1a96 <_ZN16Adafruit_SSD13069drawPixelEiij+0x7e>
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	49 f4       	brne	.+18     	; 0x1a96 <_ZN16Adafruit_SSD13069drawPixelEiij+0x7e>
    1a84:	f7 01       	movw	r30, r14
    1a86:	84 81       	ldd	r24, Z+4	; 0x04
    1a88:	95 81       	ldd	r25, Z+5	; 0x05
    1a8a:	8c 1b       	sub	r24, r28
    1a8c:	9d 0b       	sbc	r25, r29
    1a8e:	e8 01       	movw	r28, r16
    1a90:	8c 01       	movw	r16, r24
    1a92:	01 50       	subi	r16, 0x01	; 1
    1a94:	11 09       	sbc	r17, r1
    1a96:	f1 e0       	ldi	r31, 0x01	; 1
    1a98:	cf 16       	cp	r12, r31
    1a9a:	d1 04       	cpc	r13, r1
    1a9c:	31 f0       	breq	.+12     	; 0x1aaa <_ZN16Adafruit_SSD13069drawPixelEiij+0x92>
    1a9e:	10 f1       	brcs	.+68     	; 0x1ae4 <_ZN16Adafruit_SSD13069drawPixelEiij+0xcc>
    1aa0:	32 e0       	ldi	r19, 0x02	; 2
    1aa2:	c3 16       	cp	r12, r19
    1aa4:	d1 04       	cpc	r13, r1
    1aa6:	e1 f1       	breq	.+120    	; 0x1b20 <_ZN16Adafruit_SSD13069drawPixelEiij+0x108>
    1aa8:	65 c0       	rjmp	.+202    	; 0x1b74 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    1aaa:	fe 01       	movw	r30, r28
    1aac:	d7 fd       	sbrc	r29, 7
    1aae:	37 96       	adiw	r30, 0x07	; 7
    1ab0:	43 e0       	ldi	r20, 0x03	; 3
    1ab2:	f5 95       	asr	r31
    1ab4:	e7 95       	ror	r30
    1ab6:	4a 95       	dec	r20
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x9a>
    1aba:	f6 95       	lsr	r31
    1abc:	fe 2f       	mov	r31, r30
    1abe:	ee 27       	eor	r30, r30
    1ac0:	f7 95       	ror	r31
    1ac2:	e7 95       	ror	r30
    1ac4:	0e 0f       	add	r16, r30
    1ac6:	1f 1f       	adc	r17, r31
    1ac8:	f8 01       	movw	r30, r16
    1aca:	ea 5e       	subi	r30, 0xEA	; 234
    1acc:	fd 4f       	sbci	r31, 0xFD	; 253
    1ace:	c7 70       	andi	r28, 0x07	; 7
    1ad0:	dd 27       	eor	r29, r29
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	01 c0       	rjmp	.+2      	; 0x1ada <_ZN16Adafruit_SSD13069drawPixelEiij+0xc2>
    1ad8:	88 0f       	add	r24, r24
    1ada:	ca 95       	dec	r28
    1adc:	ea f7       	brpl	.-6      	; 0x1ad8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    1ade:	90 81       	ld	r25, Z
    1ae0:	89 2b       	or	r24, r25
    1ae2:	3a c0       	rjmp	.+116    	; 0x1b58 <_ZN16Adafruit_SSD13069drawPixelEiij+0x140>
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	d7 fd       	sbrc	r29, 7
    1ae8:	37 96       	adiw	r30, 0x07	; 7
    1aea:	23 e0       	ldi	r18, 0x03	; 3
    1aec:	f5 95       	asr	r31
    1aee:	e7 95       	ror	r30
    1af0:	2a 95       	dec	r18
    1af2:	e1 f7       	brne	.-8      	; 0x1aec <_ZN16Adafruit_SSD13069drawPixelEiij+0xd4>
    1af4:	f6 95       	lsr	r31
    1af6:	fe 2f       	mov	r31, r30
    1af8:	ee 27       	eor	r30, r30
    1afa:	f7 95       	ror	r31
    1afc:	e7 95       	ror	r30
    1afe:	0e 0f       	add	r16, r30
    1b00:	1f 1f       	adc	r17, r31
    1b02:	f8 01       	movw	r30, r16
    1b04:	ea 5e       	subi	r30, 0xEA	; 234
    1b06:	fd 4f       	sbci	r31, 0xFD	; 253
    1b08:	c7 70       	andi	r28, 0x07	; 7
    1b0a:	dd 27       	eor	r29, r29
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    1b12:	88 0f       	add	r24, r24
    1b14:	ca 95       	dec	r28
    1b16:	ea f7       	brpl	.-6      	; 0x1b12 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfa>
    1b18:	80 95       	com	r24
    1b1a:	90 81       	ld	r25, Z
    1b1c:	89 23       	and	r24, r25
    1b1e:	1c c0       	rjmp	.+56     	; 0x1b58 <_ZN16Adafruit_SSD13069drawPixelEiij+0x140>
    1b20:	fe 01       	movw	r30, r28
    1b22:	d7 fd       	sbrc	r29, 7
    1b24:	37 96       	adiw	r30, 0x07	; 7
    1b26:	83 e0       	ldi	r24, 0x03	; 3
    1b28:	f5 95       	asr	r31
    1b2a:	e7 95       	ror	r30
    1b2c:	8a 95       	dec	r24
    1b2e:	e1 f7       	brne	.-8      	; 0x1b28 <_ZN16Adafruit_SSD13069drawPixelEiij+0x110>
    1b30:	f6 95       	lsr	r31
    1b32:	fe 2f       	mov	r31, r30
    1b34:	ee 27       	eor	r30, r30
    1b36:	f7 95       	ror	r31
    1b38:	e7 95       	ror	r30
    1b3a:	0e 0f       	add	r16, r30
    1b3c:	1f 1f       	adc	r17, r31
    1b3e:	f8 01       	movw	r30, r16
    1b40:	ea 5e       	subi	r30, 0xEA	; 234
    1b42:	fd 4f       	sbci	r31, 0xFD	; 253
    1b44:	c7 70       	andi	r28, 0x07	; 7
    1b46:	dd 27       	eor	r29, r29
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <_ZN16Adafruit_SSD13069drawPixelEiij+0x138>
    1b4e:	88 0f       	add	r24, r24
    1b50:	ca 95       	dec	r28
    1b52:	ea f7       	brpl	.-6      	; 0x1b4e <_ZN16Adafruit_SSD13069drawPixelEiij+0x136>
    1b54:	90 81       	ld	r25, Z
    1b56:	89 27       	eor	r24, r25
    1b58:	80 83       	st	Z, r24
    1b5a:	0c c0       	rjmp	.+24     	; 0x1b74 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15c>
    1b5c:	83 30       	cpi	r24, 0x03	; 3
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <_ZN16Adafruit_SSD13069drawPixelEiij+0x14a>
    1b60:	8f cf       	rjmp	.-226    	; 0x1a80 <_ZN16Adafruit_SSD13069drawPixelEiij+0x68>
    1b62:	f7 01       	movw	r30, r14
    1b64:	86 81       	ldd	r24, Z+6	; 0x06
    1b66:	97 81       	ldd	r25, Z+7	; 0x07
    1b68:	80 1b       	sub	r24, r16
    1b6a:	91 0b       	sbc	r25, r17
    1b6c:	8e 01       	movw	r16, r28
    1b6e:	ec 01       	movw	r28, r24
    1b70:	21 97       	sbiw	r28, 0x01	; 1
    1b72:	91 cf       	rjmp	.-222    	; 0x1a96 <_ZN16Adafruit_SSD13069drawPixelEiij+0x7e>
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	08 95       	ret

00001b86 <_ZN16Adafruit_SSD1306C1Ea>:
    1b86:	1f 93       	push	r17
    1b88:	cf 93       	push	r28
    1b8a:	df 93       	push	r29
    1b8c:	ec 01       	movw	r28, r24
    1b8e:	16 2f       	mov	r17, r22
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	60 e8       	ldi	r22, 0x80	; 128
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <_ZN12Adafruit_GFXC1Eii>
    1b9c:	8f e6       	ldi	r24, 0x6F	; 111
    1b9e:	94 e0       	ldi	r25, 0x04	; 4
    1ba0:	99 83       	std	Y+1, r25	; 0x01
    1ba2:	88 83       	st	Y, r24
    1ba4:	8f ef       	ldi	r24, 0xFF	; 255
    1ba6:	8c 8f       	std	Y+28, r24	; 0x1c
    1ba8:	88 a3       	std	Y+32, r24	; 0x20
    1baa:	8e 8f       	std	Y+30, r24	; 0x1e
    1bac:	8d 8f       	std	Y+29, r24	; 0x1d
    1bae:	1f 8f       	std	Y+31, r17	; 0x1f
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	08 95       	ret

00001bb8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	e6 e1       	ldi	r30, 0x16	; 22
    1bbe:	f2 e0       	ldi	r31, 0x02	; 2
    1bc0:	df 01       	movw	r26, r30
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	1d 92       	st	X+, r1
    1bc6:	21 50       	subi	r18, 0x01	; 1
    1bc8:	30 40       	sbci	r19, 0x00	; 0
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>
    1bcc:	08 95       	ret

00001bce <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
    1bce:	fc 01       	movw	r30, r24
    1bd0:	81 a1       	ldd	r24, Z+33	; 0x21
    1bd2:	88 23       	and	r24, r24
    1bd4:	39 f0       	breq	.+14     	; 0x1be4 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x16>
    1bd6:	6e bd       	out	0x2e, r22	; 46
    1bd8:	00 00       	nop
    1bda:	0d b4       	in	r0, 0x2d	; 45
    1bdc:	07 fe       	sbrs	r0, 7
    1bde:	fd cf       	rjmp	.-6      	; 0x1bda <_ZN16Adafruit_SSD130612fastSPIwriteEh+0xc>
    1be0:	8e b5       	in	r24, 0x2e	; 46
    1be2:	08 95       	ret
    1be4:	28 e0       	ldi	r18, 0x08	; 8
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	90 e8       	ldi	r25, 0x80	; 128
    1bea:	a4 a1       	ldd	r26, Z+36	; 0x24
    1bec:	b5 a1       	ldd	r27, Z+37	; 0x25
    1bee:	4c 91       	ld	r20, X
    1bf0:	83 a5       	ldd	r24, Z+43	; 0x2b
    1bf2:	80 95       	com	r24
    1bf4:	84 23       	and	r24, r20
    1bf6:	8c 93       	st	X, r24
    1bf8:	a2 a1       	ldd	r26, Z+34	; 0x22
    1bfa:	b3 a1       	ldd	r27, Z+35	; 0x23
    1bfc:	82 a5       	ldd	r24, Z+42	; 0x2a
    1bfe:	46 2f       	mov	r20, r22
    1c00:	49 23       	and	r20, r25
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x3c>
    1c04:	4c 91       	ld	r20, X
    1c06:	84 2b       	or	r24, r20
    1c08:	03 c0       	rjmp	.+6      	; 0x1c10 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x42>
    1c0a:	4c 91       	ld	r20, X
    1c0c:	80 95       	com	r24
    1c0e:	84 23       	and	r24, r20
    1c10:	8c 93       	st	X, r24
    1c12:	a4 a1       	ldd	r26, Z+36	; 0x24
    1c14:	b5 a1       	ldd	r27, Z+37	; 0x25
    1c16:	4c 91       	ld	r20, X
    1c18:	83 a5       	ldd	r24, Z+43	; 0x2b
    1c1a:	84 2b       	or	r24, r20
    1c1c:	8c 93       	st	X, r24
    1c1e:	96 95       	lsr	r25
    1c20:	21 50       	subi	r18, 0x01	; 1
    1c22:	31 09       	sbc	r19, r1
    1c24:	11 f7       	brne	.-60     	; 0x1bea <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1c>
    1c26:	08 95       	ret

00001c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	ec 01       	movw	r28, r24
    1c30:	16 2f       	mov	r17, r22
    1c32:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c34:	8f 3f       	cpi	r24, 0xFF	; 255
    1c36:	01 f1       	breq	.+64     	; 0x1c78 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x50>
    1c38:	ee a1       	ldd	r30, Y+38	; 0x26
    1c3a:	ff a1       	ldd	r31, Y+39	; 0x27
    1c3c:	90 81       	ld	r25, Z
    1c3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c40:	89 2b       	or	r24, r25
    1c42:	80 83       	st	Z, r24
    1c44:	e8 a5       	ldd	r30, Y+40	; 0x28
    1c46:	f9 a5       	ldd	r31, Y+41	; 0x29
    1c48:	90 81       	ld	r25, Z
    1c4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c4c:	80 95       	com	r24
    1c4e:	89 23       	and	r24, r25
    1c50:	80 83       	st	Z, r24
    1c52:	ee a1       	ldd	r30, Y+38	; 0x26
    1c54:	ff a1       	ldd	r31, Y+39	; 0x27
    1c56:	90 81       	ld	r25, Z
    1c58:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c5a:	80 95       	com	r24
    1c5c:	89 23       	and	r24, r25
    1c5e:	80 83       	st	Z, r24
    1c60:	ce 01       	movw	r24, r28
    1c62:	b5 df       	rcall	.-150    	; 0x1bce <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    1c64:	ee a1       	ldd	r30, Y+38	; 0x26
    1c66:	ff a1       	ldd	r31, Y+39	; 0x27
    1c68:	90 81       	ld	r25, Z
    1c6a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c6c:	89 2b       	or	r24, r25
    1c6e:	80 83       	st	Z, r24
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	08 95       	ret
    1c78:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c7a:	06 2e       	mov	r0, r22
    1c7c:	00 0c       	add	r0, r0
    1c7e:	77 0b       	sbc	r23, r23
    1c80:	84 e8       	ldi	r24, 0x84	; 132
    1c82:	94 e1       	ldi	r25, 0x14	; 20
    1c84:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	84 e8       	ldi	r24, 0x84	; 132
    1c8c:	94 e1       	ldi	r25, 0x14	; 20
    1c8e:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    1c92:	61 2f       	mov	r22, r17
    1c94:	84 e8       	ldi	r24, 0x84	; 132
    1c96:	94 e1       	ldi	r25, 0x14	; 20
    1c98:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    1c9c:	84 e8       	ldi	r24, 0x84	; 132
    1c9e:	94 e1       	ldi	r25, 0x14	; 20
    1ca0:	df 91       	pop	r29
    1ca2:	cf 91       	pop	r28
    1ca4:	1f 91       	pop	r17
    1ca6:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>

00001caa <_ZN16Adafruit_SSD13065beginEhhb>:
    1caa:	0f 93       	push	r16
    1cac:	1f 93       	push	r17
    1cae:	cf 93       	push	r28
    1cb0:	df 93       	push	r29
    1cb2:	ec 01       	movw	r28, r24
    1cb4:	16 2f       	mov	r17, r22
    1cb6:	02 2f       	mov	r16, r18
    1cb8:	6b 8f       	std	Y+27, r22	; 0x1b
    1cba:	4a 8f       	std	Y+26, r20	; 0x1a
    1cbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1cbe:	8f 3f       	cpi	r24, 0xFF	; 255
    1cc0:	09 f4       	brne	.+2      	; 0x1cc4 <_ZN16Adafruit_SSD13065beginEhhb+0x1a>
    1cc2:	8c c0       	rjmp	.+280    	; 0x1ddc <_ZN16Adafruit_SSD13065beginEhhb+0x132>
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cc8:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	88 a1       	ldd	r24, Y+32	; 0x20
    1cd0:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
    1cd4:	88 a1       	ldd	r24, Y+32	; 0x20
    1cd6:	08 2e       	mov	r0, r24
    1cd8:	00 0c       	add	r0, r0
    1cda:	99 0b       	sbc	r25, r25
    1cdc:	fc 01       	movw	r30, r24
    1cde:	ee 50       	subi	r30, 0x0E	; 14
    1ce0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ce2:	e4 91       	lpm	r30, Z
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	ee 0f       	add	r30, r30
    1ce8:	ff 1f       	adc	r31, r31
    1cea:	ee 5a       	subi	r30, 0xAE	; 174
    1cec:	fc 4f       	sbci	r31, 0xFC	; 252
    1cee:	25 91       	lpm	r18, Z+
    1cf0:	34 91       	lpm	r19, Z
    1cf2:	3f a3       	std	Y+39, r19	; 0x27
    1cf4:	2e a3       	std	Y+38, r18	; 0x26
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	e4 55       	subi	r30, 0x54	; 84
    1cfa:	fd 4f       	sbci	r31, 0xFD	; 253
    1cfc:	e4 91       	lpm	r30, Z
    1cfe:	ec a7       	std	Y+44, r30	; 0x2c
    1d00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d02:	08 2e       	mov	r0, r24
    1d04:	00 0c       	add	r0, r0
    1d06:	99 0b       	sbc	r25, r25
    1d08:	fc 01       	movw	r30, r24
    1d0a:	ee 50       	subi	r30, 0x0E	; 14
    1d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d0e:	e4 91       	lpm	r30, Z
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	ee 0f       	add	r30, r30
    1d14:	ff 1f       	adc	r31, r31
    1d16:	ee 5a       	subi	r30, 0xAE	; 174
    1d18:	fc 4f       	sbci	r31, 0xFC	; 252
    1d1a:	25 91       	lpm	r18, Z+
    1d1c:	34 91       	lpm	r19, Z
    1d1e:	39 a7       	std	Y+41, r19	; 0x29
    1d20:	28 a7       	std	Y+40, r18	; 0x28
    1d22:	fc 01       	movw	r30, r24
    1d24:	e4 55       	subi	r30, 0x54	; 84
    1d26:	fd 4f       	sbci	r31, 0xFD	; 253
    1d28:	e4 91       	lpm	r30, Z
    1d2a:	ed a7       	std	Y+45, r30	; 0x2d
    1d2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2e:	81 11       	cpse	r24, r1
    1d30:	34 c0       	rjmp	.+104    	; 0x1d9a <_ZN16Adafruit_SSD13065beginEhhb+0xf0>
    1d32:	61 e0       	ldi	r22, 0x01	; 1
    1d34:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d36:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
    1d3a:	61 e0       	ldi	r22, 0x01	; 1
    1d3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d3e:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
    1d42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d44:	08 2e       	mov	r0, r24
    1d46:	00 0c       	add	r0, r0
    1d48:	99 0b       	sbc	r25, r25
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	ee 50       	subi	r30, 0x0E	; 14
    1d4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1d50:	e4 91       	lpm	r30, Z
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	ee 0f       	add	r30, r30
    1d56:	ff 1f       	adc	r31, r31
    1d58:	ee 5a       	subi	r30, 0xAE	; 174
    1d5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d5c:	25 91       	lpm	r18, Z+
    1d5e:	34 91       	lpm	r19, Z
    1d60:	3d a3       	std	Y+37, r19	; 0x25
    1d62:	2c a3       	std	Y+36, r18	; 0x24
    1d64:	fc 01       	movw	r30, r24
    1d66:	e4 55       	subi	r30, 0x54	; 84
    1d68:	fd 4f       	sbci	r31, 0xFD	; 253
    1d6a:	e4 91       	lpm	r30, Z
    1d6c:	eb a7       	std	Y+43, r30	; 0x2b
    1d6e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d70:	08 2e       	mov	r0, r24
    1d72:	00 0c       	add	r0, r0
    1d74:	99 0b       	sbc	r25, r25
    1d76:	fc 01       	movw	r30, r24
    1d78:	ee 50       	subi	r30, 0x0E	; 14
    1d7a:	fd 4f       	sbci	r31, 0xFD	; 253
    1d7c:	e4 91       	lpm	r30, Z
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	ee 0f       	add	r30, r30
    1d82:	ff 1f       	adc	r31, r31
    1d84:	ee 5a       	subi	r30, 0xAE	; 174
    1d86:	fc 4f       	sbci	r31, 0xFC	; 252
    1d88:	25 91       	lpm	r18, Z+
    1d8a:	34 91       	lpm	r19, Z
    1d8c:	3b a3       	std	Y+35, r19	; 0x23
    1d8e:	2a a3       	std	Y+34, r18	; 0x22
    1d90:	fc 01       	movw	r30, r24
    1d92:	e4 55       	subi	r30, 0x54	; 84
    1d94:	fd 4f       	sbci	r31, 0xFD	; 253
    1d96:	e4 91       	lpm	r30, Z
    1d98:	ea a7       	std	Y+42, r30	; 0x2a
    1d9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d9c:	88 23       	and	r24, r24
    1d9e:	11 f1       	breq	.+68     	; 0x1de4 <_ZN16Adafruit_SSD13065beginEhhb+0x13a>
    1da0:	0e 94 91 48 	call	0x9122	; 0x9122 <_ZN8SPIClass5beginEv>
    1da4:	80 91 82 14 	lds	r24, 0x1482	; 0x801482 <_ZN8SPIClass13interruptModeE>
    1da8:	88 23       	and	r24, r24
    1daa:	99 f0       	breq	.+38     	; 0x1dd2 <_ZN16Adafruit_SSD13065beginEhhb+0x128>
    1dac:	2f b7       	in	r18, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	80 91 82 14 	lds	r24, 0x1482	; 0x801482 <_ZN8SPIClass13interruptModeE>
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	59 f4       	brne	.+22     	; 0x1dce <_ZN16Adafruit_SSD13065beginEhhb+0x124>
    1db8:	8d b3       	in	r24, 0x1d	; 29
    1dba:	80 93 80 14 	sts	0x1480, r24	; 0x801480 <_ZN8SPIClass13interruptSaveE>
    1dbe:	9d b3       	in	r25, 0x1d	; 29
    1dc0:	80 91 81 14 	lds	r24, 0x1481	; 0x801481 <_ZN8SPIClass13interruptMaskE>
    1dc4:	80 95       	com	r24
    1dc6:	89 23       	and	r24, r25
    1dc8:	8d bb       	out	0x1d, r24	; 29
    1dca:	2f bf       	out	0x3f, r18	; 63
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <_ZN16Adafruit_SSD13065beginEhhb+0x128>
    1dce:	20 93 80 14 	sts	0x1480, r18	; 0x801480 <_ZN8SPIClass13interruptSaveE>
    1dd2:	80 e5       	ldi	r24, 0x50	; 80
    1dd4:	8c bd       	out	0x2c, r24	; 44
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	8d bd       	out	0x2d, r24	; 45
    1dda:	04 c0       	rjmp	.+8      	; 0x1de4 <_ZN16Adafruit_SSD13065beginEhhb+0x13a>
    1ddc:	84 e8       	ldi	r24, 0x84	; 132
    1dde:	94 e1       	ldi	r25, 0x14	; 20
    1de0:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <_ZN7TwoWire5beginEv>
    1de4:	00 23       	and	r16, r16
    1de6:	e1 f0       	breq	.+56     	; 0x1e20 <_ZN16Adafruit_SSD13065beginEhhb+0x176>
    1de8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dea:	87 fd       	sbrc	r24, 7
    1dec:	19 c0       	rjmp	.+50     	; 0x1e20 <_ZN16Adafruit_SSD13065beginEhhb+0x176>
    1dee:	61 e0       	ldi	r22, 0x01	; 1
    1df0:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
    1df4:	61 e0       	ldi	r22, 0x01	; 1
    1df6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df8:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	b8 da       	rcall	.-2704   	; 0x1376 <delay>
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e0a:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
    1e0e:	6a e0       	ldi	r22, 0x0A	; 10
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	af da       	rcall	.-2722   	; 0x1376 <delay>
    1e18:	61 e0       	ldi	r22, 0x01	; 1
    1e1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e1c:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
    1e20:	6e ea       	ldi	r22, 0xAE	; 174
    1e22:	ce 01       	movw	r24, r28
    1e24:	01 df       	rcall	.-510    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e26:	65 ed       	ldi	r22, 0xD5	; 213
    1e28:	ce 01       	movw	r24, r28
    1e2a:	fe de       	rcall	.-516    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e2c:	60 e8       	ldi	r22, 0x80	; 128
    1e2e:	ce 01       	movw	r24, r28
    1e30:	fb de       	rcall	.-522    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e32:	68 ea       	ldi	r22, 0xA8	; 168
    1e34:	ce 01       	movw	r24, r28
    1e36:	f8 de       	rcall	.-528    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e38:	6f e1       	ldi	r22, 0x1F	; 31
    1e3a:	ce 01       	movw	r24, r28
    1e3c:	f5 de       	rcall	.-534    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e3e:	63 ed       	ldi	r22, 0xD3	; 211
    1e40:	ce 01       	movw	r24, r28
    1e42:	f2 de       	rcall	.-540    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	ce 01       	movw	r24, r28
    1e48:	ef de       	rcall	.-546    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e4a:	60 e4       	ldi	r22, 0x40	; 64
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	ec de       	rcall	.-552    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e50:	6d e8       	ldi	r22, 0x8D	; 141
    1e52:	ce 01       	movw	r24, r28
    1e54:	e9 de       	rcall	.-558    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e56:	11 30       	cpi	r17, 0x01	; 1
    1e58:	11 f4       	brne	.+4      	; 0x1e5e <_ZN16Adafruit_SSD13065beginEhhb+0x1b4>
    1e5a:	60 e1       	ldi	r22, 0x10	; 16
    1e5c:	01 c0       	rjmp	.+2      	; 0x1e60 <_ZN16Adafruit_SSD13065beginEhhb+0x1b6>
    1e5e:	64 e1       	ldi	r22, 0x14	; 20
    1e60:	ce 01       	movw	r24, r28
    1e62:	e2 de       	rcall	.-572    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e64:	60 e2       	ldi	r22, 0x20	; 32
    1e66:	ce 01       	movw	r24, r28
    1e68:	df de       	rcall	.-578    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	ce 01       	movw	r24, r28
    1e6e:	dc de       	rcall	.-584    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e70:	61 ea       	ldi	r22, 0xA1	; 161
    1e72:	ce 01       	movw	r24, r28
    1e74:	d9 de       	rcall	.-590    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e76:	68 ec       	ldi	r22, 0xC8	; 200
    1e78:	ce 01       	movw	r24, r28
    1e7a:	d6 de       	rcall	.-596    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e7c:	6a ed       	ldi	r22, 0xDA	; 218
    1e7e:	ce 01       	movw	r24, r28
    1e80:	d3 de       	rcall	.-602    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e82:	62 e0       	ldi	r22, 0x02	; 2
    1e84:	ce 01       	movw	r24, r28
    1e86:	d0 de       	rcall	.-608    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e88:	61 e8       	ldi	r22, 0x81	; 129
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	cd de       	rcall	.-614    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e8e:	6f e8       	ldi	r22, 0x8F	; 143
    1e90:	ce 01       	movw	r24, r28
    1e92:	ca de       	rcall	.-620    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e94:	69 ed       	ldi	r22, 0xD9	; 217
    1e96:	ce 01       	movw	r24, r28
    1e98:	c7 de       	rcall	.-626    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1e9a:	11 30       	cpi	r17, 0x01	; 1
    1e9c:	11 f4       	brne	.+4      	; 0x1ea2 <_ZN16Adafruit_SSD13065beginEhhb+0x1f8>
    1e9e:	62 e2       	ldi	r22, 0x22	; 34
    1ea0:	01 c0       	rjmp	.+2      	; 0x1ea4 <_ZN16Adafruit_SSD13065beginEhhb+0x1fa>
    1ea2:	61 ef       	ldi	r22, 0xF1	; 241
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	c0 de       	rcall	.-640    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1ea8:	6b ed       	ldi	r22, 0xDB	; 219
    1eaa:	ce 01       	movw	r24, r28
    1eac:	bd de       	rcall	.-646    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1eae:	60 e4       	ldi	r22, 0x40	; 64
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	ba de       	rcall	.-652    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1eb4:	64 ea       	ldi	r22, 0xA4	; 164
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	b7 de       	rcall	.-658    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1eba:	66 ea       	ldi	r22, 0xA6	; 166
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	b4 de       	rcall	.-664    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1ec0:	6e e2       	ldi	r22, 0x2E	; 46
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	b1 de       	rcall	.-670    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1ec6:	6f ea       	ldi	r22, 0xAF	; 175
    1ec8:	ce 01       	movw	r24, r28
    1eca:	df 91       	pop	r29
    1ecc:	cf 91       	pop	r28
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	aa ce       	rjmp	.-684    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

00001ed4 <_ZN16Adafruit_SSD13067displayEv>:
}

void Adafruit_SSD1306::display(void) {
    1ed4:	af 92       	push	r10
    1ed6:	bf 92       	push	r11
    1ed8:	cf 92       	push	r12
    1eda:	df 92       	push	r13
    1edc:	ef 92       	push	r14
    1ede:	ff 92       	push	r15
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	ec 01       	movw	r28, r24
  ssd1306_command(SSD1306_COLUMNADDR);
    1eea:	61 e2       	ldi	r22, 0x21	; 33
    1eec:	9d de       	rcall	.-710    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
    1eee:	60 e0       	ldi	r22, 0x00	; 0
    1ef0:	ce 01       	movw	r24, r28
    1ef2:	9a de       	rcall	.-716    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
    1ef4:	6f e7       	ldi	r22, 0x7F	; 127
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	97 de       	rcall	.-722    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
    1efa:	62 e2       	ldi	r22, 0x22	; 34
    1efc:	ce 01       	movw	r24, r28
    1efe:	94 de       	rcall	.-728    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	ce 01       	movw	r24, r28
    1f04:	91 de       	rcall	.-734    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #if SSD1306_LCDHEIGHT == 64
    ssd1306_command(7); // Page end address
  #endif
  #if SSD1306_LCDHEIGHT == 32
    ssd1306_command(3); // Page end address
    1f06:	63 e0       	ldi	r22, 0x03	; 3
    1f08:	ce 01       	movw	r24, r28
    1f0a:	8e de       	rcall	.-740    	; 0x1c28 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    1f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
  #endif
  #if SSD1306_LCDHEIGHT == 16
    ssd1306_command(1); // Page end address
  #endif

  if (sid != -1)
    1f0e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f10:	41 f1       	breq	.+80     	; 0x1f62 <_ZN16Adafruit_SSD13067displayEv+0x8e>
    1f12:	ee a1       	ldd	r30, Y+38	; 0x26
  {
    // SPI
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    1f14:	ff a1       	ldd	r31, Y+39	; 0x27
    1f16:	90 81       	ld	r25, Z
    1f18:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f1a:	89 2b       	or	r24, r25
    1f1c:	80 83       	st	Z, r24
    1f1e:	e8 a5       	ldd	r30, Y+40	; 0x28
    *dcport |= dcpinmask;
    1f20:	f9 a5       	ldd	r31, Y+41	; 0x29
    1f22:	90 81       	ld	r25, Z
    1f24:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f26:	89 2b       	or	r24, r25
    1f28:	80 83       	st	Z, r24
    1f2a:	ee a1       	ldd	r30, Y+38	; 0x26
    *csport &= ~cspinmask;
    1f2c:	ff a1       	ldd	r31, Y+39	; 0x27
    1f2e:	90 81       	ld	r25, Z
    1f30:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f32:	80 95       	com	r24
    1f34:	89 23       	and	r24, r25
    1f36:	80 83       	st	Z, r24
    1f38:	06 e1       	ldi	r16, 0x16	; 22
    1f3a:	12 e0       	ldi	r17, 0x02	; 2
    1f3c:	26 e1       	ldi	r18, 0x16	; 22
    1f3e:	e2 2e       	mov	r14, r18
    1f40:	24 e0       	ldi	r18, 0x04	; 4
    1f42:	f2 2e       	mov	r15, r18
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
    1f44:	f8 01       	movw	r30, r16
    1f46:	61 91       	ld	r22, Z+
    1f48:	8f 01       	movw	r16, r30
    1f4a:	ce 01       	movw	r24, r28
    1f4c:	40 de       	rcall	.-896    	; 0x1bce <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    1f4e:	e0 16       	cp	r14, r16
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
#endif

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
    1f50:	f1 06       	cpc	r15, r17
    1f52:	c1 f7       	brne	.-16     	; 0x1f44 <_ZN16Adafruit_SSD13067displayEv+0x70>
    1f54:	ee a1       	ldd	r30, Y+38	; 0x26
      fastSPIwrite(buffer[i]);
    }
#ifdef HAVE_PORTREG
    *csport |= cspinmask;
    1f56:	ff a1       	ldd	r31, Y+39	; 0x27
    1f58:	90 81       	ld	r25, Z
    1f5a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f5c:	89 2b       	or	r24, r25
    1f5e:	80 83       	st	Z, r24
    1f60:	30 c0       	rjmp	.+96     	; 0x1fc2 <_ZN16Adafruit_SSD13067displayEv+0xee>
    1f62:	e0 90 b8 00 	lds	r14, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
  }
  else
  {
    // save I2C bitrate
#ifdef TWBR
    uint8_t twbrbackup = TWBR;
    1f66:	8c e0       	ldi	r24, 0x0C	; 12
    TWBR = 12; // upgrade to 400KHz!
    1f68:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    1f6c:	06 e1       	ldi	r16, 0x16	; 22
    1f6e:	12 e0       	ldi	r17, 0x02	; 2
    1f70:	96 e1       	ldi	r25, 0x16	; 22
    1f72:	c9 2e       	mov	r12, r25
    1f74:	94 e0       	ldi	r25, 0x04	; 4
    1f76:	d9 2e       	mov	r13, r25
    1f78:	6a 8d       	ldd	r22, Y+26	; 0x1a
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
    1f7a:	06 2e       	mov	r0, r22
    1f7c:	00 0c       	add	r0, r0
    1f7e:	77 0b       	sbc	r23, r23
    1f80:	84 e8       	ldi	r24, 0x84	; 132
    1f82:	94 e1       	ldi	r25, 0x14	; 20
    1f84:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    1f88:	60 e4       	ldi	r22, 0x40	; 64
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
    1f8a:	84 e8       	ldi	r24, 0x84	; 132
    1f8c:	94 e1       	ldi	r25, 0x14	; 20
    1f8e:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    1f92:	58 01       	movw	r10, r16
    1f94:	80 e1       	ldi	r24, 0x10	; 16
    1f96:	f8 2e       	mov	r15, r24
    1f98:	f5 01       	movw	r30, r10
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
        WIRE_WRITE(buffer[i]);
    1f9a:	61 91       	ld	r22, Z+
    1f9c:	5f 01       	movw	r10, r30
    1f9e:	84 e8       	ldi	r24, 0x84	; 132
    1fa0:	94 e1       	ldi	r25, 0x14	; 20
    1fa2:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    1fa6:	fa 94       	dec	r15
    1fa8:	f1 10       	cpse	r15, r1
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      WIRE_WRITE(0x40);
      for (uint8_t x=0; x<16; x++) {
    1faa:	f6 cf       	rjmp	.-20     	; 0x1f98 <_ZN16Adafruit_SSD13067displayEv+0xc4>
    1fac:	84 e8       	ldi	r24, 0x84	; 132
        WIRE_WRITE(buffer[i]);
        i++;
      }
      i--;
      Wire.endTransmission();
    1fae:	94 e1       	ldi	r25, 0x14	; 20
    1fb0:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    1fb4:	00 5f       	subi	r16, 0xF0	; 240
    1fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb8:	c0 16       	cp	r12, r16

    //Serial.println(TWBR, DEC);
    //Serial.println(TWSR & 0x3, DEC);

    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
    1fba:	d1 06       	cpc	r13, r17
    1fbc:	e9 f6       	brne	.-70     	; 0x1f78 <_ZN16Adafruit_SSD13067displayEv+0xa4>
    1fbe:	e0 92 b8 00 	sts	0x00B8, r14	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
      }
      i--;
      Wire.endTransmission();
    }
#ifdef TWBR
    TWBR = twbrbackup;
    1fc2:	df 91       	pop	r29
#endif
  }
}
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	ff 90       	pop	r15
    1fcc:	ef 90       	pop	r14
    1fce:	df 90       	pop	r13
    1fd0:	cf 90       	pop	r12
    1fd2:	bf 90       	pop	r11
    1fd4:	af 90       	pop	r10
    1fd6:	08 95       	ret

00001fd8 <_ZN11EEPROMClass4readEi.isra.0>:
    1fd8:	0c 94 c6 66 	jmp	0xcd8c	; 0xcd8c <eeprom_read_byte>

00001fdc <_ZN11EEPROMClass5writeEih.isra.1>:
}

bool red_beryl::nova_leitura()
{
	
}
    1fdc:	0c 94 ce 66 	jmp	0xcd9c	; 0xcd9c <eeprom_write_byte>

00001fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>:
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	eb 01       	movw	r28, r22
    1ff2:	7b 01       	movw	r14, r22
    1ff4:	2e e6       	ldi	r18, 0x6E	; 110
    1ff6:	e2 0e       	add	r14, r18
    1ff8:	f1 1c       	adc	r15, r1
    1ffa:	8b 01       	movw	r16, r22
    1ffc:	6c 01       	movw	r12, r24
    1ffe:	c6 1a       	sub	r12, r22
    2000:	d7 0a       	sbc	r13, r23
    2002:	c6 01       	movw	r24, r12
    2004:	80 0f       	add	r24, r16
    2006:	91 1f       	adc	r25, r17
    2008:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <eeprom_read_byte>
    200c:	f8 01       	movw	r30, r16
    200e:	81 93       	st	Z+, r24
    2010:	8f 01       	movw	r16, r30
    2012:	ee 15       	cp	r30, r14
    2014:	ff 05       	cpc	r31, r15
    2016:	a9 f7       	brne	.-22     	; 0x2002 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5+0x22>
    2018:	ce 01       	movw	r24, r28
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	df 90       	pop	r13
    2028:	cf 90       	pop	r12
    202a:	08 95       	ret

0000202c <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.4>:
    202c:	af 92       	push	r10
    202e:	bf 92       	push	r11
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	ec 01       	movw	r28, r24
    2040:	7b 01       	movw	r14, r22
    2042:	8b 01       	movw	r16, r22
    2044:	5c 01       	movw	r10, r24
    2046:	8e e6       	ldi	r24, 0x6E	; 110
    2048:	a8 0e       	add	r10, r24
    204a:	b1 1c       	adc	r11, r1
    204c:	f8 01       	movw	r30, r16
    204e:	d1 90       	ld	r13, Z+
    2050:	8f 01       	movw	r16, r30
    2052:	ce 01       	movw	r24, r28
    2054:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <eeprom_read_byte>
    2058:	d8 16       	cp	r13, r24
    205a:	21 f0       	breq	.+8      	; 0x2064 <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.4+0x38>
    205c:	6d 2d       	mov	r22, r13
    205e:	ce 01       	movw	r24, r28
    2060:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <eeprom_write_byte>
    2064:	21 96       	adiw	r28, 0x01	; 1
    2066:	ca 15       	cp	r28, r10
    2068:	db 05       	cpc	r29, r11
    206a:	81 f7       	brne	.-32     	; 0x204c <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.4+0x20>
    206c:	c7 01       	movw	r24, r14
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	1f 91       	pop	r17
    2074:	0f 91       	pop	r16
    2076:	ff 90       	pop	r15
    2078:	ef 90       	pop	r14
    207a:	df 90       	pop	r13
    207c:	bf 90       	pop	r11
    207e:	af 90       	pop	r10
    2080:	08 95       	ret

00002082 <_ZN9red_beryl13getBatteryPctEv>:
    2082:	af 92       	push	r10
    2084:	bf 92       	push	r11
    2086:	cf 92       	push	r12
    2088:	df 92       	push	r13
    208a:	ef 92       	push	r14
    208c:	ff 92       	push	r15
    208e:	0f 93       	push	r16
    2090:	1f 93       	push	r17
    2092:	fc 01       	movw	r30, r24
    2094:	80 85       	ldd	r24, Z+8	; 0x08
    2096:	0e 94 89 4a 	call	0x9512	; 0x9512 <analogRead>
    209a:	bc 01       	movw	r22, r24
    209c:	99 0f       	add	r25, r25
    209e:	88 0b       	sbc	r24, r24
    20a0:	99 0b       	sbc	r25, r25
    20a2:	1f 92       	push	r1
    20a4:	1f 92       	push	r1
    20a6:	1f 92       	push	r1
    20a8:	24 e6       	ldi	r18, 0x64	; 100
    20aa:	2f 93       	push	r18
    20ac:	a1 2c       	mov	r10, r1
    20ae:	b1 2c       	mov	r11, r1
    20b0:	65 01       	movw	r12, r10
    20b2:	ee 24       	eor	r14, r14
    20b4:	ea 94       	dec	r14
    20b6:	13 e0       	ldi	r17, 0x03	; 3
    20b8:	f1 2e       	mov	r15, r17
    20ba:	00 e0       	ldi	r16, 0x00	; 0
    20bc:	10 e0       	ldi	r17, 0x00	; 0
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	a9 01       	movw	r20, r18
    20c4:	0e 94 96 4b 	call	0x972c	; 0x972c <_Z3maplllll>
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	cb 01       	movw	r24, r22
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	ef 90       	pop	r14
    20da:	df 90       	pop	r13
    20dc:	cf 90       	pop	r12
    20de:	bf 90       	pop	r11
    20e0:	af 90       	pop	r10
    20e2:	08 95       	ret

000020e4 <_ZN9red_beryl9menu_sincEv>:
    20e4:	ef 92       	push	r14
    20e6:	ff 92       	push	r15
    20e8:	1f 93       	push	r17
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	ec 01       	movw	r28, r24
    20f0:	7c 01       	movw	r14, r24
    20f2:	85 e1       	ldi	r24, 0x15	; 21
    20f4:	e8 0e       	add	r14, r24
    20f6:	f1 1c       	adc	r15, r1
    20f8:	48 e0       	ldi	r20, 0x08	; 8
    20fa:	50 e0       	ldi	r21, 0x00	; 0
    20fc:	62 e0       	ldi	r22, 0x02	; 2
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	c7 01       	movw	r24, r14
    2102:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2106:	41 e0       	ldi	r20, 0x01	; 1
    2108:	50 e0       	ldi	r21, 0x00	; 0
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	70 e0       	ldi	r23, 0x00	; 0
    210e:	c7 01       	movw	r24, r14
    2110:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    2114:	1c 89       	ldd	r17, Y+20	; 0x14
    2116:	11 23       	and	r17, r17
    2118:	59 f0       	breq	.+22     	; 0x2130 <_ZN9red_beryl9menu_sincEv+0x4c>
    211a:	67 e9       	ldi	r22, 0x97	; 151
    211c:	74 e0       	ldi	r23, 0x04	; 4
    211e:	c7 01       	movw	r24, r14
    2120:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2124:	88 89       	ldd	r24, Y+16	; 0x10
    2126:	88 23       	and	r24, r24
    2128:	79 f0       	breq	.+30     	; 0x2148 <_ZN9red_beryl9menu_sincEv+0x64>
    212a:	1c 8a       	std	Y+20, r1	; 0x14
    212c:	18 8a       	std	Y+16, r1	; 0x10
    212e:	10 c0       	rjmp	.+32     	; 0x2150 <_ZN9red_beryl9menu_sincEv+0x6c>
    2130:	6c ea       	ldi	r22, 0xAC	; 172
    2132:	74 e0       	ldi	r23, 0x04	; 4
    2134:	c7 01       	movw	r24, r14
    2136:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    213a:	88 89       	ldd	r24, Y+16	; 0x10
    213c:	88 23       	and	r24, r24
    213e:	21 f0       	breq	.+8      	; 0x2148 <_ZN9red_beryl9menu_sincEv+0x64>
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	8c 8b       	std	Y+20, r24	; 0x14
    2144:	18 8a       	std	Y+16, r1	; 0x10
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <_ZN9red_beryl9menu_sincEv+0x82>
    2148:	89 89       	ldd	r24, Y+17	; 0x11
    214a:	88 23       	and	r24, r24
    214c:	19 f0       	breq	.+6      	; 0x2154 <_ZN9red_beryl9menu_sincEv+0x70>
    214e:	19 8a       	std	Y+17, r1	; 0x11
    2150:	10 e0       	ldi	r17, 0x00	; 0
    2152:	09 c0       	rjmp	.+18     	; 0x2166 <_ZN9red_beryl9menu_sincEv+0x82>
    2154:	8e 85       	ldd	r24, Y+14	; 0x0e
    2156:	81 11       	cpse	r24, r1
    2158:	1e 86       	std	Y+14, r1	; 0x0e
    215a:	1f 85       	ldd	r17, Y+15	; 0x0f
    215c:	11 23       	and	r17, r17
    215e:	11 f0       	breq	.+4      	; 0x2164 <_ZN9red_beryl9menu_sincEv+0x80>
    2160:	1f 86       	std	Y+15, r1	; 0x0f
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <_ZN9red_beryl9menu_sincEv+0x82>
    2164:	11 e0       	ldi	r17, 0x01	; 1
    2166:	81 2f       	mov	r24, r17
    2168:	df 91       	pop	r29
    216a:	cf 91       	pop	r28
    216c:	1f 91       	pop	r17
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	08 95       	ret

00002174 <_ZN9red_beryl10menu_rangeEv>:
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
    217c:	cf 93       	push	r28
    217e:	df 93       	push	r29
    2180:	ec 01       	movw	r28, r24
    2182:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    2186:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    218a:	82 30       	cpi	r24, 0x02	; 2
    218c:	91 05       	cpc	r25, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <_ZN9red_beryl10menu_rangeEv+0x1e>
    2190:	ce c0       	rjmp	.+412    	; 0x232e <__stack+0x12f>
    2192:	24 f4       	brge	.+8      	; 0x219c <_ZN9red_beryl10menu_rangeEv+0x28>
    2194:	81 30       	cpi	r24, 0x01	; 1
    2196:	91 05       	cpc	r25, r1
    2198:	51 f0       	breq	.+20     	; 0x21ae <_ZN9red_beryl10menu_rangeEv+0x3a>
    219a:	35 c3       	rjmp	.+1642   	; 0x2806 <__stack+0x607>
    219c:	83 30       	cpi	r24, 0x03	; 3
    219e:	91 05       	cpc	r25, r1
    21a0:	09 f4       	brne	.+2      	; 0x21a4 <_ZN9red_beryl10menu_rangeEv+0x30>
    21a2:	a6 c1       	rjmp	.+844    	; 0x24f0 <__stack+0x2f1>
    21a4:	84 30       	cpi	r24, 0x04	; 4
    21a6:	91 05       	cpc	r25, r1
    21a8:	09 f4       	brne	.+2      	; 0x21ac <_ZN9red_beryl10menu_rangeEv+0x38>
    21aa:	9c c2       	rjmp	.+1336   	; 0x26e4 <__stack+0x4e5>
    21ac:	2c c3       	rjmp	.+1624   	; 0x2806 <__stack+0x607>
    21ae:	8e 01       	movw	r16, r28
    21b0:	0b 5e       	subi	r16, 0xEB	; 235
    21b2:	1f 4f       	sbci	r17, 0xFF	; 255
    21b4:	48 e0       	ldi	r20, 0x08	; 8
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	62 e0       	ldi	r22, 0x02	; 2
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	c8 01       	movw	r24, r16
    21be:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    21c2:	61 e0       	ldi	r22, 0x01	; 1
    21c4:	c8 01       	movw	r24, r16
    21c6:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	50 e0       	ldi	r21, 0x00	; 0
    21ce:	60 e0       	ldi	r22, 0x00	; 0
    21d0:	70 e0       	ldi	r23, 0x00	; 0
    21d2:	c8 01       	movw	r24, r16
    21d4:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    21d8:	6e eb       	ldi	r22, 0xBE	; 190
    21da:	74 e0       	ldi	r23, 0x04	; 4
    21dc:	c8 01       	movw	r24, r16
    21de:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    21e2:	7e 01       	movw	r14, r28
    21e4:	8e eb       	ldi	r24, 0xBE	; 190
    21e6:	e8 0e       	add	r14, r24
    21e8:	f1 1c       	adc	r15, r1
    21ea:	c7 01       	movw	r24, r14
    21ec:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    21f0:	01 97       	sbiw	r24, 0x01	; 1
    21f2:	29 f4       	brne	.+10     	; 0x21fe <_ZN9red_beryl10menu_rangeEv+0x8a>
    21f4:	61 ec       	ldi	r22, 0xC1	; 193
    21f6:	74 e0       	ldi	r23, 0x04	; 4
    21f8:	c8 01       	movw	r24, r16
    21fa:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    21fe:	63 ec       	ldi	r22, 0xC3	; 195
    2200:	74 e0       	ldi	r23, 0x04	; 4
    2202:	c8 01       	movw	r24, r16
    2204:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2208:	40 e1       	ldi	r20, 0x10	; 16
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	62 e0       	ldi	r22, 0x02	; 2
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	c8 01       	movw	r24, r16
    2212:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	c8 01       	movw	r24, r16
    221c:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2220:	6e eb       	ldi	r22, 0xBE	; 190
    2222:	74 e0       	ldi	r23, 0x04	; 4
    2224:	c8 01       	movw	r24, r16
    2226:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    222a:	c7 01       	movw	r24, r14
    222c:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    2230:	02 97       	sbiw	r24, 0x02	; 2
    2232:	29 f4       	brne	.+10     	; 0x223e <__stack+0x3f>
    2234:	61 ec       	ldi	r22, 0xC1	; 193
    2236:	74 e0       	ldi	r23, 0x04	; 4
    2238:	c8 01       	movw	r24, r16
    223a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    223e:	6b ec       	ldi	r22, 0xCB	; 203
    2240:	74 e0       	ldi	r23, 0x04	; 4
    2242:	c8 01       	movw	r24, r16
    2244:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2248:	48 e1       	ldi	r20, 0x18	; 24
    224a:	50 e0       	ldi	r21, 0x00	; 0
    224c:	62 e0       	ldi	r22, 0x02	; 2
    224e:	70 e0       	ldi	r23, 0x00	; 0
    2250:	c8 01       	movw	r24, r16
    2252:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2256:	61 e0       	ldi	r22, 0x01	; 1
    2258:	70 e0       	ldi	r23, 0x00	; 0
    225a:	c8 01       	movw	r24, r16
    225c:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2260:	6e eb       	ldi	r22, 0xBE	; 190
    2262:	74 e0       	ldi	r23, 0x04	; 4
    2264:	c8 01       	movw	r24, r16
    2266:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    226a:	c7 01       	movw	r24, r14
    226c:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    2270:	03 97       	sbiw	r24, 0x03	; 3
    2272:	29 f4       	brne	.+10     	; 0x227e <__stack+0x7f>
    2274:	61 ec       	ldi	r22, 0xC1	; 193
    2276:	74 e0       	ldi	r23, 0x04	; 4
    2278:	c8 01       	movw	r24, r16
    227a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    227e:	63 ed       	ldi	r22, 0xD3	; 211
    2280:	74 e0       	ldi	r23, 0x04	; 4
    2282:	c8 01       	movw	r24, r16
    2284:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2288:	8e 85       	ldd	r24, Y+14	; 0x0e
    228a:	88 23       	and	r24, r24
    228c:	51 f0       	breq	.+20     	; 0x22a2 <__stack+0xa3>
    228e:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    2292:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    2296:	01 97       	sbiw	r24, 0x01	; 1
    2298:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    229c:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    22a0:	1e 86       	std	Y+14, r1	; 0x0e
    22a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a4:	88 23       	and	r24, r24
    22a6:	99 f0       	breq	.+38     	; 0x22ce <__stack+0xcf>
    22a8:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    22ac:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    22b0:	01 96       	adiw	r24, 0x01	; 1
    22b2:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    22b6:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    22ba:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    22be:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    22c8:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    22cc:	1f 86       	std	Y+15, r1	; 0x0f
    22ce:	88 89       	ldd	r24, Y+16	; 0x10
    22d0:	88 23       	and	r24, r24
    22d2:	29 f1       	breq	.+74     	; 0x231e <__stack+0x11f>
    22d4:	c7 01       	movw	r24, r14
    22d6:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    22da:	60 91 21 04 	lds	r22, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    22de:	70 91 22 04 	lds	r23, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    22e2:	86 17       	cp	r24, r22
    22e4:	97 07       	cpc	r25, r23
    22e6:	c9 f0       	breq	.+50     	; 0x231a <__stack+0x11b>
    22e8:	c7 01       	movw	r24, r14
    22ea:	0e 94 21 39 	call	0x7242	; 0x7242 <_ZN11red_crystal8setRangeEi>
    22ee:	6b ed       	ldi	r22, 0xDB	; 219
    22f0:	74 e0       	ldi	r23, 0x04	; 4
    22f2:	80 ec       	ldi	r24, 0xC0	; 192
    22f4:	90 e1       	ldi	r25, 0x10	; 16
    22f6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    22fa:	60 91 21 04 	lds	r22, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    22fe:	70 91 22 04 	lds	r23, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    2302:	4a e0       	ldi	r20, 0x0A	; 10
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	80 ec       	ldi	r24, 0xC0	; 192
    2308:	90 e1       	ldi	r25, 0x10	; 16
    230a:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
    230e:	6e e3       	ldi	r22, 0x3E	; 62
    2310:	70 e1       	ldi	r23, 0x10	; 16
    2312:	80 ec       	ldi	r24, 0xC0	; 192
    2314:	90 e1       	ldi	r25, 0x10	; 16
    2316:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    231a:	18 8a       	std	Y+16, r1	; 0x10
    231c:	19 8a       	std	Y+17, r1	; 0x11
    231e:	89 89       	ldd	r24, Y+17	; 0x11
    2320:	81 11       	cpse	r24, r1
    2322:	02 c0       	rjmp	.+4      	; 0x2328 <__stack+0x129>
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	8f c2       	rjmp	.+1310   	; 0x2846 <__stack+0x647>
    2328:	19 8a       	std	Y+17, r1	; 0x11
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	8c c2       	rjmp	.+1304   	; 0x2846 <__stack+0x647>
    232e:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    2332:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    2336:	81 30       	cpi	r24, 0x01	; 1
    2338:	91 05       	cpc	r25, r1
    233a:	09 f0       	breq	.+2      	; 0x233e <__stack+0x13f>
    233c:	6b c0       	rjmp	.+214    	; 0x2414 <__stack+0x215>
    233e:	8e 01       	movw	r16, r28
    2340:	0b 5e       	subi	r16, 0xEB	; 235
    2342:	1f 4f       	sbci	r17, 0xFF	; 255
    2344:	48 e0       	ldi	r20, 0x08	; 8
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	62 e0       	ldi	r22, 0x02	; 2
    234a:	70 e0       	ldi	r23, 0x00	; 0
    234c:	c8 01       	movw	r24, r16
    234e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2352:	61 e0       	ldi	r22, 0x01	; 1
    2354:	c8 01       	movw	r24, r16
    2356:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    235a:	41 e0       	ldi	r20, 0x01	; 1
    235c:	50 e0       	ldi	r21, 0x00	; 0
    235e:	60 e0       	ldi	r22, 0x00	; 0
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	c8 01       	movw	r24, r16
    2364:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    2368:	6e eb       	ldi	r22, 0xBE	; 190
    236a:	74 e0       	ldi	r23, 0x04	; 4
    236c:	c8 01       	movw	r24, r16
    236e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2372:	7e 01       	movw	r14, r28
    2374:	8e eb       	ldi	r24, 0xBE	; 190
    2376:	e8 0e       	add	r14, r24
    2378:	f1 1c       	adc	r15, r1
    237a:	c7 01       	movw	r24, r14
    237c:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    2380:	02 97       	sbiw	r24, 0x02	; 2
    2382:	29 f4       	brne	.+10     	; 0x238e <__stack+0x18f>
    2384:	61 ec       	ldi	r22, 0xC1	; 193
    2386:	74 e0       	ldi	r23, 0x04	; 4
    2388:	c8 01       	movw	r24, r16
    238a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    238e:	6b ec       	ldi	r22, 0xCB	; 203
    2390:	74 e0       	ldi	r23, 0x04	; 4
    2392:	c8 01       	movw	r24, r16
    2394:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2398:	40 e1       	ldi	r20, 0x10	; 16
    239a:	50 e0       	ldi	r21, 0x00	; 0
    239c:	62 e0       	ldi	r22, 0x02	; 2
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	c8 01       	movw	r24, r16
    23a2:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	c8 01       	movw	r24, r16
    23ac:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    23b0:	6e eb       	ldi	r22, 0xBE	; 190
    23b2:	74 e0       	ldi	r23, 0x04	; 4
    23b4:	c8 01       	movw	r24, r16
    23b6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    23ba:	c7 01       	movw	r24, r14
    23bc:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    23c0:	03 97       	sbiw	r24, 0x03	; 3
    23c2:	29 f4       	brne	.+10     	; 0x23ce <__stack+0x1cf>
    23c4:	61 ec       	ldi	r22, 0xC1	; 193
    23c6:	74 e0       	ldi	r23, 0x04	; 4
    23c8:	c8 01       	movw	r24, r16
    23ca:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    23ce:	63 ed       	ldi	r22, 0xD3	; 211
    23d0:	74 e0       	ldi	r23, 0x04	; 4
    23d2:	c8 01       	movw	r24, r16
    23d4:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    23d8:	48 e1       	ldi	r20, 0x18	; 24
    23da:	50 e0       	ldi	r21, 0x00	; 0
    23dc:	62 e0       	ldi	r22, 0x02	; 2
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	c8 01       	movw	r24, r16
    23e2:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    23e6:	61 e0       	ldi	r22, 0x01	; 1
    23e8:	70 e0       	ldi	r23, 0x00	; 0
    23ea:	c8 01       	movw	r24, r16
    23ec:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    23f0:	6e eb       	ldi	r22, 0xBE	; 190
    23f2:	74 e0       	ldi	r23, 0x04	; 4
    23f4:	c8 01       	movw	r24, r16
    23f6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    23fa:	c7 01       	movw	r24, r14
    23fc:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    2400:	04 97       	sbiw	r24, 0x04	; 4
    2402:	29 f4       	brne	.+10     	; 0x240e <__stack+0x20f>
    2404:	61 ec       	ldi	r22, 0xC1	; 193
    2406:	74 e0       	ldi	r23, 0x04	; 4
    2408:	c8 01       	movw	r24, r16
    240a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    240e:	62 ee       	ldi	r22, 0xE2	; 226
    2410:	74 e0       	ldi	r23, 0x04	; 4
    2412:	37 cf       	rjmp	.-402    	; 0x2282 <__stack+0x83>
    2414:	02 97       	sbiw	r24, 0x02	; 2
    2416:	09 f0       	breq	.+2      	; 0x241a <__stack+0x21b>
    2418:	85 cf       	rjmp	.-246    	; 0x2324 <__stack+0x125>
    241a:	8e 01       	movw	r16, r28
    241c:	0b 5e       	subi	r16, 0xEB	; 235
    241e:	1f 4f       	sbci	r17, 0xFF	; 255
    2420:	48 e0       	ldi	r20, 0x08	; 8
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	62 e0       	ldi	r22, 0x02	; 2
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	c8 01       	movw	r24, r16
    242a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    242e:	61 e0       	ldi	r22, 0x01	; 1
    2430:	c8 01       	movw	r24, r16
    2432:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    2436:	61 e0       	ldi	r22, 0x01	; 1
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	c8 01       	movw	r24, r16
    243c:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2440:	6e eb       	ldi	r22, 0xBE	; 190
    2442:	74 e0       	ldi	r23, 0x04	; 4
    2444:	c8 01       	movw	r24, r16
    2446:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    244a:	7e 01       	movw	r14, r28
    244c:	8e eb       	ldi	r24, 0xBE	; 190
    244e:	e8 0e       	add	r14, r24
    2450:	f1 1c       	adc	r15, r1
    2452:	c7 01       	movw	r24, r14
    2454:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	29 f4       	brne	.+10     	; 0x2466 <__stack+0x267>
    245c:	61 ec       	ldi	r22, 0xC1	; 193
    245e:	74 e0       	ldi	r23, 0x04	; 4
    2460:	c8 01       	movw	r24, r16
    2462:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2466:	63 ec       	ldi	r22, 0xC3	; 195
    2468:	74 e0       	ldi	r23, 0x04	; 4
    246a:	c8 01       	movw	r24, r16
    246c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2470:	40 e1       	ldi	r20, 0x10	; 16
    2472:	50 e0       	ldi	r21, 0x00	; 0
    2474:	62 e0       	ldi	r22, 0x02	; 2
    2476:	70 e0       	ldi	r23, 0x00	; 0
    2478:	c8 01       	movw	r24, r16
    247a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    247e:	41 e0       	ldi	r20, 0x01	; 1
    2480:	50 e0       	ldi	r21, 0x00	; 0
    2482:	60 e0       	ldi	r22, 0x00	; 0
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	c8 01       	movw	r24, r16
    2488:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    248c:	6e eb       	ldi	r22, 0xBE	; 190
    248e:	74 e0       	ldi	r23, 0x04	; 4
    2490:	c8 01       	movw	r24, r16
    2492:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2496:	c7 01       	movw	r24, r14
    2498:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    249c:	02 97       	sbiw	r24, 0x02	; 2
    249e:	29 f4       	brne	.+10     	; 0x24aa <__stack+0x2ab>
    24a0:	61 ec       	ldi	r22, 0xC1	; 193
    24a2:	74 e0       	ldi	r23, 0x04	; 4
    24a4:	c8 01       	movw	r24, r16
    24a6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    24aa:	6b ec       	ldi	r22, 0xCB	; 203
    24ac:	74 e0       	ldi	r23, 0x04	; 4
    24ae:	c8 01       	movw	r24, r16
    24b0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    24b4:	48 e1       	ldi	r20, 0x18	; 24
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	62 e0       	ldi	r22, 0x02	; 2
    24ba:	70 e0       	ldi	r23, 0x00	; 0
    24bc:	c8 01       	movw	r24, r16
    24be:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	70 e0       	ldi	r23, 0x00	; 0
    24c6:	c8 01       	movw	r24, r16
    24c8:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    24cc:	6e eb       	ldi	r22, 0xBE	; 190
    24ce:	74 e0       	ldi	r23, 0x04	; 4
    24d0:	c8 01       	movw	r24, r16
    24d2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    24d6:	c7 01       	movw	r24, r14
    24d8:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    24dc:	03 97       	sbiw	r24, 0x03	; 3
    24de:	29 f4       	brne	.+10     	; 0x24ea <__stack+0x2eb>
    24e0:	61 ec       	ldi	r22, 0xC1	; 193
    24e2:	74 e0       	ldi	r23, 0x04	; 4
    24e4:	c8 01       	movw	r24, r16
    24e6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    24ea:	63 ed       	ldi	r22, 0xD3	; 211
    24ec:	74 e0       	ldi	r23, 0x04	; 4
    24ee:	72 c0       	rjmp	.+228    	; 0x25d4 <__stack+0x3d5>
    24f0:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    24f4:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    24f8:	82 30       	cpi	r24, 0x02	; 2
    24fa:	91 05       	cpc	r25, r1
    24fc:	09 f0       	breq	.+2      	; 0x2500 <__stack+0x301>
    24fe:	84 c0       	rjmp	.+264    	; 0x2608 <__stack+0x409>
    2500:	8e 01       	movw	r16, r28
    2502:	0b 5e       	subi	r16, 0xEB	; 235
    2504:	1f 4f       	sbci	r17, 0xFF	; 255
    2506:	48 e0       	ldi	r20, 0x08	; 8
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	c8 01       	movw	r24, r16
    2510:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2514:	61 e0       	ldi	r22, 0x01	; 1
    2516:	c8 01       	movw	r24, r16
    2518:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    251c:	61 e0       	ldi	r22, 0x01	; 1
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	c8 01       	movw	r24, r16
    2522:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2526:	6e eb       	ldi	r22, 0xBE	; 190
    2528:	74 e0       	ldi	r23, 0x04	; 4
    252a:	c8 01       	movw	r24, r16
    252c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2530:	7e 01       	movw	r14, r28
    2532:	8e eb       	ldi	r24, 0xBE	; 190
    2534:	e8 0e       	add	r14, r24
    2536:	f1 1c       	adc	r15, r1
    2538:	c7 01       	movw	r24, r14
    253a:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    253e:	02 97       	sbiw	r24, 0x02	; 2
    2540:	29 f4       	brne	.+10     	; 0x254c <__stack+0x34d>
    2542:	61 ec       	ldi	r22, 0xC1	; 193
    2544:	74 e0       	ldi	r23, 0x04	; 4
    2546:	c8 01       	movw	r24, r16
    2548:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    254c:	6b ec       	ldi	r22, 0xCB	; 203
    254e:	74 e0       	ldi	r23, 0x04	; 4
    2550:	c8 01       	movw	r24, r16
    2552:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2556:	40 e1       	ldi	r20, 0x10	; 16
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	62 e0       	ldi	r22, 0x02	; 2
    255c:	70 e0       	ldi	r23, 0x00	; 0
    255e:	c8 01       	movw	r24, r16
    2560:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2564:	41 e0       	ldi	r20, 0x01	; 1
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	60 e0       	ldi	r22, 0x00	; 0
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	c8 01       	movw	r24, r16
    256e:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    2572:	6e eb       	ldi	r22, 0xBE	; 190
    2574:	74 e0       	ldi	r23, 0x04	; 4
    2576:	c8 01       	movw	r24, r16
    2578:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    257c:	c7 01       	movw	r24, r14
    257e:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    2582:	03 97       	sbiw	r24, 0x03	; 3
    2584:	29 f4       	brne	.+10     	; 0x2590 <__stack+0x391>
    2586:	61 ec       	ldi	r22, 0xC1	; 193
    2588:	74 e0       	ldi	r23, 0x04	; 4
    258a:	c8 01       	movw	r24, r16
    258c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2590:	63 ed       	ldi	r22, 0xD3	; 211
    2592:	74 e0       	ldi	r23, 0x04	; 4
    2594:	c8 01       	movw	r24, r16
    2596:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    259a:	48 e1       	ldi	r20, 0x18	; 24
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	62 e0       	ldi	r22, 0x02	; 2
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	c8 01       	movw	r24, r16
    25a4:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    25a8:	61 e0       	ldi	r22, 0x01	; 1
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	c8 01       	movw	r24, r16
    25ae:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    25b2:	6e eb       	ldi	r22, 0xBE	; 190
    25b4:	74 e0       	ldi	r23, 0x04	; 4
    25b6:	c8 01       	movw	r24, r16
    25b8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    25bc:	c7 01       	movw	r24, r14
    25be:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    25c2:	04 97       	sbiw	r24, 0x04	; 4
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <__stack+0x3d1>
    25c6:	61 ec       	ldi	r22, 0xC1	; 193
    25c8:	74 e0       	ldi	r23, 0x04	; 4
    25ca:	c8 01       	movw	r24, r16
    25cc:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    25d0:	62 ee       	ldi	r22, 0xE2	; 226
    25d2:	74 e0       	ldi	r23, 0x04	; 4
    25d4:	c8 01       	movw	r24, r16
    25d6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    25da:	8e 85       	ldd	r24, Y+14	; 0x0e
    25dc:	88 23       	and	r24, r24
    25de:	09 f4       	brne	.+2      	; 0x25e2 <__stack+0x3e3>
    25e0:	60 ce       	rjmp	.-832    	; 0x22a2 <__stack+0xa3>
    25e2:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    25e6:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    25f0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    25f4:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    25f8:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    2602:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    2606:	4c ce       	rjmp	.-872    	; 0x22a0 <__stack+0xa1>
    2608:	03 97       	sbiw	r24, 0x03	; 3
    260a:	09 f0       	breq	.+2      	; 0x260e <__stack+0x40f>
    260c:	8b ce       	rjmp	.-746    	; 0x2324 <__stack+0x125>
    260e:	8e 01       	movw	r16, r28
    2610:	0b 5e       	subi	r16, 0xEB	; 235
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	48 e0       	ldi	r20, 0x08	; 8
    2616:	50 e0       	ldi	r21, 0x00	; 0
    2618:	62 e0       	ldi	r22, 0x02	; 2
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	c8 01       	movw	r24, r16
    261e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2622:	61 e0       	ldi	r22, 0x01	; 1
    2624:	c8 01       	movw	r24, r16
    2626:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    262a:	61 e0       	ldi	r22, 0x01	; 1
    262c:	70 e0       	ldi	r23, 0x00	; 0
    262e:	c8 01       	movw	r24, r16
    2630:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2634:	6e eb       	ldi	r22, 0xBE	; 190
    2636:	74 e0       	ldi	r23, 0x04	; 4
    2638:	c8 01       	movw	r24, r16
    263a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    263e:	7e 01       	movw	r14, r28
    2640:	8e eb       	ldi	r24, 0xBE	; 190
    2642:	e8 0e       	add	r14, r24
    2644:	f1 1c       	adc	r15, r1
    2646:	c7 01       	movw	r24, r14
    2648:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	29 f4       	brne	.+10     	; 0x265a <__stack+0x45b>
    2650:	61 ec       	ldi	r22, 0xC1	; 193
    2652:	74 e0       	ldi	r23, 0x04	; 4
    2654:	c8 01       	movw	r24, r16
    2656:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    265a:	63 ec       	ldi	r22, 0xC3	; 195
    265c:	74 e0       	ldi	r23, 0x04	; 4
    265e:	c8 01       	movw	r24, r16
    2660:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2664:	40 e1       	ldi	r20, 0x10	; 16
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	62 e0       	ldi	r22, 0x02	; 2
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	c8 01       	movw	r24, r16
    266e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	70 e0       	ldi	r23, 0x00	; 0
    2676:	c8 01       	movw	r24, r16
    2678:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    267c:	6e eb       	ldi	r22, 0xBE	; 190
    267e:	74 e0       	ldi	r23, 0x04	; 4
    2680:	c8 01       	movw	r24, r16
    2682:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2686:	c7 01       	movw	r24, r14
    2688:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    268c:	02 97       	sbiw	r24, 0x02	; 2
    268e:	29 f4       	brne	.+10     	; 0x269a <__stack+0x49b>
    2690:	61 ec       	ldi	r22, 0xC1	; 193
    2692:	74 e0       	ldi	r23, 0x04	; 4
    2694:	c8 01       	movw	r24, r16
    2696:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    269a:	6b ec       	ldi	r22, 0xCB	; 203
    269c:	74 e0       	ldi	r23, 0x04	; 4
    269e:	c8 01       	movw	r24, r16
    26a0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    26a4:	48 e1       	ldi	r20, 0x18	; 24
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	62 e0       	ldi	r22, 0x02	; 2
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	c8 01       	movw	r24, r16
    26ae:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    26b2:	41 e0       	ldi	r20, 0x01	; 1
    26b4:	50 e0       	ldi	r21, 0x00	; 0
    26b6:	60 e0       	ldi	r22, 0x00	; 0
    26b8:	70 e0       	ldi	r23, 0x00	; 0
    26ba:	c8 01       	movw	r24, r16
    26bc:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    26c0:	6e eb       	ldi	r22, 0xBE	; 190
    26c2:	74 e0       	ldi	r23, 0x04	; 4
    26c4:	c8 01       	movw	r24, r16
    26c6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    26ca:	c7 01       	movw	r24, r14
    26cc:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    26d0:	03 97       	sbiw	r24, 0x03	; 3
    26d2:	29 f4       	brne	.+10     	; 0x26de <__stack+0x4df>
    26d4:	61 ec       	ldi	r22, 0xC1	; 193
    26d6:	74 e0       	ldi	r23, 0x04	; 4
    26d8:	c8 01       	movw	r24, r16
    26da:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    26de:	63 ed       	ldi	r22, 0xD3	; 211
    26e0:	74 e0       	ldi	r23, 0x04	; 4
    26e2:	6a c0       	rjmp	.+212    	; 0x27b8 <__stack+0x5b9>
    26e4:	8e 01       	movw	r16, r28
    26e6:	0b 5e       	subi	r16, 0xEB	; 235
    26e8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ea:	48 e0       	ldi	r20, 0x08	; 8
    26ec:	50 e0       	ldi	r21, 0x00	; 0
    26ee:	62 e0       	ldi	r22, 0x02	; 2
    26f0:	70 e0       	ldi	r23, 0x00	; 0
    26f2:	c8 01       	movw	r24, r16
    26f4:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    26f8:	61 e0       	ldi	r22, 0x01	; 1
    26fa:	c8 01       	movw	r24, r16
    26fc:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	c8 01       	movw	r24, r16
    2706:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    270a:	6e eb       	ldi	r22, 0xBE	; 190
    270c:	74 e0       	ldi	r23, 0x04	; 4
    270e:	c8 01       	movw	r24, r16
    2710:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2714:	7e 01       	movw	r14, r28
    2716:	8e eb       	ldi	r24, 0xBE	; 190
    2718:	e8 0e       	add	r14, r24
    271a:	f1 1c       	adc	r15, r1
    271c:	c7 01       	movw	r24, r14
    271e:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    2722:	02 97       	sbiw	r24, 0x02	; 2
    2724:	29 f4       	brne	.+10     	; 0x2730 <__stack+0x531>
    2726:	61 ec       	ldi	r22, 0xC1	; 193
    2728:	74 e0       	ldi	r23, 0x04	; 4
    272a:	c8 01       	movw	r24, r16
    272c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2730:	6b ec       	ldi	r22, 0xCB	; 203
    2732:	74 e0       	ldi	r23, 0x04	; 4
    2734:	c8 01       	movw	r24, r16
    2736:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    273a:	40 e1       	ldi	r20, 0x10	; 16
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	62 e0       	ldi	r22, 0x02	; 2
    2740:	70 e0       	ldi	r23, 0x00	; 0
    2742:	c8 01       	movw	r24, r16
    2744:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2748:	61 e0       	ldi	r22, 0x01	; 1
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	c8 01       	movw	r24, r16
    274e:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2752:	6e eb       	ldi	r22, 0xBE	; 190
    2754:	74 e0       	ldi	r23, 0x04	; 4
    2756:	c8 01       	movw	r24, r16
    2758:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    275c:	c7 01       	movw	r24, r14
    275e:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    2762:	03 97       	sbiw	r24, 0x03	; 3
    2764:	29 f4       	brne	.+10     	; 0x2770 <__stack+0x571>
    2766:	61 ec       	ldi	r22, 0xC1	; 193
    2768:	74 e0       	ldi	r23, 0x04	; 4
    276a:	c8 01       	movw	r24, r16
    276c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2770:	63 ed       	ldi	r22, 0xD3	; 211
    2772:	74 e0       	ldi	r23, 0x04	; 4
    2774:	c8 01       	movw	r24, r16
    2776:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    277a:	48 e1       	ldi	r20, 0x18	; 24
    277c:	50 e0       	ldi	r21, 0x00	; 0
    277e:	62 e0       	ldi	r22, 0x02	; 2
    2780:	70 e0       	ldi	r23, 0x00	; 0
    2782:	c8 01       	movw	r24, r16
    2784:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2788:	41 e0       	ldi	r20, 0x01	; 1
    278a:	50 e0       	ldi	r21, 0x00	; 0
    278c:	60 e0       	ldi	r22, 0x00	; 0
    278e:	70 e0       	ldi	r23, 0x00	; 0
    2790:	c8 01       	movw	r24, r16
    2792:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    2796:	6e eb       	ldi	r22, 0xBE	; 190
    2798:	74 e0       	ldi	r23, 0x04	; 4
    279a:	c8 01       	movw	r24, r16
    279c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    27a0:	c7 01       	movw	r24, r14
    27a2:	0e 94 30 39 	call	0x7260	; 0x7260 <_ZN11red_crystal8getRangeEv>
    27a6:	04 97       	sbiw	r24, 0x04	; 4
    27a8:	29 f4       	brne	.+10     	; 0x27b4 <__stack+0x5b5>
    27aa:	61 ec       	ldi	r22, 0xC1	; 193
    27ac:	74 e0       	ldi	r23, 0x04	; 4
    27ae:	c8 01       	movw	r24, r16
    27b0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    27b4:	62 ee       	ldi	r22, 0xE2	; 226
    27b6:	74 e0       	ldi	r23, 0x04	; 4
    27b8:	c8 01       	movw	r24, r16
    27ba:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    27be:	8e 85       	ldd	r24, Y+14	; 0x0e
    27c0:	88 23       	and	r24, r24
    27c2:	99 f0       	breq	.+38     	; 0x27ea <__stack+0x5eb>
    27c4:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    27c8:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    27d2:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    27d6:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    27da:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    27e4:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    27e8:	1e 86       	std	Y+14, r1	; 0x0e
    27ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ec:	88 23       	and	r24, r24
    27ee:	09 f4       	brne	.+2      	; 0x27f2 <__stack+0x5f3>
    27f0:	6e cd       	rjmp	.-1316   	; 0x22ce <__stack+0xcf>
    27f2:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    27f6:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    27fa:	01 96       	adiw	r24, 0x01	; 1
    27fc:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    2800:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    2804:	63 cd       	rjmp	.-1338   	; 0x22cc <__stack+0xcd>
    2806:	18 16       	cp	r1, r24
    2808:	19 06       	cpc	r1, r25
    280a:	64 f0       	brlt	.+24     	; 0x2824 <__stack+0x625>
    280c:	84 e0       	ldi	r24, 0x04	; 4
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    2814:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    2818:	83 e0       	ldi	r24, 0x03	; 3
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    2820:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    2824:	80 91 21 04 	lds	r24, 0x0421	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    2828:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    282c:	05 97       	sbiw	r24, 0x05	; 5
    282e:	0c f4       	brge	.+2      	; 0x2832 <__stack+0x633>
    2830:	79 cd       	rjmp	.-1294   	; 0x2324 <__stack+0x125>
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <_ZZN9red_beryl10menu_rangeEvE6choice+0x1>
    283a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <_ZZN9red_beryl10menu_rangeEvE6choice>
    283e:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <_ZZN9red_beryl10menu_rangeEvE6select+0x1>
    2842:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <_ZZN9red_beryl10menu_rangeEvE6select>
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	08 95       	ret

00002854 <_ZN9red_beryl10menu_pointEv>:
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	ec 01       	movw	r28, r24
    285e:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    2862:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	91 05       	cpc	r25, r1
    286a:	29 f0       	breq	.+10     	; 0x2876 <_ZN9red_beryl10menu_pointEv+0x22>
    286c:	82 30       	cpi	r24, 0x02	; 2
    286e:	91 05       	cpc	r25, r1
    2870:	09 f4       	brne	.+2      	; 0x2874 <_ZN9red_beryl10menu_pointEv+0x20>
    2872:	73 c0       	rjmp	.+230    	; 0x295a <_ZN9red_beryl10menu_pointEv+0x106>
    2874:	a2 c0       	rjmp	.+324    	; 0x29ba <_ZN9red_beryl10menu_pointEv+0x166>
    2876:	8e 01       	movw	r16, r28
    2878:	0b 5e       	subi	r16, 0xEB	; 235
    287a:	1f 4f       	sbci	r17, 0xFF	; 255
    287c:	48 e0       	ldi	r20, 0x08	; 8
    287e:	50 e0       	ldi	r21, 0x00	; 0
    2880:	62 e0       	ldi	r22, 0x02	; 2
    2882:	70 e0       	ldi	r23, 0x00	; 0
    2884:	c8 01       	movw	r24, r16
    2886:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    288a:	61 e0       	ldi	r22, 0x01	; 1
    288c:	c8 01       	movw	r24, r16
    288e:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	60 e0       	ldi	r22, 0x00	; 0
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	c8 01       	movw	r24, r16
    289c:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    28a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    28a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	29 f4       	brne	.+10     	; 0x28b2 <_ZN9red_beryl10menu_pointEv+0x5e>
    28a8:	6a ee       	ldi	r22, 0xEA	; 234
    28aa:	74 e0       	ldi	r23, 0x04	; 4
    28ac:	c8 01       	movw	r24, r16
    28ae:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    28b2:	6d ee       	ldi	r22, 0xED	; 237
    28b4:	74 e0       	ldi	r23, 0x04	; 4
    28b6:	c8 01       	movw	r24, r16
    28b8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    28bc:	40 e1       	ldi	r20, 0x10	; 16
    28be:	50 e0       	ldi	r21, 0x00	; 0
    28c0:	62 e0       	ldi	r22, 0x02	; 2
    28c2:	70 e0       	ldi	r23, 0x00	; 0
    28c4:	c8 01       	movw	r24, r16
    28c6:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	c8 01       	movw	r24, r16
    28d0:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    28d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    28d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    28d8:	02 97       	sbiw	r24, 0x02	; 2
    28da:	29 f4       	brne	.+10     	; 0x28e6 <_ZN9red_beryl10menu_pointEv+0x92>
    28dc:	6a ee       	ldi	r22, 0xEA	; 234
    28de:	74 e0       	ldi	r23, 0x04	; 4
    28e0:	c8 01       	movw	r24, r16
    28e2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    28e6:	6b ef       	ldi	r22, 0xFB	; 251
    28e8:	74 e0       	ldi	r23, 0x04	; 4
    28ea:	c8 01       	movw	r24, r16
    28ec:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    28f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    28f2:	88 23       	and	r24, r24
    28f4:	51 f0       	breq	.+20     	; 0x290a <_ZN9red_beryl10menu_pointEv+0xb6>
    28f6:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    28fa:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    2904:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    2908:	1e 86       	std	Y+14, r1	; 0x0e
    290a:	8f 85       	ldd	r24, Y+15	; 0x0f
    290c:	88 23       	and	r24, r24
    290e:	51 f0       	breq	.+20     	; 0x2924 <_ZN9red_beryl10menu_pointEv+0xd0>
    2910:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    2914:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    291e:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    2922:	1f 86       	std	Y+15, r1	; 0x0f
    2924:	88 89       	ldd	r24, Y+16	; 0x10
    2926:	88 23       	and	r24, r24
    2928:	81 f0       	breq	.+32     	; 0x294a <_ZN9red_beryl10menu_pointEv+0xf6>
    292a:	60 91 1d 04 	lds	r22, 0x041D	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    292e:	70 91 1e 04 	lds	r23, 0x041E	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    2932:	8c 85       	ldd	r24, Y+12	; 0x0c
    2934:	9d 85       	ldd	r25, Y+13	; 0x0d
    2936:	86 17       	cp	r24, r22
    2938:	97 07       	cpc	r25, r23
    293a:	29 f0       	breq	.+10     	; 0x2946 <_ZN9red_beryl10menu_pointEv+0xf2>
    293c:	7d 87       	std	Y+13, r23	; 0x0d
    293e:	6c 87       	std	Y+12, r22	; 0x0c
    2940:	8e ef       	ldi	r24, 0xFE	; 254
    2942:	9f e0       	ldi	r25, 0x0F	; 15
    2944:	4b db       	rcall	.-2410   	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
    2946:	18 8a       	std	Y+16, r1	; 0x10
    2948:	19 8a       	std	Y+17, r1	; 0x11
    294a:	89 89       	ldd	r24, Y+17	; 0x11
    294c:	81 11       	cpse	r24, r1
    294e:	02 c0       	rjmp	.+4      	; 0x2954 <_ZN9red_beryl10menu_pointEv+0x100>
    2950:	81 e0       	ldi	r24, 0x01	; 1
    2952:	49 c0       	rjmp	.+146    	; 0x29e6 <_ZN9red_beryl10menu_pointEv+0x192>
    2954:	19 8a       	std	Y+17, r1	; 0x11
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	46 c0       	rjmp	.+140    	; 0x29e6 <_ZN9red_beryl10menu_pointEv+0x192>
    295a:	8e 01       	movw	r16, r28
    295c:	0b 5e       	subi	r16, 0xEB	; 235
    295e:	1f 4f       	sbci	r17, 0xFF	; 255
    2960:	48 e0       	ldi	r20, 0x08	; 8
    2962:	50 e0       	ldi	r21, 0x00	; 0
    2964:	62 e0       	ldi	r22, 0x02	; 2
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	c8 01       	movw	r24, r16
    296a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    296e:	61 e0       	ldi	r22, 0x01	; 1
    2970:	c8 01       	movw	r24, r16
    2972:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    2976:	61 e0       	ldi	r22, 0x01	; 1
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	c8 01       	movw	r24, r16
    297c:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2980:	8c 85       	ldd	r24, Y+12	; 0x0c
    2982:	9d 85       	ldd	r25, Y+13	; 0x0d
    2984:	01 97       	sbiw	r24, 0x01	; 1
    2986:	29 f4       	brne	.+10     	; 0x2992 <_ZN9red_beryl10menu_pointEv+0x13e>
    2988:	6a ee       	ldi	r22, 0xEA	; 234
    298a:	74 e0       	ldi	r23, 0x04	; 4
    298c:	c8 01       	movw	r24, r16
    298e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2992:	6d ee       	ldi	r22, 0xED	; 237
    2994:	74 e0       	ldi	r23, 0x04	; 4
    2996:	c8 01       	movw	r24, r16
    2998:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    299c:	40 e1       	ldi	r20, 0x10	; 16
    299e:	50 e0       	ldi	r21, 0x00	; 0
    29a0:	62 e0       	ldi	r22, 0x02	; 2
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	c8 01       	movw	r24, r16
    29a6:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    29aa:	41 e0       	ldi	r20, 0x01	; 1
    29ac:	50 e0       	ldi	r21, 0x00	; 0
    29ae:	60 e0       	ldi	r22, 0x00	; 0
    29b0:	70 e0       	ldi	r23, 0x00	; 0
    29b2:	c8 01       	movw	r24, r16
    29b4:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    29b8:	8d cf       	rjmp	.-230    	; 0x28d4 <_ZN9red_beryl10menu_pointEv+0x80>
    29ba:	18 16       	cp	r1, r24
    29bc:	19 06       	cpc	r1, r25
    29be:	34 f0       	brlt	.+12     	; 0x29cc <_ZN9red_beryl10menu_pointEv+0x178>
    29c0:	82 e0       	ldi	r24, 0x02	; 2
    29c2:	90 e0       	ldi	r25, 0x00	; 0
    29c4:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    29c8:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    29cc:	80 91 1d 04 	lds	r24, 0x041D	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    29d0:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    29d4:	03 97       	sbiw	r24, 0x03	; 3
    29d6:	0c f4       	brge	.+2      	; 0x29da <_ZN9red_beryl10menu_pointEv+0x186>
    29d8:	bb cf       	rjmp	.-138    	; 0x2950 <_ZN9red_beryl10menu_pointEv+0xfc>
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <_ZZN9red_beryl10menu_pointEvE6choice+0x1>
    29e2:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <_ZZN9red_beryl10menu_pointEvE6choice>
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	08 95       	ret

000029f0 <_ZN9red_beryl10menu_avisoEv>:
    29f0:	0f 93       	push	r16
    29f2:	1f 93       	push	r17
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	ec 01       	movw	r28, r24
    29fa:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    29fe:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2a02:	82 30       	cpi	r24, 0x02	; 2
    2a04:	91 05       	cpc	r25, r1
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <_ZN9red_beryl10menu_avisoEv+0x1a>
    2a08:	94 c0       	rjmp	.+296    	; 0x2b32 <_ZN9red_beryl10menu_avisoEv+0x142>
    2a0a:	83 30       	cpi	r24, 0x03	; 3
    2a0c:	91 05       	cpc	r25, r1
    2a0e:	09 f4       	brne	.+2      	; 0x2a12 <_ZN9red_beryl10menu_avisoEv+0x22>
    2a10:	c0 c0       	rjmp	.+384    	; 0x2b92 <_ZN9red_beryl10menu_avisoEv+0x1a2>
    2a12:	81 30       	cpi	r24, 0x01	; 1
    2a14:	91 05       	cpc	r25, r1
    2a16:	09 f0       	breq	.+2      	; 0x2a1a <_ZN9red_beryl10menu_avisoEv+0x2a>
    2a18:	06 c1       	rjmp	.+524    	; 0x2c26 <_ZN9red_beryl10menu_avisoEv+0x236>
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	0b 5e       	subi	r16, 0xEB	; 235
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	48 e0       	ldi	r20, 0x08	; 8
    2a22:	50 e0       	ldi	r21, 0x00	; 0
    2a24:	62 e0       	ldi	r22, 0x02	; 2
    2a26:	70 e0       	ldi	r23, 0x00	; 0
    2a28:	c8 01       	movw	r24, r16
    2a2a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2a2e:	61 e0       	ldi	r22, 0x01	; 1
    2a30:	c8 01       	movw	r24, r16
    2a32:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    2a36:	41 e0       	ldi	r20, 0x01	; 1
    2a38:	50 e0       	ldi	r21, 0x00	; 0
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	c8 01       	movw	r24, r16
    2a40:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    2a44:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a46:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	29 f4       	brne	.+10     	; 0x2a56 <_ZN9red_beryl10menu_avisoEv+0x66>
    2a4c:	6a ee       	ldi	r22, 0xEA	; 234
    2a4e:	74 e0       	ldi	r23, 0x04	; 4
    2a50:	c8 01       	movw	r24, r16
    2a52:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2a56:	69 e0       	ldi	r22, 0x09	; 9
    2a58:	75 e0       	ldi	r23, 0x05	; 5
    2a5a:	c8 01       	movw	r24, r16
    2a5c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2a60:	40 e1       	ldi	r20, 0x10	; 16
    2a62:	50 e0       	ldi	r21, 0x00	; 0
    2a64:	62 e0       	ldi	r22, 0x02	; 2
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	c8 01       	movw	r24, r16
    2a6a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2a6e:	61 e0       	ldi	r22, 0x01	; 1
    2a70:	70 e0       	ldi	r23, 0x00	; 0
    2a72:	c8 01       	movw	r24, r16
    2a74:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2a78:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a7c:	02 97       	sbiw	r24, 0x02	; 2
    2a7e:	29 f4       	brne	.+10     	; 0x2a8a <_ZN9red_beryl10menu_avisoEv+0x9a>
    2a80:	6a ee       	ldi	r22, 0xEA	; 234
    2a82:	74 e0       	ldi	r23, 0x04	; 4
    2a84:	c8 01       	movw	r24, r16
    2a86:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2a8a:	68 e1       	ldi	r22, 0x18	; 24
    2a8c:	75 e0       	ldi	r23, 0x05	; 5
    2a8e:	c8 01       	movw	r24, r16
    2a90:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2a94:	48 e1       	ldi	r20, 0x18	; 24
    2a96:	50 e0       	ldi	r21, 0x00	; 0
    2a98:	62 e0       	ldi	r22, 0x02	; 2
    2a9a:	70 e0       	ldi	r23, 0x00	; 0
    2a9c:	c8 01       	movw	r24, r16
    2a9e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2aa2:	61 e0       	ldi	r22, 0x01	; 1
    2aa4:	70 e0       	ldi	r23, 0x00	; 0
    2aa6:	c8 01       	movw	r24, r16
    2aa8:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2aac:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aae:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ab0:	03 97       	sbiw	r24, 0x03	; 3
    2ab2:	29 f4       	brne	.+10     	; 0x2abe <_ZN9red_beryl10menu_avisoEv+0xce>
    2ab4:	6a ee       	ldi	r22, 0xEA	; 234
    2ab6:	74 e0       	ldi	r23, 0x04	; 4
    2ab8:	c8 01       	movw	r24, r16
    2aba:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2abe:	67 e2       	ldi	r22, 0x27	; 39
    2ac0:	75 e0       	ldi	r23, 0x05	; 5
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2ac8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2aca:	88 23       	and	r24, r24
    2acc:	51 f0       	breq	.+20     	; 0x2ae2 <_ZN9red_beryl10menu_avisoEv+0xf2>
    2ace:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    2ad2:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2adc:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    2ae0:	1e 86       	std	Y+14, r1	; 0x0e
    2ae2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ae4:	88 23       	and	r24, r24
    2ae6:	51 f0       	breq	.+20     	; 0x2afc <_ZN9red_beryl10menu_avisoEv+0x10c>
    2ae8:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    2aec:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2af0:	01 96       	adiw	r24, 0x01	; 1
    2af2:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2af6:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    2afa:	1f 86       	std	Y+15, r1	; 0x0f
    2afc:	88 89       	ldd	r24, Y+16	; 0x10
    2afe:	88 23       	and	r24, r24
    2b00:	81 f0       	breq	.+32     	; 0x2b22 <_ZN9red_beryl10menu_avisoEv+0x132>
    2b02:	60 91 1b 04 	lds	r22, 0x041B	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    2b06:	70 91 1c 04 	lds	r23, 0x041C	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2b0a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b0c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b0e:	86 17       	cp	r24, r22
    2b10:	97 07       	cpc	r25, r23
    2b12:	29 f0       	breq	.+10     	; 0x2b1e <_ZN9red_beryl10menu_avisoEv+0x12e>
    2b14:	7b 87       	std	Y+11, r23	; 0x0b
    2b16:	6a 87       	std	Y+10, r22	; 0x0a
    2b18:	8f ef       	ldi	r24, 0xFF	; 255
    2b1a:	9f e0       	ldi	r25, 0x0F	; 15
    2b1c:	5f da       	rcall	.-2882   	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
    2b1e:	18 8a       	std	Y+16, r1	; 0x10
    2b20:	19 8a       	std	Y+17, r1	; 0x11
    2b22:	89 89       	ldd	r24, Y+17	; 0x11
    2b24:	81 11       	cpse	r24, r1
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <_ZN9red_beryl10menu_avisoEv+0x13c>
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	93 c0       	rjmp	.+294    	; 0x2c52 <_ZN9red_beryl10menu_avisoEv+0x262>
    2b2c:	19 8a       	std	Y+17, r1	; 0x11
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	90 c0       	rjmp	.+288    	; 0x2c52 <_ZN9red_beryl10menu_avisoEv+0x262>
    2b32:	8e 01       	movw	r16, r28
    2b34:	0b 5e       	subi	r16, 0xEB	; 235
    2b36:	1f 4f       	sbci	r17, 0xFF	; 255
    2b38:	48 e0       	ldi	r20, 0x08	; 8
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	62 e0       	ldi	r22, 0x02	; 2
    2b3e:	70 e0       	ldi	r23, 0x00	; 0
    2b40:	c8 01       	movw	r24, r16
    2b42:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	c8 01       	movw	r24, r16
    2b4a:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    2b4e:	61 e0       	ldi	r22, 0x01	; 1
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	c8 01       	movw	r24, r16
    2b54:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2b58:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b5c:	01 97       	sbiw	r24, 0x01	; 1
    2b5e:	29 f4       	brne	.+10     	; 0x2b6a <_ZN9red_beryl10menu_avisoEv+0x17a>
    2b60:	6a ee       	ldi	r22, 0xEA	; 234
    2b62:	74 e0       	ldi	r23, 0x04	; 4
    2b64:	c8 01       	movw	r24, r16
    2b66:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2b6a:	69 e0       	ldi	r22, 0x09	; 9
    2b6c:	75 e0       	ldi	r23, 0x05	; 5
    2b6e:	c8 01       	movw	r24, r16
    2b70:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2b74:	40 e1       	ldi	r20, 0x10	; 16
    2b76:	50 e0       	ldi	r21, 0x00	; 0
    2b78:	62 e0       	ldi	r22, 0x02	; 2
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	c8 01       	movw	r24, r16
    2b7e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2b82:	41 e0       	ldi	r20, 0x01	; 1
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	60 e0       	ldi	r22, 0x00	; 0
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	c8 01       	movw	r24, r16
    2b8c:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    2b90:	73 cf       	rjmp	.-282    	; 0x2a78 <_ZN9red_beryl10menu_avisoEv+0x88>
    2b92:	8e 01       	movw	r16, r28
    2b94:	0b 5e       	subi	r16, 0xEB	; 235
    2b96:	1f 4f       	sbci	r17, 0xFF	; 255
    2b98:	48 e0       	ldi	r20, 0x08	; 8
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	62 e0       	ldi	r22, 0x02	; 2
    2b9e:	70 e0       	ldi	r23, 0x00	; 0
    2ba0:	c8 01       	movw	r24, r16
    2ba2:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2ba6:	61 e0       	ldi	r22, 0x01	; 1
    2ba8:	c8 01       	movw	r24, r16
    2baa:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    2bae:	61 e0       	ldi	r22, 0x01	; 1
    2bb0:	70 e0       	ldi	r23, 0x00	; 0
    2bb2:	c8 01       	movw	r24, r16
    2bb4:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2bb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	29 f4       	brne	.+10     	; 0x2bca <_ZN9red_beryl10menu_avisoEv+0x1da>
    2bc0:	6a ee       	ldi	r22, 0xEA	; 234
    2bc2:	74 e0       	ldi	r23, 0x04	; 4
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2bca:	69 e0       	ldi	r22, 0x09	; 9
    2bcc:	75 e0       	ldi	r23, 0x05	; 5
    2bce:	c8 01       	movw	r24, r16
    2bd0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2bd4:	40 e1       	ldi	r20, 0x10	; 16
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	62 e0       	ldi	r22, 0x02	; 2
    2bda:	70 e0       	ldi	r23, 0x00	; 0
    2bdc:	c8 01       	movw	r24, r16
    2bde:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2be2:	61 e0       	ldi	r22, 0x01	; 1
    2be4:	70 e0       	ldi	r23, 0x00	; 0
    2be6:	c8 01       	movw	r24, r16
    2be8:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2bec:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bee:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bf0:	02 97       	sbiw	r24, 0x02	; 2
    2bf2:	29 f4       	brne	.+10     	; 0x2bfe <_ZN9red_beryl10menu_avisoEv+0x20e>
    2bf4:	6a ee       	ldi	r22, 0xEA	; 234
    2bf6:	74 e0       	ldi	r23, 0x04	; 4
    2bf8:	c8 01       	movw	r24, r16
    2bfa:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2bfe:	68 e1       	ldi	r22, 0x18	; 24
    2c00:	75 e0       	ldi	r23, 0x05	; 5
    2c02:	c8 01       	movw	r24, r16
    2c04:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2c08:	48 e1       	ldi	r20, 0x18	; 24
    2c0a:	50 e0       	ldi	r21, 0x00	; 0
    2c0c:	62 e0       	ldi	r22, 0x02	; 2
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	c8 01       	movw	r24, r16
    2c12:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2c16:	41 e0       	ldi	r20, 0x01	; 1
    2c18:	50 e0       	ldi	r21, 0x00	; 0
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	c8 01       	movw	r24, r16
    2c20:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    2c24:	43 cf       	rjmp	.-378    	; 0x2aac <_ZN9red_beryl10menu_avisoEv+0xbc>
    2c26:	18 16       	cp	r1, r24
    2c28:	19 06       	cpc	r1, r25
    2c2a:	34 f0       	brlt	.+12     	; 0x2c38 <_ZN9red_beryl10menu_avisoEv+0x248>
    2c2c:	83 e0       	ldi	r24, 0x03	; 3
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2c34:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    2c38:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    2c3c:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2c40:	04 97       	sbiw	r24, 0x04	; 4
    2c42:	0c f4       	brge	.+2      	; 0x2c46 <_ZN9red_beryl10menu_avisoEv+0x256>
    2c44:	71 cf       	rjmp	.-286    	; 0x2b28 <_ZN9red_beryl10menu_avisoEv+0x138>
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <_ZZN9red_beryl10menu_avisoEvE6choice+0x1>
    2c4e:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <_ZZN9red_beryl10menu_avisoEvE6choice>
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	1f 91       	pop	r17
    2c58:	0f 91       	pop	r16
    2c5a:	08 95       	ret

00002c5c <_ZN9red_beryl14menu_historicoEv>:
    2c5c:	7f 92       	push	r7
    2c5e:	8f 92       	push	r8
    2c60:	9f 92       	push	r9
    2c62:	af 92       	push	r10
    2c64:	bf 92       	push	r11
    2c66:	cf 92       	push	r12
    2c68:	df 92       	push	r13
    2c6a:	ef 92       	push	r14
    2c6c:	ff 92       	push	r15
    2c6e:	0f 93       	push	r16
    2c70:	1f 93       	push	r17
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	ec 01       	movw	r28, r24
    2c78:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    2c7c:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    2c80:	81 30       	cpi	r24, 0x01	; 1
    2c82:	91 05       	cpc	r25, r1
    2c84:	29 f0       	breq	.+10     	; 0x2c90 <_ZN9red_beryl14menu_historicoEv+0x34>
    2c86:	82 30       	cpi	r24, 0x02	; 2
    2c88:	91 05       	cpc	r25, r1
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <_ZN9red_beryl14menu_historicoEv+0x32>
    2c8c:	d2 c0       	rjmp	.+420    	; 0x2e32 <_ZN9red_beryl14menu_historicoEv+0x1d6>
    2c8e:	30 c2       	rjmp	.+1120   	; 0x30f0 <_ZN9red_beryl14menu_historicoEv+0x494>
    2c90:	80 91 3c 13 	lds	r24, 0x133C	; 0x80133c <_ZZN9red_beryl14menu_historicoEvE5clear>
    2c94:	8e 01       	movw	r16, r28
    2c96:	0b 5e       	subi	r16, 0xEB	; 235
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	88 23       	and	r24, r24
    2c9c:	09 f4       	brne	.+2      	; 0x2ca0 <_ZN9red_beryl14menu_historicoEv+0x44>
    2c9e:	78 c0       	rjmp	.+240    	; 0x2d90 <_ZN9red_beryl14menu_historicoEv+0x134>
    2ca0:	80 91 3b 13 	lds	r24, 0x133B	; 0x80133b <_ZZN9red_beryl14menu_historicoEvE7reseter>
    2ca4:	81 11       	cpse	r24, r1
    2ca6:	34 c0       	rjmp	.+104    	; 0x2d10 <_ZN9red_beryl14menu_historicoEv+0xb4>
    2ca8:	48 e0       	ldi	r20, 0x08	; 8
    2caa:	50 e0       	ldi	r21, 0x00	; 0
    2cac:	62 e0       	ldi	r22, 0x02	; 2
    2cae:	70 e0       	ldi	r23, 0x00	; 0
    2cb0:	c8 01       	movw	r24, r16
    2cb2:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2cb6:	61 e0       	ldi	r22, 0x01	; 1
    2cb8:	70 e0       	ldi	r23, 0x00	; 0
    2cba:	c8 01       	movw	r24, r16
    2cbc:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2cc0:	67 e3       	ldi	r22, 0x37	; 55
    2cc2:	75 e0       	ldi	r23, 0x05	; 5
    2cc4:	c8 01       	movw	r24, r16
    2cc6:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    2cca:	c8 01       	movw	r24, r16
    2ccc:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    2cd0:	97 fd       	sbrc	r25, 7
    2cd2:	01 96       	adiw	r24, 0x01	; 1
    2cd4:	bc 01       	movw	r22, r24
    2cd6:	75 95       	asr	r23
    2cd8:	67 95       	ror	r22
    2cda:	40 e1       	ldi	r20, 0x10	; 16
    2cdc:	50 e0       	ldi	r21, 0x00	; 0
    2cde:	c8 01       	movw	r24, r16
    2ce0:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2ce4:	69 e4       	ldi	r22, 0x49	; 73
    2ce6:	75 e0       	ldi	r23, 0x05	; 5
    2ce8:	c8 01       	movw	r24, r16
    2cea:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2cee:	88 89       	ldd	r24, Y+16	; 0x10
    2cf0:	88 23       	and	r24, r24
    2cf2:	21 f0       	breq	.+8      	; 0x2cfc <_ZN9red_beryl14menu_historicoEv+0xa0>
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 3b 13 	sts	0x133B, r24	; 0x80133b <_ZZN9red_beryl14menu_historicoEvE7reseter>
    2cfa:	18 8a       	std	Y+16, r1	; 0x10
    2cfc:	79 88       	ldd	r7, Y+17	; 0x11
    2cfe:	77 20       	and	r7, r7
    2d00:	09 f4       	brne	.+2      	; 0x2d04 <_ZN9red_beryl14menu_historicoEv+0xa8>
    2d02:	0b c2       	rjmp	.+1046   	; 0x311a <_ZN9red_beryl14menu_historicoEv+0x4be>
    2d04:	10 92 3b 13 	sts	0x133B, r1	; 0x80133b <_ZZN9red_beryl14menu_historicoEvE7reseter>
    2d08:	19 8a       	std	Y+17, r1	; 0x11
    2d0a:	10 92 3c 13 	sts	0x133C, r1	; 0x80133c <_ZZN9red_beryl14menu_historicoEvE5clear>
    2d0e:	07 c2       	rjmp	.+1038   	; 0x311e <_ZN9red_beryl14menu_historicoEv+0x4c2>
    2d10:	60 e0       	ldi	r22, 0x00	; 0
    2d12:	80 e0       	ldi	r24, 0x00	; 0
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	62 d9       	rcall	.-3388   	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
    2d18:	c8 01       	movw	r24, r16
    2d1a:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    2d1e:	7c 01       	movw	r14, r24
    2d20:	c8 01       	movw	r24, r16
    2d22:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    2d26:	a7 01       	movw	r20, r14
    2d28:	f7 fe       	sbrs	r15, 7
    2d2a:	02 c0       	rjmp	.+4      	; 0x2d30 <_ZN9red_beryl14menu_historicoEv+0xd4>
    2d2c:	4f 5f       	subi	r20, 0xFF	; 255
    2d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d30:	55 95       	asr	r21
    2d32:	47 95       	ror	r20
    2d34:	44 50       	subi	r20, 0x04	; 4
    2d36:	51 09       	sbc	r21, r1
    2d38:	bc 01       	movw	r22, r24
    2d3a:	97 ff       	sbrs	r25, 7
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <_ZN9red_beryl14menu_historicoEv+0xe6>
    2d3e:	6f 5f       	subi	r22, 0xFF	; 255
    2d40:	7f 4f       	sbci	r23, 0xFF	; 255
    2d42:	75 95       	asr	r23
    2d44:	67 95       	ror	r22
    2d46:	69 51       	subi	r22, 0x19	; 25
    2d48:	71 09       	sbc	r23, r1
    2d4a:	c8 01       	movw	r24, r16
    2d4c:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2d50:	61 e0       	ldi	r22, 0x01	; 1
    2d52:	70 e0       	ldi	r23, 0x00	; 0
    2d54:	c8 01       	movw	r24, r16
    2d56:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2d5a:	6d e4       	ldi	r22, 0x4D	; 77
    2d5c:	75 e0       	ldi	r23, 0x05	; 5
    2d5e:	c8 01       	movw	r24, r16
    2d60:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2d64:	88 89       	ldd	r24, Y+16	; 0x10
    2d66:	81 11       	cpse	r24, r1
    2d68:	0a c0       	rjmp	.+20     	; 0x2d7e <_ZN9red_beryl14menu_historicoEv+0x122>
    2d6a:	89 89       	ldd	r24, Y+17	; 0x11
    2d6c:	81 11       	cpse	r24, r1
    2d6e:	07 c0       	rjmp	.+14     	; 0x2d7e <_ZN9red_beryl14menu_historicoEv+0x122>
    2d70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d72:	81 11       	cpse	r24, r1
    2d74:	04 c0       	rjmp	.+8      	; 0x2d7e <_ZN9red_beryl14menu_historicoEv+0x122>
    2d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d78:	88 23       	and	r24, r24
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <_ZN9red_beryl14menu_historicoEv+0x122>
    2d7c:	ce c1       	rjmp	.+924    	; 0x311a <_ZN9red_beryl14menu_historicoEv+0x4be>
    2d7e:	10 92 3b 13 	sts	0x133B, r1	; 0x80133b <_ZZN9red_beryl14menu_historicoEvE7reseter>
    2d82:	18 8a       	std	Y+16, r1	; 0x10
    2d84:	19 8a       	std	Y+17, r1	; 0x11
    2d86:	1e 86       	std	Y+14, r1	; 0x0e
    2d88:	1f 86       	std	Y+15, r1	; 0x0f
    2d8a:	10 92 3c 13 	sts	0x133C, r1	; 0x80133c <_ZZN9red_beryl14menu_historicoEvE5clear>
    2d8e:	4f c0       	rjmp	.+158    	; 0x2e2e <_ZN9red_beryl14menu_historicoEv+0x1d2>
    2d90:	48 e0       	ldi	r20, 0x08	; 8
    2d92:	50 e0       	ldi	r21, 0x00	; 0
    2d94:	62 e0       	ldi	r22, 0x02	; 2
    2d96:	70 e0       	ldi	r23, 0x00	; 0
    2d98:	c8 01       	movw	r24, r16
    2d9a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2d9e:	61 e0       	ldi	r22, 0x01	; 1
    2da0:	c8 01       	movw	r24, r16
    2da2:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    2da6:	41 e0       	ldi	r20, 0x01	; 1
    2da8:	50 e0       	ldi	r21, 0x00	; 0
    2daa:	60 e0       	ldi	r22, 0x00	; 0
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	c8 01       	movw	r24, r16
    2db0:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    2db4:	68 e5       	ldi	r22, 0x58	; 88
    2db6:	75 e0       	ldi	r23, 0x05	; 5
    2db8:	c8 01       	movw	r24, r16
    2dba:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2dbe:	40 e1       	ldi	r20, 0x10	; 16
    2dc0:	50 e0       	ldi	r21, 0x00	; 0
    2dc2:	62 e0       	ldi	r22, 0x02	; 2
    2dc4:	70 e0       	ldi	r23, 0x00	; 0
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2dcc:	61 e0       	ldi	r22, 0x01	; 1
    2dce:	70 e0       	ldi	r23, 0x00	; 0
    2dd0:	c8 01       	movw	r24, r16
    2dd2:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2dd6:	6c e6       	ldi	r22, 0x6C	; 108
    2dd8:	75 e0       	ldi	r23, 0x05	; 5
    2dda:	c8 01       	movw	r24, r16
    2ddc:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2de0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2de2:	88 23       	and	r24, r24
    2de4:	51 f0       	breq	.+20     	; 0x2dfa <_ZN9red_beryl14menu_historicoEv+0x19e>
    2de6:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    2dea:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    2df4:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    2df8:	1e 86       	std	Y+14, r1	; 0x0e
    2dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfc:	88 23       	and	r24, r24
    2dfe:	51 f0       	breq	.+20     	; 0x2e14 <_ZN9red_beryl14menu_historicoEv+0x1b8>
    2e00:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    2e04:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    2e08:	01 96       	adiw	r24, 0x01	; 1
    2e0a:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    2e0e:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    2e12:	1f 86       	std	Y+15, r1	; 0x0f
    2e14:	88 89       	ldd	r24, Y+16	; 0x10
    2e16:	88 23       	and	r24, r24
    2e18:	29 f0       	breq	.+10     	; 0x2e24 <_ZN9red_beryl14menu_historicoEv+0x1c8>
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	80 93 3c 13 	sts	0x133C, r24	; 0x80133c <_ZZN9red_beryl14menu_historicoEvE5clear>
    2e20:	18 8a       	std	Y+16, r1	; 0x10
    2e22:	19 8a       	std	Y+17, r1	; 0x11
    2e24:	89 89       	ldd	r24, Y+17	; 0x11
    2e26:	88 23       	and	r24, r24
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <_ZN9red_beryl14menu_historicoEv+0x1d0>
    2e2a:	77 c1       	rjmp	.+750    	; 0x311a <_ZN9red_beryl14menu_historicoEv+0x4be>
    2e2c:	19 8a       	std	Y+17, r1	; 0x11
    2e2e:	71 2c       	mov	r7, r1
    2e30:	76 c1       	rjmp	.+748    	; 0x311e <_ZN9red_beryl14menu_historicoEv+0x4c2>
    2e32:	80 91 3a 13 	lds	r24, 0x133A	; 0x80133a <_ZZN9red_beryl14menu_historicoEvE4wipe>
    2e36:	9e 01       	movw	r18, r28
    2e38:	2b 5e       	subi	r18, 0xEB	; 235
    2e3a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e3c:	49 01       	movw	r8, r18
    2e3e:	88 23       	and	r24, r24
    2e40:	09 f4       	brne	.+2      	; 0x2e44 <_ZN9red_beryl14menu_historicoEv+0x1e8>
    2e42:	0c c1       	rjmp	.+536    	; 0x305c <_ZN9red_beryl14menu_historicoEv+0x400>
    2e44:	70 90 39 13 	lds	r7, 0x1339	; 0x801339 <_ZZN9red_beryl14menu_historicoEvE7reseter_0>
    2e48:	71 10       	cpse	r7, r1
    2e4a:	34 c0       	rjmp	.+104    	; 0x2eb4 <_ZN9red_beryl14menu_historicoEv+0x258>
    2e4c:	48 e0       	ldi	r20, 0x08	; 8
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	62 e0       	ldi	r22, 0x02	; 2
    2e52:	70 e0       	ldi	r23, 0x00	; 0
    2e54:	c9 01       	movw	r24, r18
    2e56:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2e5a:	61 e0       	ldi	r22, 0x01	; 1
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	c4 01       	movw	r24, r8
    2e60:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2e64:	62 e8       	ldi	r22, 0x82	; 130
    2e66:	75 e0       	ldi	r23, 0x05	; 5
    2e68:	c4 01       	movw	r24, r8
    2e6a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    2e6e:	c4 01       	movw	r24, r8
    2e70:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    2e74:	97 fd       	sbrc	r25, 7
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	bc 01       	movw	r22, r24
    2e7a:	75 95       	asr	r23
    2e7c:	67 95       	ror	r22
    2e7e:	40 e1       	ldi	r20, 0x10	; 16
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	c4 01       	movw	r24, r8
    2e84:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2e88:	69 e4       	ldi	r22, 0x49	; 73
    2e8a:	75 e0       	ldi	r23, 0x05	; 5
    2e8c:	c4 01       	movw	r24, r8
    2e8e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2e92:	88 89       	ldd	r24, Y+16	; 0x10
    2e94:	88 23       	and	r24, r24
    2e96:	21 f0       	breq	.+8      	; 0x2ea0 <_ZN9red_beryl14menu_historicoEv+0x244>
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	80 93 39 13 	sts	0x1339, r24	; 0x801339 <_ZZN9red_beryl14menu_historicoEvE7reseter_0>
    2e9e:	18 8a       	std	Y+16, r1	; 0x10
    2ea0:	79 88       	ldd	r7, Y+17	; 0x11
    2ea2:	77 20       	and	r7, r7
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <_ZN9red_beryl14menu_historicoEv+0x24c>
    2ea6:	39 c1       	rjmp	.+626    	; 0x311a <_ZN9red_beryl14menu_historicoEv+0x4be>
    2ea8:	10 92 39 13 	sts	0x1339, r1	; 0x801339 <_ZZN9red_beryl14menu_historicoEvE7reseter_0>
    2eac:	19 8a       	std	Y+17, r1	; 0x11
    2eae:	10 92 3a 13 	sts	0x133A, r1	; 0x80133a <_ZZN9red_beryl14menu_historicoEvE4wipe>
    2eb2:	35 c1       	rjmp	.+618    	; 0x311e <_ZN9red_beryl14menu_historicoEv+0x4c2>
    2eb4:	c9 01       	movw	r24, r18
    2eb6:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    2eba:	8c 01       	movw	r16, r24
    2ebc:	c4 01       	movw	r24, r8
    2ebe:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    2ec2:	a8 01       	movw	r20, r16
    2ec4:	17 ff       	sbrs	r17, 7
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <_ZN9red_beryl14menu_historicoEv+0x270>
    2ec8:	4f 5f       	subi	r20, 0xFF	; 255
    2eca:	5f 4f       	sbci	r21, 0xFF	; 255
    2ecc:	55 95       	asr	r21
    2ece:	47 95       	ror	r20
    2ed0:	44 50       	subi	r20, 0x04	; 4
    2ed2:	51 09       	sbc	r21, r1
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	97 ff       	sbrs	r25, 7
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <_ZN9red_beryl14menu_historicoEv+0x282>
    2eda:	6f 5f       	subi	r22, 0xFF	; 255
    2edc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ede:	75 95       	asr	r23
    2ee0:	67 95       	ror	r22
    2ee2:	6e 51       	subi	r22, 0x1E	; 30
    2ee4:	71 09       	sbc	r23, r1
    2ee6:	c4 01       	movw	r24, r8
    2ee8:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2eec:	61 e0       	ldi	r22, 0x01	; 1
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	c4 01       	movw	r24, r8
    2ef2:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2ef6:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <_ZZN9red_beryl14menu_historicoEvE1i>
    2efa:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <_ZZN9red_beryl14menu_historicoEvE1i+0x1>
    2efe:	8f 3f       	cpi	r24, 0xFF	; 255
    2f00:	3f e0       	ldi	r19, 0x0F	; 15
    2f02:	93 07       	cpc	r25, r19
    2f04:	08 f0       	brcs	.+2      	; 0x2f08 <_ZN9red_beryl14menu_historicoEv+0x2ac>
    2f06:	6a c0       	rjmp	.+212    	; 0x2fdc <_ZN9red_beryl14menu_historicoEv+0x380>
    2f08:	60 e0       	ldi	r22, 0x00	; 0
    2f0a:	68 d8       	rcall	.-3888   	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
    2f0c:	60 91 37 13 	lds	r22, 0x1337	; 0x801337 <_ZZN9red_beryl14menu_historicoEvE1i>
    2f10:	70 91 38 13 	lds	r23, 0x1338	; 0x801338 <_ZZN9red_beryl14menu_historicoEvE1i+0x1>
    2f14:	4a e0       	ldi	r20, 0x0A	; 10
    2f16:	50 e0       	ldi	r21, 0x00	; 0
    2f18:	80 ec       	ldi	r24, 0xC0	; 192
    2f1a:	90 e1       	ldi	r25, 0x10	; 16
    2f1c:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
    2f20:	60 91 37 13 	lds	r22, 0x1337	; 0x801337 <_ZZN9red_beryl14menu_historicoEvE1i>
    2f24:	70 91 38 13 	lds	r23, 0x1338	; 0x801338 <_ZZN9red_beryl14menu_historicoEvE1i+0x1>
    2f28:	07 2e       	mov	r0, r23
    2f2a:	00 0c       	add	r0, r0
    2f2c:	88 0b       	sbc	r24, r24
    2f2e:	99 0b       	sbc	r25, r25
    2f30:	1f 92       	push	r1
    2f32:	1f 92       	push	r1
    2f34:	1f 92       	push	r1
    2f36:	24 e6       	ldi	r18, 0x64	; 100
    2f38:	2f 93       	push	r18
    2f3a:	a1 2c       	mov	r10, r1
    2f3c:	b1 2c       	mov	r11, r1
    2f3e:	65 01       	movw	r12, r10
    2f40:	ee 24       	eor	r14, r14
    2f42:	ea 94       	dec	r14
    2f44:	1f e0       	ldi	r17, 0x0F	; 15
    2f46:	f1 2e       	mov	r15, r17
    2f48:	00 e0       	ldi	r16, 0x00	; 0
    2f4a:	10 e0       	ldi	r17, 0x00	; 0
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	a9 01       	movw	r20, r18
    2f52:	0e 94 96 4b 	call	0x972c	; 0x972c <_Z3maplllll>
    2f56:	6b 01       	movw	r12, r22
    2f58:	7c 01       	movw	r14, r24
    2f5a:	66 e9       	ldi	r22, 0x96	; 150
    2f5c:	75 e0       	ldi	r23, 0x05	; 5
    2f5e:	c4 01       	movw	r24, r8
    2f60:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2f64:	c4 01       	movw	r24, r8
    2f66:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    2f6a:	d8 2f       	mov	r29, r24
    2f6c:	c9 2f       	mov	r28, r25
    2f6e:	c4 01       	movw	r24, r8
    2f70:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    2f74:	4d 2f       	mov	r20, r29
    2f76:	5c 2f       	mov	r21, r28
    2f78:	57 ff       	sbrs	r21, 7
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <_ZN9red_beryl14menu_historicoEv+0x324>
    2f7c:	4f 5f       	subi	r20, 0xFF	; 255
    2f7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f80:	55 95       	asr	r21
    2f82:	47 95       	ror	r20
    2f84:	4c 5f       	subi	r20, 0xFC	; 252
    2f86:	5f 4f       	sbci	r21, 0xFF	; 255
    2f88:	bc 01       	movw	r22, r24
    2f8a:	97 ff       	sbrs	r25, 7
    2f8c:	02 c0       	rjmp	.+4      	; 0x2f92 <_ZN9red_beryl14menu_historicoEv+0x336>
    2f8e:	6f 5f       	subi	r22, 0xFF	; 255
    2f90:	7f 4f       	sbci	r23, 0xFF	; 255
    2f92:	75 95       	asr	r23
    2f94:	67 95       	ror	r22
    2f96:	6a 50       	subi	r22, 0x0A	; 10
    2f98:	71 09       	sbc	r23, r1
    2f9a:	c4 01       	movw	r24, r8
    2f9c:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    2fa0:	61 e0       	ldi	r22, 0x01	; 1
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	c4 01       	movw	r24, r8
    2fa6:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    2faa:	4a e0       	ldi	r20, 0x0A	; 10
    2fac:	50 e0       	ldi	r21, 0x00	; 0
    2fae:	b6 01       	movw	r22, r12
    2fb0:	c4 01       	movw	r24, r8
    2fb2:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
    2fb6:	62 ea       	ldi	r22, 0xA2	; 162
    2fb8:	75 e0       	ldi	r23, 0x05	; 5
    2fba:	c4 01       	movw	r24, r8
    2fbc:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    2fc0:	80 91 37 13 	lds	r24, 0x1337	; 0x801337 <_ZZN9red_beryl14menu_historicoEvE1i>
    2fc4:	90 91 38 13 	lds	r25, 0x1338	; 0x801338 <_ZZN9red_beryl14menu_historicoEvE1i+0x1>
    2fc8:	01 96       	adiw	r24, 0x01	; 1
    2fca:	90 93 38 13 	sts	0x1338, r25	; 0x801338 <_ZZN9red_beryl14menu_historicoEvE1i+0x1>
    2fce:	80 93 37 13 	sts	0x1337, r24	; 0x801337 <_ZZN9red_beryl14menu_historicoEvE1i>
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	a1 c0       	rjmp	.+322    	; 0x311e <_ZN9red_beryl14menu_historicoEv+0x4c2>
    2fdc:	c4 01       	movw	r24, r8
    2fde:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    2fe2:	8c 01       	movw	r16, r24
    2fe4:	c4 01       	movw	r24, r8
    2fe6:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    2fea:	a8 01       	movw	r20, r16
    2fec:	17 ff       	sbrs	r17, 7
    2fee:	02 c0       	rjmp	.+4      	; 0x2ff4 <_ZN9red_beryl14menu_historicoEv+0x398>
    2ff0:	4f 5f       	subi	r20, 0xFF	; 255
    2ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff4:	55 95       	asr	r21
    2ff6:	47 95       	ror	r20
    2ff8:	44 50       	subi	r20, 0x04	; 4
    2ffa:	51 09       	sbc	r21, r1
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	97 ff       	sbrs	r25, 7
    3000:	02 c0       	rjmp	.+4      	; 0x3006 <_ZN9red_beryl14menu_historicoEv+0x3aa>
    3002:	6f 5f       	subi	r22, 0xFF	; 255
    3004:	7f 4f       	sbci	r23, 0xFF	; 255
    3006:	75 95       	asr	r23
    3008:	67 95       	ror	r22
    300a:	69 51       	subi	r22, 0x19	; 25
    300c:	71 09       	sbc	r23, r1
    300e:	c4 01       	movw	r24, r8
    3010:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	c4 01       	movw	r24, r8
    301a:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    301e:	6d e4       	ldi	r22, 0x4D	; 77
    3020:	75 e0       	ldi	r23, 0x05	; 5
    3022:	c4 01       	movw	r24, r8
    3024:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    3028:	88 89       	ldd	r24, Y+16	; 0x10
    302a:	81 11       	cpse	r24, r1
    302c:	0a c0       	rjmp	.+20     	; 0x3042 <_ZN9red_beryl14menu_historicoEv+0x3e6>
    302e:	89 89       	ldd	r24, Y+17	; 0x11
    3030:	81 11       	cpse	r24, r1
    3032:	07 c0       	rjmp	.+14     	; 0x3042 <_ZN9red_beryl14menu_historicoEv+0x3e6>
    3034:	8e 85       	ldd	r24, Y+14	; 0x0e
    3036:	81 11       	cpse	r24, r1
    3038:	04 c0       	rjmp	.+8      	; 0x3042 <_ZN9red_beryl14menu_historicoEv+0x3e6>
    303a:	8f 85       	ldd	r24, Y+15	; 0x0f
    303c:	88 23       	and	r24, r24
    303e:	09 f4       	brne	.+2      	; 0x3042 <_ZN9red_beryl14menu_historicoEv+0x3e6>
    3040:	6c c0       	rjmp	.+216    	; 0x311a <_ZN9red_beryl14menu_historicoEv+0x4be>
    3042:	10 92 39 13 	sts	0x1339, r1	; 0x801339 <_ZZN9red_beryl14menu_historicoEvE7reseter_0>
    3046:	10 92 38 13 	sts	0x1338, r1	; 0x801338 <_ZZN9red_beryl14menu_historicoEvE1i+0x1>
    304a:	10 92 37 13 	sts	0x1337, r1	; 0x801337 <_ZZN9red_beryl14menu_historicoEvE1i>
    304e:	18 8a       	std	Y+16, r1	; 0x10
    3050:	19 8a       	std	Y+17, r1	; 0x11
    3052:	1e 86       	std	Y+14, r1	; 0x0e
    3054:	1f 86       	std	Y+15, r1	; 0x0f
    3056:	10 92 3a 13 	sts	0x133A, r1	; 0x80133a <_ZZN9red_beryl14menu_historicoEvE4wipe>
    305a:	e9 ce       	rjmp	.-558    	; 0x2e2e <_ZN9red_beryl14menu_historicoEv+0x1d2>
    305c:	48 e0       	ldi	r20, 0x08	; 8
    305e:	50 e0       	ldi	r21, 0x00	; 0
    3060:	62 e0       	ldi	r22, 0x02	; 2
    3062:	70 e0       	ldi	r23, 0x00	; 0
    3064:	c9 01       	movw	r24, r18
    3066:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    306a:	61 e0       	ldi	r22, 0x01	; 1
    306c:	c4 01       	movw	r24, r8
    306e:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
    3072:	61 e0       	ldi	r22, 0x01	; 1
    3074:	70 e0       	ldi	r23, 0x00	; 0
    3076:	c4 01       	movw	r24, r8
    3078:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
    307c:	68 e5       	ldi	r22, 0x58	; 88
    307e:	75 e0       	ldi	r23, 0x05	; 5
    3080:	c4 01       	movw	r24, r8
    3082:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    3086:	40 e1       	ldi	r20, 0x10	; 16
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	62 e0       	ldi	r22, 0x02	; 2
    308c:	70 e0       	ldi	r23, 0x00	; 0
    308e:	c4 01       	movw	r24, r8
    3090:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    3094:	41 e0       	ldi	r20, 0x01	; 1
    3096:	50 e0       	ldi	r21, 0x00	; 0
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	70 e0       	ldi	r23, 0x00	; 0
    309c:	c4 01       	movw	r24, r8
    309e:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    30a2:	6c e6       	ldi	r22, 0x6C	; 108
    30a4:	75 e0       	ldi	r23, 0x05	; 5
    30a6:	c4 01       	movw	r24, r8
    30a8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    30ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    30ae:	88 23       	and	r24, r24
    30b0:	51 f0       	breq	.+20     	; 0x30c6 <_ZN9red_beryl14menu_historicoEv+0x46a>
    30b2:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    30b6:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    30c0:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    30c4:	1e 86       	std	Y+14, r1	; 0x0e
    30c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c8:	88 23       	and	r24, r24
    30ca:	51 f0       	breq	.+20     	; 0x30e0 <_ZN9red_beryl14menu_historicoEv+0x484>
    30cc:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    30d0:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    30d4:	01 96       	adiw	r24, 0x01	; 1
    30d6:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    30da:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    30de:	1f 86       	std	Y+15, r1	; 0x0f
    30e0:	88 89       	ldd	r24, Y+16	; 0x10
    30e2:	88 23       	and	r24, r24
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <_ZN9red_beryl14menu_historicoEv+0x48c>
    30e6:	9e ce       	rjmp	.-708    	; 0x2e24 <_ZN9red_beryl14menu_historicoEv+0x1c8>
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	80 93 3a 13 	sts	0x133A, r24	; 0x80133a <_ZZN9red_beryl14menu_historicoEvE4wipe>
    30ee:	98 ce       	rjmp	.-720    	; 0x2e20 <_ZN9red_beryl14menu_historicoEv+0x1c4>
    30f0:	18 16       	cp	r1, r24
    30f2:	19 06       	cpc	r1, r25
    30f4:	34 f0       	brlt	.+12     	; 0x3102 <_ZN9red_beryl14menu_historicoEv+0x4a6>
    30f6:	82 e0       	ldi	r24, 0x02	; 2
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    30fe:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    3102:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    3106:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    310a:	03 97       	sbiw	r24, 0x03	; 3
    310c:	34 f0       	brlt	.+12     	; 0x311a <_ZN9red_beryl14menu_historicoEv+0x4be>
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <_ZZN9red_beryl14menu_historicoEvE6choice+0x1>
    3116:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <_ZZN9red_beryl14menu_historicoEvE6choice>
    311a:	77 24       	eor	r7, r7
    311c:	73 94       	inc	r7
    311e:	87 2d       	mov	r24, r7
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	1f 91       	pop	r17
    3126:	0f 91       	pop	r16
    3128:	ff 90       	pop	r15
    312a:	ef 90       	pop	r14
    312c:	df 90       	pop	r13
    312e:	cf 90       	pop	r12
    3130:	bf 90       	pop	r11
    3132:	af 90       	pop	r10
    3134:	9f 90       	pop	r9
    3136:	8f 90       	pop	r8
    3138:	7f 90       	pop	r7
    313a:	08 95       	ret

0000313c <_ZN9red_beryl7relogioEv>:
			}
		}
	return false;
}
bool red_beryl::relogio()
{
    313c:	cf 92       	push	r12
    313e:	df 92       	push	r13
    3140:	ef 92       	push	r14
    3142:	ff 92       	push	r15
    3144:	0f 93       	push	r16
    3146:	1f 93       	push	r17
    3148:	cf 93       	push	r28
    314a:	df 93       	push	r29
    314c:	8c 01       	movw	r16, r24
	static bool doing = false, blinker = true;
	static int track = 0; //declarar e inicializar a variavel track, que será usada para definir o foco da função e o que será alterado(0=hora;1=minuto;2=dia;3=mes;4=ano)
	static int tempH, tempM, tempD, tempMn, tempY;  //declarando as variaveis temporarias responsaveis por receber os valor do rtc.
	static long timeTemp = 0;  static long tempTemp = 0;
  
	if( doing == false )  //se for a primeira vez rodando essa função, receber os valores do rtc para as variaveis.
    314e:	80 91 76 11 	lds	r24, 0x1176	; 0x801176 <_ZZN9red_beryl7relogioEvE5doing>
    3152:	81 11       	cpse	r24, r1
    3154:	29 c0       	rjmp	.+82     	; 0x31a8 <_ZN9red_beryl7relogioEv+0x6c>
	{
		tempH = clock.hora();
    3156:	e8 01       	movw	r28, r16
    3158:	cf 54       	subi	r28, 0x4F	; 79
    315a:	df 4f       	sbci	r29, 0xFF	; 255
    315c:	ce 01       	movw	r24, r28
    315e:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <_ZN10red_quartz4horaEv>
    3162:	90 93 75 11 	sts	0x1175, r25	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    3166:	80 93 74 11 	sts	0x1174, r24	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
		tempM = clock.minuto();
    316a:	ce 01       	movw	r24, r28
    316c:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <_ZN10red_quartz6minutoEv>
    3170:	90 93 73 11 	sts	0x1173, r25	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    3174:	80 93 72 11 	sts	0x1172, r24	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
		tempD = clock.dia();
    3178:	ce 01       	movw	r24, r28
    317a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <_ZN10red_quartz3diaEv>
    317e:	90 93 71 11 	sts	0x1171, r25	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    3182:	80 93 70 11 	sts	0x1170, r24	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
		tempMn = clock.mes();
    3186:	ce 01       	movw	r24, r28
    3188:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <_ZN10red_quartz3mesEv>
    318c:	90 93 6f 11 	sts	0x116F, r25	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    3190:	80 93 6e 11 	sts	0x116E, r24	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
		tempY = clock.ano();
    3194:	ce 01       	movw	r24, r28
    3196:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <_ZN10red_quartz3anoEv>
    319a:	90 93 6d 11 	sts	0x116D, r25	; 0x80116d <_ZZN9red_beryl7relogioEvE5tempY+0x1>
    319e:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <_ZZN9red_beryl7relogioEvE5tempY>
    
		doing = true;
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	80 93 76 11 	sts	0x1176, r24	; 0x801176 <_ZZN9red_beryl7relogioEvE5doing>
	}
	if(blinker)
    31a8:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <_ZZN9red_beryl7relogioEvE7blinker>
    31ac:	e8 01       	movw	r28, r16
    31ae:	65 96       	adiw	r28, 0x15	; 21
    31b0:	88 23       	and	r24, r24
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <_ZN9red_beryl7relogioEv+0x7a>
    31b4:	62 c1       	rjmp	.+708    	; 0x347a <_ZN9red_beryl7relogioEv+0x33e>
	{
		timeTemp = millis();    //variavel temporario recebe tempo em millis.
    31b6:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
		if((timeTemp-tempTemp) > 500)
    31ba:	c0 90 68 11 	lds	r12, 0x1168	; 0x801168 <_ZZN9red_beryl7relogioEvE8tempTemp>
    31be:	d0 90 69 11 	lds	r13, 0x1169	; 0x801169 <_ZZN9red_beryl7relogioEvE8tempTemp+0x1>
    31c2:	e0 90 6a 11 	lds	r14, 0x116A	; 0x80116a <_ZZN9red_beryl7relogioEvE8tempTemp+0x2>
    31c6:	f0 90 6b 11 	lds	r15, 0x116B	; 0x80116b <_ZZN9red_beryl7relogioEvE8tempTemp+0x3>
    31ca:	9b 01       	movw	r18, r22
    31cc:	ac 01       	movw	r20, r24
    31ce:	2c 19       	sub	r18, r12
    31d0:	3d 09       	sbc	r19, r13
    31d2:	4e 09       	sbc	r20, r14
    31d4:	5f 09       	sbc	r21, r15
    31d6:	69 01       	movw	r12, r18
    31d8:	7a 01       	movw	r14, r20
    31da:	35 ef       	ldi	r19, 0xF5	; 245
    31dc:	c3 16       	cp	r12, r19
    31de:	31 e0       	ldi	r19, 0x01	; 1
    31e0:	d3 06       	cpc	r13, r19
    31e2:	e1 04       	cpc	r14, r1
    31e4:	f1 04       	cpc	r15, r1
    31e6:	54 f0       	brlt	.+20     	; 0x31fc <_ZN9red_beryl7relogioEv+0xc0>
		{    //se a diferença entre as duas variaveis temporarias for de 1/2 segundos.
			blinker = false;    //blinker recebe valor false.
    31e8:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <_ZZN9red_beryl7relogioEvE7blinker>
			tempTemp = timeTemp;    //A variavel tempTemp recebe o valor da timeTemp para resetar a diferença.
    31ec:	60 93 68 11 	sts	0x1168, r22	; 0x801168 <_ZZN9red_beryl7relogioEvE8tempTemp>
    31f0:	70 93 69 11 	sts	0x1169, r23	; 0x801169 <_ZZN9red_beryl7relogioEvE8tempTemp+0x1>
    31f4:	80 93 6a 11 	sts	0x116A, r24	; 0x80116a <_ZZN9red_beryl7relogioEvE8tempTemp+0x2>
    31f8:	90 93 6b 11 	sts	0x116B, r25	; 0x80116b <_ZZN9red_beryl7relogioEvE8tempTemp+0x3>
		}
		if(track!=0)
    31fc:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    3200:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    3204:	89 2b       	or	r24, r25
    3206:	61 f1       	breq	.+88     	; 0x3260 <_ZN9red_beryl7relogioEv+0x124>
		{   //se NÃO for HORA.
			display.setTextSize(1);   //Definir tamanho do texto(1).
    3208:	61 e0       	ldi	r22, 0x01	; 1
    320a:	ce 01       	movw	r24, r28
    320c:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
			display.setTextColor(WHITE);    //Definir cor do texto(BRANCO).
    3210:	61 e0       	ldi	r22, 0x01	; 1
    3212:	70 e0       	ldi	r23, 0x00	; 0
    3214:	ce 01       	movw	r24, r28
    3216:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
			display.setCursor(display.width()/2-15, lineSize+4);    //Definir a posição do cursor(metade da largura da tela menos 2 caracteres e meio, meia linha abaixo da barra superior).
    321a:	ce 01       	movw	r24, r28
    321c:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    3220:	97 fd       	sbrc	r25, 7
    3222:	01 96       	adiw	r24, 0x01	; 1
    3224:	95 95       	asr	r25
    3226:	87 95       	ror	r24
    3228:	bc 01       	movw	r22, r24
    322a:	6f 50       	subi	r22, 0x0F	; 15
    322c:	71 09       	sbc	r23, r1
    322e:	4c e0       	ldi	r20, 0x0C	; 12
    3230:	50 e0       	ldi	r21, 0x00	; 0
    3232:	ce 01       	movw	r24, r28
    3234:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
			if(tempH<10)
    3238:	80 91 74 11 	lds	r24, 0x1174	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
    323c:	90 91 75 11 	lds	r25, 0x1175	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    3240:	0a 97       	sbiw	r24, 0x0a	; 10
    3242:	2c f4       	brge	.+10     	; 0x324e <_ZN9red_beryl7relogioEv+0x112>
			{
				display.print("0");   //Se o valor de HORA for menor que 10(e portanto, apenas um caractere), imprime 0 na posição.
    3244:	65 ef       	ldi	r22, 0xF5	; 245
    3246:	76 e0       	ldi	r23, 0x06	; 6
    3248:	ce 01       	movw	r24, r28
    324a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			}
			display.print(tempH);   //Imprime valor Temporario de HORA.
    324e:	60 91 74 11 	lds	r22, 0x1174	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
    3252:	70 91 75 11 	lds	r23, 0x1175	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    3256:	4a e0       	ldi	r20, 0x0A	; 10
    3258:	50 e0       	ldi	r21, 0x00	; 0
    325a:	ce 01       	movw	r24, r28
    325c:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		}
		display.setTextSize(1);   //Definir tamanho do texto(1).
    3260:	61 e0       	ldi	r22, 0x01	; 1
    3262:	ce 01       	movw	r24, r28
    3264:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
		display.setTextColor(WHITE);    //Definir cor do texto(BRANCO).
    3268:	61 e0       	ldi	r22, 0x01	; 1
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	ce 01       	movw	r24, r28
    326e:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
		display.setCursor(display.width()/2-3, lineSize+4);    //Definir a posição do cursor(metade da largura da tela menos meio caractere, meia linha abaixo da barra superior).
    3272:	ce 01       	movw	r24, r28
    3274:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    3278:	97 fd       	sbrc	r25, 7
    327a:	01 96       	adiw	r24, 0x01	; 1
    327c:	95 95       	asr	r25
    327e:	87 95       	ror	r24
    3280:	bc 01       	movw	r22, r24
    3282:	63 50       	subi	r22, 0x03	; 3
    3284:	71 09       	sbc	r23, r1
    3286:	4c e0       	ldi	r20, 0x0C	; 12
    3288:	50 e0       	ldi	r21, 0x00	; 0
    328a:	ce 01       	movw	r24, r28
    328c:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		display.print(":");   //Imprime separador de tempo.
    3290:	69 e2       	ldi	r22, 0x29	; 41
    3292:	78 e0       	ldi	r23, 0x08	; 8
    3294:	ce 01       	movw	r24, r28
    3296:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		
		if(track!=1)
    329a:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    329e:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	61 f1       	breq	.+88     	; 0x32fe <_ZN9red_beryl7relogioEv+0x1c2>
		{   //se NÃO for MINUTO.
			display.setTextSize(1);   //Definir tamanho do texto(1).
    32a6:	61 e0       	ldi	r22, 0x01	; 1
    32a8:	ce 01       	movw	r24, r28
    32aa:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
			display.setTextColor(WHITE);    //Definir cor do texto(BRANCO).
    32ae:	61 e0       	ldi	r22, 0x01	; 1
    32b0:	70 e0       	ldi	r23, 0x00	; 0
    32b2:	ce 01       	movw	r24, r28
    32b4:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
			display.setCursor(display.width()/2+3, lineSize+4);    //Definir a posição do cursor(metade da largura da tela mais meio caractere, meia linha abaixo da barra superior).
    32b8:	ce 01       	movw	r24, r28
    32ba:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    32be:	97 fd       	sbrc	r25, 7
    32c0:	01 96       	adiw	r24, 0x01	; 1
    32c2:	95 95       	asr	r25
    32c4:	87 95       	ror	r24
    32c6:	bc 01       	movw	r22, r24
    32c8:	6d 5f       	subi	r22, 0xFD	; 253
    32ca:	7f 4f       	sbci	r23, 0xFF	; 255
    32cc:	4c e0       	ldi	r20, 0x0C	; 12
    32ce:	50 e0       	ldi	r21, 0x00	; 0
    32d0:	ce 01       	movw	r24, r28
    32d2:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
			if(tempM<10)
    32d6:	80 91 72 11 	lds	r24, 0x1172	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
    32da:	90 91 73 11 	lds	r25, 0x1173	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    32de:	0a 97       	sbiw	r24, 0x0a	; 10
    32e0:	2c f4       	brge	.+10     	; 0x32ec <_ZN9red_beryl7relogioEv+0x1b0>
			{
				display.print("0");   //Se o valor de MINUTO for menor que 10(e portanto, apenas um caractere), imprime 0 na posição.
    32e2:	65 ef       	ldi	r22, 0xF5	; 245
    32e4:	76 e0       	ldi	r23, 0x06	; 6
    32e6:	ce 01       	movw	r24, r28
    32e8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			}
			display.print(tempM);   //Imprime valor Temporario de MINUTO.
    32ec:	60 91 72 11 	lds	r22, 0x1172	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
    32f0:	70 91 73 11 	lds	r23, 0x1173	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    32f4:	4a e0       	ldi	r20, 0x0A	; 10
    32f6:	50 e0       	ldi	r21, 0x00	; 0
    32f8:	ce 01       	movw	r24, r28
    32fa:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		}
    
		if(track!=2)
    32fe:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    3302:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    3306:	02 97       	sbiw	r24, 0x02	; 2
    3308:	61 f1       	breq	.+88     	; 0x3362 <_ZN9red_beryl7relogioEv+0x226>
		{   //se NÃO for DIA.
			display.setTextSize(1);   //Definir tamanho do texto(1).
    330a:	61 e0       	ldi	r22, 0x01	; 1
    330c:	ce 01       	movw	r24, r28
    330e:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
			display.setTextColor(WHITE);    //Definir cor do texto(BRANCO).
    3312:	61 e0       	ldi	r22, 0x01	; 1
    3314:	70 e0       	ldi	r23, 0x00	; 0
    3316:	ce 01       	movw	r24, r28
    3318:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
			display.setCursor(display.width()/2-25, lineSize*2+6);   //Definir a posição do cursor(metade da largura da tela menos 4 caracteres, uma linha e meia abaixo da barrar superior).
    331c:	ce 01       	movw	r24, r28
    331e:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    3322:	97 fd       	sbrc	r25, 7
    3324:	01 96       	adiw	r24, 0x01	; 1
    3326:	95 95       	asr	r25
    3328:	87 95       	ror	r24
    332a:	bc 01       	movw	r22, r24
    332c:	69 51       	subi	r22, 0x19	; 25
    332e:	71 09       	sbc	r23, r1
    3330:	46 e1       	ldi	r20, 0x16	; 22
    3332:	50 e0       	ldi	r21, 0x00	; 0
    3334:	ce 01       	movw	r24, r28
    3336:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
			if(tempD<10)
    333a:	80 91 70 11 	lds	r24, 0x1170	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
    333e:	90 91 71 11 	lds	r25, 0x1171	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    3342:	0a 97       	sbiw	r24, 0x0a	; 10
    3344:	2c f4       	brge	.+10     	; 0x3350 <_ZN9red_beryl7relogioEv+0x214>
			{
				display.print(" ");   //Se o valor de DIA for menor que 10(e portante, apenas um caractere), imprime [ ] na posição.
    3346:	6f eb       	ldi	r22, 0xBF	; 191
    3348:	74 e0       	ldi	r23, 0x04	; 4
    334a:	ce 01       	movw	r24, r28
    334c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			}
			display.print(tempD);   //Imprime valor Temporario de DIA.
    3350:	60 91 70 11 	lds	r22, 0x1170	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
    3354:	70 91 71 11 	lds	r23, 0x1171	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    3358:	4a e0       	ldi	r20, 0x0A	; 10
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	ce 01       	movw	r24, r28
    335e:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		}
		display.setTextSize(1);   //Definir tamanho do texto(1).
    3362:	61 e0       	ldi	r22, 0x01	; 1
    3364:	ce 01       	movw	r24, r28
    3366:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
		display.setTextColor(WHITE);    //Definir cor do texto(BRANCO).
    336a:	61 e0       	ldi	r22, 0x01	; 1
    336c:	70 e0       	ldi	r23, 0x00	; 0
    336e:	ce 01       	movw	r24, r28
    3370:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
		display.setCursor(display.width()/2-13, lineSize*2+6);   //Definir a posição do cursor(metade da largura da tela menos 2 caracteres, uma linha e meia abaixo da barra superior).
    3374:	ce 01       	movw	r24, r28
    3376:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    337a:	97 fd       	sbrc	r25, 7
    337c:	01 96       	adiw	r24, 0x01	; 1
    337e:	95 95       	asr	r25
    3380:	87 95       	ror	r24
    3382:	bc 01       	movw	r22, r24
    3384:	6d 50       	subi	r22, 0x0D	; 13
    3386:	71 09       	sbc	r23, r1
    3388:	46 e1       	ldi	r20, 0x16	; 22
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	ce 01       	movw	r24, r28
    338e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		display.print("/");   //Imprime separador de data.
    3392:	64 ea       	ldi	r22, 0xA4	; 164
    3394:	75 e0       	ldi	r23, 0x05	; 5
    3396:	ce 01       	movw	r24, r28
    3398:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    
		if(track!=3)
    339c:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    33a0:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    33a4:	03 97       	sbiw	r24, 0x03	; 3
    33a6:	61 f1       	breq	.+88     	; 0x3400 <_ZN9red_beryl7relogioEv+0x2c4>
		{   //se NÃO for MES.
			display.setTextSize(1);   //Definir tamanho do texto(1).
    33a8:	61 e0       	ldi	r22, 0x01	; 1
    33aa:	ce 01       	movw	r24, r28
    33ac:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
			display.setTextColor(WHITE);    //Definir a cor do texto(BRANCO).
    33b0:	61 e0       	ldi	r22, 0x01	; 1
    33b2:	70 e0       	ldi	r23, 0x00	; 0
    33b4:	ce 01       	movw	r24, r28
    33b6:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
			display.setCursor(display.width()/2-7, lineSize*2+6);   //Definir a posição do cursor(metade da largura da tela menos 1 caractere, uma linha e meia abaixo da barra superior).
    33ba:	ce 01       	movw	r24, r28
    33bc:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    33c0:	97 fd       	sbrc	r25, 7
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	95 95       	asr	r25
    33c6:	87 95       	ror	r24
    33c8:	bc 01       	movw	r22, r24
    33ca:	67 50       	subi	r22, 0x07	; 7
    33cc:	71 09       	sbc	r23, r1
    33ce:	46 e1       	ldi	r20, 0x16	; 22
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	ce 01       	movw	r24, r28
    33d4:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
			if(tempMn<10)
    33d8:	80 91 6e 11 	lds	r24, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    33dc:	90 91 6f 11 	lds	r25, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    33e0:	0a 97       	sbiw	r24, 0x0a	; 10
    33e2:	2c f4       	brge	.+10     	; 0x33ee <_ZN9red_beryl7relogioEv+0x2b2>
			{
				display.print("0");   //Se o valor de MES for menor que 10(e portanto, apenas um caractere), imprime 0 na posição.
    33e4:	65 ef       	ldi	r22, 0xF5	; 245
    33e6:	76 e0       	ldi	r23, 0x06	; 6
    33e8:	ce 01       	movw	r24, r28
    33ea:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			}
			display.print(tempMn);    //Imprime valor Temporario de MES.
    33ee:	60 91 6e 11 	lds	r22, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    33f2:	70 91 6f 11 	lds	r23, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    33f6:	4a e0       	ldi	r20, 0x0A	; 10
    33f8:	50 e0       	ldi	r21, 0x00	; 0
    33fa:	ce 01       	movw	r24, r28
    33fc:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		}
		display.setTextSize(1);   //Definir tamanho do texto(1).
    3400:	61 e0       	ldi	r22, 0x01	; 1
    3402:	ce 01       	movw	r24, r28
    3404:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
		display.setTextColor(WHITE);    //Definir cor do texto(BRANCO).
    3408:	61 e0       	ldi	r22, 0x01	; 1
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	ce 01       	movw	r24, r28
    340e:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
		display.setCursor(display.width()/2+5, lineSize*2+6);    //Definir a posição do cursor(metade da largura da tela mais 1 caractere, uma linha e meia abaixo da barra superior).
    3412:	ce 01       	movw	r24, r28
    3414:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    3418:	97 fd       	sbrc	r25, 7
    341a:	01 96       	adiw	r24, 0x01	; 1
    341c:	95 95       	asr	r25
    341e:	87 95       	ror	r24
    3420:	bc 01       	movw	r22, r24
    3422:	6b 5f       	subi	r22, 0xFB	; 251
    3424:	7f 4f       	sbci	r23, 0xFF	; 255
    3426:	46 e1       	ldi	r20, 0x16	; 22
    3428:	50 e0       	ldi	r21, 0x00	; 0
    342a:	ce 01       	movw	r24, r28
    342c:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		display.print("/");   //Imprime separador de data.
    3430:	64 ea       	ldi	r22, 0xA4	; 164
    3432:	75 e0       	ldi	r23, 0x05	; 5
    3434:	ce 01       	movw	r24, r28
    3436:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    
		if(track!=4)
    343a:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    343e:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    3442:	04 97       	sbiw	r24, 0x04	; 4
    3444:	09 f4       	brne	.+2      	; 0x3448 <_ZN9red_beryl7relogioEv+0x30c>
    3446:	d7 c0       	rjmp	.+430    	; 0x35f6 <_ZN9red_beryl7relogioEv+0x4ba>
		{   //se NÃO for ANO.
			display.setTextSize(1);   //Definir tamanho do texto(1).
    3448:	61 e0       	ldi	r22, 0x01	; 1
    344a:	ce 01       	movw	r24, r28
    344c:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
			display.setTextColor(WHITE);    //Definir a cor do texto(BRANCO).
    3450:	61 e0       	ldi	r22, 0x01	; 1
    3452:	70 e0       	ldi	r23, 0x00	; 0
    3454:	ce 01       	movw	r24, r28
    3456:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
			display.setCursor(display.width()/2+11, lineSize*2+6);   //Definir a posição do cursor(metade da largura da tela mais 2 caracteres, uma linha e meia abaixo da barra superior).
    345a:	ce 01       	movw	r24, r28
    345c:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    3460:	97 fd       	sbrc	r25, 7
    3462:	01 96       	adiw	r24, 0x01	; 1
    3464:	95 95       	asr	r25
    3466:	87 95       	ror	r24
    3468:	bc 01       	movw	r22, r24
    346a:	65 5f       	subi	r22, 0xF5	; 245
    346c:	7f 4f       	sbci	r23, 0xFF	; 255
    346e:	46 e1       	ldi	r20, 0x16	; 22
    3470:	50 e0       	ldi	r21, 0x00	; 0
    3472:	ce 01       	movw	r24, r28
    3474:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
    3478:	aa c0       	rjmp	.+340    	; 0x35ce <_ZN9red_beryl7relogioEv+0x492>
			display.print(tempY);   //Imprime valor Temporario de ANO.
		}
	}
	else
	{
		timeTemp = millis();    //variavel temporario recebe tempo em millis.
    347a:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
		if((timeTemp-tempTemp) > 500)
    347e:	c0 90 68 11 	lds	r12, 0x1168	; 0x801168 <_ZZN9red_beryl7relogioEvE8tempTemp>
    3482:	d0 90 69 11 	lds	r13, 0x1169	; 0x801169 <_ZZN9red_beryl7relogioEvE8tempTemp+0x1>
    3486:	e0 90 6a 11 	lds	r14, 0x116A	; 0x80116a <_ZZN9red_beryl7relogioEvE8tempTemp+0x2>
    348a:	f0 90 6b 11 	lds	r15, 0x116B	; 0x80116b <_ZZN9red_beryl7relogioEvE8tempTemp+0x3>
    348e:	9b 01       	movw	r18, r22
    3490:	ac 01       	movw	r20, r24
    3492:	2c 19       	sub	r18, r12
    3494:	3d 09       	sbc	r19, r13
    3496:	4e 09       	sbc	r20, r14
    3498:	5f 09       	sbc	r21, r15
    349a:	69 01       	movw	r12, r18
    349c:	7a 01       	movw	r14, r20
    349e:	35 ef       	ldi	r19, 0xF5	; 245
    34a0:	c3 16       	cp	r12, r19
    34a2:	31 e0       	ldi	r19, 0x01	; 1
    34a4:	d3 06       	cpc	r13, r19
    34a6:	e1 04       	cpc	r14, r1
    34a8:	f1 04       	cpc	r15, r1
    34aa:	5c f0       	brlt	.+22     	; 0x34c2 <_ZN9red_beryl7relogioEv+0x386>
		{    //se a diferença entre as duas variaveis temporarias for de 1/2 segundos.
			blinker = true;    //blinker recebe valor true e é ativado.
    34ac:	21 e0       	ldi	r18, 0x01	; 1
    34ae:	20 93 16 04 	sts	0x0416, r18	; 0x800416 <_ZZN9red_beryl7relogioEvE7blinker>
			tempTemp = timeTemp;    //A variavel tempTemp recebe o valor da timeTemp para resetar a diferença.
    34b2:	60 93 68 11 	sts	0x1168, r22	; 0x801168 <_ZZN9red_beryl7relogioEvE8tempTemp>
    34b6:	70 93 69 11 	sts	0x1169, r23	; 0x801169 <_ZZN9red_beryl7relogioEvE8tempTemp+0x1>
    34ba:	80 93 6a 11 	sts	0x116A, r24	; 0x80116a <_ZZN9red_beryl7relogioEvE8tempTemp+0x2>
    34be:	90 93 6b 11 	sts	0x116B, r25	; 0x80116b <_ZZN9red_beryl7relogioEvE8tempTemp+0x3>
		}
		display.setTextSize(1);   //Definir tamanho do texto(1).
    34c2:	61 e0       	ldi	r22, 0x01	; 1
    34c4:	ce 01       	movw	r24, r28
    34c6:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
		display.setTextColor(WHITE);    //Definir a cor do texto(BRANCO).
    34ca:	61 e0       	ldi	r22, 0x01	; 1
    34cc:	70 e0       	ldi	r23, 0x00	; 0
    34ce:	ce 01       	movw	r24, r28
    34d0:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
		display.setCursor(display.width()/2-15, lineSize+4);   //Definir a posição do cursor(metade da largura da tela menos 2 caracteres e meio).
    34d4:	ce 01       	movw	r24, r28
    34d6:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    34da:	97 fd       	sbrc	r25, 7
    34dc:	01 96       	adiw	r24, 0x01	; 1
    34de:	95 95       	asr	r25
    34e0:	87 95       	ror	r24
    34e2:	bc 01       	movw	r22, r24
    34e4:	6f 50       	subi	r22, 0x0F	; 15
    34e6:	71 09       	sbc	r23, r1
    34e8:	4c e0       	ldi	r20, 0x0C	; 12
    34ea:	50 e0       	ldi	r21, 0x00	; 0
    34ec:	ce 01       	movw	r24, r28
    34ee:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		if(tempH<10)
    34f2:	80 91 74 11 	lds	r24, 0x1174	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
    34f6:	90 91 75 11 	lds	r25, 0x1175	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    34fa:	0a 97       	sbiw	r24, 0x0a	; 10
    34fc:	2c f4       	brge	.+10     	; 0x3508 <_ZN9red_beryl7relogioEv+0x3cc>
		{
			display.print("0");   //Se o valor de HORA for menor que 10(e portanto, apenas um caractere), imprime 0 na posição.
    34fe:	65 ef       	ldi	r22, 0xF5	; 245
    3500:	76 e0       	ldi	r23, 0x06	; 6
    3502:	ce 01       	movw	r24, r28
    3504:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		}
		display.print(tempH);   //Imprime valor Temporario de HORA.
    3508:	60 91 74 11 	lds	r22, 0x1174	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
    350c:	70 91 75 11 	lds	r23, 0x1175	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    3510:	4a e0       	ldi	r20, 0x0A	; 10
    3512:	50 e0       	ldi	r21, 0x00	; 0
    3514:	ce 01       	movw	r24, r28
    3516:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		display.print(":");   //Imprime separador de hora.
    351a:	69 e2       	ldi	r22, 0x29	; 41
    351c:	78 e0       	ldi	r23, 0x08	; 8
    351e:	ce 01       	movw	r24, r28
    3520:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		if(tempM<10)
    3524:	80 91 72 11 	lds	r24, 0x1172	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
    3528:	90 91 73 11 	lds	r25, 0x1173	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    352c:	0a 97       	sbiw	r24, 0x0a	; 10
    352e:	2c f4       	brge	.+10     	; 0x353a <_ZN9red_beryl7relogioEv+0x3fe>
		{
			display.print("0");   //Se o valor de MINUTE for menor que 10(e portanto, apenas um caractere), imprime 0 na posição.
    3530:	65 ef       	ldi	r22, 0xF5	; 245
    3532:	76 e0       	ldi	r23, 0x06	; 6
    3534:	ce 01       	movw	r24, r28
    3536:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		}
		display.print(tempM);   //Imprime valor Temporario de MINUTE.
    353a:	60 91 72 11 	lds	r22, 0x1172	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
    353e:	70 91 73 11 	lds	r23, 0x1173	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    3542:	4a e0       	ldi	r20, 0x0A	; 10
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	ce 01       	movw	r24, r28
    3548:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>

		display.setCursor(display.width()/2-25, lineSize*2+6);   //Definir a posição do cursor(metade da largura da tela menos 4 caracteres).
    354c:	ce 01       	movw	r24, r28
    354e:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    3552:	97 fd       	sbrc	r25, 7
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	95 95       	asr	r25
    3558:	87 95       	ror	r24
    355a:	bc 01       	movw	r22, r24
    355c:	69 51       	subi	r22, 0x19	; 25
    355e:	71 09       	sbc	r23, r1
    3560:	46 e1       	ldi	r20, 0x16	; 22
    3562:	50 e0       	ldi	r21, 0x00	; 0
    3564:	ce 01       	movw	r24, r28
    3566:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		if(tempD<10)
    356a:	80 91 70 11 	lds	r24, 0x1170	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
    356e:	90 91 71 11 	lds	r25, 0x1171	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    3572:	0a 97       	sbiw	r24, 0x0a	; 10
    3574:	2c f4       	brge	.+10     	; 0x3580 <_ZN9red_beryl7relogioEv+0x444>
		{
			display.print(" ");   //Se o valor de DIA for menor que 10(e portanto, apenas um caractere), imprime [ ] na posição.
    3576:	6f eb       	ldi	r22, 0xBF	; 191
    3578:	74 e0       	ldi	r23, 0x04	; 4
    357a:	ce 01       	movw	r24, r28
    357c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		}
		display.print(tempD);   //Imprime valor Temporario de DIA.
    3580:	60 91 70 11 	lds	r22, 0x1170	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
    3584:	70 91 71 11 	lds	r23, 0x1171	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    3588:	4a e0       	ldi	r20, 0x0A	; 10
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	ce 01       	movw	r24, r28
    358e:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		display.print("/");   //Imprime separador de data.
    3592:	64 ea       	ldi	r22, 0xA4	; 164
    3594:	75 e0       	ldi	r23, 0x05	; 5
    3596:	ce 01       	movw	r24, r28
    3598:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		if(tempMn<10)
    359c:	80 91 6e 11 	lds	r24, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    35a0:	90 91 6f 11 	lds	r25, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    35a4:	0a 97       	sbiw	r24, 0x0a	; 10
    35a6:	2c f4       	brge	.+10     	; 0x35b2 <_ZN9red_beryl7relogioEv+0x476>
		{
			display.print("0");   //Se o valor de MES for menor que 10(e portanto, apenas um caractere), imprime 0 na posição.
    35a8:	65 ef       	ldi	r22, 0xF5	; 245
    35aa:	76 e0       	ldi	r23, 0x06	; 6
    35ac:	ce 01       	movw	r24, r28
    35ae:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		}
		display.print(tempMn);    //Imprime valor Temporario de MES.
    35b2:	60 91 6e 11 	lds	r22, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    35b6:	70 91 6f 11 	lds	r23, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    35ba:	4a e0       	ldi	r20, 0x0A	; 10
    35bc:	50 e0       	ldi	r21, 0x00	; 0
    35be:	ce 01       	movw	r24, r28
    35c0:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		display.print("/");   //Imprime separador de data.
    35c4:	64 ea       	ldi	r22, 0xA4	; 164
    35c6:	75 e0       	ldi	r23, 0x05	; 5
    35c8:	ce 01       	movw	r24, r28
    35ca:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		if(tempY<10)
    35ce:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <_ZZN9red_beryl7relogioEvE5tempY>
    35d2:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <_ZZN9red_beryl7relogioEvE5tempY+0x1>
    35d6:	0a 97       	sbiw	r24, 0x0a	; 10
    35d8:	2c f4       	brge	.+10     	; 0x35e4 <_ZN9red_beryl7relogioEv+0x4a8>
		{
			display.print("0");   //Se o valor de ANO for menor que 10(e portanto, apenas um caractere), imprime 0 na posição.
    35da:	65 ef       	ldi	r22, 0xF5	; 245
    35dc:	76 e0       	ldi	r23, 0x06	; 6
    35de:	ce 01       	movw	r24, r28
    35e0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		}
		display.print(tempY);   //Imprime valor Temporario de ANO.
    35e4:	60 91 6c 11 	lds	r22, 0x116C	; 0x80116c <_ZZN9red_beryl7relogioEvE5tempY>
    35e8:	70 91 6d 11 	lds	r23, 0x116D	; 0x80116d <_ZZN9red_beryl7relogioEvE5tempY+0x1>
    35ec:	4a e0       	ldi	r20, 0x0A	; 10
    35ee:	50 e0       	ldi	r21, 0x00	; 0
    35f0:	ce 01       	movw	r24, r28
    35f2:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	}
	switch(track)
    35f6:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    35fa:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    35fe:	82 30       	cpi	r24, 0x02	; 2
    3600:	91 05       	cpc	r25, r1
    3602:	09 f4       	brne	.+2      	; 0x3606 <_ZN9red_beryl7relogioEv+0x4ca>
    3604:	9c c0       	rjmp	.+312    	; 0x373e <_ZN9red_beryl7relogioEv+0x602>
    3606:	34 f4       	brge	.+12     	; 0x3614 <_ZN9red_beryl7relogioEv+0x4d8>
    3608:	00 97       	sbiw	r24, 0x00	; 0
    360a:	61 f0       	breq	.+24     	; 0x3624 <_ZN9red_beryl7relogioEv+0x4e8>
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	09 f4       	brne	.+2      	; 0x3612 <_ZN9red_beryl7relogioEv+0x4d6>
    3610:	59 c0       	rjmp	.+178    	; 0x36c4 <_ZN9red_beryl7relogioEv+0x588>
    3612:	c8 c1       	rjmp	.+912    	; 0x39a4 <_ZN9red_beryl7relogioEv+0x868>
    3614:	83 30       	cpi	r24, 0x03	; 3
    3616:	91 05       	cpc	r25, r1
    3618:	09 f4       	brne	.+2      	; 0x361c <_ZN9red_beryl7relogioEv+0x4e0>
    361a:	fc c0       	rjmp	.+504    	; 0x3814 <_ZN9red_beryl7relogioEv+0x6d8>
    361c:	04 97       	sbiw	r24, 0x04	; 4
    361e:	09 f4       	brne	.+2      	; 0x3622 <_ZN9red_beryl7relogioEv+0x4e6>
    3620:	81 c1       	rjmp	.+770    	; 0x3924 <_ZN9red_beryl7relogioEv+0x7e8>
    3622:	c0 c1       	rjmp	.+896    	; 0x39a4 <_ZN9red_beryl7relogioEv+0x868>
	{
		case 0: //hora: de 0 a 23 horas.
		{
			if(_up)  //se o botão UP tiver valor true.
    3624:	f8 01       	movw	r30, r16
    3626:	86 85       	ldd	r24, Z+14	; 0x0e
    3628:	88 23       	and	r24, r24
    362a:	99 f0       	breq	.+38     	; 0x3652 <_ZN9red_beryl7relogioEv+0x516>
			{
				if(tempH<23)
    362c:	80 91 74 11 	lds	r24, 0x1174	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
    3630:	90 91 75 11 	lds	r25, 0x1175	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    3634:	87 31       	cpi	r24, 0x17	; 23
    3636:	91 05       	cpc	r25, r1
    3638:	34 f4       	brge	.+12     	; 0x3646 <_ZN9red_beryl7relogioEv+0x50a>
				{ //se a hora for menor que 23 horas
					tempH++;  //adiciona uma hora a mais.
    363a:	01 96       	adiw	r24, 0x01	; 1
    363c:	90 93 75 11 	sts	0x1175, r25	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    3640:	80 93 74 11 	sts	0x1174, r24	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
    3644:	04 c0       	rjmp	.+8      	; 0x364e <_ZN9red_beryl7relogioEv+0x512>
				}
				else
				{ //se a hora for 23 horas.
					tempH = 0;  //volta a hora 0(equivalente as 24 horas)
    3646:	10 92 75 11 	sts	0x1175, r1	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    364a:	10 92 74 11 	sts	0x1174, r1	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
				}
				_up=false; //reseta o valor do botão UP para false.
    364e:	f8 01       	movw	r30, r16
    3650:	16 86       	std	Z+14, r1	; 0x0e
			}
			if(_down)  //se o botão DOWN tiver valor true.
    3652:	f8 01       	movw	r30, r16
    3654:	87 85       	ldd	r24, Z+15	; 0x0f
    3656:	88 23       	and	r24, r24
    3658:	89 f0       	breq	.+34     	; 0x367c <_ZN9red_beryl7relogioEv+0x540>
			{
				if(tempH>0)
    365a:	80 91 74 11 	lds	r24, 0x1174	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
    365e:	90 91 75 11 	lds	r25, 0x1175	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    3662:	18 16       	cp	r1, r24
    3664:	19 06       	cpc	r1, r25
    3666:	14 f4       	brge	.+4      	; 0x366c <_ZN9red_beryl7relogioEv+0x530>
				{  //se a hora for maior que 0 horas.
					tempH--;  //diminui uma hora.
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	02 c0       	rjmp	.+4      	; 0x3670 <_ZN9red_beryl7relogioEv+0x534>
				}
				else
				{ //se a hora tiver valor 0.
					tempH = 23; //volta a hora 23.
    366c:	87 e1       	ldi	r24, 0x17	; 23
    366e:	90 e0       	ldi	r25, 0x00	; 0
    3670:	90 93 75 11 	sts	0x1175, r25	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    3674:	80 93 74 11 	sts	0x1174, r24	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
				}
				_down=false; //reseta o valor do botão DOWN para false.
    3678:	f8 01       	movw	r30, r16
    367a:	17 86       	std	Z+15, r1	; 0x0f
			}
			if(_yes) //se o botão YES tiver valor true.
    367c:	f8 01       	movw	r30, r16
    367e:	80 89       	ldd	r24, Z+16	; 0x10
    3680:	88 23       	and	r24, r24
    3682:	b1 f0       	breq	.+44     	; 0x36b0 <_ZN9red_beryl7relogioEv+0x574>
			{
				//time.setHour(tempH);  //setta o minuto do rtc com o valor de tempH;
				clock.set_hora(tempH);
    3684:	60 91 74 11 	lds	r22, 0x1174	; 0x801174 <_ZZN9red_beryl7relogioEvE5tempH>
    3688:	70 91 75 11 	lds	r23, 0x1175	; 0x801175 <_ZZN9red_beryl7relogioEvE5tempH+0x1>
    368c:	c8 01       	movw	r24, r16
    368e:	8f 54       	subi	r24, 0x4F	; 79
    3690:	9f 4f       	sbci	r25, 0xFF	; 255
    3692:	0e 94 24 48 	call	0x9048	; 0x9048 <_ZN10red_quartz8set_horaEi>
				_yes=false;  //reseta o valor do botão YES para false. Melhor fazer isso antes de avançar a track.
    3696:	f8 01       	movw	r30, r16
    3698:	10 8a       	std	Z+16, r1	; 0x10
				doing=false;    //reseta o valor de doing para que a proxima vez que adjustClock for chamado que os valores das variaveis sejam recuperados do rtc.
    369a:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <_ZZN9red_beryl7relogioEvE5doing>
				track++;  //track avança para a proxima.
    369e:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    36a2:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    36a6:	01 96       	adiw	r24, 0x01	; 1
    36a8:	90 93 67 11 	sts	0x1167, r25	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    36ac:	80 93 66 11 	sts	0x1166, r24	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
			}
			if(_no)  //se o botão NO tiver valor true.
    36b0:	f8 01       	movw	r30, r16
    36b2:	c1 89       	ldd	r28, Z+17	; 0x11
    36b4:	cc 23       	and	r28, r28
    36b6:	09 f4       	brne	.+2      	; 0x36ba <_ZN9red_beryl7relogioEv+0x57e>
    36b8:	75 c1       	rjmp	.+746    	; 0x39a4 <_ZN9red_beryl7relogioEv+0x868>
			{
				doing=false;    //reseta o valor de doing para que a proxima vez que adjustClock for chamado que os valores das variaveis sejam recuperados do rtc.
    36ba:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <_ZZN9red_beryl7relogioEvE5doing>
				_no=false;  //resetar o valor de YES para false.
    36be:	f8 01       	movw	r30, r16
    36c0:	11 8a       	std	Z+17, r1	; 0x11
    36c2:	5d c1       	rjmp	.+698    	; 0x397e <_ZN9red_beryl7relogioEv+0x842>
			}
			break;  //fim da logica da track 0 representando as horas.
		}
		case 1: //minuto
		{     
			if(_up)  //se o botão UP tiver valor true.
    36c4:	f8 01       	movw	r30, r16
    36c6:	86 85       	ldd	r24, Z+14	; 0x0e
    36c8:	88 23       	and	r24, r24
    36ca:	99 f0       	breq	.+38     	; 0x36f2 <_ZN9red_beryl7relogioEv+0x5b6>
			{
				if(tempM<59)  //se o minuto for menor que 59.
    36cc:	80 91 72 11 	lds	r24, 0x1172	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
    36d0:	90 91 73 11 	lds	r25, 0x1173	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    36d4:	8b 33       	cpi	r24, 0x3B	; 59
    36d6:	91 05       	cpc	r25, r1
    36d8:	34 f4       	brge	.+12     	; 0x36e6 <_ZN9red_beryl7relogioEv+0x5aa>
				{
					tempM++; //adiciona um minuto a mais.
    36da:	01 96       	adiw	r24, 0x01	; 1
    36dc:	90 93 73 11 	sts	0x1173, r25	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    36e0:	80 93 72 11 	sts	0x1172, r24	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
    36e4:	04 c0       	rjmp	.+8      	; 0x36ee <_ZN9red_beryl7relogioEv+0x5b2>
				}
				else  //se o minuto for 59.
				{
					tempM = 0;  //retornar ao minuto 0.
    36e6:	10 92 73 11 	sts	0x1173, r1	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    36ea:	10 92 72 11 	sts	0x1172, r1	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
				}
				_up=false; //reseta o valor do botão UP para false.
    36ee:	f8 01       	movw	r30, r16
    36f0:	16 86       	std	Z+14, r1	; 0x0e
			}
			if(_down)  //se o botão DOWN tiver valor true.
    36f2:	f8 01       	movw	r30, r16
    36f4:	87 85       	ldd	r24, Z+15	; 0x0f
    36f6:	88 23       	and	r24, r24
    36f8:	89 f0       	breq	.+34     	; 0x371c <_ZN9red_beryl7relogioEv+0x5e0>
			{
				if(tempM>0)
    36fa:	80 91 72 11 	lds	r24, 0x1172	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
    36fe:	90 91 73 11 	lds	r25, 0x1173	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    3702:	18 16       	cp	r1, r24
    3704:	19 06       	cpc	r1, r25
    3706:	14 f4       	brge	.+4      	; 0x370c <_ZN9red_beryl7relogioEv+0x5d0>
				{  //se o minuto for maior que 0.
					tempM--;  //minuto diminui por um.
    3708:	01 97       	sbiw	r24, 0x01	; 1
    370a:	02 c0       	rjmp	.+4      	; 0x3710 <_ZN9red_beryl7relogioEv+0x5d4>
				}
				else
				{ //se o minuto for 0.
					tempM=59; //minuto retornar ao valor 59.
    370c:	8b e3       	ldi	r24, 0x3B	; 59
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	90 93 73 11 	sts	0x1173, r25	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    3714:	80 93 72 11 	sts	0x1172, r24	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
				}
				_down=false; //reseta o valor do botão DOWN para false.
    3718:	f8 01       	movw	r30, r16
    371a:	17 86       	std	Z+15, r1	; 0x0f
			}
			if(_yes) //se o botão YES tiver valor true.
    371c:	f8 01       	movw	r30, r16
    371e:	80 89       	ldd	r24, Z+16	; 0x10
    3720:	88 23       	and	r24, r24
    3722:	09 f4       	brne	.+2      	; 0x3726 <_ZN9red_beryl7relogioEv+0x5ea>
    3724:	ed c0       	rjmp	.+474    	; 0x3900 <_ZN9red_beryl7relogioEv+0x7c4>
			{
				clock.set_minuto(tempM);
    3726:	60 91 72 11 	lds	r22, 0x1172	; 0x801172 <_ZZN9red_beryl7relogioEvE5tempM>
    372a:	70 91 73 11 	lds	r23, 0x1173	; 0x801173 <_ZZN9red_beryl7relogioEvE5tempM+0x1>
    372e:	c8 01       	movw	r24, r16
    3730:	8f 54       	subi	r24, 0x4F	; 79
    3732:	9f 4f       	sbci	r25, 0xFF	; 255
    3734:	0e 94 1a 48 	call	0x9034	; 0x9034 <_ZN10red_quartz10set_minutoEi>
				_yes=false;  //reseta o valor do botão YES para false.
    3738:	f8 01       	movw	r30, r16
    373a:	10 8a       	std	Z+16, r1	; 0x10
    373c:	d6 c0       	rjmp	.+428    	; 0x38ea <_ZN9red_beryl7relogioEv+0x7ae>
			break;  //fim da logica da track 1 representando os minutos.
      
		}
		case 2: //dia
		{ 
			if(_up)
    373e:	f8 01       	movw	r30, r16
    3740:	86 85       	ldd	r24, Z+14	; 0x0e
    3742:	88 23       	and	r24, r24
    3744:	49 f1       	breq	.+82     	; 0x3798 <_ZN9red_beryl7relogioEv+0x65c>
			{  //se o botão UP tiver valor true.  
				if(tempMn==2)
    3746:	20 91 6e 11 	lds	r18, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    374a:	30 91 6f 11 	lds	r19, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    374e:	80 91 70 11 	lds	r24, 0x1170	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
    3752:	90 91 71 11 	lds	r25, 0x1171	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    3756:	22 30       	cpi	r18, 0x02	; 2
    3758:	31 05       	cpc	r19, r1
    375a:	21 f4       	brne	.+8      	; 0x3764 <_ZN9red_beryl7relogioEv+0x628>
				{  //se o mes for fevereiro
					if(tempD<29)
    375c:	8d 31       	cpi	r24, 0x1D	; 29
    375e:	91 05       	cpc	r25, r1
    3760:	64 f4       	brge	.+24     	; 0x377a <_ZN9red_beryl7relogioEv+0x63e>
    3762:	13 c0       	rjmp	.+38     	; 0x378a <_ZN9red_beryl7relogioEv+0x64e>
    3764:	a9 01       	movw	r20, r18
    3766:	41 70       	andi	r20, 0x01	; 1
    3768:	55 27       	eor	r21, r21
					else
					{ //se o dia for 29(ou mais).
						tempD = 1;  //volta ao primeiro dia do mes.
					}
				}
				else if(tempMn<8)
    376a:	28 30       	cpi	r18, 0x08	; 8
    376c:	31 05       	cpc	r19, r1
    376e:	44 f4       	brge	.+16     	; 0x3780 <_ZN9red_beryl7relogioEv+0x644>
				{  //se o mes for antes de agosto
					if(tempMn % 2 != 0)
    3770:	45 2b       	or	r20, r21
    3772:	41 f0       	breq	.+16     	; 0x3784 <_ZN9red_beryl7relogioEv+0x648>
				}
				else
				{ //se o mes for pelo menos agosto.
					if(tempMn % 2 == 0)
					{ //se o mes for par(mese pares a partir de agosto tem 31 dias)
						if(tempD<31)
    3774:	8f 31       	cpi	r24, 0x1F	; 31
    3776:	91 05       	cpc	r25, r1
    3778:	44 f0       	brlt	.+16     	; 0x378a <_ZN9red_beryl7relogioEv+0x64e>
					{ //se o dia for menor que 29
						tempD++;  //adiciona um dias a mais.
					}
					else
					{ //se o dia for 29(ou mais).
						tempD = 1;  //volta ao primeiro dia do mes.
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	06 c0       	rjmp	.+12     	; 0x378c <_ZN9red_beryl7relogioEv+0x650>
						}
					}
				}
				else
				{ //se o mes for pelo menos agosto.
					if(tempMn % 2 == 0)
    3780:	45 2b       	or	r20, r21
    3782:	c1 f3       	breq	.-16     	; 0x3774 <_ZN9red_beryl7relogioEv+0x638>
							tempD = 1;  //volta ao primeiro dia do mes.
						}
					}
					else
					{ //se o mes for impar(mese impares a partir de agosto tem 30 dias.
						if(tempD<30)
    3784:	8e 31       	cpi	r24, 0x1E	; 30
    3786:	91 05       	cpc	r25, r1
    3788:	c4 f7       	brge	.-16     	; 0x377a <_ZN9red_beryl7relogioEv+0x63e>
						{ //se o dia for menor que 30.
							tempD++;  //adiciona um dias a mais.
    378a:	01 96       	adiw	r24, 0x01	; 1
    378c:	90 93 71 11 	sts	0x1171, r25	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    3790:	80 93 70 11 	sts	0x1170, r24	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
						{ //se o dia for 30.
							tempD = 1;  //volta ao primeiro dias do mes.
						}
					}
				}
				_up=false; //reseta o valor do botão UP para false.
    3794:	f8 01       	movw	r30, r16
    3796:	16 86       	std	Z+14, r1	; 0x0e
			}
			if(_down)
    3798:	f8 01       	movw	r30, r16
    379a:	87 85       	ldd	r24, Z+15	; 0x0f
    379c:	88 23       	and	r24, r24
    379e:	41 f1       	breq	.+80     	; 0x37f0 <_ZN9red_beryl7relogioEv+0x6b4>
			{  //se o valor do botão DOWN for true.
				if(tempD>1)
    37a0:	80 91 70 11 	lds	r24, 0x1170	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
    37a4:	90 91 71 11 	lds	r25, 0x1171	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    37a8:	82 30       	cpi	r24, 0x02	; 2
    37aa:	91 05       	cpc	r25, r1
    37ac:	14 f0       	brlt	.+4      	; 0x37b2 <_ZN9red_beryl7relogioEv+0x676>
				{  //se o dia for maior que 1.
					tempD--;
    37ae:	01 97       	sbiw	r24, 0x01	; 1
    37b0:	13 c0       	rjmp	.+38     	; 0x37d8 <_ZN9red_beryl7relogioEv+0x69c>
				}
				else
				{ //se o dia for 1.
					if(tempMn==2)
    37b2:	80 91 6e 11 	lds	r24, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    37b6:	90 91 6f 11 	lds	r25, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    37ba:	82 30       	cpi	r24, 0x02	; 2
    37bc:	91 05       	cpc	r25, r1
    37be:	19 f4       	brne	.+6      	; 0x37c6 <_ZN9red_beryl7relogioEv+0x68a>
					{  //se o mes for fevereiro.
						tempD = 28; //dia retornar a 28.
    37c0:	8c e1       	ldi	r24, 0x1C	; 28
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	09 c0       	rjmp	.+18     	; 0x37d8 <_ZN9red_beryl7relogioEv+0x69c>
    37c6:	9c 01       	movw	r18, r24
    37c8:	21 70       	andi	r18, 0x01	; 1
    37ca:	33 27       	eor	r19, r19
					}
					else if(tempMn<8)
    37cc:	08 97       	sbiw	r24, 0x08	; 8
    37ce:	5c f4       	brge	.+22     	; 0x37e6 <_ZN9red_beryl7relogioEv+0x6aa>
					{  //se o mes não for fevereiro e for antes de agosto.
						if(tempMn % 2 == 0)
    37d0:	23 2b       	or	r18, r19
    37d2:	59 f4       	brne	.+22     	; 0x37ea <_ZN9red_beryl7relogioEv+0x6ae>
						{  //se o numero do mes for par.(meses pares antes de agosto tem 30 dias exceto por fevereiro)
							tempD = 30; //dia retorna a 30.
    37d4:	8e e1       	ldi	r24, 0x1E	; 30
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	90 93 71 11 	sts	0x1171, r25	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    37dc:	80 93 70 11 	sts	0x1170, r24	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
						{ //se o numero do mes for impar.(30 dias)
							tempD = 30; //dia retorna a 30.
						}
					}
				}
				_down=false; //reseta o valor do botão DOWN para false.
    37e0:	f8 01       	movw	r30, r16
    37e2:	17 86       	std	Z+15, r1	; 0x0f
    37e4:	05 c0       	rjmp	.+10     	; 0x37f0 <_ZN9red_beryl7relogioEv+0x6b4>
							tempD = 31; //dia retorna a 31.
						}
					}
					else
					{ //se o mes não for vereiro e for pelo menos agosto.
						if(tempMn % 2 == 0)
    37e6:	23 2b       	or	r18, r19
    37e8:	a9 f7       	brne	.-22     	; 0x37d4 <_ZN9red_beryl7relogioEv+0x698>
						{  //se o numero do mes for par.(meses pares antes de agosto tem 30 dias exceto por fevereiro)
							tempD = 30; //dia retorna a 30.
						}
						else
						{ //se o numero do mes for impar(31 dias).
							tempD = 31; //dia retorna a 31.
    37ea:	8f e1       	ldi	r24, 0x1F	; 31
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	f4 cf       	rjmp	.-24     	; 0x37d8 <_ZN9red_beryl7relogioEv+0x69c>
						}
					}
				}
				_down=false; //reseta o valor do botão DOWN para false.
			}
			if(_yes) //se o valor do botão YES for true.
    37f0:	f8 01       	movw	r30, r16
    37f2:	80 89       	ldd	r24, Z+16	; 0x10
    37f4:	88 23       	and	r24, r24
    37f6:	09 f4       	brne	.+2      	; 0x37fa <_ZN9red_beryl7relogioEv+0x6be>
    37f8:	83 c0       	rjmp	.+262    	; 0x3900 <_ZN9red_beryl7relogioEv+0x7c4>
			{
				_yes=false;  //reseta o valor do botão YES para false.
    37fa:	10 8a       	std	Z+16, r1	; 0x10
				clock.set_dia(tempD, tempMn);
    37fc:	40 91 6e 11 	lds	r20, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    3800:	50 91 6f 11 	lds	r21, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    3804:	60 91 70 11 	lds	r22, 0x1170	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
    3808:	70 91 71 11 	lds	r23, 0x1171	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    380c:	c8 01       	movw	r24, r16
    380e:	8f 54       	subi	r24, 0x4F	; 79
    3810:	9f 4f       	sbci	r25, 0xFF	; 255
    3812:	69 c0       	rjmp	.+210    	; 0x38e6 <_ZN9red_beryl7relogioEv+0x7aa>
			}
			break;  //final da track 2 do dia.
		}
		case 3: //mes
		{
			if(_up)  //se o valor do botão UP for true.
    3814:	f8 01       	movw	r30, r16
    3816:	86 85       	ldd	r24, Z+14	; 0x0e
    3818:	88 23       	and	r24, r24
    381a:	89 f0       	breq	.+34     	; 0x383e <_ZN9red_beryl7relogioEv+0x702>
			{
				if(tempMn <12)
    381c:	80 91 6e 11 	lds	r24, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    3820:	90 91 6f 11 	lds	r25, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    3824:	8c 30       	cpi	r24, 0x0C	; 12
    3826:	91 05       	cpc	r25, r1
    3828:	14 f4       	brge	.+4      	; 0x382e <_ZN9red_beryl7relogioEv+0x6f2>
				{ //se o mes for antes de dezembro.
					tempMn++; //adiciona um mes.
    382a:	01 96       	adiw	r24, 0x01	; 1
    382c:	02 c0       	rjmp	.+4      	; 0x3832 <_ZN9red_beryl7relogioEv+0x6f6>
				}
				else
				{ //se o mes for dezembro.
					tempMn = 1; //retorna ao mes 1
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	90 93 6f 11 	sts	0x116F, r25	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    3836:	80 93 6e 11 	sts	0x116E, r24	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
				}
				_up=false; //reseta o valor do botão UP para false.
    383a:	f8 01       	movw	r30, r16
    383c:	16 86       	std	Z+14, r1	; 0x0e
			}
			if(_down)  //se o valor do botão DOWN for true.
    383e:	f8 01       	movw	r30, r16
    3840:	87 85       	ldd	r24, Z+15	; 0x0f
    3842:	88 23       	and	r24, r24
    3844:	89 f0       	breq	.+34     	; 0x3868 <_ZN9red_beryl7relogioEv+0x72c>
			{
				if(tempMn>1)
    3846:	80 91 6e 11 	lds	r24, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    384a:	90 91 6f 11 	lds	r25, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    384e:	82 30       	cpi	r24, 0x02	; 2
    3850:	91 05       	cpc	r25, r1
    3852:	14 f0       	brlt	.+4      	; 0x3858 <_ZN9red_beryl7relogioEv+0x71c>
				{ //se o mes for maior que 1.
					tempMn--; //diminuit um mes.
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	02 c0       	rjmp	.+4      	; 0x385c <_ZN9red_beryl7relogioEv+0x720>
				}
				else
				{ //se o mes for 1;
					tempMn = 12;  //retorna ao mes 12.
    3858:	8c e0       	ldi	r24, 0x0C	; 12
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	90 93 6f 11 	sts	0x116F, r25	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    3860:	80 93 6e 11 	sts	0x116E, r24	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
				}
				_down=false; //reseta o valor do botão DOWN para false.
    3864:	f8 01       	movw	r30, r16
    3866:	17 86       	std	Z+15, r1	; 0x0f
			}
			if(_yes) //se o valor do botão YES for true.
    3868:	f8 01       	movw	r30, r16
    386a:	80 89       	ldd	r24, Z+16	; 0x10
    386c:	88 23       	and	r24, r24
    386e:	09 f4       	brne	.+2      	; 0x3872 <_ZN9red_beryl7relogioEv+0x736>
    3870:	47 c0       	rjmp	.+142    	; 0x3900 <_ZN9red_beryl7relogioEv+0x7c4>
			{
				_yes=false;  //reseta o valor do botão YES para false.
    3872:	10 8a       	std	Z+16, r1	; 0x10
				clock.set_mes(tempMn);
    3874:	e8 01       	movw	r28, r16
    3876:	cf 54       	subi	r28, 0x4F	; 79
    3878:	df 4f       	sbci	r29, 0xFF	; 255
    387a:	60 91 6e 11 	lds	r22, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    387e:	70 91 6f 11 	lds	r23, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    3882:	ce 01       	movw	r24, r28
    3884:	0e 94 2e 48 	call	0x905c	; 0x905c <_ZN10red_quartz7set_mesEi>
				if(tempD>28)
    3888:	80 91 70 11 	lds	r24, 0x1170	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
    388c:	90 91 71 11 	lds	r25, 0x1171	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    3890:	8d 31       	cpi	r24, 0x1D	; 29
    3892:	91 05       	cpc	r25, r1
    3894:	54 f1       	brlt	.+84     	; 0x38ea <_ZN9red_beryl7relogioEv+0x7ae>
				{  //se o dia for maior ou igual a 28 quando o mes for mudado.
					if(tempMn==2)
    3896:	40 91 6e 11 	lds	r20, 0x116E	; 0x80116e <_ZZN9red_beryl7relogioEvE6tempMn>
    389a:	50 91 6f 11 	lds	r21, 0x116F	; 0x80116f <_ZZN9red_beryl7relogioEvE6tempMn+0x1>
    389e:	42 30       	cpi	r20, 0x02	; 2
    38a0:	51 05       	cpc	r21, r1
    38a2:	59 f4       	brne	.+22     	; 0x38ba <_ZN9red_beryl7relogioEv+0x77e>
					{  //se o mes for fevereiro
						tempD=28; //tempD muda para dia 28.
    38a4:	8c e1       	ldi	r24, 0x1C	; 28
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	90 93 71 11 	sts	0x1171, r25	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    38ac:	80 93 70 11 	sts	0x1170, r24	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
						clock.set_dia(tempD, tempMn);
    38b0:	42 e0       	ldi	r20, 0x02	; 2
    38b2:	50 e0       	ldi	r21, 0x00	; 0
    38b4:	6c e1       	ldi	r22, 0x1C	; 28
    38b6:	70 e0       	ldi	r23, 0x00	; 0
    38b8:	15 c0       	rjmp	.+42     	; 0x38e4 <_ZN9red_beryl7relogioEv+0x7a8>
					}
					else if(tempD>30)
    38ba:	4f 97       	sbiw	r24, 0x1f	; 31
    38bc:	b4 f0       	brlt	.+44     	; 0x38ea <_ZN9red_beryl7relogioEv+0x7ae>
    38be:	ca 01       	movw	r24, r20
    38c0:	81 70       	andi	r24, 0x01	; 1
    38c2:	99 27       	eor	r25, r25
					{  //se o mes não for fevereiro e o dia for maior que 31.
						if(tempMn < 8)
    38c4:	48 30       	cpi	r20, 0x08	; 8
    38c6:	51 05       	cpc	r21, r1
    38c8:	1c f4       	brge	.+6      	; 0x38d0 <_ZN9red_beryl7relogioEv+0x794>
						{ //se o mes for antes de agosto.
							if(tempMn % 2 == 0)
    38ca:	89 2b       	or	r24, r25
    38cc:	71 f4       	brne	.+28     	; 0x38ea <_ZN9red_beryl7relogioEv+0x7ae>
    38ce:	02 c0       	rjmp	.+4      	; 0x38d4 <_ZN9red_beryl7relogioEv+0x798>
							{ //se o mes for par(meses pares antes de agosto tem 30 dias).
								tempD = 30; //tempD muda para dia 30.
								clock.set_dia(tempD, tempMn);
							}
						}
						else if(tempMn % 2 != 0)
    38d0:	89 2b       	or	r24, r25
    38d2:	59 f0       	breq	.+22     	; 0x38ea <_ZN9red_beryl7relogioEv+0x7ae>
						{ //se o mes for pelo menos agosto e impar(meses impares a partir de agosto tem 30 dias).
							tempD = 30; //tempD muda para dia 30.
    38d4:	8e e1       	ldi	r24, 0x1E	; 30
    38d6:	90 e0       	ldi	r25, 0x00	; 0
    38d8:	90 93 71 11 	sts	0x1171, r25	; 0x801171 <_ZZN9red_beryl7relogioEvE5tempD+0x1>
    38dc:	80 93 70 11 	sts	0x1170, r24	; 0x801170 <_ZZN9red_beryl7relogioEvE5tempD>
							clock.set_dia(tempD, tempMn);
    38e0:	6e e1       	ldi	r22, 0x1E	; 30
    38e2:	70 e0       	ldi	r23, 0x00	; 0
    38e4:	ce 01       	movw	r24, r28
    38e6:	0e 94 6e 48 	call	0x90dc	; 0x90dc <_ZN10red_quartz7set_diaEii>
						}
					}
				}
				doing=false;    //reseta o valor de doing para que a proxima vez que adjustClock for chamado que os valores das variaveis sejam recuperados do rtc.        
    38ea:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <_ZZN9red_beryl7relogioEvE5doing>
				track++;  //avança para a proxima track.
    38ee:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    38f2:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    38f6:	01 96       	adiw	r24, 0x01	; 1
    38f8:	90 93 67 11 	sts	0x1167, r25	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    38fc:	80 93 66 11 	sts	0x1166, r24	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
			}
			if(_no)  //se o valor do botão NO for true.
    3900:	f8 01       	movw	r30, r16
    3902:	81 89       	ldd	r24, Z+17	; 0x11
    3904:	88 23       	and	r24, r24
    3906:	09 f4       	brne	.+2      	; 0x390a <_ZN9red_beryl7relogioEv+0x7ce>
    3908:	4d c0       	rjmp	.+154    	; 0x39a4 <_ZN9red_beryl7relogioEv+0x868>
			{
				doing=false;    //reseta o valor de doing para que a proxima vez que adjustClock for chamado que os valores das variaveis sejam recuperados do rtc.
    390a:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <_ZZN9red_beryl7relogioEvE5doing>
				_no=false; //reseta o valor do botão NO para false.
    390e:	11 8a       	std	Z+17, r1	; 0x11
				track--;  //retorna a track anterior.
    3910:	80 91 66 11 	lds	r24, 0x1166	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    3914:	90 91 67 11 	lds	r25, 0x1167	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    3918:	01 97       	sbiw	r24, 0x01	; 1
    391a:	90 93 67 11 	sts	0x1167, r25	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    391e:	80 93 66 11 	sts	0x1166, r24	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    3922:	40 c0       	rjmp	.+128    	; 0x39a4 <_ZN9red_beryl7relogioEv+0x868>
			}      
			break;  //final da track 3.
		}
		case 4: //ano
		{
			if(_up)  //se o valor do botão UP for true.
    3924:	f8 01       	movw	r30, r16
    3926:	86 85       	ldd	r24, Z+14	; 0x0e
    3928:	88 23       	and	r24, r24
    392a:	51 f0       	breq	.+20     	; 0x3940 <_ZN9red_beryl7relogioEv+0x804>
			{
				tempY++;  //adiciona um numero ao valor de ano.
    392c:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <_ZZN9red_beryl7relogioEvE5tempY>
    3930:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <_ZZN9red_beryl7relogioEvE5tempY+0x1>
    3934:	01 96       	adiw	r24, 0x01	; 1
    3936:	90 93 6d 11 	sts	0x116D, r25	; 0x80116d <_ZZN9red_beryl7relogioEvE5tempY+0x1>
    393a:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <_ZZN9red_beryl7relogioEvE5tempY>
				_up=false; //reseta o valor do botão UP para false.
    393e:	16 86       	std	Z+14, r1	; 0x0e
			}
			if(_down)  //se o valor do botão DOWN for true.
    3940:	f8 01       	movw	r30, r16
    3942:	87 85       	ldd	r24, Z+15	; 0x0f
    3944:	88 23       	and	r24, r24
    3946:	51 f0       	breq	.+20     	; 0x395c <_ZN9red_beryl7relogioEv+0x820>
			{
				tempY--;  //diminui o valor de ano.
    3948:	80 91 6c 11 	lds	r24, 0x116C	; 0x80116c <_ZZN9red_beryl7relogioEvE5tempY>
    394c:	90 91 6d 11 	lds	r25, 0x116D	; 0x80116d <_ZZN9red_beryl7relogioEvE5tempY+0x1>
    3950:	01 97       	sbiw	r24, 0x01	; 1
    3952:	90 93 6d 11 	sts	0x116D, r25	; 0x80116d <_ZZN9red_beryl7relogioEvE5tempY+0x1>
    3956:	80 93 6c 11 	sts	0x116C, r24	; 0x80116c <_ZZN9red_beryl7relogioEvE5tempY>
				_down=false; //reseta o valor do botão DOWN para false.
    395a:	17 86       	std	Z+15, r1	; 0x0f
			}
			if(_yes) //se o valor do botão YES for true.
    395c:	f8 01       	movw	r30, r16
    395e:	c0 89       	ldd	r28, Z+16	; 0x10
    3960:	cc 23       	and	r28, r28
    3962:	91 f0       	breq	.+36     	; 0x3988 <_ZN9red_beryl7relogioEv+0x84c>
			{
				clock.set_ano(tempY);
    3964:	60 91 6c 11 	lds	r22, 0x116C	; 0x80116c <_ZZN9red_beryl7relogioEvE5tempY>
    3968:	70 91 6d 11 	lds	r23, 0x116D	; 0x80116d <_ZZN9red_beryl7relogioEvE5tempY+0x1>
    396c:	c8 01       	movw	r24, r16
    396e:	8f 54       	subi	r24, 0x4F	; 79
    3970:	9f 4f       	sbci	r25, 0xFF	; 255
    3972:	0e 94 3b 48 	call	0x9076	; 0x9076 <_ZN10red_quartz7set_anoEi>
				doing=false;    //reseta o valor de doing para que a proxima vez que adjustClock for chamado que os valores das variaveis sejam recuperados do rtc.
    3976:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <_ZZN9red_beryl7relogioEvE5doing>
				_yes=false;  //resetar o valor de YES para false.
    397a:	f8 01       	movw	r30, r16
    397c:	10 8a       	std	Z+16, r1	; 0x10
				track = 0; //retorna a track 0 representando a hora.
    397e:	10 92 67 11 	sts	0x1167, r1	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    3982:	10 92 66 11 	sts	0x1166, r1	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
				return true;
    3986:	0f c0       	rjmp	.+30     	; 0x39a6 <_ZN9red_beryl7relogioEv+0x86a>
			}
			if(_no)  //se o valor do botão NO for true.
    3988:	f8 01       	movw	r30, r16
    398a:	81 89       	ldd	r24, Z+17	; 0x11
    398c:	88 23       	and	r24, r24
    398e:	51 f0       	breq	.+20     	; 0x39a4 <_ZN9red_beryl7relogioEv+0x868>
			{
				doing=false;    //reseta o valor de doing para que a proxima vez que adjustClock for chamado que os valores das variaveis sejam recuperados do rtc.
    3990:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <_ZZN9red_beryl7relogioEvE5doing>
				_no=false; //resetar o valor do botão NO para false.
    3994:	11 8a       	std	Z+17, r1	; 0x11
				track--;  //retornar a track anterior.
    3996:	83 e0       	ldi	r24, 0x03	; 3
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	90 93 67 11 	sts	0x1167, r25	; 0x801167 <_ZZN9red_beryl7relogioEvE5track+0x1>
    399e:	80 93 66 11 	sts	0x1166, r24	; 0x801166 <_ZZN9red_beryl7relogioEvE5track>
    39a2:	01 c0       	rjmp	.+2      	; 0x39a6 <_ZN9red_beryl7relogioEv+0x86a>
			}
			break;  //fim da track 4 representando o ano
		}
	}
	return false;
    39a4:	c0 e0       	ldi	r28, 0x00	; 0
}
    39a6:	8c 2f       	mov	r24, r28
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	1f 91       	pop	r17
    39ae:	0f 91       	pop	r16
    39b0:	ff 90       	pop	r15
    39b2:	ef 90       	pop	r14
    39b4:	df 90       	pop	r13
    39b6:	cf 90       	pop	r12
    39b8:	08 95       	ret

000039ba <_ZN9red_beryl8getPointEv>:

int red_beryl::getPoint()
{
	return _pointGain;
}
    39ba:	fc 01       	movw	r30, r24
    39bc:	84 85       	ldd	r24, Z+12	; 0x0c
    39be:	95 85       	ldd	r25, Z+13	; 0x0d
    39c0:	08 95       	ret

000039c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>:
		return true;
	}
}

void red_beryl::imprimeEscolha(int i, int l, leitura lt, bool s)
{    //função imprimeEscolha, que recebe o i da posição, a struct leitura com os valores e o bool s se for selecionado ou não.
    39c2:	bf 92       	push	r11
    39c4:	cf 92       	push	r12
    39c6:	df 92       	push	r13
    39c8:	ef 92       	push	r14
    39ca:	ff 92       	push	r15
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	6b 01       	movw	r12, r22
    39da:	ec 96       	adiw	r28, 0x3c	; 60
    39dc:	bf ac       	ldd	r11, Y+63	; 0x3f
    39de:	ec 97       	sbiw	r28, 0x3c	; 60
    39e0:	e5 96       	adiw	r28, 0x35	; 53
    39e2:	ee ac       	ldd	r14, Y+62	; 0x3e
    39e4:	ff ac       	ldd	r15, Y+63	; 0x3f
    39e6:	e5 97       	sbiw	r28, 0x35	; 53
	display.setCursor(2, lineSize*l);    //reseta a posição do cursor, multiplicando o tamanho de uma linha pelo numero de linhas
    39e8:	8c 01       	movw	r16, r24
    39ea:	0b 5e       	subi	r16, 0xEB	; 235
    39ec:	1f 4f       	sbci	r17, 0xFF	; 255
    39ee:	83 e0       	ldi	r24, 0x03	; 3
    39f0:	44 0f       	add	r20, r20
    39f2:	55 1f       	adc	r21, r21
    39f4:	8a 95       	dec	r24
    39f6:	e1 f7       	brne	.-8      	; 0x39f0 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb+0x2e>
    39f8:	62 e0       	ldi	r22, 0x02	; 2
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	c8 01       	movw	r24, r16
    39fe:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
	if(s)
    3a02:	bb 20       	and	r11, r11
    3a04:	41 f0       	breq	.+16     	; 0x3a16 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb+0x54>
	{    //se a linha for selecionada
		display.setTextColor(BLACK,WHITE);    //Define a fonte na cor preta com fundo branco, selecionado.
    3a06:	41 e0       	ldi	r20, 0x01	; 1
    3a08:	50 e0       	ldi	r21, 0x00	; 0
    3a0a:	60 e0       	ldi	r22, 0x00	; 0
    3a0c:	70 e0       	ldi	r23, 0x00	; 0
    3a0e:	c8 01       	movw	r24, r16
    3a10:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    3a14:	05 c0       	rjmp	.+10     	; 0x3a20 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb+0x5e>
	}
	else
	{
		display.setTextColor(WHITE);    //Define a fonta na cor branca, selecionado.
    3a16:	61 e0       	ldi	r22, 0x01	; 1
    3a18:	70 e0       	ldi	r23, 0x00	; 0
    3a1a:	c8 01       	movw	r24, r16
    3a1c:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
	}
	display.print(i);   //posição da leitura no historico.
    3a20:	4a e0       	ldi	r20, 0x0A	; 10
    3a22:	50 e0       	ldi	r21, 0x00	; 0
    3a24:	b6 01       	movw	r22, r12
    3a26:	c8 01       	movw	r24, r16
    3a28:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	display.print("- ");
    3a2c:	64 ee       	ldi	r22, 0xE4	; 228
    3a2e:	76 e0       	ldi	r23, 0x06	; 6
    3a30:	c8 01       	movw	r24, r16
    3a32:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	display.print(lt.dia);   //imprime o valor dia.
    3a36:	e7 96       	adiw	r28, 0x37	; 55
    3a38:	6e ad       	ldd	r22, Y+62	; 0x3e
    3a3a:	7f ad       	ldd	r23, Y+63	; 0x3f
    3a3c:	e7 97       	sbiw	r28, 0x37	; 55
    3a3e:	4a e0       	ldi	r20, 0x0A	; 10
    3a40:	50 e0       	ldi	r21, 0x00	; 0
    3a42:	c8 01       	movw	r24, r16
    3a44:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	display.print("/");    //separador
    3a48:	64 ea       	ldi	r22, 0xA4	; 164
    3a4a:	75 e0       	ldi	r23, 0x05	; 5
    3a4c:	c8 01       	movw	r24, r16
    3a4e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	display.print(lt.mes);   //imprime o valor mes.
    3a52:	e9 96       	adiw	r28, 0x39	; 57
    3a54:	6e ad       	ldd	r22, Y+62	; 0x3e
    3a56:	7f ad       	ldd	r23, Y+63	; 0x3f
    3a58:	e9 97       	sbiw	r28, 0x39	; 57
    3a5a:	4a e0       	ldi	r20, 0x0A	; 10
    3a5c:	50 e0       	ldi	r21, 0x00	; 0
    3a5e:	c8 01       	movw	r24, r16
    3a60:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	display.print("/");    //separador
    3a64:	64 ea       	ldi	r22, 0xA4	; 164
    3a66:	75 e0       	ldi	r23, 0x05	; 5
    3a68:	c8 01       	movw	r24, r16
    3a6a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	display.print(lt.ano);    //imprime o valor ano.
    3a6e:	eb 96       	adiw	r28, 0x3b	; 59
    3a70:	6e ad       	ldd	r22, Y+62	; 0x3e
    3a72:	7f ad       	ldd	r23, Y+63	; 0x3f
    3a74:	eb 97       	sbiw	r28, 0x3b	; 59
    3a76:	4a e0       	ldi	r20, 0x0A	; 10
    3a78:	50 e0       	ldi	r21, 0x00	; 0
    3a7a:	c8 01       	movw	r24, r16
    3a7c:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	display.print(" ");   //espaço.
    3a80:	6f eb       	ldi	r22, 0xBF	; 191
    3a82:	74 e0       	ldi	r23, 0x04	; 4
    3a84:	c8 01       	movw	r24, r16
    3a86:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	display.print(lt.hora);   //imprime valor hora.
    3a8a:	e3 96       	adiw	r28, 0x33	; 51
    3a8c:	6e ad       	ldd	r22, Y+62	; 0x3e
    3a8e:	7f ad       	ldd	r23, Y+63	; 0x3f
    3a90:	e3 97       	sbiw	r28, 0x33	; 51
    3a92:	4a e0       	ldi	r20, 0x0A	; 10
    3a94:	50 e0       	ldi	r21, 0x00	; 0
    3a96:	c8 01       	movw	r24, r16
    3a98:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	display.print(":");   //separador de horario.
    3a9c:	69 e2       	ldi	r22, 0x29	; 41
    3a9e:	78 e0       	ldi	r23, 0x08	; 8
    3aa0:	c8 01       	movw	r24, r16
    3aa2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	if(lt.minuto<10)
    3aa6:	8a e0       	ldi	r24, 0x0A	; 10
    3aa8:	e8 16       	cp	r14, r24
    3aaa:	f1 04       	cpc	r15, r1
    3aac:	2c f4       	brge	.+10     	; 0x3ab8 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb+0xf6>
	{
		display.print("0");
    3aae:	65 ef       	ldi	r22, 0xF5	; 245
    3ab0:	76 e0       	ldi	r23, 0x06	; 6
    3ab2:	c8 01       	movw	r24, r16
    3ab4:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	}
	display.print(lt.minuto);   //imprime valor minuto.
    3ab8:	4a e0       	ldi	r20, 0x0A	; 10
    3aba:	50 e0       	ldi	r21, 0x00	; 0
    3abc:	b7 01       	movw	r22, r14
    3abe:	c8 01       	movw	r24, r16
}
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	ff 90       	pop	r15
    3aca:	ef 90       	pop	r14
    3acc:	df 90       	pop	r13
    3ace:	cf 90       	pop	r12
    3ad0:	bf 90       	pop	r11
	display.print(":");   //separador de horario.
	if(lt.minuto<10)
	{
		display.print("0");
	}
	display.print(lt.minuto);   //imprime valor minuto.
    3ad2:	0c 94 33 08 	jmp	0x1066	; 0x1066 <_ZN5Print5printEii>

00003ad6 <_ZN9red_beryl10menuOptionEPKcib>:
		display.print("Ocupado");
	}
}

void red_beryl::menuOption(const char *s, int pos, bool ch)
{
    3ad6:	ff 92       	push	r15
    3ad8:	0f 93       	push	r16
    3ada:	1f 93       	push	r17
    3adc:	cf 93       	push	r28
    3ade:	df 93       	push	r29
    3ae0:	8b 01       	movw	r16, r22
    3ae2:	f2 2e       	mov	r15, r18
	display.setCursor(2, lineSize*pos);
    3ae4:	ec 01       	movw	r28, r24
    3ae6:	65 96       	adiw	r28, 0x15	; 21
    3ae8:	83 e0       	ldi	r24, 0x03	; 3
    3aea:	44 0f       	add	r20, r20
    3aec:	55 1f       	adc	r21, r21
    3aee:	8a 95       	dec	r24
    3af0:	e1 f7       	brne	.-8      	; 0x3aea <_ZN9red_beryl10menuOptionEPKcib+0x14>
    3af2:	62 e0       	ldi	r22, 0x02	; 2
    3af4:	70 e0       	ldi	r23, 0x00	; 0
    3af6:	ce 01       	movw	r24, r28
    3af8:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
	if(ch)
    3afc:	ff 20       	and	r15, r15
    3afe:	41 f0       	breq	.+16     	; 0x3b10 <_ZN9red_beryl10menuOptionEPKcib+0x3a>
	{
		display.setTextColor(BLACK, WHITE);
    3b00:	41 e0       	ldi	r20, 0x01	; 1
    3b02:	50 e0       	ldi	r21, 0x00	; 0
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	70 e0       	ldi	r23, 0x00	; 0
    3b08:	ce 01       	movw	r24, r28
    3b0a:	0e 94 2d 52 	call	0xa45a	; 0xa45a <_ZN12Adafruit_GFX12setTextColorEjj>
    3b0e:	05 c0       	rjmp	.+10     	; 0x3b1a <_ZN9red_beryl10menuOptionEPKcib+0x44>
	}
	else
	{
		display.setTextColor(WHITE);
    3b10:	61 e0       	ldi	r22, 0x01	; 1
    3b12:	70 e0       	ldi	r23, 0x00	; 0
    3b14:	ce 01       	movw	r24, r28
    3b16:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
	}
	display.print(s);
    3b1a:	b8 01       	movw	r22, r16
    3b1c:	ce 01       	movw	r24, r28
}
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	1f 91       	pop	r17
    3b24:	0f 91       	pop	r16
    3b26:	ff 90       	pop	r15
	}
	else
	{
		display.setTextColor(WHITE);
	}
	display.print(s);
    3b28:	0c 94 54 07 	jmp	0xea8	; 0xea8 <_ZN5Print5printEPKc>

00003b2c <_ZN9red_beryl11menu_ajusteEv>:
	}
	return true;
}

bool red_beryl::menu_ajuste()
{
    3b2c:	1f 93       	push	r17
    3b2e:	cf 93       	push	r28
    3b30:	df 93       	push	r29
    3b32:	ec 01       	movw	r28, r24
	static int choice=1, select=1;
	static char* menu[] = { (char*)"0.default", (char*)"1- Ajustar Relogio", (char*)"2- Ajustar Avisos", (char*)"3- Ajustar Historico", (char*)"4-Ajustar Ganho", (char*)"5-Ajuster Range" };
	
	switch(choice)
    3b34:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3b38:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3b3c:	85 30       	cpi	r24, 0x05	; 5
    3b3e:	91 05       	cpc	r25, r1
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <_ZN9red_beryl11menu_ajusteEv+0x18>
    3b42:	78 c2       	rjmp	.+1264   	; 0x4034 <_ZN9red_beryl11menu_ajusteEv+0x508>
    3b44:	94 f4       	brge	.+36     	; 0x3b6a <_ZN9red_beryl11menu_ajusteEv+0x3e>
    3b46:	82 30       	cpi	r24, 0x02	; 2
    3b48:	91 05       	cpc	r25, r1
    3b4a:	09 f4       	brne	.+2      	; 0x3b4e <_ZN9red_beryl11menu_ajusteEv+0x22>
    3b4c:	87 c0       	rjmp	.+270    	; 0x3c5c <_ZN9red_beryl11menu_ajusteEv+0x130>
    3b4e:	24 f4       	brge	.+8      	; 0x3b58 <_ZN9red_beryl11menu_ajusteEv+0x2c>
    3b50:	81 30       	cpi	r24, 0x01	; 1
    3b52:	91 05       	cpc	r25, r1
    3b54:	e9 f0       	breq	.+58     	; 0x3b90 <_ZN9red_beryl11menu_ajusteEv+0x64>
    3b56:	c0 c2       	rjmp	.+1408   	; 0x40d8 <_ZN9red_beryl11menu_ajusteEv+0x5ac>
    3b58:	83 30       	cpi	r24, 0x03	; 3
    3b5a:	91 05       	cpc	r25, r1
    3b5c:	09 f4       	brne	.+2      	; 0x3b60 <_ZN9red_beryl11menu_ajusteEv+0x34>
    3b5e:	1d c1       	rjmp	.+570    	; 0x3d9a <_ZN9red_beryl11menu_ajusteEv+0x26e>
    3b60:	84 30       	cpi	r24, 0x04	; 4
    3b62:	91 05       	cpc	r25, r1
    3b64:	09 f4       	brne	.+2      	; 0x3b68 <_ZN9red_beryl11menu_ajusteEv+0x3c>
    3b66:	d2 c1       	rjmp	.+932    	; 0x3f0c <_ZN9red_beryl11menu_ajusteEv+0x3e0>
    3b68:	b7 c2       	rjmp	.+1390   	; 0x40d8 <_ZN9red_beryl11menu_ajusteEv+0x5ac>
    3b6a:	8f 31       	cpi	r24, 0x1F	; 31
    3b6c:	91 05       	cpc	r25, r1
    3b6e:	09 f4       	brne	.+2      	; 0x3b72 <_ZN9red_beryl11menu_ajusteEv+0x46>
    3b70:	c5 c1       	rjmp	.+906    	; 0x3efc <_ZN9red_beryl11menu_ajusteEv+0x3d0>
    3b72:	2c f4       	brge	.+10     	; 0x3b7e <_ZN9red_beryl11menu_ajusteEv+0x52>
    3b74:	85 31       	cpi	r24, 0x15	; 21
    3b76:	91 05       	cpc	r25, r1
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <_ZN9red_beryl11menu_ajusteEv+0x50>
    3b7a:	07 c1       	rjmp	.+526    	; 0x3d8a <_ZN9red_beryl11menu_ajusteEv+0x25e>
    3b7c:	ad c2       	rjmp	.+1370   	; 0x40d8 <_ZN9red_beryl11menu_ajusteEv+0x5ac>
    3b7e:	89 32       	cpi	r24, 0x29	; 41
    3b80:	91 05       	cpc	r25, r1
    3b82:	09 f4       	brne	.+2      	; 0x3b86 <_ZN9red_beryl11menu_ajusteEv+0x5a>
    3b84:	4f c2       	rjmp	.+1182   	; 0x4024 <_ZN9red_beryl11menu_ajusteEv+0x4f8>
    3b86:	83 33       	cpi	r24, 0x33	; 51
    3b88:	91 05       	cpc	r25, r1
    3b8a:	09 f4       	brne	.+2      	; 0x3b8e <_ZN9red_beryl11menu_ajusteEv+0x62>
    3b8c:	99 c2       	rjmp	.+1330   	; 0x40c0 <_ZN9red_beryl11menu_ajusteEv+0x594>
    3b8e:	a4 c2       	rjmp	.+1352   	; 0x40d8 <_ZN9red_beryl11menu_ajusteEv+0x5ac>
	{
		case 1:
		{
			static bool rel = false;
			if(rel)
    3b90:	10 91 3d 13 	lds	r17, 0x133D	; 0x80133d <_ZZN9red_beryl11menu_ajusteEvE3rel>
    3b94:	11 23       	and	r17, r17
    3b96:	49 f0       	breq	.+18     	; 0x3baa <_ZN9red_beryl11menu_ajusteEv+0x7e>
			{
				if(relogio())
    3b98:	ce 01       	movw	r24, r28
    3b9a:	d0 da       	rcall	.-2656   	; 0x313c <_ZN9red_beryl7relogioEv>
    3b9c:	18 2f       	mov	r17, r24
    3b9e:	88 23       	and	r24, r24
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <_ZN9red_beryl11menu_ajusteEv+0x78>
    3ba2:	b9 c2       	rjmp	.+1394   	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
				{
					rel=false;
    3ba4:	10 92 3d 13 	sts	0x133D, r1	; 0x80133d <_ZZN9red_beryl11menu_ajusteEvE3rel>
    3ba8:	b7 c2       	rjmp	.+1390   	; 0x4118 <_ZN9red_beryl11menu_ajusteEv+0x5ec>
				}
			}
			else
			{
				menuOption(menu[1], 1, true);
    3baa:	21 e0       	ldi	r18, 0x01	; 1
    3bac:	41 e0       	ldi	r20, 0x01	; 1
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	66 ea       	ldi	r22, 0xA6	; 166
    3bb2:	75 e0       	ldi	r23, 0x05	; 5
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	8f df       	rcall	.-226    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[2], 2, false);
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	42 e0       	ldi	r20, 0x02	; 2
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	69 eb       	ldi	r22, 0xB9	; 185
    3bc0:	75 e0       	ldi	r23, 0x05	; 5
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	88 df       	rcall	.-240    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[3], 3, false);
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	43 e0       	ldi	r20, 0x03	; 3
    3bca:	50 e0       	ldi	r21, 0x00	; 0
    3bcc:	6b ec       	ldi	r22, 0xCB	; 203
    3bce:	75 e0       	ldi	r23, 0x05	; 5
    3bd0:	ce 01       	movw	r24, r28
    3bd2:	81 df       	rcall	.-254    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				
				if(_up)
    3bd4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3bd6:	88 23       	and	r24, r24
    3bd8:	99 f0       	breq	.+38     	; 0x3c00 <_ZN9red_beryl11menu_ajusteEv+0xd4>
				{
					choice--;
    3bda:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3bde:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3be8:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					select--;
    3bec:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3bf0:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3bfa:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					_up = false;
    3bfe:	1e 86       	std	Y+14, r1	; 0x0e
				}
				if(_down)
    3c00:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c02:	88 23       	and	r24, r24
    3c04:	99 f0       	breq	.+38     	; 0x3c2c <_ZN9red_beryl11menu_ajusteEv+0x100>
				{
					choice++;
    3c06:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3c0a:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3c0e:	01 96       	adiw	r24, 0x01	; 1
    3c10:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3c14:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					select++;
    3c18:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3c1c:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3c20:	01 96       	adiw	r24, 0x01	; 1
    3c22:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3c26:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					_down = false;
    3c2a:	1f 86       	std	Y+15, r1	; 0x0f
				}
				if(_yes)
    3c2c:	88 89       	ldd	r24, Y+16	; 0x10
    3c2e:	88 23       	and	r24, r24
    3c30:	29 f0       	breq	.+10     	; 0x3c3c <_ZN9red_beryl11menu_ajusteEv+0x110>
				{
					rel=true;
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	80 93 3d 13 	sts	0x133D, r24	; 0x80133d <_ZZN9red_beryl11menu_ajusteEvE3rel>
					_yes=false;
    3c38:	18 8a       	std	Y+16, r1	; 0x10
					_no=false;
    3c3a:	19 8a       	std	Y+17, r1	; 0x11
				}
				if(_no)
    3c3c:	89 89       	ldd	r24, Y+17	; 0x11
    3c3e:	88 23       	and	r24, r24
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <_ZN9red_beryl11menu_ajusteEv+0x118>
    3c42:	69 c2       	rjmp	.+1234   	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
				{
					_no=false;
    3c44:	19 8a       	std	Y+17, r1	; 0x11
					choice=1;
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3c4e:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					select=1;
    3c52:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3c56:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					return false;
    3c5a:	5e c2       	rjmp	.+1212   	; 0x4118 <_ZN9red_beryl11menu_ajusteEv+0x5ec>
			}
			break;
		}
		case 2:
		{
			if(select==1)
    3c5c:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3c60:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3c64:	81 30       	cpi	r24, 0x01	; 1
    3c66:	91 05       	cpc	r25, r1
    3c68:	09 f0       	breq	.+2      	; 0x3c6c <_ZN9red_beryl11menu_ajusteEv+0x140>
    3c6a:	4a c0       	rjmp	.+148    	; 0x3d00 <_ZN9red_beryl11menu_ajusteEv+0x1d4>
			{
				menuOption(menu[2], 1, true);
    3c6c:	21 e0       	ldi	r18, 0x01	; 1
    3c6e:	41 e0       	ldi	r20, 0x01	; 1
    3c70:	50 e0       	ldi	r21, 0x00	; 0
    3c72:	69 eb       	ldi	r22, 0xB9	; 185
    3c74:	75 e0       	ldi	r23, 0x05	; 5
    3c76:	ce 01       	movw	r24, r28
    3c78:	2e df       	rcall	.-420    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[3], 2, false);
    3c7a:	20 e0       	ldi	r18, 0x00	; 0
    3c7c:	42 e0       	ldi	r20, 0x02	; 2
    3c7e:	50 e0       	ldi	r21, 0x00	; 0
    3c80:	6b ec       	ldi	r22, 0xCB	; 203
    3c82:	75 e0       	ldi	r23, 0x05	; 5
    3c84:	ce 01       	movw	r24, r28
    3c86:	27 df       	rcall	.-434    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[4], 3, false);
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	43 e0       	ldi	r20, 0x03	; 3
    3c8c:	50 e0       	ldi	r21, 0x00	; 0
    3c8e:	60 ee       	ldi	r22, 0xE0	; 224
    3c90:	75 e0       	ldi	r23, 0x05	; 5
    3c92:	ce 01       	movw	r24, r28
    3c94:	20 df       	rcall	.-448    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			
				if(_up)
    3c96:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c98:	88 23       	and	r24, r24
    3c9a:	51 f0       	breq	.+20     	; 0x3cb0 <_ZN9red_beryl11menu_ajusteEv+0x184>
				{
					choice--;
    3c9c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3ca0:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3ca4:	01 97       	sbiw	r24, 0x01	; 1
    3ca6:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3caa:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					_up = false;
    3cae:	1e 86       	std	Y+14, r1	; 0x0e
				}
				if(_down)
    3cb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb2:	88 23       	and	r24, r24
    3cb4:	99 f0       	breq	.+38     	; 0x3cdc <_ZN9red_beryl11menu_ajusteEv+0x1b0>
				{
					select++;
    3cb6:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3cba:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3cbe:	01 96       	adiw	r24, 0x01	; 1
    3cc0:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3cc4:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					choice++;
    3cc8:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3ccc:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3cd0:	01 96       	adiw	r24, 0x01	; 1
    3cd2:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3cd6:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					_down = false;
    3cda:	1f 86       	std	Y+15, r1	; 0x0f
				}
				if(_yes)
    3cdc:	88 89       	ldd	r24, Y+16	; 0x10
    3cde:	88 23       	and	r24, r24
    3ce0:	41 f0       	breq	.+16     	; 0x3cf2 <_ZN9red_beryl11menu_ajusteEv+0x1c6>
				{
					choice = 21;
    3ce2:	85 e1       	ldi	r24, 0x15	; 21
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3cea:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					_yes=false;
    3cee:	18 8a       	std	Y+16, r1	; 0x10
					_no=false;
    3cf0:	19 8a       	std	Y+17, r1	; 0x11
				}
				if(_no)
    3cf2:	89 89       	ldd	r24, Y+17	; 0x11
    3cf4:	88 23       	and	r24, r24
    3cf6:	09 f4       	brne	.+2      	; 0x3cfa <_ZN9red_beryl11menu_ajusteEv+0x1ce>
    3cf8:	0e c2       	rjmp	.+1052   	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
				{
				_no=false;
    3cfa:	19 8a       	std	Y+17, r1	; 0x11
				return false;
    3cfc:	10 e0       	ldi	r17, 0x00	; 0
    3cfe:	0c c2       	rjmp	.+1048   	; 0x4118 <_ZN9red_beryl11menu_ajusteEv+0x5ec>
				}
			}
			else if(select==2)
    3d00:	02 97       	sbiw	r24, 0x02	; 2
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <_ZN9red_beryl11menu_ajusteEv+0x1da>
			{
				menuOption(menu[1], 1, false);
    3d04:	08 c2       	rjmp	.+1040   	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
    3d06:	20 e0       	ldi	r18, 0x00	; 0
    3d08:	41 e0       	ldi	r20, 0x01	; 1
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	66 ea       	ldi	r22, 0xA6	; 166
    3d0e:	75 e0       	ldi	r23, 0x05	; 5
    3d10:	ce 01       	movw	r24, r28
				menuOption(menu[2], 2, true);
    3d12:	e1 de       	rcall	.-574    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3d14:	21 e0       	ldi	r18, 0x01	; 1
    3d16:	42 e0       	ldi	r20, 0x02	; 2
    3d18:	50 e0       	ldi	r21, 0x00	; 0
    3d1a:	69 eb       	ldi	r22, 0xB9	; 185
    3d1c:	75 e0       	ldi	r23, 0x05	; 5
    3d1e:	ce 01       	movw	r24, r28
				menuOption(menu[3], 3, false);
    3d20:	da de       	rcall	.-588    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3d22:	20 e0       	ldi	r18, 0x00	; 0
    3d24:	43 e0       	ldi	r20, 0x03	; 3
    3d26:	50 e0       	ldi	r21, 0x00	; 0
    3d28:	6b ec       	ldi	r22, 0xCB	; 203
    3d2a:	75 e0       	ldi	r23, 0x05	; 5
    3d2c:	ce 01       	movw	r24, r28
    3d2e:	d3 de       	rcall	.-602    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			
				if(_up)
    3d30:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d32:	88 23       	and	r24, r24
    3d34:	99 f0       	breq	.+38     	; 0x3d5c <_ZN9red_beryl11menu_ajusteEv+0x230>
				{
					choice--;
    3d36:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3d3a:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3d3e:	01 97       	sbiw	r24, 0x01	; 1
    3d40:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3d44:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					select--;
    3d48:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3d4c:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3d56:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					_up = false;
    3d5a:	1e 86       	std	Y+14, r1	; 0x0e
				}
				if(_down)
    3d5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d5e:	88 23       	and	r24, r24
    3d60:	09 f4       	brne	.+2      	; 0x3d64 <_ZN9red_beryl11menu_ajusteEv+0x238>
    3d62:	bc cf       	rjmp	.-136    	; 0x3cdc <_ZN9red_beryl11menu_ajusteEv+0x1b0>
				{
					choice++;
    3d64:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3d68:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3d6c:	01 96       	adiw	r24, 0x01	; 1
    3d6e:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3d72:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					select++;
    3d76:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3d7a:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3d7e:	01 96       	adiw	r24, 0x01	; 1
    3d80:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3d84:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3d88:	a8 cf       	rjmp	.-176    	; 0x3cda <_ZN9red_beryl11menu_ajusteEv+0x1ae>
			}
			break;
		}
		case 21:
		{
			if(!menu_aviso())
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <_ZN9red_beryl10menu_avisoEv>
    3d90:	81 11       	cpse	r24, r1
    3d92:	c1 c1       	rjmp	.+898    	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
			{
				choice = 2;
    3d94:	82 e0       	ldi	r24, 0x02	; 2
    3d96:	90 e0       	ldi	r25, 0x00	; 0
    3d98:	9a c1       	rjmp	.+820    	; 0x40ce <_ZN9red_beryl11menu_ajusteEv+0x5a2>
			}
			break;
		}
		case 3:
		{
			if(select==1)
    3d9a:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3d9e:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3da2:	81 30       	cpi	r24, 0x01	; 1
    3da4:	91 05       	cpc	r25, r1
			{
				menuOption(menu[3], 1, true);
    3da6:	11 f5       	brne	.+68     	; 0x3dec <_ZN9red_beryl11menu_ajusteEv+0x2c0>
    3da8:	21 e0       	ldi	r18, 0x01	; 1
    3daa:	41 e0       	ldi	r20, 0x01	; 1
    3dac:	50 e0       	ldi	r21, 0x00	; 0
    3dae:	6b ec       	ldi	r22, 0xCB	; 203
    3db0:	75 e0       	ldi	r23, 0x05	; 5
    3db2:	ce 01       	movw	r24, r28
				menuOption(menu[4], 2, false);
    3db4:	90 de       	rcall	.-736    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3db6:	20 e0       	ldi	r18, 0x00	; 0
    3db8:	42 e0       	ldi	r20, 0x02	; 2
    3dba:	50 e0       	ldi	r21, 0x00	; 0
    3dbc:	60 ee       	ldi	r22, 0xE0	; 224
    3dbe:	75 e0       	ldi	r23, 0x05	; 5
    3dc0:	ce 01       	movw	r24, r28
				menuOption(menu[5], 3, false);
    3dc2:	89 de       	rcall	.-750    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3dc4:	20 e0       	ldi	r18, 0x00	; 0
    3dc6:	43 e0       	ldi	r20, 0x03	; 3
    3dc8:	50 e0       	ldi	r21, 0x00	; 0
    3dca:	60 ef       	ldi	r22, 0xF0	; 240
    3dcc:	75 e0       	ldi	r23, 0x05	; 5
    3dce:	ce 01       	movw	r24, r28
    3dd0:	82 de       	rcall	.-764    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				if(_up)												// Se UP for ativo.
    3dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dd4:	88 23       	and	r24, r24
    3dd6:	c9 f1       	breq	.+114    	; 0x3e4a <_ZN9red_beryl11menu_ajusteEv+0x31e>
				{
					choice--;										// Escolha anterior.
    3dd8:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3ddc:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3de0:	01 97       	sbiw	r24, 0x01	; 1
    3de2:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3de6:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				if(_no)												// Se NO for ativo.
				{
					_no=false;										// Desativa NO.
					return false;									// Retorna negativo e desativa o menu de ajuste.
				}
			} else if(select==2)
    3dea:	2e c0       	rjmp	.+92     	; 0x3e48 <_ZN9red_beryl11menu_ajusteEv+0x31c>
    3dec:	82 30       	cpi	r24, 0x02	; 2
    3dee:	91 05       	cpc	r25, r1
    3df0:	09 f0       	breq	.+2      	; 0x3df4 <_ZN9red_beryl11menu_ajusteEv+0x2c8>
			{
				menuOption(menu[2], 1, false);
    3df2:	42 c0       	rjmp	.+132    	; 0x3e78 <_ZN9red_beryl11menu_ajusteEv+0x34c>
    3df4:	20 e0       	ldi	r18, 0x00	; 0
    3df6:	41 e0       	ldi	r20, 0x01	; 1
    3df8:	50 e0       	ldi	r21, 0x00	; 0
    3dfa:	69 eb       	ldi	r22, 0xB9	; 185
    3dfc:	75 e0       	ldi	r23, 0x05	; 5
    3dfe:	ce 01       	movw	r24, r28
				menuOption(menu[3], 2, true);
    3e00:	6a de       	rcall	.-812    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3e02:	21 e0       	ldi	r18, 0x01	; 1
    3e04:	42 e0       	ldi	r20, 0x02	; 2
    3e06:	50 e0       	ldi	r21, 0x00	; 0
    3e08:	6b ec       	ldi	r22, 0xCB	; 203
    3e0a:	75 e0       	ldi	r23, 0x05	; 5
    3e0c:	ce 01       	movw	r24, r28
    3e0e:	63 de       	rcall	.-826    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[4], 3, false);
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	43 e0       	ldi	r20, 0x03	; 3
    3e14:	50 e0       	ldi	r21, 0x00	; 0
    3e16:	60 ee       	ldi	r22, 0xE0	; 224
    3e18:	75 e0       	ldi	r23, 0x05	; 5
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	5c de       	rcall	.-840    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3e1e:	8e 85       	ldd	r24, Y+14	; 0x0e
				
				if(_up)
    3e20:	88 23       	and	r24, r24
    3e22:	99 f0       	breq	.+38     	; 0x3e4a <_ZN9red_beryl11menu_ajusteEv+0x31e>
    3e24:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice--;
    3e28:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3e2c:	01 97       	sbiw	r24, 0x01	; 1
    3e2e:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3e32:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3e36:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					select--;
    3e3a:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3e3e:	01 97       	sbiw	r24, 0x01	; 1
    3e40:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3e44:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3e48:	1e 86       	std	Y+14, r1	; 0x0e
					_up = false;
    3e4a:	8f 85       	ldd	r24, Y+15	; 0x0f
				}
				if(_down)
    3e4c:	88 23       	and	r24, r24
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <_ZN9red_beryl11menu_ajusteEv+0x326>
    3e50:	4e c0       	rjmp	.+156    	; 0x3eee <_ZN9red_beryl11menu_ajusteEv+0x3c2>
    3e52:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice++;
    3e56:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3e5a:	01 96       	adiw	r24, 0x01	; 1
    3e5c:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3e60:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3e64:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					select++;
    3e68:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3e6c:	01 96       	adiw	r24, 0x01	; 1
    3e6e:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3e72:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3e76:	3a c0       	rjmp	.+116    	; 0x3eec <_ZN9red_beryl11menu_ajusteEv+0x3c0>
				{
				_no=false;
				return false;
				}
			}
			else if(select==3)
    3e78:	03 97       	sbiw	r24, 0x03	; 3
    3e7a:	09 f0       	breq	.+2      	; 0x3e7e <_ZN9red_beryl11menu_ajusteEv+0x352>
			{
				menuOption(menu[1], 1, false);
    3e7c:	4c c1       	rjmp	.+664    	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
    3e7e:	20 e0       	ldi	r18, 0x00	; 0
    3e80:	41 e0       	ldi	r20, 0x01	; 1
    3e82:	50 e0       	ldi	r21, 0x00	; 0
    3e84:	66 ea       	ldi	r22, 0xA6	; 166
    3e86:	75 e0       	ldi	r23, 0x05	; 5
    3e88:	ce 01       	movw	r24, r28
				menuOption(menu[2], 2, false);
    3e8a:	25 de       	rcall	.-950    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	42 e0       	ldi	r20, 0x02	; 2
    3e90:	50 e0       	ldi	r21, 0x00	; 0
    3e92:	69 eb       	ldi	r22, 0xB9	; 185
    3e94:	75 e0       	ldi	r23, 0x05	; 5
    3e96:	ce 01       	movw	r24, r28
    3e98:	1e de       	rcall	.-964    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[3], 3, true);
    3e9a:	21 e0       	ldi	r18, 0x01	; 1
    3e9c:	43 e0       	ldi	r20, 0x03	; 3
    3e9e:	50 e0       	ldi	r21, 0x00	; 0
    3ea0:	6b ec       	ldi	r22, 0xCB	; 203
    3ea2:	75 e0       	ldi	r23, 0x05	; 5
    3ea4:	ce 01       	movw	r24, r28
    3ea6:	17 de       	rcall	.-978    	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3ea8:	8e 85       	ldd	r24, Y+14	; 0x0e
				if(_up)
    3eaa:	88 23       	and	r24, r24
    3eac:	99 f0       	breq	.+38     	; 0x3ed4 <_ZN9red_beryl11menu_ajusteEv+0x3a8>
    3eae:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice--;
    3eb2:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3eb6:	01 97       	sbiw	r24, 0x01	; 1
    3eb8:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3ebc:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3ec0:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					select--;
    3ec4:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3ec8:	01 97       	sbiw	r24, 0x01	; 1
    3eca:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3ece:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3ed2:	1e 86       	std	Y+14, r1	; 0x0e
					_up = false;
    3ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
				}
				if(_down)
    3ed6:	88 23       	and	r24, r24
    3ed8:	51 f0       	breq	.+20     	; 0x3eee <_ZN9red_beryl11menu_ajusteEv+0x3c2>
    3eda:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice++;
    3ede:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3ee2:	01 96       	adiw	r24, 0x01	; 1
    3ee4:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3ee8:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3eec:	1f 86       	std	Y+15, r1	; 0x0f
					_down = false;
    3eee:	88 89       	ldd	r24, Y+16	; 0x10
				}
				if(_yes)
    3ef0:	88 23       	and	r24, r24
    3ef2:	09 f4       	brne	.+2      	; 0x3ef6 <_ZN9red_beryl11menu_ajusteEv+0x3ca>
    3ef4:	fe ce       	rjmp	.-516    	; 0x3cf2 <_ZN9red_beryl11menu_ajusteEv+0x1c6>
    3ef6:	8f e1       	ldi	r24, 0x1F	; 31
				{
					choice=31;
    3ef8:	90 e0       	ldi	r25, 0x00	; 0
    3efa:	f5 ce       	rjmp	.-534    	; 0x3ce6 <_ZN9red_beryl11menu_ajusteEv+0x1ba>
    3efc:	ce 01       	movw	r24, r28
			}
			break;
		}
		case 31:
		{
			if(!menu_historico())
    3efe:	0e 94 2e 16 	call	0x2c5c	; 0x2c5c <_ZN9red_beryl14menu_historicoEv>
    3f02:	81 11       	cpse	r24, r1
    3f04:	08 c1       	rjmp	.+528    	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
			{
				choice = 3;
    3f06:	83 e0       	ldi	r24, 0x03	; 3
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	e1 c0       	rjmp	.+450    	; 0x40ce <_ZN9red_beryl11menu_ajusteEv+0x5a2>
			}
			break;
		}
		case 4:
		{
			if(select==2)
    3f0c:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3f10:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3f14:	82 30       	cpi	r24, 0x02	; 2
    3f16:	91 05       	cpc	r25, r1
    3f18:	09 f0       	breq	.+2      	; 0x3f1c <_ZN9red_beryl11menu_ajusteEv+0x3f0>
			{
				menuOption(menu[3], 1, false);
    3f1a:	42 c0       	rjmp	.+132    	; 0x3fa0 <_ZN9red_beryl11menu_ajusteEv+0x474>
    3f1c:	20 e0       	ldi	r18, 0x00	; 0
    3f1e:	41 e0       	ldi	r20, 0x01	; 1
    3f20:	50 e0       	ldi	r21, 0x00	; 0
    3f22:	6b ec       	ldi	r22, 0xCB	; 203
    3f24:	75 e0       	ldi	r23, 0x05	; 5
    3f26:	ce 01       	movw	r24, r28
				menuOption(menu[4], 2, true);
    3f28:	d6 dd       	rcall	.-1108   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3f2a:	21 e0       	ldi	r18, 0x01	; 1
    3f2c:	42 e0       	ldi	r20, 0x02	; 2
    3f2e:	50 e0       	ldi	r21, 0x00	; 0
    3f30:	60 ee       	ldi	r22, 0xE0	; 224
    3f32:	75 e0       	ldi	r23, 0x05	; 5
    3f34:	ce 01       	movw	r24, r28
    3f36:	cf dd       	rcall	.-1122   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[5], 3, false);
    3f38:	20 e0       	ldi	r18, 0x00	; 0
    3f3a:	43 e0       	ldi	r20, 0x03	; 3
    3f3c:	50 e0       	ldi	r21, 0x00	; 0
    3f3e:	60 ef       	ldi	r22, 0xF0	; 240
    3f40:	75 e0       	ldi	r23, 0x05	; 5
    3f42:	ce 01       	movw	r24, r28
    3f44:	c8 dd       	rcall	.-1136   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3f46:	8e 85       	ldd	r24, Y+14	; 0x0e
				if(_up)												// Se UP for ativo.
    3f48:	88 23       	and	r24, r24
    3f4a:	99 f0       	breq	.+38     	; 0x3f72 <_ZN9red_beryl11menu_ajusteEv+0x446>
    3f4c:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice--;										// Escolha anterior.
    3f50:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3f54:	01 97       	sbiw	r24, 0x01	; 1
    3f56:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3f5a:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3f5e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					select--;										// Seletor anterior.
    3f62:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3f66:	01 97       	sbiw	r24, 0x01	; 1
    3f68:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3f6c:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3f70:	1e 86       	std	Y+14, r1	; 0x0e
					_up = false;									// Desativa UP.
    3f72:	8f 85       	ldd	r24, Y+15	; 0x0f
				}
				if(_down)											// Se DOWN for ativo.
    3f74:	88 23       	and	r24, r24
    3f76:	09 f4       	brne	.+2      	; 0x3f7a <_ZN9red_beryl11menu_ajusteEv+0x44e>
    3f78:	4e c0       	rjmp	.+156    	; 0x4016 <_ZN9red_beryl11menu_ajusteEv+0x4ea>
    3f7a:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice++;										// Proxima escolha.
    3f7e:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3f82:	01 96       	adiw	r24, 0x01	; 1
    3f84:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3f88:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
					select++;										// Proximo seletor.
    3f8c:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3f90:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3f9a:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
				{
					_no=false;										// Desativa NO.
					return false;									// Retorna negativo e desativa o menu de ajuste.
				}
			
			} else if(select==3)
    3f9e:	3a c0       	rjmp	.+116    	; 0x4014 <_ZN9red_beryl11menu_ajusteEv+0x4e8>
    3fa0:	03 97       	sbiw	r24, 0x03	; 3
			{
				menuOption(menu[2], 1, false);
    3fa2:	09 f0       	breq	.+2      	; 0x3fa6 <_ZN9red_beryl11menu_ajusteEv+0x47a>
    3fa4:	b8 c0       	rjmp	.+368    	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	41 e0       	ldi	r20, 0x01	; 1
    3faa:	50 e0       	ldi	r21, 0x00	; 0
    3fac:	69 eb       	ldi	r22, 0xB9	; 185
    3fae:	75 e0       	ldi	r23, 0x05	; 5
    3fb0:	ce 01       	movw	r24, r28
				menuOption(menu[3], 2, false);
    3fb2:	91 dd       	rcall	.-1246   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	42 e0       	ldi	r20, 0x02	; 2
    3fb8:	50 e0       	ldi	r21, 0x00	; 0
    3fba:	6b ec       	ldi	r22, 0xCB	; 203
    3fbc:	75 e0       	ldi	r23, 0x05	; 5
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	8a dd       	rcall	.-1260   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[4], 3, true);
    3fc2:	21 e0       	ldi	r18, 0x01	; 1
    3fc4:	43 e0       	ldi	r20, 0x03	; 3
    3fc6:	50 e0       	ldi	r21, 0x00	; 0
    3fc8:	60 ee       	ldi	r22, 0xE0	; 224
    3fca:	75 e0       	ldi	r23, 0x05	; 5
    3fcc:	ce 01       	movw	r24, r28
    3fce:	83 dd       	rcall	.-1274   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    3fd0:	8e 85       	ldd	r24, Y+14	; 0x0e
				
				if(_up)
    3fd2:	88 23       	and	r24, r24
    3fd4:	99 f0       	breq	.+38     	; 0x3ffc <_ZN9red_beryl11menu_ajusteEv+0x4d0>
    3fd6:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice--;
    3fda:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    3fe4:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    3fe8:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					select--;
    3fec:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3ff0:	01 97       	sbiw	r24, 0x01	; 1
    3ff2:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    3ff6:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    3ffa:	1e 86       	std	Y+14, r1	; 0x0e
					_up = false;
    3ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
				}
				if(_down)
    3ffe:	88 23       	and	r24, r24
    4000:	51 f0       	breq	.+20     	; 0x4016 <_ZN9red_beryl11menu_ajusteEv+0x4ea>
    4002:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice++;
    4006:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    400a:	01 96       	adiw	r24, 0x01	; 1
    400c:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    4010:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    4014:	1f 86       	std	Y+15, r1	; 0x0f
					_down = false;
    4016:	88 89       	ldd	r24, Y+16	; 0x10
				}
				if(_yes)
    4018:	88 23       	and	r24, r24
    401a:	09 f4       	brne	.+2      	; 0x401e <_ZN9red_beryl11menu_ajusteEv+0x4f2>
    401c:	6a ce       	rjmp	.-812    	; 0x3cf2 <_ZN9red_beryl11menu_ajusteEv+0x1c6>
				{
					choice=41;
    401e:	89 e2       	ldi	r24, 0x29	; 41
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	61 ce       	rjmp	.-830    	; 0x3ce6 <_ZN9red_beryl11menu_ajusteEv+0x1ba>
			}
			break;
		}
		case 41:
		{
			if(!menu_point())
    4024:	ce 01       	movw	r24, r28
    4026:	0e 94 2a 14 	call	0x2854	; 0x2854 <_ZN9red_beryl10menu_pointEv>
    402a:	81 11       	cpse	r24, r1
			{
				choice = 4;
    402c:	74 c0       	rjmp	.+232    	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
    402e:	84 e0       	ldi	r24, 0x04	; 4
    4030:	90 e0       	ldi	r25, 0x00	; 0
			}
			break;
		}
		case 5:
		{
			if(select==3)
    4032:	4d c0       	rjmp	.+154    	; 0x40ce <_ZN9red_beryl11menu_ajusteEv+0x5a2>
    4034:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    4038:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    403c:	03 97       	sbiw	r24, 0x03	; 3
			{
				menuOption(menu[3], 1, false);
    403e:	09 f0       	breq	.+2      	; 0x4042 <_ZN9red_beryl11menu_ajusteEv+0x516>
    4040:	6a c0       	rjmp	.+212    	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	41 e0       	ldi	r20, 0x01	; 1
    4046:	50 e0       	ldi	r21, 0x00	; 0
    4048:	6b ec       	ldi	r22, 0xCB	; 203
    404a:	75 e0       	ldi	r23, 0x05	; 5
    404c:	ce 01       	movw	r24, r28
				menuOption(menu[4], 2, false);
    404e:	43 dd       	rcall	.-1402   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	42 e0       	ldi	r20, 0x02	; 2
    4054:	50 e0       	ldi	r21, 0x00	; 0
    4056:	60 ee       	ldi	r22, 0xE0	; 224
    4058:	75 e0       	ldi	r23, 0x05	; 5
    405a:	ce 01       	movw	r24, r28
    405c:	3c dd       	rcall	.-1416   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
				menuOption(menu[5], 3, true);
    405e:	21 e0       	ldi	r18, 0x01	; 1
    4060:	43 e0       	ldi	r20, 0x03	; 3
    4062:	50 e0       	ldi	r21, 0x00	; 0
    4064:	60 ef       	ldi	r22, 0xF0	; 240
    4066:	75 e0       	ldi	r23, 0x05	; 5
    4068:	ce 01       	movw	r24, r28
    406a:	35 dd       	rcall	.-1430   	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
    406c:	8e 85       	ldd	r24, Y+14	; 0x0e
				if(_up)
    406e:	88 23       	and	r24, r24
    4070:	99 f0       	breq	.+38     	; 0x4098 <_ZN9red_beryl11menu_ajusteEv+0x56c>
    4072:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice--;
    4076:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    407a:	01 97       	sbiw	r24, 0x01	; 1
    407c:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    4080:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    4084:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
					select--;
    4088:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    408c:	01 97       	sbiw	r24, 0x01	; 1
    408e:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    4092:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    4096:	1e 86       	std	Y+14, r1	; 0x0e
					_up = false;
    4098:	8f 85       	ldd	r24, Y+15	; 0x0f
				}
				if(_down)
    409a:	88 23       	and	r24, r24
    409c:	51 f0       	breq	.+20     	; 0x40b2 <_ZN9red_beryl11menu_ajusteEv+0x586>
    409e:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
				{
					choice++;
    40a2:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    40a6:	01 96       	adiw	r24, 0x01	; 1
    40a8:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    40ac:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    40b0:	1f 86       	std	Y+15, r1	; 0x0f
					_down = false;
    40b2:	88 89       	ldd	r24, Y+16	; 0x10
				}
				if(_yes)
    40b4:	88 23       	and	r24, r24
    40b6:	09 f4       	brne	.+2      	; 0x40ba <_ZN9red_beryl11menu_ajusteEv+0x58e>
    40b8:	1c ce       	rjmp	.-968    	; 0x3cf2 <_ZN9red_beryl11menu_ajusteEv+0x1c6>
    40ba:	83 e3       	ldi	r24, 0x33	; 51
				{
					choice = 51;
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	13 ce       	rjmp	.-986    	; 0x3ce6 <_ZN9red_beryl11menu_ajusteEv+0x1ba>
    40c0:	ce 01       	movw	r24, r28
			}
			break;
		}
		case 51:
		{
			if(!menu_range())
    40c2:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN9red_beryl10menu_rangeEv>
    40c6:	81 11       	cpse	r24, r1
    40c8:	26 c0       	rjmp	.+76     	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
    40ca:	85 e0       	ldi	r24, 0x05	; 5
			{
				choice = 5;
    40cc:	90 e0       	ldi	r25, 0x00	; 0
    40ce:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    40d2:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    40d6:	1f c0       	rjmp	.+62     	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
    40d8:	18 16       	cp	r1, r24
			}
			break;
		}
		default:
		{
			if(choice<1)
    40da:	19 06       	cpc	r1, r25
    40dc:	64 f0       	brlt	.+24     	; 0x40f6 <_ZN9red_beryl11menu_ajusteEv+0x5ca>
    40de:	85 e0       	ldi	r24, 0x05	; 5
			{	
				choice = 5;
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    40e6:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    40ea:	83 e0       	ldi	r24, 0x03	; 3
				select = 3;
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
    40f2:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    40f6:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
			}
			if(choice>5)
    40fa:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    40fe:	06 97       	sbiw	r24, 0x06	; 6
    4100:	54 f0       	brlt	.+20     	; 0x4116 <_ZN9red_beryl11menu_ajusteEv+0x5ea>
    4102:	81 e0       	ldi	r24, 0x01	; 1
			{
				choice = 1;
    4104:	90 e0       	ldi	r25, 0x00	; 0
    4106:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <_ZZN9red_beryl11menu_ajusteEvE6choice+0x1>
    410a:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <_ZZN9red_beryl11menu_ajusteEvE6choice>
    410e:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <_ZZN9red_beryl11menu_ajusteEvE6select+0x1>
				select = 1;
    4112:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <_ZZN9red_beryl11menu_ajusteEvE6select>
    4116:	11 e0       	ldi	r17, 0x01	; 1
			}
			break;
		}
	}
	return true;
    4118:	81 2f       	mov	r24, r17
}
    411a:	df 91       	pop	r29
    411c:	cf 91       	pop	r28
    411e:	1f 91       	pop	r17
    4120:	08 95       	ret

00004122 <_ZN9red_beryl8upperBarEv>:
    4122:	8f 92       	push	r8
	pct = map(pwr,0,1023,0,100);
	return pct;
}

void red_beryl::upperBar()    // barra superior.
{	
    4124:	9f 92       	push	r9
    4126:	af 92       	push	r10
    4128:	bf 92       	push	r11
    412a:	cf 92       	push	r12
    412c:	df 92       	push	r13
    412e:	ef 92       	push	r14
    4130:	ff 92       	push	r15
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	4c 01       	movw	r8, r24
	static int pct = getBatteryPct();   //declara o inteiro estatico pct(PERCENTAGE)
    413c:	80 91 89 13 	lds	r24, 0x1389	; 0x801389 <_ZGVZN9red_beryl8upperBarEvE3pct>
    4140:	81 11       	cpse	r24, r1
    4142:	0a c0       	rjmp	.+20     	; 0x4158 <_ZN9red_beryl8upperBarEv+0x36>
    4144:	c4 01       	movw	r24, r8
    4146:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN9red_beryl13getBatteryPctEv>
    414a:	90 93 5e 13 	sts	0x135E, r25	; 0x80135e <_ZZN9red_beryl8upperBarEvE3pct+0x1>
    414e:	80 93 5d 13 	sts	0x135D, r24	; 0x80135d <_ZZN9red_beryl8upperBarEvE3pct>
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	80 93 89 13 	sts	0x1389, r24	; 0x801389 <_ZGVZN9red_beryl8upperBarEvE3pct>
	static int pwr = map(pct, 0, 100, 1, 12);   //declara o inteiro estatico pwr(POWER)
    4158:	80 91 81 13 	lds	r24, 0x1381	; 0x801381 <_ZGVZN9red_beryl8upperBarEvE3pwr>
    415c:	81 11       	cpse	r24, r1
    415e:	26 c0       	rjmp	.+76     	; 0x41ac <_ZN9red_beryl8upperBarEv+0x8a>
    4160:	60 91 5d 13 	lds	r22, 0x135D	; 0x80135d <_ZZN9red_beryl8upperBarEvE3pct>
    4164:	70 91 5e 13 	lds	r23, 0x135E	; 0x80135e <_ZZN9red_beryl8upperBarEvE3pct+0x1>
    4168:	07 2e       	mov	r0, r23
    416a:	00 0c       	add	r0, r0
    416c:	88 0b       	sbc	r24, r24
    416e:	99 0b       	sbc	r25, r25
    4170:	1f 92       	push	r1
    4172:	1f 92       	push	r1
    4174:	1f 92       	push	r1
    4176:	2c e0       	ldi	r18, 0x0C	; 12
    4178:	2f 93       	push	r18
    417a:	a1 2c       	mov	r10, r1
    417c:	b1 2c       	mov	r11, r1
    417e:	65 01       	movw	r12, r10
    4180:	a3 94       	inc	r10
    4182:	14 e6       	ldi	r17, 0x64	; 100
    4184:	e1 2e       	mov	r14, r17
    4186:	f1 2c       	mov	r15, r1
    4188:	00 e0       	ldi	r16, 0x00	; 0
    418a:	10 e0       	ldi	r17, 0x00	; 0
    418c:	20 e0       	ldi	r18, 0x00	; 0
    418e:	30 e0       	ldi	r19, 0x00	; 0
    4190:	a9 01       	movw	r20, r18
    4192:	0e 94 96 4b 	call	0x972c	; 0x972c <_Z3maplllll>
    4196:	70 93 5c 13 	sts	0x135C, r23	; 0x80135c <_ZZN9red_beryl8upperBarEvE3pwr+0x1>
    419a:	60 93 5b 13 	sts	0x135B, r22	; 0x80135b <_ZZN9red_beryl8upperBarEvE3pwr>
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	80 93 81 13 	sts	0x1381, r24	; 0x801381 <_ZGVZN9red_beryl8upperBarEvE3pwr>
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	0f 90       	pop	r0
    41aa:	0f 90       	pop	r0
	static long mill = 0;
	static long tempMill = 0;
	static long tempMill2 = 0;
	static double temperature = crystal.temperatura();		//TRANSFERIR PARA RED_CRYSTAL
    41ac:	80 91 79 13 	lds	r24, 0x1379	; 0x801379 <_ZGVZN9red_beryl8upperBarEvE11temperature>
    41b0:	81 11       	cpse	r24, r1
    41b2:	10 c0       	rjmp	.+32     	; 0x41d4 <_ZN9red_beryl8upperBarEv+0xb2>
    41b4:	c4 01       	movw	r24, r8
    41b6:	82 54       	subi	r24, 0x42	; 66
    41b8:	9f 4f       	sbci	r25, 0xFF	; 255
    41ba:	0e 94 1f 39 	call	0x723e	; 0x723e <_ZN11red_crystal11temperaturaEv>
    41be:	60 93 57 13 	sts	0x1357, r22	; 0x801357 <_ZZN9red_beryl8upperBarEvE11temperature>
    41c2:	70 93 58 13 	sts	0x1358, r23	; 0x801358 <_ZZN9red_beryl8upperBarEvE11temperature+0x1>
    41c6:	80 93 59 13 	sts	0x1359, r24	; 0x801359 <_ZZN9red_beryl8upperBarEvE11temperature+0x2>
    41ca:	90 93 5a 13 	sts	0x135A, r25	; 0x80135a <_ZZN9red_beryl8upperBarEvE11temperature+0x3>
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	80 93 79 13 	sts	0x1379, r24	; 0x801379 <_ZGVZN9red_beryl8upperBarEvE11temperature>
	mill = millis();
    41d4:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
    41d8:	60 93 53 13 	sts	0x1353, r22	; 0x801353 <_ZZN9red_beryl8upperBarEvE4mill>
    41dc:	70 93 54 13 	sts	0x1354, r23	; 0x801354 <_ZZN9red_beryl8upperBarEvE4mill+0x1>
    41e0:	80 93 55 13 	sts	0x1355, r24	; 0x801355 <_ZZN9red_beryl8upperBarEvE4mill+0x2>
    41e4:	90 93 56 13 	sts	0x1356, r25	; 0x801356 <_ZZN9red_beryl8upperBarEvE4mill+0x3>
	static char* timeStr;// = clock.data_hora(false);
	
	if( (mill - tempMill2) > 50)
    41e8:	00 91 4f 13 	lds	r16, 0x134F	; 0x80134f <_ZZN9red_beryl8upperBarEvE9tempMill2>
    41ec:	10 91 50 13 	lds	r17, 0x1350	; 0x801350 <_ZZN9red_beryl8upperBarEvE9tempMill2+0x1>
    41f0:	20 91 51 13 	lds	r18, 0x1351	; 0x801351 <_ZZN9red_beryl8upperBarEvE9tempMill2+0x2>
    41f4:	30 91 52 13 	lds	r19, 0x1352	; 0x801352 <_ZZN9red_beryl8upperBarEvE9tempMill2+0x3>
    41f8:	6b 01       	movw	r12, r22
    41fa:	7c 01       	movw	r14, r24
    41fc:	c0 1a       	sub	r12, r16
    41fe:	d1 0a       	sbc	r13, r17
    4200:	e2 0a       	sbc	r14, r18
    4202:	f3 0a       	sbc	r15, r19
    4204:	97 01       	movw	r18, r14
    4206:	86 01       	movw	r16, r12
    4208:	03 33       	cpi	r16, 0x33	; 51
    420a:	11 05       	cpc	r17, r1
    420c:	21 05       	cpc	r18, r1
    420e:	31 05       	cpc	r19, r1
    4210:	dc f1       	brlt	.+118    	; 0x4288 <_ZN9red_beryl8upperBarEv+0x166>
	{
		tempMill2 = mill;
    4212:	60 93 4f 13 	sts	0x134F, r22	; 0x80134f <_ZZN9red_beryl8upperBarEvE9tempMill2>
    4216:	70 93 50 13 	sts	0x1350, r23	; 0x801350 <_ZZN9red_beryl8upperBarEvE9tempMill2+0x1>
    421a:	80 93 51 13 	sts	0x1351, r24	; 0x801351 <_ZZN9red_beryl8upperBarEvE9tempMill2+0x2>
    421e:	90 93 52 13 	sts	0x1352, r25	; 0x801352 <_ZZN9red_beryl8upperBarEvE9tempMill2+0x3>
		int tempct = getBatteryPct();
    4222:	c4 01       	movw	r24, r8
    4224:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN9red_beryl13getBatteryPctEv>
		if(!(pct==100 & tempct==99))
    4228:	20 91 5d 13 	lds	r18, 0x135D	; 0x80135d <_ZZN9red_beryl8upperBarEvE3pct>
    422c:	30 91 5e 13 	lds	r19, 0x135E	; 0x80135e <_ZZN9red_beryl8upperBarEvE3pct+0x1>
    4230:	24 36       	cpi	r18, 0x64	; 100
    4232:	31 05       	cpc	r19, r1
    4234:	19 f4       	brne	.+6      	; 0x423c <_ZN9red_beryl8upperBarEv+0x11a>
    4236:	83 36       	cpi	r24, 0x63	; 99
    4238:	91 05       	cpc	r25, r1
    423a:	21 f0       	breq	.+8      	; 0x4244 <_ZN9red_beryl8upperBarEv+0x122>
		{
			pct = tempct;
    423c:	90 93 5e 13 	sts	0x135E, r25	; 0x80135e <_ZZN9red_beryl8upperBarEvE3pct+0x1>
    4240:	80 93 5d 13 	sts	0x135D, r24	; 0x80135d <_ZZN9red_beryl8upperBarEvE3pct>
		}
		pwr = map(pct, 0, 100, 0, 12);
    4244:	60 91 5d 13 	lds	r22, 0x135D	; 0x80135d <_ZZN9red_beryl8upperBarEvE3pct>
    4248:	70 91 5e 13 	lds	r23, 0x135E	; 0x80135e <_ZZN9red_beryl8upperBarEvE3pct+0x1>
    424c:	07 2e       	mov	r0, r23
    424e:	00 0c       	add	r0, r0
    4250:	88 0b       	sbc	r24, r24
    4252:	99 0b       	sbc	r25, r25
    4254:	1f 92       	push	r1
    4256:	1f 92       	push	r1
    4258:	1f 92       	push	r1
    425a:	2c e0       	ldi	r18, 0x0C	; 12
    425c:	2f 93       	push	r18
    425e:	a1 2c       	mov	r10, r1
    4260:	b1 2c       	mov	r11, r1
    4262:	65 01       	movw	r12, r10
    4264:	14 e6       	ldi	r17, 0x64	; 100
    4266:	e1 2e       	mov	r14, r17
    4268:	f1 2c       	mov	r15, r1
    426a:	00 e0       	ldi	r16, 0x00	; 0
    426c:	10 e0       	ldi	r17, 0x00	; 0
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	30 e0       	ldi	r19, 0x00	; 0
    4272:	a9 01       	movw	r20, r18
    4274:	0e 94 96 4b 	call	0x972c	; 0x972c <_Z3maplllll>
    4278:	70 93 5c 13 	sts	0x135C, r23	; 0x80135c <_ZZN9red_beryl8upperBarEvE3pwr+0x1>
    427c:	60 93 5b 13 	sts	0x135B, r22	; 0x80135b <_ZZN9red_beryl8upperBarEvE3pwr>
    4280:	0f 90       	pop	r0
    4282:	0f 90       	pop	r0
    4284:	0f 90       	pop	r0
    4286:	0f 90       	pop	r0
	}
	if( (mill - tempMill) > 250){
    4288:	80 91 53 13 	lds	r24, 0x1353	; 0x801353 <_ZZN9red_beryl8upperBarEvE4mill>
    428c:	90 91 54 13 	lds	r25, 0x1354	; 0x801354 <_ZZN9red_beryl8upperBarEvE4mill+0x1>
    4290:	a0 91 55 13 	lds	r26, 0x1355	; 0x801355 <_ZZN9red_beryl8upperBarEvE4mill+0x2>
    4294:	b0 91 56 13 	lds	r27, 0x1356	; 0x801356 <_ZZN9red_beryl8upperBarEvE4mill+0x3>
    4298:	40 91 4b 13 	lds	r20, 0x134B	; 0x80134b <_ZZN9red_beryl8upperBarEvE8tempMill>
    429c:	50 91 4c 13 	lds	r21, 0x134C	; 0x80134c <_ZZN9red_beryl8upperBarEvE8tempMill+0x1>
    42a0:	60 91 4d 13 	lds	r22, 0x134D	; 0x80134d <_ZZN9red_beryl8upperBarEvE8tempMill+0x2>
    42a4:	70 91 4e 13 	lds	r23, 0x134E	; 0x80134e <_ZZN9red_beryl8upperBarEvE8tempMill+0x3>
    42a8:	84 1b       	sub	r24, r20
    42aa:	95 0b       	sbc	r25, r21
    42ac:	a6 0b       	sbc	r26, r22
    42ae:	b7 0b       	sbc	r27, r23
    42b0:	8b 3f       	cpi	r24, 0xFB	; 251
    42b2:	91 05       	cpc	r25, r1
    42b4:	a1 05       	cpc	r26, r1
    42b6:	b1 05       	cpc	r27, r1
    42b8:	6c f1       	brlt	.+90     	; 0x4314 <_ZN9red_beryl8upperBarEv+0x1f2>
		temperature = crystal.temperatura();						//TRANSFERIR PARA RED_CRYSTAL
    42ba:	c4 01       	movw	r24, r8
    42bc:	82 54       	subi	r24, 0x42	; 66
    42be:	9f 4f       	sbci	r25, 0xFF	; 255
    42c0:	0e 94 1f 39 	call	0x723e	; 0x723e <_ZN11red_crystal11temperaturaEv>
    42c4:	60 93 57 13 	sts	0x1357, r22	; 0x801357 <_ZZN9red_beryl8upperBarEvE11temperature>
    42c8:	70 93 58 13 	sts	0x1358, r23	; 0x801358 <_ZZN9red_beryl8upperBarEvE11temperature+0x1>
    42cc:	80 93 59 13 	sts	0x1359, r24	; 0x801359 <_ZZN9red_beryl8upperBarEvE11temperature+0x2>
    42d0:	90 93 5a 13 	sts	0x135A, r25	; 0x80135a <_ZZN9red_beryl8upperBarEvE11temperature+0x3>
		free(timeStr);
    42d4:	80 91 49 13 	lds	r24, 0x1349	; 0x801349 <_ZZN9red_beryl8upperBarEvE7timeStr>
    42d8:	90 91 4a 13 	lds	r25, 0x134A	; 0x80134a <_ZZN9red_beryl8upperBarEvE7timeStr+0x1>
    42dc:	0e 94 7e 5f 	call	0xbefc	; 0xbefc <free>
		timeStr = clock.data_hora(false);
    42e0:	60 e0       	ldi	r22, 0x00	; 0
    42e2:	c4 01       	movw	r24, r8
    42e4:	8f 54       	subi	r24, 0x4F	; 79
    42e6:	9f 4f       	sbci	r25, 0xFF	; 255
    42e8:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <_ZN10red_quartz9data_horaEb>
    42ec:	90 93 4a 13 	sts	0x134A, r25	; 0x80134a <_ZZN9red_beryl8upperBarEvE7timeStr+0x1>
    42f0:	80 93 49 13 	sts	0x1349, r24	; 0x801349 <_ZZN9red_beryl8upperBarEvE7timeStr>
		tempMill = mill;
    42f4:	80 91 53 13 	lds	r24, 0x1353	; 0x801353 <_ZZN9red_beryl8upperBarEvE4mill>
    42f8:	90 91 54 13 	lds	r25, 0x1354	; 0x801354 <_ZZN9red_beryl8upperBarEvE4mill+0x1>
    42fc:	a0 91 55 13 	lds	r26, 0x1355	; 0x801355 <_ZZN9red_beryl8upperBarEvE4mill+0x2>
    4300:	b0 91 56 13 	lds	r27, 0x1356	; 0x801356 <_ZZN9red_beryl8upperBarEvE4mill+0x3>
    4304:	80 93 4b 13 	sts	0x134B, r24	; 0x80134b <_ZZN9red_beryl8upperBarEvE8tempMill>
    4308:	90 93 4c 13 	sts	0x134C, r25	; 0x80134c <_ZZN9red_beryl8upperBarEvE8tempMill+0x1>
    430c:	a0 93 4d 13 	sts	0x134D, r26	; 0x80134d <_ZZN9red_beryl8upperBarEvE8tempMill+0x2>
    4310:	b0 93 4e 13 	sts	0x134E, r27	; 0x80134e <_ZZN9red_beryl8upperBarEvE8tempMill+0x3>
	}
	display.fillRect(display.width()-1-pwr, 2, pwr, 4, WHITE); //desenha a barra da bateria
    4314:	e4 01       	movw	r28, r8
    4316:	65 96       	adiw	r28, 0x15	; 21
    4318:	ce 01       	movw	r24, r28
    431a:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    431e:	20 91 5b 13 	lds	r18, 0x135B	; 0x80135b <_ZZN9red_beryl8upperBarEvE3pwr>
    4322:	30 91 5c 13 	lds	r19, 0x135C	; 0x80135c <_ZZN9red_beryl8upperBarEvE3pwr+0x1>
    4326:	01 97       	sbiw	r24, 0x01	; 1
    4328:	bc 01       	movw	r22, r24
    432a:	62 1b       	sub	r22, r18
    432c:	73 0b       	sbc	r23, r19
    432e:	ee 24       	eor	r14, r14
    4330:	e3 94       	inc	r14
    4332:	f1 2c       	mov	r15, r1
    4334:	04 e0       	ldi	r16, 0x04	; 4
    4336:	10 e0       	ldi	r17, 0x00	; 0
    4338:	42 e0       	ldi	r20, 0x02	; 2
    433a:	50 e0       	ldi	r21, 0x00	; 0
    433c:	ce 01       	movw	r24, r28
    433e:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>
	
	if(pct<10)
    4342:	80 91 5d 13 	lds	r24, 0x135D	; 0x80135d <_ZZN9red_beryl8upperBarEvE3pct>
    4346:	90 91 5e 13 	lds	r25, 0x135E	; 0x80135e <_ZZN9red_beryl8upperBarEvE3pct+0x1>
    434a:	8a 30       	cpi	r24, 0x0A	; 10
    434c:	91 05       	cpc	r25, r1
    434e:	3c f4       	brge	.+14     	; 0x435e <_ZN9red_beryl8upperBarEv+0x23c>
	{
		display.setCursor(display.width()-BAT8_WIDTH-12, 0);
    4350:	ce 01       	movw	r24, r28
    4352:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4356:	bc 01       	movw	r22, r24
    4358:	6c 51       	subi	r22, 0x1C	; 28
    435a:	71 09       	sbc	r23, r1
    435c:	10 c0       	rjmp	.+32     	; 0x437e <_ZN9red_beryl8upperBarEv+0x25c>
	}
	else if(pct != 100)
    435e:	84 36       	cpi	r24, 0x64	; 100
    4360:	91 05       	cpc	r25, r1
    4362:	39 f0       	breq	.+14     	; 0x4372 <_ZN9red_beryl8upperBarEv+0x250>
	{
		display.setCursor(display.width()-BAT8_WIDTH-18, 0);
    4364:	ce 01       	movw	r24, r28
    4366:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    436a:	bc 01       	movw	r22, r24
    436c:	62 52       	subi	r22, 0x22	; 34
    436e:	71 09       	sbc	r23, r1
    4370:	06 c0       	rjmp	.+12     	; 0x437e <_ZN9red_beryl8upperBarEv+0x25c>
	}
	else
	{
		display.setCursor(display.width()-BAT8_WIDTH-24, 0);
    4372:	ce 01       	movw	r24, r28
    4374:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4378:	bc 01       	movw	r22, r24
    437a:	68 52       	subi	r22, 0x28	; 40
    437c:	71 09       	sbc	r23, r1
    437e:	40 e0       	ldi	r20, 0x00	; 0
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	ce 01       	movw	r24, r28
    4384:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
	}

	display.setTextSize(1);
    4388:	61 e0       	ldi	r22, 0x01	; 1
    438a:	ce 01       	movw	r24, r28
    438c:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setTextColor(WHITE);
    4390:	61 e0       	ldi	r22, 0x01	; 1
    4392:	70 e0       	ldi	r23, 0x00	; 0
    4394:	ce 01       	movw	r24, r28
    4396:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
	display.print(pct);
    439a:	60 91 5d 13 	lds	r22, 0x135D	; 0x80135d <_ZZN9red_beryl8upperBarEvE3pct>
    439e:	70 91 5e 13 	lds	r23, 0x135E	; 0x80135e <_ZZN9red_beryl8upperBarEvE3pct+0x1>
    43a2:	4a e0       	ldi	r20, 0x0A	; 10
    43a4:	50 e0       	ldi	r21, 0x00	; 0
    43a6:	ce 01       	movw	r24, r28
    43a8:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	display.print("%");  // printando a porcentagem da bateria que foi calculada anteriormente usando map a partir de pwr, dependendo da porcentagem alterando quando começa o cursor.
    43ac:	62 ea       	ldi	r22, 0xA2	; 162
    43ae:	75 e0       	ldi	r23, 0x05	; 5
    43b0:	ce 01       	movw	r24, r28
    43b2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>

	display.setTextSize(1);
    43b6:	61 e0       	ldi	r22, 0x01	; 1
    43b8:	ce 01       	movw	r24, r28
    43ba:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setTextColor(WHITE);
    43be:	61 e0       	ldi	r22, 0x01	; 1
    43c0:	70 e0       	ldi	r23, 0x00	; 0
    43c2:	ce 01       	movw	r24, r28
    43c4:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
	display.setCursor(display.width()/2-15, 0);
    43c8:	ce 01       	movw	r24, r28
    43ca:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    43ce:	97 fd       	sbrc	r25, 7
    43d0:	01 96       	adiw	r24, 0x01	; 1
    43d2:	95 95       	asr	r25
    43d4:	87 95       	ror	r24
    43d6:	bc 01       	movw	r22, r24
    43d8:	6f 50       	subi	r22, 0x0F	; 15
    43da:	71 09       	sbc	r23, r1
    43dc:	40 e0       	ldi	r20, 0x00	; 0
    43de:	50 e0       	ldi	r21, 0x00	; 0
    43e0:	ce 01       	movw	r24, r28
    43e2:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
	
	display.print(timeStr);
    43e6:	60 91 49 13 	lds	r22, 0x1349	; 0x801349 <_ZZN9red_beryl8upperBarEvE7timeStr>
    43ea:	70 91 4a 13 	lds	r23, 0x134A	; 0x80134a <_ZZN9red_beryl8upperBarEvE7timeStr+0x1>
    43ee:	ce 01       	movw	r24, r28
    43f0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		
	display.drawBitmap(display.width()-BAT8_WIDTH, 0, bat_6x16_bmp, BAT8_WIDTH, BAT8_HEIGHT, WHITE); // desenha o contorno da bateira no canto superior ESQUERDO. 6 de altura, 16 de largura
    43f4:	ce 01       	movw	r24, r28
    43f6:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    43fa:	bc 01       	movw	r22, r24
    43fc:	60 51       	subi	r22, 0x10	; 16
    43fe:	71 09       	sbc	r23, r1
    4400:	cc 24       	eor	r12, r12
    4402:	c3 94       	inc	r12
    4404:	d1 2c       	mov	r13, r1
    4406:	48 e0       	ldi	r20, 0x08	; 8
    4408:	e4 2e       	mov	r14, r20
    440a:	f1 2c       	mov	r15, r1
    440c:	00 e1       	ldi	r16, 0x10	; 16
    440e:	10 e0       	ldi	r17, 0x00	; 0
    4410:	26 e5       	ldi	r18, 0x56	; 86
    4412:	32 e0       	ldi	r19, 0x02	; 2
    4414:	40 e0       	ldi	r20, 0x00	; 0
    4416:	50 e0       	ldi	r21, 0x00	; 0
    4418:	ce 01       	movw	r24, r28
    441a:	0e 94 8f 4e 	call	0x9d1e	; 0x9d1e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
	
	if(BLE)		//LEMBRAR DE RETORNA ISSO A """IF(BLE)"""
    441e:	f4 01       	movw	r30, r8
    4420:	84 89       	ldd	r24, Z+20	; 0x14
    4422:	88 23       	and	r24, r24
    4424:	59 f0       	breq	.+22     	; 0x443c <_ZN9red_beryl8upperBarEv+0x31a>
	{
		display.drawBitmap(0, 0, BT2_bmp, BT2_WIDTH, BT2_HEIGHT, WHITE);
    4426:	08 e0       	ldi	r16, 0x08	; 8
    4428:	10 e0       	ldi	r17, 0x00	; 0
    442a:	2e e4       	ldi	r18, 0x4E	; 78
    442c:	32 e0       	ldi	r19, 0x02	; 2
    442e:	40 e0       	ldi	r20, 0x00	; 0
    4430:	50 e0       	ldi	r21, 0x00	; 0
    4432:	60 e0       	ldi	r22, 0x00	; 0
    4434:	70 e0       	ldi	r23, 0x00	; 0
    4436:	ce 01       	movw	r24, r28
    4438:	0e 94 8f 4e 	call	0x9d1e	; 0x9d1e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
	}
	display.setCursor(BT2_WIDTH+5,0);
    443c:	40 e0       	ldi	r20, 0x00	; 0
    443e:	50 e0       	ldi	r21, 0x00	; 0
    4440:	6d e0       	ldi	r22, 0x0D	; 13
    4442:	70 e0       	ldi	r23, 0x00	; 0
    4444:	ce 01       	movw	r24, r28
    4446:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>

	
	display.setTextSize(1);
    444a:	61 e0       	ldi	r22, 0x01	; 1
    444c:	ce 01       	movw	r24, r28
    444e:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setTextColor(WHITE);
    4452:	61 e0       	ldi	r22, 0x01	; 1
    4454:	70 e0       	ldi	r23, 0x00	; 0
    4456:	ce 01       	movw	r24, r28
    4458:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
	display.print((int) temperature);
    445c:	60 91 57 13 	lds	r22, 0x1357	; 0x801357 <_ZZN9red_beryl8upperBarEvE11temperature>
    4460:	70 91 58 13 	lds	r23, 0x1358	; 0x801358 <_ZZN9red_beryl8upperBarEvE11temperature+0x1>
    4464:	80 91 59 13 	lds	r24, 0x1359	; 0x801359 <_ZZN9red_beryl8upperBarEvE11temperature+0x2>
    4468:	90 91 5a 13 	lds	r25, 0x135A	; 0x80135a <_ZZN9red_beryl8upperBarEvE11temperature+0x3>
    446c:	0e 94 02 5c 	call	0xb804	; 0xb804 <__fixsfsi>
    4470:	4a e0       	ldi	r20, 0x0A	; 10
    4472:	50 e0       	ldi	r21, 0x00	; 0
    4474:	ce 01       	movw	r24, r28
    4476:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	display.write((uint8_t) 247);
    447a:	67 ef       	ldi	r22, 0xF7	; 247
    447c:	ce 01       	movw	r24, r28
    447e:	0e 94 47 51 	call	0xa28e	; 0xa28e <_ZN12Adafruit_GFX5writeEh>
	display.print("C");
    4482:	60 e0       	ldi	r22, 0x00	; 0
    4484:	76 e0       	ldi	r23, 0x06	; 6
    4486:	ce 01       	movw	r24, r28
}
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	ff 90       	pop	r15
    4492:	ef 90       	pop	r14
    4494:	df 90       	pop	r13
    4496:	cf 90       	pop	r12
    4498:	bf 90       	pop	r11
    449a:	af 90       	pop	r10
    449c:	9f 90       	pop	r9
    449e:	8f 90       	pop	r8
	
	display.setTextSize(1);
	display.setTextColor(WHITE);
	display.print((int) temperature);
	display.write((uint8_t) 247);
	display.print("C");
    44a0:	0c 94 54 07 	jmp	0xea8	; 0xea8 <_ZN5Print5printEPKc>

000044a4 <_ZN9red_beryl7warningEPKc>:
    }
    display.drawLine(display.width()-1, (lineSize+(j*offset)/2), display.width()-1,display.height()-1-((EEPROM.read(0)-(j+1))*offset)/2, WHITE);
}

void red_beryl::warning(const char *s)
{
    44a4:	cf 92       	push	r12
    44a6:	df 92       	push	r13
    44a8:	ef 92       	push	r14
    44aa:	ff 92       	push	r15
    44ac:	0f 93       	push	r16
    44ae:	1f 93       	push	r17
    44b0:	cf 93       	push	r28
    44b2:	df 93       	push	r29
    44b4:	6b 01       	movw	r12, r22
	display.fillRect(20, lineSize+4, display.width()-40, lineSize+4, BLACK);
    44b6:	ec 01       	movw	r28, r24
    44b8:	65 96       	adiw	r28, 0x15	; 21
    44ba:	ce 01       	movw	r24, r28
    44bc:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    44c0:	9c 01       	movw	r18, r24
    44c2:	28 52       	subi	r18, 0x28	; 40
    44c4:	31 09       	sbc	r19, r1
    44c6:	e1 2c       	mov	r14, r1
    44c8:	f1 2c       	mov	r15, r1
    44ca:	0c e0       	ldi	r16, 0x0C	; 12
    44cc:	10 e0       	ldi	r17, 0x00	; 0
    44ce:	4c e0       	ldi	r20, 0x0C	; 12
    44d0:	50 e0       	ldi	r21, 0x00	; 0
    44d2:	64 e1       	ldi	r22, 0x14	; 20
    44d4:	70 e0       	ldi	r23, 0x00	; 0
    44d6:	ce 01       	movw	r24, r28
    44d8:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>
	display.drawRect(20, lineSize+4, display.width()-40, lineSize+4, WHITE);
    44dc:	ce 01       	movw	r24, r28
    44de:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    44e2:	9c 01       	movw	r18, r24
    44e4:	28 52       	subi	r18, 0x28	; 40
    44e6:	31 09       	sbc	r19, r1
    44e8:	ee 24       	eor	r14, r14
    44ea:	e3 94       	inc	r14
    44ec:	f1 2c       	mov	r15, r1
    44ee:	4c e0       	ldi	r20, 0x0C	; 12
    44f0:	50 e0       	ldi	r21, 0x00	; 0
    44f2:	64 e1       	ldi	r22, 0x14	; 20
    44f4:	70 e0       	ldi	r23, 0x00	; 0
    44f6:	ce 01       	movw	r24, r28
    44f8:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <_ZN12Adafruit_GFX8drawRectEiiiij>
	if (strlen(s)*6 < display.width()-40 )
    44fc:	f6 01       	movw	r30, r12
    44fe:	01 90       	ld	r0, Z+
    4500:	00 20       	and	r0, r0
    4502:	e9 f7       	brne	.-6      	; 0x44fe <_ZN9red_beryl7warningEPKc+0x5a>
    4504:	31 97       	sbiw	r30, 0x01	; 1
    4506:	8f 01       	movw	r16, r30
    4508:	0c 19       	sub	r16, r12
    450a:	1d 09       	sbc	r17, r13
    450c:	ce 01       	movw	r24, r28
    450e:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4512:	46 e0       	ldi	r20, 0x06	; 6
    4514:	40 9f       	mul	r20, r16
    4516:	90 01       	movw	r18, r0
    4518:	41 9f       	mul	r20, r17
    451a:	30 0d       	add	r19, r0
    451c:	11 24       	eor	r1, r1
    451e:	88 97       	sbiw	r24, 0x28	; 40
    4520:	28 17       	cp	r18, r24
    4522:	39 07       	cpc	r19, r25
    4524:	48 f5       	brcc	.+82     	; 0x4578 <_ZN9red_beryl7warningEPKc+0xd4>
	{
		display.setCursor((display.width()/2)-strlen(s)*6/2, lineSize*2-2);
    4526:	ce 01       	movw	r24, r28
    4528:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    452c:	f6 01       	movw	r30, r12
    452e:	01 90       	ld	r0, Z+
    4530:	00 20       	and	r0, r0
    4532:	e9 f7       	brne	.-6      	; 0x452e <_ZN9red_beryl7warningEPKc+0x8a>
    4534:	31 97       	sbiw	r30, 0x01	; 1
    4536:	ec 19       	sub	r30, r12
    4538:	fd 09       	sbc	r31, r13
    453a:	97 fd       	sbrc	r25, 7
    453c:	01 96       	adiw	r24, 0x01	; 1
    453e:	95 95       	asr	r25
    4540:	87 95       	ror	r24
    4542:	46 e0       	ldi	r20, 0x06	; 6
    4544:	4e 9f       	mul	r20, r30
    4546:	90 01       	movw	r18, r0
    4548:	4f 9f       	mul	r20, r31
    454a:	30 0d       	add	r19, r0
    454c:	11 24       	eor	r1, r1
    454e:	36 95       	lsr	r19
    4550:	27 95       	ror	r18
    4552:	bc 01       	movw	r22, r24
    4554:	62 1b       	sub	r22, r18
    4556:	73 0b       	sbc	r23, r19
    4558:	4e e0       	ldi	r20, 0x0E	; 14
    455a:	50 e0       	ldi	r21, 0x00	; 0
    455c:	ce 01       	movw	r24, r28
    455e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		display.setTextColor(WHITE);
    4562:	61 e0       	ldi	r22, 0x01	; 1
    4564:	70 e0       	ldi	r23, 0x00	; 0
    4566:	ce 01       	movw	r24, r28
    4568:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
		display.setTextSize(1);
    456c:	61 e0       	ldi	r22, 0x01	; 1
    456e:	ce 01       	movw	r24, r28
    4570:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
		display.print(s);
    4574:	b6 01       	movw	r22, r12
    4576:	1a c0       	rjmp	.+52     	; 0x45ac <_ZN9red_beryl7warningEPKc+0x108>
	}
	else
	{
		display.setCursor((display.width()/2)-7*6/2, lineSize*2-2);
    4578:	ce 01       	movw	r24, r28
    457a:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    457e:	97 fd       	sbrc	r25, 7
    4580:	01 96       	adiw	r24, 0x01	; 1
    4582:	95 95       	asr	r25
    4584:	87 95       	ror	r24
    4586:	bc 01       	movw	r22, r24
    4588:	65 51       	subi	r22, 0x15	; 21
    458a:	71 09       	sbc	r23, r1
    458c:	4e e0       	ldi	r20, 0x0E	; 14
    458e:	50 e0       	ldi	r21, 0x00	; 0
    4590:	ce 01       	movw	r24, r28
    4592:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		display.setTextColor(WHITE);
    4596:	61 e0       	ldi	r22, 0x01	; 1
    4598:	70 e0       	ldi	r23, 0x00	; 0
    459a:	ce 01       	movw	r24, r28
    459c:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
		display.setTextSize(1);
    45a0:	61 e0       	ldi	r22, 0x01	; 1
    45a2:	ce 01       	movw	r24, r28
    45a4:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
		display.print("Ocupado");
    45a8:	62 e0       	ldi	r22, 0x02	; 2
    45aa:	76 e0       	ldi	r23, 0x06	; 6
    45ac:	ce 01       	movw	r24, r28
	}
}
    45ae:	df 91       	pop	r29
    45b0:	cf 91       	pop	r28
    45b2:	1f 91       	pop	r17
    45b4:	0f 91       	pop	r16
    45b6:	ff 90       	pop	r15
    45b8:	ef 90       	pop	r14
    45ba:	df 90       	pop	r13
    45bc:	cf 90       	pop	r12
	else
	{
		display.setCursor((display.width()/2)-7*6/2, lineSize*2-2);
		display.setTextColor(WHITE);
		display.setTextSize(1);
		display.print("Ocupado");
    45be:	0c 94 54 07 	jmp	0xea8	; 0xea8 <_ZN5Print5printEPKc>

000045c2 <_ZN9red_beryl11adResetTestEv>:
	//delay(1000);
	clock.init();
	crystal.init();
}
void red_beryl::adResetTest()
{
    45c2:	ef 92       	push	r14
    45c4:	ff 92       	push	r15
    45c6:	0f 93       	push	r16
    45c8:	1f 93       	push	r17
    45ca:	cf 93       	push	r28
    45cc:	df 93       	push	r29
    45ce:	8c 01       	movw	r16, r24
	while(!(crystal.reset()))
    45d0:	7c 01       	movw	r14, r24
    45d2:	8e eb       	ldi	r24, 0xBE	; 190
    45d4:	e8 0e       	add	r14, r24
    45d6:	f1 1c       	adc	r15, r1
	{
		warning("Aguardando AD");
		display.display();
    45d8:	e8 01       	movw	r28, r16
    45da:	65 96       	adiw	r28, 0x15	; 21
	clock.init();
	crystal.init();
}
void red_beryl::adResetTest()
{
	while(!(crystal.reset()))
    45dc:	c7 01       	movw	r24, r14
    45de:	0e 94 a4 33 	call	0x6748	; 0x6748 <_ZN11red_crystal5resetEv>
    45e2:	81 11       	cpse	r24, r1
    45e4:	28 c0       	rjmp	.+80     	; 0x4636 <_ZN9red_beryl11adResetTestEv+0x74>
	{
		warning("Aguardando AD");
    45e6:	6a e0       	ldi	r22, 0x0A	; 10
    45e8:	76 e0       	ldi	r23, 0x06	; 6
    45ea:	c8 01       	movw	r24, r16
    45ec:	5b df       	rcall	.-330    	; 0x44a4 <_ZN9red_beryl7warningEPKc>
		display.display();
    45ee:	ce 01       	movw	r24, r28
    45f0:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16Adafruit_SSD13067displayEv>
		Serial.print("Waiting");
    45f4:	68 e1       	ldi	r22, 0x18	; 24
    45f6:	76 e0       	ldi	r23, 0x06	; 6
    45f8:	80 ec       	ldi	r24, 0xC0	; 192
    45fa:	90 e1       	ldi	r25, 0x10	; 16
    45fc:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		delay(500);
    4600:	64 ef       	ldi	r22, 0xF4	; 244
    4602:	71 e0       	ldi	r23, 0x01	; 1
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	90 e0       	ldi	r25, 0x00	; 0
    4608:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
		display.print(".");
    460c:	62 e0       	ldi	r22, 0x02	; 2
    460e:	77 e0       	ldi	r23, 0x07	; 7
    4610:	ce 01       	movw	r24, r28
    4612:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		display.display();
    4616:	ce 01       	movw	r24, r28
    4618:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16Adafruit_SSD13067displayEv>
		Serial.print(".");
    461c:	62 e0       	ldi	r22, 0x02	; 2
    461e:	77 e0       	ldi	r23, 0x07	; 7
    4620:	80 ec       	ldi	r24, 0xC0	; 192
    4622:	90 e1       	ldi	r25, 0x10	; 16
    4624:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		delay(500);
    4628:	64 ef       	ldi	r22, 0xF4	; 244
    462a:	71 e0       	ldi	r23, 0x01	; 1
    462c:	80 e0       	ldi	r24, 0x00	; 0
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
	clock.init();
	crystal.init();
}
void red_beryl::adResetTest()
{
	while(!(crystal.reset()))
    4634:	d3 cf       	rjmp	.-90     	; 0x45dc <_ZN9red_beryl11adResetTestEv+0x1a>
		display.print(".");
		display.display();
		Serial.print(".");
		delay(500);
	}
}
    4636:	df 91       	pop	r29
    4638:	cf 91       	pop	r28
    463a:	1f 91       	pop	r17
    463c:	0f 91       	pop	r16
    463e:	ff 90       	pop	r15
    4640:	ef 90       	pop	r14
    4642:	08 95       	ret

00004644 <_ZN9red_berylC1Ev>:
  B00110010,
  B01010100,
  B00011000
};

red_beryl::red_beryl()
    4644:	af 92       	push	r10
    4646:	bf 92       	push	r11
    4648:	cf 92       	push	r12
    464a:	df 92       	push	r13
    464c:	ef 92       	push	r14
    464e:	ff 92       	push	r15
    4650:	0f 93       	push	r16
    4652:	1f 93       	push	r17
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	ec 01       	movw	r28, r24
    465a:	8c 01       	movw	r16, r24
    465c:	0b 5e       	subi	r16, 0xEB	; 235
    465e:	1f 4f       	sbci	r17, 0xFF	; 255
    4660:	6f ef       	ldi	r22, 0xFF	; 255
    4662:	c8 01       	movw	r24, r16
    4664:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN16Adafruit_SSD1306C1Ea>
    4668:	7e 01       	movw	r14, r28
    466a:	81 eb       	ldi	r24, 0xB1	; 177
    466c:	e8 0e       	add	r14, r24
    466e:	f1 1c       	adc	r15, r1
    4670:	c7 01       	movw	r24, r14
    4672:	0e 94 82 46 	call	0x8d04	; 0x8d04 <_ZN10red_quartzC1Ev>
    4676:	6e 01       	movw	r12, r28
    4678:	ee eb       	ldi	r30, 0xBE	; 190
    467a:	ce 0e       	add	r12, r30
    467c:	d1 1c       	adc	r13, r1
    467e:	c6 01       	movw	r24, r12
    4680:	0e 94 9e 33 	call	0x673c	; 0x673c <_ZN11red_crystalC1Ev>
{
	Serial.println("Construtor basico red_beryl utilizado.");
    4684:	60 e2       	ldi	r22, 0x20	; 32
    4686:	76 e0       	ldi	r23, 0x06	; 6
    4688:	80 ec       	ldi	r24, 0xC0	; 192
    468a:	90 e1       	ldi	r25, 0x10	; 16
    468c:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	display.begin(SSD1306_SWITCHCAPVCC, 0x3C, true);
    4690:	21 e0       	ldi	r18, 0x01	; 1
    4692:	4c e3       	ldi	r20, 0x3C	; 60
    4694:	62 e0       	ldi	r22, 0x02	; 2
    4696:	c8 01       	movw	r24, r16
    4698:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_ZN16Adafruit_SSD13065beginEhhb>
	Serial.println("display inicializado.");
    469c:	67 e4       	ldi	r22, 0x47	; 71
    469e:	76 e0       	ldi	r23, 0x06	; 6
    46a0:	80 ec       	ldi	r24, 0xC0	; 192
    46a2:	90 e1       	ldi	r25, 0x10	; 16
    46a4:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	display.clearDisplay();
    46a8:	c8 01       	movw	r24, r16
    46aa:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <_ZN16Adafruit_SSD130612clearDisplayEv>
	display.display();
    46ae:	c8 01       	movw	r24, r16
    46b0:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16Adafruit_SSD13067displayEv>
	display.setCursor(display.width()/2-(3*2*6/2),display.height()/2-(1*2*7/2)+2);
    46b4:	c8 01       	movw	r24, r16
    46b6:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    46ba:	5c 01       	movw	r10, r24
    46bc:	c8 01       	movw	r24, r16
    46be:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    46c2:	a5 01       	movw	r20, r10
    46c4:	b7 fe       	sbrs	r11, 7
    46c6:	02 c0       	rjmp	.+4      	; 0x46cc <_ZN9red_berylC1Ev+0x88>
    46c8:	4f 5f       	subi	r20, 0xFF	; 255
    46ca:	5f 4f       	sbci	r21, 0xFF	; 255
    46cc:	55 95       	asr	r21
    46ce:	47 95       	ror	r20
    46d0:	45 50       	subi	r20, 0x05	; 5
    46d2:	51 09       	sbc	r21, r1
    46d4:	bc 01       	movw	r22, r24
    46d6:	97 ff       	sbrs	r25, 7
    46d8:	02 c0       	rjmp	.+4      	; 0x46de <_ZN9red_berylC1Ev+0x9a>
    46da:	6f 5f       	subi	r22, 0xFF	; 255
    46dc:	7f 4f       	sbci	r23, 0xFF	; 255
    46de:	75 95       	asr	r23
    46e0:	67 95       	ror	r22
    46e2:	62 51       	subi	r22, 0x12	; 18
    46e4:	71 09       	sbc	r23, r1
    46e6:	c8 01       	movw	r24, r16
    46e8:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
	display.setTextColor(WHITE);
    46ec:	61 e0       	ldi	r22, 0x01	; 1
    46ee:	70 e0       	ldi	r23, 0x00	; 0
    46f0:	c8 01       	movw	r24, r16
    46f2:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
	display.setTextSize(2);
    46f6:	62 e0       	ldi	r22, 0x02	; 2
    46f8:	c8 01       	movw	r24, r16
    46fa:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.print("mbi");
    46fe:	6d e5       	ldi	r22, 0x5D	; 93
    4700:	76 e0       	ldi	r23, 0x06	; 6
    4702:	c8 01       	movw	r24, r16
    4704:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	display.setTextSize(1);
    4708:	61 e0       	ldi	r22, 0x01	; 1
    470a:	c8 01       	movw	r24, r16
    470c:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
	display.setCursor(1, 0);
    4710:	40 e0       	ldi	r20, 0x00	; 0
    4712:	50 e0       	ldi	r21, 0x00	; 0
    4714:	61 e0       	ldi	r22, 0x01	; 1
    4716:	70 e0       	ldi	r23, 0x00	; 0
    4718:	c8 01       	movw	r24, r16
    471a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
	display.print("M.A.Engenharia");
    471e:	61 e6       	ldi	r22, 0x61	; 97
    4720:	76 e0       	ldi	r23, 0x06	; 6
    4722:	c8 01       	movw	r24, r16
    4724:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	display.display();
    4728:	c8 01       	movw	r24, r16
    472a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16Adafruit_SSD13067displayEv>
	delay(1000);
    472e:	68 ee       	ldi	r22, 0xE8	; 232
    4730:	73 e0       	ldi	r23, 0x03	; 3
    4732:	80 e0       	ldi	r24, 0x00	; 0
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
	
	Serial.print("tamanho de uma leitura: ");
    473a:	60 e7       	ldi	r22, 0x70	; 112
    473c:	76 e0       	ldi	r23, 0x06	; 6
    473e:	80 ec       	ldi	r24, 0xC0	; 192
    4740:	90 e1       	ldi	r25, 0x10	; 16
    4742:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.println(sizeof(leitura));
    4746:	4a e0       	ldi	r20, 0x0A	; 10
    4748:	50 e0       	ldi	r21, 0x00	; 0
    474a:	6e e6       	ldi	r22, 0x6E	; 110
    474c:	70 e0       	ldi	r23, 0x00	; 0
    474e:	80 ec       	ldi	r24, 0xC0	; 192
    4750:	90 e1       	ldi	r25, 0x10	; 16
    4752:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print7printlnEji>
	Serial.print("Tamanho da EEPROM:");
    4756:	69 e8       	ldi	r22, 0x89	; 137
    4758:	76 e0       	ldi	r23, 0x06	; 6
    475a:	80 ec       	ldi	r24, 0xC0	; 192
    475c:	90 e1       	ldi	r25, 0x10	; 16
    475e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.println(EEPROM.length());
    4762:	4a e0       	ldi	r20, 0x0A	; 10
    4764:	50 e0       	ldi	r21, 0x00	; 0
    4766:	60 e0       	ldi	r22, 0x00	; 0
    4768:	70 e1       	ldi	r23, 0x10	; 16
    476a:	80 ec       	ldi	r24, 0xC0	; 192
    476c:	90 e1       	ldi	r25, 0x10	; 16
    476e:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print7printlnEji>
	if(EEPROM.read(EEPROM.length()-1)<1 || EEPROM.read(EEPROM.length()-1)>3)
    4772:	8f ef       	ldi	r24, 0xFF	; 255
    4774:	9f e0       	ldi	r25, 0x0F	; 15
    4776:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    477a:	81 50       	subi	r24, 0x01	; 1
    477c:	83 30       	cpi	r24, 0x03	; 3
    477e:	08 f0       	brcs	.+2      	; 0x4782 <_ZN9red_berylC1Ev+0x13e>
    4780:	ab c0       	rjmp	.+342    	; 0x48d8 <_ZN9red_berylC1Ev+0x294>
	{
		EEPROM.write(EEPROM.length()-1, 1);
	}
	
	_notificationType = EEPROM.read(EEPROM.length()-1);
    4782:	8f ef       	ldi	r24, 0xFF	; 255
    4784:	9f e0       	ldi	r25, 0x0F	; 15
    4786:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	9b 87       	std	Y+11, r25	; 0x0b
    478e:	8a 87       	std	Y+10, r24	; 0x0a
	if(EEPROM.read(EEPROM.length()-2)<1 || EEPROM.read(EEPROM.length()-2)>2)
    4790:	8e ef       	ldi	r24, 0xFE	; 254
    4792:	9f e0       	ldi	r25, 0x0F	; 15
    4794:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    4798:	81 50       	subi	r24, 0x01	; 1
    479a:	82 30       	cpi	r24, 0x02	; 2
    479c:	08 f0       	brcs	.+2      	; 0x47a0 <_ZN9red_berylC1Ev+0x15c>
    479e:	a2 c0       	rjmp	.+324    	; 0x48e4 <_ZN9red_berylC1Ev+0x2a0>
	{
		EEPROM.write(EEPROM.length()-2, 1);
	}
	_pointGain = EEPROM.read(EEPROM.length()-2);
    47a0:	8e ef       	ldi	r24, 0xFE	; 254
    47a2:	9f e0       	ldi	r25, 0x0F	; 15
    47a4:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    47a8:	90 e0       	ldi	r25, 0x00	; 0
    47aa:	9d 87       	std	Y+13, r25	; 0x0d
    47ac:	8c 87       	std	Y+12, r24	; 0x0c
	
	Serial.print("Valor no ultimo endereço:");
    47ae:	6c e9       	ldi	r22, 0x9C	; 156
    47b0:	76 e0       	ldi	r23, 0x06	; 6
    47b2:	80 ec       	ldi	r24, 0xC0	; 192
    47b4:	90 e1       	ldi	r25, 0x10	; 16
    47b6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.println(EEPROM.read(EEPROM.length()-1));
    47ba:	8f ef       	ldi	r24, 0xFF	; 255
    47bc:	9f e0       	ldi	r25, 0x0F	; 15
    47be:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    47c2:	4a e0       	ldi	r20, 0x0A	; 10
    47c4:	50 e0       	ldi	r21, 0x00	; 0
    47c6:	68 2f       	mov	r22, r24
    47c8:	80 ec       	ldi	r24, 0xC0	; 192
    47ca:	90 e1       	ldi	r25, 0x10	; 16
    47cc:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN5Print7printlnEhi>
	Serial.print("Valor no penultimo endereço:");
    47d0:	67 eb       	ldi	r22, 0xB7	; 183
    47d2:	76 e0       	ldi	r23, 0x06	; 6
    47d4:	80 ec       	ldi	r24, 0xC0	; 192
    47d6:	90 e1       	ldi	r25, 0x10	; 16
    47d8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.println(EEPROM.read(EEPROM.length()-2));
    47dc:	8e ef       	ldi	r24, 0xFE	; 254
    47de:	9f e0       	ldi	r25, 0x0F	; 15
    47e0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    47e4:	4a e0       	ldi	r20, 0x0A	; 10
    47e6:	50 e0       	ldi	r21, 0x00	; 0
    47e8:	68 2f       	mov	r22, r24
    47ea:	80 ec       	ldi	r24, 0xC0	; 192
    47ec:	90 e1       	ldi	r25, 0x10	; 16
    47ee:	0e 94 c9 07 	call	0xf92	; 0xf92 <_ZN5Print7printlnEhi>
	Serial.print("status-wire");
    47f2:	65 ed       	ldi	r22, 0xD5	; 213
    47f4:	76 e0       	ldi	r23, 0x06	; 6
    47f6:	80 ec       	ldi	r24, 0xC0	; 192
    47f8:	90 e1       	ldi	r25, 0x10	; 16
    47fa:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.print(Wire.available());
    47fe:	84 e8       	ldi	r24, 0x84	; 132
    4800:	94 e1       	ldi	r25, 0x14	; 20
    4802:	0e 94 c3 48 	call	0x9186	; 0x9186 <_ZN7TwoWire9availableEv>
    4806:	4a e0       	ldi	r20, 0x0A	; 10
    4808:	50 e0       	ldi	r21, 0x00	; 0
    480a:	bc 01       	movw	r22, r24
    480c:	80 ec       	ldi	r24, 0xC0	; 192
    480e:	90 e1       	ldi	r25, 0x10	; 16
    4810:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
	Serial.println(Wire.read());
    4814:	84 e8       	ldi	r24, 0x84	; 132
    4816:	94 e1       	ldi	r25, 0x14	; 20
    4818:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    481c:	4a e0       	ldi	r20, 0x0A	; 10
    481e:	50 e0       	ldi	r21, 0x00	; 0
    4820:	bc 01       	movw	r22, r24
    4822:	80 ec       	ldi	r24, 0xC0	; 192
    4824:	90 e1       	ldi	r25, 0x10	; 16
    4826:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
	Serial.print("AD - ");
    482a:	61 ee       	ldi	r22, 0xE1	; 225
    482c:	76 e0       	ldi	r23, 0x06	; 6
    482e:	80 ec       	ldi	r24, 0xC0	; 192
    4830:	90 e1       	ldi	r25, 0x10	; 16
    4832:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	
	adResetTest();	
    4836:	ce 01       	movw	r24, r28
    4838:	c4 de       	rcall	.-632    	; 0x45c2 <_ZN9red_beryl11adResetTestEv>

	_pinUP = 23;
    483a:	87 e1       	ldi	r24, 0x17	; 23
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	99 83       	std	Y+1, r25	; 0x01
    4840:	88 83       	st	Y, r24
	_pinDOWN = 25;
    4842:	89 e1       	ldi	r24, 0x19	; 25
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	9b 83       	std	Y+3, r25	; 0x03
    4848:	8a 83       	std	Y+2, r24	; 0x02
	_pinYES = 24;
    484a:	88 e1       	ldi	r24, 0x18	; 24
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	9d 83       	std	Y+5, r25	; 0x05
    4850:	8c 83       	std	Y+4, r24	; 0x04
	_pinNO = 22;
    4852:	86 e1       	ldi	r24, 0x16	; 22
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	9f 83       	std	Y+7, r25	; 0x07
    4858:	8e 83       	std	Y+6, r24	; 0x06
	_pinBAT = A15;
    485a:	85 e4       	ldi	r24, 0x45	; 69
    485c:	90 e0       	ldi	r25, 0x00	; 0
    485e:	99 87       	std	Y+9, r25	; 0x09
    4860:	88 87       	std	Y+8, r24	; 0x08
	
	
	pinMode(_pinUP, INPUT);
    4862:	60 e0       	ldi	r22, 0x00	; 0
    4864:	87 e1       	ldi	r24, 0x17	; 23
    4866:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
	pinMode(_pinDOWN, INPUT);
    486a:	60 e0       	ldi	r22, 0x00	; 0
    486c:	8a 81       	ldd	r24, Y+2	; 0x02
    486e:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
	pinMode(_pinYES, INPUT);
    4872:	60 e0       	ldi	r22, 0x00	; 0
    4874:	8c 81       	ldd	r24, Y+4	; 0x04
    4876:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
	pinMode(_pinNO, INPUT);
    487a:	60 e0       	ldi	r22, 0x00	; 0
    487c:	8e 81       	ldd	r24, Y+6	; 0x06
    487e:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
	
	_up = false;
    4882:	1e 86       	std	Y+14, r1	; 0x0e
	_down = false;
    4884:	1f 86       	std	Y+15, r1	; 0x0f
	_yes = false;
    4886:	18 8a       	std	Y+16, r1	; 0x10
	_no = false;
    4888:	19 8a       	std	Y+17, r1	; 0x11
	BLE = true;
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	8c 8b       	std	Y+20, r24	; 0x14
	persistentNotify = false;
    488e:	1a 8a       	std	Y+18, r1	; 0x12
	busyNotify = false;
    4890:	1b 8a       	std	Y+19, r1	; 0x13
	
	leitura0 = {0};
    4892:	cd 5b       	subi	r28, 0xBD	; 189
    4894:	df 4f       	sbci	r29, 0xFF	; 255
    4896:	8e e6       	ldi	r24, 0x6E	; 110
    4898:	fe 01       	movw	r30, r28
    489a:	11 92       	st	Z+, r1
    489c:	8a 95       	dec	r24
    489e:	e9 f7       	brne	.-6      	; 0x489a <_ZN9red_berylC1Ev+0x256>
	
	Serial.print("versão: ");
    48a0:	67 ee       	ldi	r22, 0xE7	; 231
    48a2:	76 e0       	ldi	r23, 0x06	; 6
    48a4:	80 ec       	ldi	r24, 0xC0	; 192
    48a6:	90 e1       	ldi	r25, 0x10	; 16
    48a8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.println(VERSION);
    48ac:	61 ef       	ldi	r22, 0xF1	; 241
    48ae:	76 e0       	ldi	r23, 0x06	; 6
    48b0:	80 ec       	ldi	r24, 0xC0	; 192
    48b2:	90 e1       	ldi	r25, 0x10	; 16
    48b4:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	//delay(1000);
	clock.init();
    48b8:	c7 01       	movw	r24, r14
    48ba:	0e 94 8b 46 	call	0x8d16	; 0x8d16 <_ZN10red_quartz4initEv>
	crystal.init();
    48be:	c6 01       	movw	r24, r12
}
    48c0:	df 91       	pop	r29
    48c2:	cf 91       	pop	r28
    48c4:	1f 91       	pop	r17
    48c6:	0f 91       	pop	r16
    48c8:	ff 90       	pop	r15
    48ca:	ef 90       	pop	r14
    48cc:	df 90       	pop	r13
    48ce:	cf 90       	pop	r12
    48d0:	bf 90       	pop	r11
    48d2:	af 90       	pop	r10
	
	Serial.print("versão: ");
	Serial.println(VERSION);
	//delay(1000);
	clock.init();
	crystal.init();
    48d4:	0c 94 24 34 	jmp	0x6848	; 0x6848 <_ZN11red_crystal4initEv>
	Serial.println(sizeof(leitura));
	Serial.print("Tamanho da EEPROM:");
	Serial.println(EEPROM.length());
	if(EEPROM.read(EEPROM.length()-1)<1 || EEPROM.read(EEPROM.length()-1)>3)
	{
		EEPROM.write(EEPROM.length()-1, 1);
    48d8:	61 e0       	ldi	r22, 0x01	; 1
    48da:	8f ef       	ldi	r24, 0xFF	; 255
    48dc:	9f e0       	ldi	r25, 0x0F	; 15
    48de:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
    48e2:	4f cf       	rjmp	.-354    	; 0x4782 <_ZN9red_berylC1Ev+0x13e>
	}
	
	_notificationType = EEPROM.read(EEPROM.length()-1);
	if(EEPROM.read(EEPROM.length()-2)<1 || EEPROM.read(EEPROM.length()-2)>2)
	{
		EEPROM.write(EEPROM.length()-2, 1);
    48e4:	61 e0       	ldi	r22, 0x01	; 1
    48e6:	8e ef       	ldi	r24, 0xFE	; 254
    48e8:	9f e0       	ldi	r25, 0x0F	; 15
    48ea:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
    48ee:	58 cf       	rjmp	.-336    	; 0x47a0 <_ZN9red_berylC1Ev+0x15c>

000048f0 <_ZN9red_beryl9checarPinEv>:
		delay(500);
	}
}

void red_beryl::checarPin()
{
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	ec 01       	movw	r28, r24
	adResetTest();
    48f6:	65 de       	rcall	.-822    	; 0x45c2 <_ZN9red_beryl11adResetTestEv>
	static bool first=true;
	if(first){
    48f8:	80 91 2f 04 	lds	r24, 0x042F	; 0x80042f <_ZZN9red_beryl9checarPinEvE5first>
    48fc:	88 23       	and	r24, r24
    48fe:	41 f0       	breq	.+16     	; 0x4910 <_ZN9red_beryl9checarPinEv+0x20>
		Serial.println("Listening...");
    4900:	67 ef       	ldi	r22, 0xF7	; 247
    4902:	76 e0       	ldi	r23, 0x06	; 6
    4904:	80 ec       	ldi	r24, 0xC0	; 192
    4906:	90 e1       	ldi	r25, 0x10	; 16
    4908:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		first=false;
    490c:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <_ZZN9red_beryl9checarPinEvE5first>
	}
	static int tempButton = 0;    //botão temporario que vai receber o valor do ultimo botão apertado para impedir que a ação se repita.
	if(digitalRead(_pinUP)||digitalRead(_pinDOWN)||digitalRead(_pinYES)||digitalRead(_pinNO))
    4910:	88 81       	ld	r24, Y
    4912:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4916:	89 2b       	or	r24, r25
    4918:	81 f4       	brne	.+32     	; 0x493a <_ZN9red_beryl9checarPinEv+0x4a>
    491a:	8a 81       	ldd	r24, Y+2	; 0x02
    491c:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4920:	89 2b       	or	r24, r25
    4922:	59 f4       	brne	.+22     	; 0x493a <_ZN9red_beryl9checarPinEv+0x4a>
    4924:	8c 81       	ldd	r24, Y+4	; 0x04
    4926:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    492a:	89 2b       	or	r24, r25
    492c:	31 f4       	brne	.+12     	; 0x493a <_ZN9red_beryl9checarPinEv+0x4a>
    492e:	8e 81       	ldd	r24, Y+6	; 0x06
    4930:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4934:	89 2b       	or	r24, r25
    4936:	09 f4       	brne	.+2      	; 0x493a <_ZN9red_beryl9checarPinEv+0x4a>
    4938:	48 c0       	rjmp	.+144    	; 0x49ca <_ZN9red_beryl9checarPinEv+0xda>
	{
		if(digitalRead(_pinUP) && tempButton != digitalRead(_pinUP)){
    493a:	88 81       	ld	r24, Y
    493c:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4940:	89 2b       	or	r24, r25
    4942:	59 f0       	breq	.+22     	; 0x495a <_ZN9red_beryl9checarPinEv+0x6a>
    4944:	88 81       	ld	r24, Y
    4946:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    494a:	20 91 5f 13 	lds	r18, 0x135F	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
    494e:	30 91 60 13 	lds	r19, 0x1360	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    4952:	82 17       	cp	r24, r18
    4954:	93 07       	cpc	r25, r19
    4956:	09 f0       	breq	.+2      	; 0x495a <_ZN9red_beryl9checarPinEv+0x6a>
    4958:	3f c0       	rjmp	.+126    	; 0x49d8 <_ZN9red_beryl9checarPinEv+0xe8>
			tempButton = digitalRead(_pinUP);
			Serial.print("UP:");Serial.println(digitalRead(_pinUP));
			_up = true;
		}
		if(digitalRead(_pinDOWN) && tempButton != digitalRead(_pinDOWN)){
    495a:	8a 81       	ldd	r24, Y+2	; 0x02
    495c:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4960:	89 2b       	or	r24, r25
    4962:	59 f0       	breq	.+22     	; 0x497a <_ZN9red_beryl9checarPinEv+0x8a>
    4964:	8a 81       	ldd	r24, Y+2	; 0x02
    4966:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    496a:	20 91 5f 13 	lds	r18, 0x135F	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
    496e:	30 91 60 13 	lds	r19, 0x1360	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    4972:	82 17       	cp	r24, r18
    4974:	93 07       	cpc	r25, r19
    4976:	09 f0       	breq	.+2      	; 0x497a <_ZN9red_beryl9checarPinEv+0x8a>
    4978:	49 c0       	rjmp	.+146    	; 0x4a0c <_ZN9red_beryl9checarPinEv+0x11c>
			tempButton = digitalRead(_pinDOWN);
			Serial.print("DOWN:");Serial.println(digitalRead(_pinDOWN));
			_down = true;
		}
		if(digitalRead(_pinYES) && tempButton != digitalRead(_pinYES)){
    497a:	8c 81       	ldd	r24, Y+4	; 0x04
    497c:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4980:	89 2b       	or	r24, r25
    4982:	59 f0       	breq	.+22     	; 0x499a <_ZN9red_beryl9checarPinEv+0xaa>
    4984:	8c 81       	ldd	r24, Y+4	; 0x04
    4986:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    498a:	20 91 5f 13 	lds	r18, 0x135F	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
    498e:	30 91 60 13 	lds	r19, 0x1360	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    4992:	82 17       	cp	r24, r18
    4994:	93 07       	cpc	r25, r19
    4996:	09 f0       	breq	.+2      	; 0x499a <_ZN9red_beryl9checarPinEv+0xaa>
    4998:	53 c0       	rjmp	.+166    	; 0x4a40 <_ZN9red_beryl9checarPinEv+0x150>
			tempButton = digitalRead(_pinYES);
			Serial.print("YES:");Serial.println(digitalRead(_pinYES));
			_yes = true;
		}
		if(digitalRead(_pinNO) && tempButton != digitalRead(_pinNO)){
    499a:	8e 81       	ldd	r24, Y+6	; 0x06
    499c:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    49a0:	89 2b       	or	r24, r25
    49a2:	59 f0       	breq	.+22     	; 0x49ba <_ZN9red_beryl9checarPinEv+0xca>
    49a4:	8e 81       	ldd	r24, Y+6	; 0x06
    49a6:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    49aa:	20 91 5f 13 	lds	r18, 0x135F	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
    49ae:	30 91 60 13 	lds	r19, 0x1360	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    49b2:	82 17       	cp	r24, r18
    49b4:	93 07       	cpc	r25, r19
    49b6:	09 f0       	breq	.+2      	; 0x49ba <_ZN9red_beryl9checarPinEv+0xca>
    49b8:	5d c0       	rjmp	.+186    	; 0x4a74 <_ZN9red_beryl9checarPinEv+0x184>
			tempButton = digitalRead(_pinNO);
			Serial.print("NO:");Serial.println(digitalRead(_pinNO));
			_no = true;
		}
    delay(10);
    49ba:	6a e0       	ldi	r22, 0x0A	; 10
    49bc:	70 e0       	ldi	r23, 0x00	; 0
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		tempButton = 0;
	}
}
    49c2:	df 91       	pop	r29
    49c4:	cf 91       	pop	r28
		if(digitalRead(_pinNO) && tempButton != digitalRead(_pinNO)){
			tempButton = digitalRead(_pinNO);
			Serial.print("NO:");Serial.println(digitalRead(_pinNO));
			_no = true;
		}
    delay(10);
    49c6:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <delay>
	}
	else{
		tempButton = 0;
    49ca:	10 92 60 13 	sts	0x1360, r1	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    49ce:	10 92 5f 13 	sts	0x135F, r1	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
	}
}
    49d2:	df 91       	pop	r29
    49d4:	cf 91       	pop	r28
    49d6:	08 95       	ret
	}
	static int tempButton = 0;    //botão temporario que vai receber o valor do ultimo botão apertado para impedir que a ação se repita.
	if(digitalRead(_pinUP)||digitalRead(_pinDOWN)||digitalRead(_pinYES)||digitalRead(_pinNO))
	{
		if(digitalRead(_pinUP) && tempButton != digitalRead(_pinUP)){
			tempButton = digitalRead(_pinUP);
    49d8:	88 81       	ld	r24, Y
    49da:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    49de:	90 93 60 13 	sts	0x1360, r25	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    49e2:	80 93 5f 13 	sts	0x135F, r24	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
			Serial.print("UP:");Serial.println(digitalRead(_pinUP));
    49e6:	64 e0       	ldi	r22, 0x04	; 4
    49e8:	77 e0       	ldi	r23, 0x07	; 7
    49ea:	80 ec       	ldi	r24, 0xC0	; 192
    49ec:	90 e1       	ldi	r25, 0x10	; 16
    49ee:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    49f2:	88 81       	ld	r24, Y
    49f4:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    49f8:	4a e0       	ldi	r20, 0x0A	; 10
    49fa:	50 e0       	ldi	r21, 0x00	; 0
    49fc:	bc 01       	movw	r22, r24
    49fe:	80 ec       	ldi	r24, 0xC0	; 192
    4a00:	90 e1       	ldi	r25, 0x10	; 16
    4a02:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
			_up = true;
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	8e 87       	std	Y+14, r24	; 0x0e
    4a0a:	a7 cf       	rjmp	.-178    	; 0x495a <_ZN9red_beryl9checarPinEv+0x6a>
		}
		if(digitalRead(_pinDOWN) && tempButton != digitalRead(_pinDOWN)){
			tempButton = digitalRead(_pinDOWN);
    4a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a0e:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4a12:	90 93 60 13 	sts	0x1360, r25	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    4a16:	80 93 5f 13 	sts	0x135F, r24	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
			Serial.print("DOWN:");Serial.println(digitalRead(_pinDOWN));
    4a1a:	68 e0       	ldi	r22, 0x08	; 8
    4a1c:	77 e0       	ldi	r23, 0x07	; 7
    4a1e:	80 ec       	ldi	r24, 0xC0	; 192
    4a20:	90 e1       	ldi	r25, 0x10	; 16
    4a22:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    4a26:	8a 81       	ldd	r24, Y+2	; 0x02
    4a28:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4a2c:	4a e0       	ldi	r20, 0x0A	; 10
    4a2e:	50 e0       	ldi	r21, 0x00	; 0
    4a30:	bc 01       	movw	r22, r24
    4a32:	80 ec       	ldi	r24, 0xC0	; 192
    4a34:	90 e1       	ldi	r25, 0x10	; 16
    4a36:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
			_down = true;
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	8f 87       	std	Y+15, r24	; 0x0f
    4a3e:	9d cf       	rjmp	.-198    	; 0x497a <_ZN9red_beryl9checarPinEv+0x8a>
		}
		if(digitalRead(_pinYES) && tempButton != digitalRead(_pinYES)){
			tempButton = digitalRead(_pinYES);
    4a40:	8c 81       	ldd	r24, Y+4	; 0x04
    4a42:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4a46:	90 93 60 13 	sts	0x1360, r25	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    4a4a:	80 93 5f 13 	sts	0x135F, r24	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
			Serial.print("YES:");Serial.println(digitalRead(_pinYES));
    4a4e:	6e e0       	ldi	r22, 0x0E	; 14
    4a50:	77 e0       	ldi	r23, 0x07	; 7
    4a52:	80 ec       	ldi	r24, 0xC0	; 192
    4a54:	90 e1       	ldi	r25, 0x10	; 16
    4a56:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    4a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a5c:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4a60:	4a e0       	ldi	r20, 0x0A	; 10
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	bc 01       	movw	r22, r24
    4a66:	80 ec       	ldi	r24, 0xC0	; 192
    4a68:	90 e1       	ldi	r25, 0x10	; 16
    4a6a:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
			_yes = true;
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	88 8b       	std	Y+16, r24	; 0x10
    4a72:	93 cf       	rjmp	.-218    	; 0x499a <_ZN9red_beryl9checarPinEv+0xaa>
		}
		if(digitalRead(_pinNO) && tempButton != digitalRead(_pinNO)){
			tempButton = digitalRead(_pinNO);
    4a74:	8e 81       	ldd	r24, Y+6	; 0x06
    4a76:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4a7a:	90 93 60 13 	sts	0x1360, r25	; 0x801360 <_ZZN9red_beryl9checarPinEvE10tempButton+0x1>
    4a7e:	80 93 5f 13 	sts	0x135F, r24	; 0x80135f <_ZZN9red_beryl9checarPinEvE10tempButton>
			Serial.print("NO:");Serial.println(digitalRead(_pinNO));
    4a82:	63 e1       	ldi	r22, 0x13	; 19
    4a84:	77 e0       	ldi	r23, 0x07	; 7
    4a86:	80 ec       	ldi	r24, 0xC0	; 192
    4a88:	90 e1       	ldi	r25, 0x10	; 16
    4a8a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    4a8e:	8e 81       	ldd	r24, Y+6	; 0x06
    4a90:	0e 94 6e 4b 	call	0x96dc	; 0x96dc <digitalRead>
    4a94:	4a e0       	ldi	r20, 0x0A	; 10
    4a96:	50 e0       	ldi	r21, 0x00	; 0
    4a98:	bc 01       	movw	r22, r24
    4a9a:	80 ec       	ldi	r24, 0xC0	; 192
    4a9c:	90 e1       	ldi	r25, 0x10	; 16
    4a9e:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
			_no = true;
    4aa2:	81 e0       	ldi	r24, 0x01	; 1
    4aa4:	89 8b       	std	Y+17, r24	; 0x11
    4aa6:	89 cf       	rjmp	.-238    	; 0x49ba <_ZN9red_beryl9checarPinEv+0xca>

00004aa8 <_ZN9red_beryl17notificationTimerEb>:
	display.write((uint8_t) 247);
	display.print("C");
}

bool red_beryl::notificationTimer(bool inUse)
{
    4aa8:	ff 92       	push	r15
    4aaa:	0f 93       	push	r16
    4aac:	1f 93       	push	r17
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	ec 01       	movw	r28, r24
    4ab4:	06 2f       	mov	r16, r22
	static const long timeLimit = 2000;
	static long timer = 0;
	static long lockedTimer = millis();
    4ab6:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <_ZGVZN9red_beryl17notificationTimerEbE11lockedTimer>
    4aba:	81 11       	cpse	r24, r1
    4abc:	0d c0       	rjmp	.+26     	; 0x4ad8 <_ZN9red_beryl17notificationTimerEb+0x30>
    4abe:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
    4ac2:	60 93 45 13 	sts	0x1345, r22	; 0x801345 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer>
    4ac6:	70 93 46 13 	sts	0x1346, r23	; 0x801346 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x1>
    4aca:	80 93 47 13 	sts	0x1347, r24	; 0x801347 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x2>
    4ace:	90 93 48 13 	sts	0x1348, r25	; 0x801348 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x3>
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	80 93 71 13 	sts	0x1371, r24	; 0x801371 <_ZGVZN9red_beryl17notificationTimerEbE11lockedTimer>
	switch(_notificationType)			//1-Persistente 2-Temporizado 3-Desabilitado
    4ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4ada:	9b 85       	ldd	r25, Y+11	; 0x0b
    4adc:	82 30       	cpi	r24, 0x02	; 2
    4ade:	91 05       	cpc	r25, r1
    4ae0:	09 f4       	brne	.+2      	; 0x4ae4 <_ZN9red_beryl17notificationTimerEb+0x3c>
    4ae2:	6f c0       	rjmp	.+222    	; 0x4bc2 <_ZN9red_beryl17notificationTimerEb+0x11a>
    4ae4:	83 30       	cpi	r24, 0x03	; 3
    4ae6:	91 05       	cpc	r25, r1
    4ae8:	09 f4       	brne	.+2      	; 0x4aec <_ZN9red_beryl17notificationTimerEb+0x44>
    4aea:	b5 c0       	rjmp	.+362    	; 0x4c56 <_ZN9red_beryl17notificationTimerEb+0x1ae>
    4aec:	01 97       	sbiw	r24, 0x01	; 1
    4aee:	09 f0       	breq	.+2      	; 0x4af2 <_ZN9red_beryl17notificationTimerEb+0x4a>
    4af0:	a7 c0       	rjmp	.+334    	; 0x4c40 <_ZN9red_beryl17notificationTimerEb+0x198>
	{
		case 1:
		{
			if(!busyNotify)
    4af2:	1b 89       	ldd	r17, Y+19	; 0x13
    4af4:	11 11       	cpse	r17, r1
    4af6:	09 c0       	rjmp	.+18     	; 0x4b0a <_ZN9red_beryl17notificationTimerEb+0x62>
			{
				if(inUse)
    4af8:	00 23       	and	r16, r16
    4afa:	09 f4       	brne	.+2      	; 0x4afe <_ZN9red_beryl17notificationTimerEb+0x56>
    4afc:	ad c0       	rjmp	.+346    	; 0x4c58 <_ZN9red_beryl17notificationTimerEb+0x1b0>
				{
					busyNotify=true;
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	8b 8b       	std	Y+19, r24	; 0x13
					if(persistentNotify)
    4b02:	1a 89       	ldd	r17, Y+18	; 0x12
    4b04:	11 11       	cpse	r17, r1
    4b06:	12 c0       	rjmp	.+36     	; 0x4b2c <_ZN9red_beryl17notificationTimerEb+0x84>
    4b08:	9f c0       	rjmp	.+318    	; 0x4c48 <_ZN9red_beryl17notificationTimerEb+0x1a0>
    4b0a:	fa 88       	ldd	r15, Y+18	; 0x12
					return false;
				}
			}
			else
			{
				if(inUse)
    4b0c:	00 23       	and	r16, r16
    4b0e:	81 f0       	breq	.+32     	; 0x4b30 <_ZN9red_beryl17notificationTimerEb+0x88>
				{
					if(persistentNotify)
    4b10:	1f 2d       	mov	r17, r15
    4b12:	ff 20       	and	r15, r15
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <_ZN9red_beryl17notificationTimerEb+0x70>
    4b16:	98 c0       	rjmp	.+304    	; 0x4c48 <_ZN9red_beryl17notificationTimerEb+0x1a0>
					{
						lockedTimer = millis();
    4b18:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
    4b1c:	60 93 45 13 	sts	0x1345, r22	; 0x801345 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer>
    4b20:	70 93 46 13 	sts	0x1346, r23	; 0x801346 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x1>
    4b24:	80 93 47 13 	sts	0x1347, r24	; 0x801347 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x2>
    4b28:	90 93 48 13 	sts	0x1348, r25	; 0x801348 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x3>
						persistentNotify = false;
    4b2c:	1a 8a       	std	Y+18, r1	; 0x12
    4b2e:	94 c0       	rjmp	.+296    	; 0x4c58 <_ZN9red_beryl17notificationTimerEb+0x1b0>
					}
					return true;
				}
				else
				{
					if(!persistentNotify)
    4b30:	f1 10       	cpse	r15, r1
    4b32:	2d c0       	rjmp	.+90     	; 0x4b8e <_ZN9red_beryl17notificationTimerEb+0xe6>
					{
						timer = millis();
    4b34:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
    4b38:	60 93 41 13 	sts	0x1341, r22	; 0x801341 <_ZZN9red_beryl17notificationTimerEbE5timer>
    4b3c:	70 93 42 13 	sts	0x1342, r23	; 0x801342 <_ZZN9red_beryl17notificationTimerEbE5timer+0x1>
    4b40:	80 93 43 13 	sts	0x1343, r24	; 0x801343 <_ZZN9red_beryl17notificationTimerEbE5timer+0x2>
    4b44:	90 93 44 13 	sts	0x1344, r25	; 0x801344 <_ZZN9red_beryl17notificationTimerEbE5timer+0x3>
						if(!(Serial1.available() > 0) && (timer-lockedTimer)>250)
    4b48:	86 ed       	ldi	r24, 0xD6	; 214
    4b4a:	94 e1       	ldi	r25, 0x14	; 20
    4b4c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    4b50:	18 16       	cp	r1, r24
    4b52:	19 06       	cpc	r1, r25
    4b54:	0c f4       	brge	.+2      	; 0x4b58 <_ZN9red_beryl17notificationTimerEb+0xb0>
    4b56:	78 c0       	rjmp	.+240    	; 0x4c48 <_ZN9red_beryl17notificationTimerEb+0x1a0>
    4b58:	80 91 41 13 	lds	r24, 0x1341	; 0x801341 <_ZZN9red_beryl17notificationTimerEbE5timer>
    4b5c:	90 91 42 13 	lds	r25, 0x1342	; 0x801342 <_ZZN9red_beryl17notificationTimerEbE5timer+0x1>
    4b60:	a0 91 43 13 	lds	r26, 0x1343	; 0x801343 <_ZZN9red_beryl17notificationTimerEbE5timer+0x2>
    4b64:	b0 91 44 13 	lds	r27, 0x1344	; 0x801344 <_ZZN9red_beryl17notificationTimerEbE5timer+0x3>
    4b68:	40 91 45 13 	lds	r20, 0x1345	; 0x801345 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer>
    4b6c:	50 91 46 13 	lds	r21, 0x1346	; 0x801346 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x1>
    4b70:	60 91 47 13 	lds	r22, 0x1347	; 0x801347 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x2>
    4b74:	70 91 48 13 	lds	r23, 0x1348	; 0x801348 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x3>
    4b78:	84 1b       	sub	r24, r20
    4b7a:	95 0b       	sbc	r25, r21
    4b7c:	a6 0b       	sbc	r26, r22
    4b7e:	b7 0b       	sbc	r27, r23
    4b80:	8b 3f       	cpi	r24, 0xFB	; 251
    4b82:	91 05       	cpc	r25, r1
    4b84:	a1 05       	cpc	r26, r1
    4b86:	b1 05       	cpc	r27, r1
    4b88:	0c f0       	brlt	.+2      	; 0x4b8c <_ZN9red_beryl17notificationTimerEb+0xe4>
    4b8a:	68 c0       	rjmp	.+208    	; 0x4c5c <_ZN9red_beryl17notificationTimerEb+0x1b4>
    4b8c:	5d c0       	rjmp	.+186    	; 0x4c48 <_ZN9red_beryl17notificationTimerEb+0x1a0>
							return true;
						}
					}
					else
					{
						checarPin();
    4b8e:	ce 01       	movw	r24, r28
    4b90:	af de       	rcall	.-674    	; 0x48f0 <_ZN9red_beryl9checarPinEv>
						if(_yes || _no)
    4b92:	88 89       	ldd	r24, Y+16	; 0x10
    4b94:	81 11       	cpse	r24, r1
    4b96:	03 c0       	rjmp	.+6      	; 0x4b9e <_ZN9red_beryl17notificationTimerEb+0xf6>
    4b98:	89 89       	ldd	r24, Y+17	; 0x11
    4b9a:	88 23       	and	r24, r24
    4b9c:	39 f0       	breq	.+14     	; 0x4bac <_ZN9red_beryl17notificationTimerEb+0x104>
						{
							persistentNotify = false;
    4b9e:	1a 8a       	std	Y+18, r1	; 0x12
							busyNotify = false;
    4ba0:	1b 8a       	std	Y+19, r1	; 0x13
							_yes = false;
    4ba2:	18 8a       	std	Y+16, r1	; 0x10
							_no = false;
    4ba4:	19 8a       	std	Y+17, r1	; 0x11
							_up = false;
    4ba6:	1e 86       	std	Y+14, r1	; 0x0e
							_down = false;
    4ba8:	1f 86       	std	Y+15, r1	; 0x0f
    4baa:	55 c0       	rjmp	.+170    	; 0x4c56 <_ZN9red_beryl17notificationTimerEb+0x1ae>
							return false;
						}
						else
						{
							if(_up || _down)
    4bac:	8e 85       	ldd	r24, Y+14	; 0x0e
    4bae:	81 11       	cpse	r24, r1
    4bb0:	04 c0       	rjmp	.+8      	; 0x4bba <_ZN9red_beryl17notificationTimerEb+0x112>
    4bb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bb4:	88 23       	and	r24, r24
    4bb6:	09 f4       	brne	.+2      	; 0x4bba <_ZN9red_beryl17notificationTimerEb+0x112>
    4bb8:	47 c0       	rjmp	.+142    	; 0x4c48 <_ZN9red_beryl17notificationTimerEb+0x1a0>
							{
								_up = false;
    4bba:	1e 86       	std	Y+14, r1	; 0x0e
								_down = false;
    4bbc:	1f 86       	std	Y+15, r1	; 0x0f
							}
							return true;
    4bbe:	1f 2d       	mov	r17, r15
    4bc0:	4b c0       	rjmp	.+150    	; 0x4c58 <_ZN9red_beryl17notificationTimerEb+0x1b0>
			}
			break;
		}
		case 2:
		{
			if(!busyNotify)
    4bc2:	1b 89       	ldd	r17, Y+19	; 0x13
    4bc4:	11 11       	cpse	r17, r1
    4bc6:	10 c0       	rjmp	.+32     	; 0x4be8 <_ZN9red_beryl17notificationTimerEb+0x140>
			{
				if(inUse)
    4bc8:	00 23       	and	r16, r16
    4bca:	09 f4       	brne	.+2      	; 0x4bce <_ZN9red_beryl17notificationTimerEb+0x126>
    4bcc:	45 c0       	rjmp	.+138    	; 0x4c58 <_ZN9red_beryl17notificationTimerEb+0x1b0>
				{
					busyNotify = true;
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	8b 8b       	std	Y+19, r24	; 0x13
					lockedTimer = millis();
    4bd2:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
    4bd6:	60 93 45 13 	sts	0x1345, r22	; 0x801345 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer>
    4bda:	70 93 46 13 	sts	0x1346, r23	; 0x801346 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x1>
    4bde:	80 93 47 13 	sts	0x1347, r24	; 0x801347 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x2>
    4be2:	90 93 48 13 	sts	0x1348, r25	; 0x801348 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x3>
    4be6:	30 c0       	rjmp	.+96     	; 0x4c48 <_ZN9red_beryl17notificationTimerEb+0x1a0>
					return false;
				}
			}
			else
			{
				if(!inUse)
    4be8:	01 11       	cpse	r16, r1
    4bea:	1f c0       	rjmp	.+62     	; 0x4c2a <_ZN9red_beryl17notificationTimerEb+0x182>
				{
					timer = millis();
    4bec:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
    4bf0:	60 93 41 13 	sts	0x1341, r22	; 0x801341 <_ZZN9red_beryl17notificationTimerEbE5timer>
    4bf4:	70 93 42 13 	sts	0x1342, r23	; 0x801342 <_ZZN9red_beryl17notificationTimerEbE5timer+0x1>
    4bf8:	80 93 43 13 	sts	0x1343, r24	; 0x801343 <_ZZN9red_beryl17notificationTimerEbE5timer+0x2>
    4bfc:	90 93 44 13 	sts	0x1344, r25	; 0x801344 <_ZZN9red_beryl17notificationTimerEbE5timer+0x3>
					if( (timer-lockedTimer) > timeLimit )
    4c00:	00 91 45 13 	lds	r16, 0x1345	; 0x801345 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer>
    4c04:	10 91 46 13 	lds	r17, 0x1346	; 0x801346 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x1>
    4c08:	20 91 47 13 	lds	r18, 0x1347	; 0x801347 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x2>
    4c0c:	30 91 48 13 	lds	r19, 0x1348	; 0x801348 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x3>
    4c10:	dc 01       	movw	r26, r24
    4c12:	cb 01       	movw	r24, r22
    4c14:	80 1b       	sub	r24, r16
    4c16:	91 0b       	sbc	r25, r17
    4c18:	a2 0b       	sbc	r26, r18
    4c1a:	b3 0b       	sbc	r27, r19
    4c1c:	81 3d       	cpi	r24, 0xD1	; 209
    4c1e:	97 40       	sbci	r25, 0x07	; 7
    4c20:	a1 05       	cpc	r26, r1
    4c22:	b1 05       	cpc	r27, r1
    4c24:	bc f0       	brlt	.+46     	; 0x4c54 <_ZN9red_beryl17notificationTimerEb+0x1ac>
					{
						busyNotify = false;
    4c26:	1b 8a       	std	Y+19, r1	; 0x13
    4c28:	16 c0       	rjmp	.+44     	; 0x4c56 <_ZN9red_beryl17notificationTimerEb+0x1ae>
						return false;
					}
				}
				else
				{
					lockedTimer = millis();
    4c2a:	0e 94 8a 09 	call	0x1314	; 0x1314 <millis>
    4c2e:	60 93 45 13 	sts	0x1345, r22	; 0x801345 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer>
    4c32:	70 93 46 13 	sts	0x1346, r23	; 0x801346 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x1>
    4c36:	80 93 47 13 	sts	0x1347, r24	; 0x801347 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x2>
    4c3a:	90 93 48 13 	sts	0x1348, r25	; 0x801348 <_ZZN9red_beryl17notificationTimerEbE11lockedTimer+0x3>
					return true;
    4c3e:	0c c0       	rjmp	.+24     	; 0x4c58 <_ZN9red_beryl17notificationTimerEb+0x1b0>
			return false;
			break;
		}
		default:
		{
			if(inUse)
    4c40:	00 23       	and	r16, r16
    4c42:	21 f0       	breq	.+8      	; 0x4c4c <_ZN9red_beryl17notificationTimerEb+0x1a4>
			{
				busyNotify = true;
    4c44:	81 e0       	ldi	r24, 0x01	; 1
    4c46:	8b 8b       	std	Y+19, r24	; 0x13
				return true;
    4c48:	11 e0       	ldi	r17, 0x01	; 1
    4c4a:	06 c0       	rjmp	.+12     	; 0x4c58 <_ZN9red_beryl17notificationTimerEb+0x1b0>
			}
			else
			{
				if(busyNotify)
    4c4c:	1b 89       	ldd	r17, Y+19	; 0x13
    4c4e:	11 11       	cpse	r17, r1
    4c50:	ea cf       	rjmp	.-44     	; 0x4c26 <_ZN9red_beryl17notificationTimerEb+0x17e>
    4c52:	02 c0       	rjmp	.+4      	; 0x4c58 <_ZN9red_beryl17notificationTimerEb+0x1b0>
				return false;
			}
			break;
		}
	}
}
    4c54:	06 c0       	rjmp	.+12     	; 0x4c62 <_ZN9red_beryl17notificationTimerEb+0x1ba>
			}
			break;
		}
		case 3:
		{
			return false;
    4c56:	10 e0       	ldi	r17, 0x00	; 0
    4c58:	81 2f       	mov	r24, r17
    4c5a:	03 c0       	rjmp	.+6      	; 0x4c62 <_ZN9red_beryl17notificationTimerEb+0x1ba>
					if(!persistentNotify)
					{
						timer = millis();
						if(!(Serial1.available() > 0) && (timer-lockedTimer)>250)
						{
							persistentNotify = true;
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	8a 8b       	std	Y+18, r24	; 0x12
							return true;
    4c60:	fb cf       	rjmp	.-10     	; 0x4c58 <_ZN9red_beryl17notificationTimerEb+0x1b0>
				return false;
			}
			break;
		}
	}
}
    4c62:	df 91       	pop	r29
    4c64:	cf 91       	pop	r28
    4c66:	1f 91       	pop	r17
    4c68:	0f 91       	pop	r16
    4c6a:	ff 90       	pop	r15
    4c6c:	08 95       	ret

00004c6e <_ZN9red_beryl13deletaLeituraEi>:
int red_beryl::getPoint()
{
	return _pointGain;
}
bool red_beryl::deletaLeitura(int delPos)
{   /* Função deletaLeitura, recebe como paramento um int delPos(deleta posição) que será a posição da leitura na EEPROM a ser deletada. */
    4c6e:	af 92       	push	r10
    4c70:	bf 92       	push	r11
    4c72:	cf 92       	push	r12
    4c74:	df 92       	push	r13
    4c76:	ef 92       	push	r14
    4c78:	ff 92       	push	r15
    4c7a:	0f 93       	push	r16
    4c7c:	1f 93       	push	r17
    4c7e:	cf 93       	push	r28
    4c80:	df 93       	push	r29
    4c82:	cd b7       	in	r28, 0x3d	; 61
    4c84:	de b7       	in	r29, 0x3e	; 62
    4c86:	ce 56       	subi	r28, 0x6E	; 110
    4c88:	d1 09       	sbc	r29, r1
    4c8a:	0f b6       	in	r0, 0x3f	; 63
    4c8c:	f8 94       	cli
    4c8e:	de bf       	out	0x3e, r29	; 62
    4c90:	0f be       	out	0x3f, r0	; 63
    4c92:	cd bf       	out	0x3d, r28	; 61
    4c94:	7c 01       	movw	r14, r24
    4c96:	8b 01       	movw	r16, r22
	if(delPos>EEPROM.read(0) || delPos<0 )
    4c98:	80 e0       	ldi	r24, 0x00	; 0
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	80 17       	cp	r24, r16
    4ca4:	91 07       	cpc	r25, r17
    4ca6:	0c f4       	brge	.+2      	; 0x4caa <_ZN9red_beryl13deletaLeituraEi+0x3c>
    4ca8:	52 c0       	rjmp	.+164    	; 0x4d4e <_ZN9red_beryl13deletaLeituraEi+0xe0>
    4caa:	17 fd       	sbrc	r17, 7
    4cac:	50 c0       	rjmp	.+160    	; 0x4d4e <_ZN9red_beryl13deletaLeituraEi+0xe0>
	else
	{   //se o numero recebido estiver dentro do numero de leituras possiveis
		leitura lTemp;    //inicializa uma leitura temporaria para receber o valor de leitura do proximo valor e substituir no valor atual.
		int limit = ((EEPROM.length()-3)/sizeof(leitura));
		
		warning("Deletando...");
    4cae:	69 e4       	ldi	r22, 0x49	; 73
    4cb0:	77 e0       	ldi	r23, 0x07	; 7
    4cb2:	c7 01       	movw	r24, r14
    4cb4:	f7 db       	rcall	.-2066   	; 0x44a4 <_ZN9red_beryl7warningEPKc>
		
		upperBar();
    4cb6:	c7 01       	movw	r24, r14
    4cb8:	34 da       	rcall	.-2968   	; 0x4122 <_ZN9red_beryl8upperBarEv>
		display.display();
    4cba:	c7 01       	movw	r24, r14
    4cbc:	45 96       	adiw	r24, 0x15	; 21
    4cbe:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16Adafruit_SSD13067displayEv>
    4cc2:	8e e6       	ldi	r24, 0x6E	; 110
    4cc4:	80 9f       	mul	r24, r16
    4cc6:	70 01       	movw	r14, r0
    4cc8:	81 9f       	mul	r24, r17
    4cca:	f0 0c       	add	r15, r0
    4ccc:	11 24       	eor	r1, r1
    4cce:	8f ef       	ldi	r24, 0xFF	; 255
    4cd0:	e8 1a       	sub	r14, r24
    4cd2:	f8 0a       	sbc	r15, r24
		
		for(int i=delPos;(i<EEPROM.read(0) && i<limit);i++)
    4cd4:	80 e0       	ldi	r24, 0x00	; 0
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    4cdc:	28 2f       	mov	r18, r24
    4cde:	30 e0       	ldi	r19, 0x00	; 0
    4ce0:	02 17       	cp	r16, r18
    4ce2:	13 07       	cpc	r17, r19
    4ce4:	e4 f5       	brge	.+120    	; 0x4d5e <_ZN9red_beryl13deletaLeituraEi+0xf0>
    4ce6:	57 01       	movw	r10, r14
    4ce8:	9e e6       	ldi	r25, 0x6E	; 110
    4cea:	a9 0e       	add	r10, r25
    4cec:	b1 1c       	adc	r11, r1
    4cee:	05 32       	cpi	r16, 0x25	; 37
    4cf0:	11 05       	cpc	r17, r1
    4cf2:	ac f5       	brge	.+106    	; 0x4d5e <_ZN9red_beryl13deletaLeituraEi+0xf0>
		{   //EEPROM.get((22*i)+1,leituraTemp);    //leituraTemp recebe a leitura da EEPROM.
                                              //EEPROM.put( ((EEPROM.read(0)*22)+1)  , leitura0);   //salva a nova leitura na EEPROM.
			EEPROM.get( 1+ (sizeof(leitura)*(i+1)) ,lTemp );   //lTemp recebe o valor da proxima leitura.
    4cf4:	68 01       	movw	r12, r16
    4cf6:	9f ef       	ldi	r25, 0xFF	; 255
    4cf8:	c9 1a       	sub	r12, r25
    4cfa:	d9 0a       	sbc	r13, r25
    4cfc:	be 01       	movw	r22, r28
    4cfe:	6f 5f       	subi	r22, 0xFF	; 255
    4d00:	7f 4f       	sbci	r23, 0xFF	; 255
    4d02:	c5 01       	movw	r24, r10
    4d04:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
			EEPROM.put( 1+ (sizeof(leitura)*i), lTemp );       //endereço EEPROM selecionado atual[i] recebe lTemp.
    4d08:	be 01       	movw	r22, r28
    4d0a:	6f 5f       	subi	r22, 0xFF	; 255
    4d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d0e:	c7 01       	movw	r24, r14
    4d10:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.4>
			Serial.print("Posição ");Serial.print(i);Serial.print(" substituida por leitura na posição ");Serial.println(i+1);
    4d14:	6a ec       	ldi	r22, 0xCA	; 202
    4d16:	77 e0       	ldi	r23, 0x07	; 7
    4d18:	80 ec       	ldi	r24, 0xC0	; 192
    4d1a:	90 e1       	ldi	r25, 0x10	; 16
    4d1c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    4d20:	4a e0       	ldi	r20, 0x0A	; 10
    4d22:	50 e0       	ldi	r21, 0x00	; 0
    4d24:	b8 01       	movw	r22, r16
    4d26:	80 ec       	ldi	r24, 0xC0	; 192
    4d28:	90 e1       	ldi	r25, 0x10	; 16
    4d2a:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
    4d2e:	65 ed       	ldi	r22, 0xD5	; 213
    4d30:	77 e0       	ldi	r23, 0x07	; 7
    4d32:	80 ec       	ldi	r24, 0xC0	; 192
    4d34:	90 e1       	ldi	r25, 0x10	; 16
    4d36:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    4d3a:	4a e0       	ldi	r20, 0x0A	; 10
    4d3c:	50 e0       	ldi	r21, 0x00	; 0
    4d3e:	b6 01       	movw	r22, r12
    4d40:	80 ec       	ldi	r24, 0xC0	; 192
    4d42:	90 e1       	ldi	r25, 0x10	; 16
    4d44:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
    4d48:	75 01       	movw	r14, r10
		warning("Deletando...");
		
		upperBar();
		display.display();
		
		for(int i=delPos;(i<EEPROM.read(0) && i<limit);i++)
    4d4a:	86 01       	movw	r16, r12
    4d4c:	c3 cf       	rjmp	.-122    	; 0x4cd4 <_ZN9red_beryl13deletaLeituraEi+0x66>
}
bool red_beryl::deletaLeitura(int delPos)
{   /* Função deletaLeitura, recebe como paramento um int delPos(deleta posição) que será a posição da leitura na EEPROM a ser deletada. */
	if(delPos>EEPROM.read(0) || delPos<0 )
	{    //verificar se o numero recebido esta dentro do numero de leituras possiveis.
		Serial.println("Numero de posição recebido superior ao numero de leituras reconhecidas na EEPROM, ou Negativo. Retornando 'false'");
    4d4e:	66 e5       	ldi	r22, 0x56	; 86
    4d50:	77 e0       	ldi	r23, 0x07	; 7
    4d52:	80 ec       	ldi	r24, 0xC0	; 192
    4d54:	90 e1       	ldi	r25, 0x10	; 16
    4d56:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		return false;
    4d5a:	80 e0       	ldi	r24, 0x00	; 0
    4d5c:	37 c0       	rjmp	.+110    	; 0x4dcc <_ZN9red_beryl13deletaLeituraEi+0x15e>
                                              //EEPROM.put( ((EEPROM.read(0)*22)+1)  , leitura0);   //salva a nova leitura na EEPROM.
			EEPROM.get( 1+ (sizeof(leitura)*(i+1)) ,lTemp );   //lTemp recebe o valor da proxima leitura.
			EEPROM.put( 1+ (sizeof(leitura)*i), lTemp );       //endereço EEPROM selecionado atual[i] recebe lTemp.
			Serial.print("Posição ");Serial.print(i);Serial.print(" substituida por leitura na posição ");Serial.println(i+1);
		}
		if(EEPROM.read(0)<=limit)
    4d5e:	26 32       	cpi	r18, 0x26	; 38
    4d60:	31 05       	cpc	r19, r1
    4d62:	44 f5       	brge	.+80     	; 0x4db4 <_ZN9red_beryl13deletaLeituraEi+0x146>
		{
			for(int i=1+(EEPROM.read(0)*sizeof(leitura)); i<=(EEPROM.read(0)+1)*sizeof(leitura); i++)
    4d64:	9e e6       	ldi	r25, 0x6E	; 110
    4d66:	89 9f       	mul	r24, r25
    4d68:	80 01       	movw	r16, r0
    4d6a:	11 24       	eor	r1, r1
    4d6c:	0f 5f       	subi	r16, 0xFF	; 255
    4d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    4d70:	8e e6       	ldi	r24, 0x6E	; 110
    4d72:	f8 2e       	mov	r15, r24
    4d74:	80 e0       	ldi	r24, 0x00	; 0
    4d76:	90 e0       	ldi	r25, 0x00	; 0
    4d78:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    4d7c:	28 2f       	mov	r18, r24
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	2f 5f       	subi	r18, 0xFF	; 255
    4d82:	3f 4f       	sbci	r19, 0xFF	; 255
    4d84:	f2 9e       	mul	r15, r18
    4d86:	a0 01       	movw	r20, r0
    4d88:	f3 9e       	mul	r15, r19
    4d8a:	50 0d       	add	r21, r0
    4d8c:	11 24       	eor	r1, r1
    4d8e:	40 17       	cp	r20, r16
    4d90:	51 07       	cpc	r21, r17
    4d92:	68 f0       	brcs	.+26     	; 0x4dae <_ZN9red_beryl13deletaLeituraEi+0x140>
			{    //logica de apagar o ultimo endereço.
				EEPROM.write(i,0);
    4d94:	60 e0       	ldi	r22, 0x00	; 0
    4d96:	c8 01       	movw	r24, r16
    4d98:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
				Serial.println("Endereço final apagado.");
    4d9c:	67 e1       	ldi	r22, 0x17	; 23
    4d9e:	77 e0       	ldi	r23, 0x07	; 7
    4da0:	80 ec       	ldi	r24, 0xC0	; 192
    4da2:	90 e1       	ldi	r25, 0x10	; 16
    4da4:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
			EEPROM.put( 1+ (sizeof(leitura)*i), lTemp );       //endereço EEPROM selecionado atual[i] recebe lTemp.
			Serial.print("Posição ");Serial.print(i);Serial.print(" substituida por leitura na posição ");Serial.println(i+1);
		}
		if(EEPROM.read(0)<=limit)
		{
			for(int i=1+(EEPROM.read(0)*sizeof(leitura)); i<=(EEPROM.read(0)+1)*sizeof(leitura); i++)
    4da8:	0f 5f       	subi	r16, 0xFF	; 255
    4daa:	1f 4f       	sbci	r17, 0xFF	; 255
    4dac:	e3 cf       	rjmp	.-58     	; 0x4d74 <_ZN9red_beryl13deletaLeituraEi+0x106>
			{    //logica de apagar o ultimo endereço.
				EEPROM.write(i,0);
				Serial.println("Endereço final apagado.");
			}
			EEPROM.write(0, EEPROM.read(0)-1);    //diminui o valor do endereço 0 da EEPROM.
    4dae:	6f ef       	ldi	r22, 0xFF	; 255
    4db0:	68 0f       	add	r22, r24
    4db2:	01 c0       	rjmp	.+2      	; 0x4db6 <_ZN9red_beryl13deletaLeituraEi+0x148>
			for(int i=1+(limit*sizeof(leitura)); i<=(limit)*sizeof(leitura); i++)
			{
				EEPROM.write(i,0);
				Serial.println("Endereço final apagado, alterando valor total.");
			}
			EEPROM.write(0, limit-1);    //diminui o valor do endereço 0 da EEPROM.
    4db4:	64 e2       	ldi	r22, 0x24	; 36
    4db6:	80 e0       	ldi	r24, 0x00	; 0
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
		}
		
		Serial.println("DeletaLeitura concluido.");
    4dbe:	60 e3       	ldi	r22, 0x30	; 48
    4dc0:	77 e0       	ldi	r23, 0x07	; 7
    4dc2:	80 ec       	ldi	r24, 0xC0	; 192
    4dc4:	90 e1       	ldi	r25, 0x10	; 16
    4dc6:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    4dca:	81 e0       	ldi	r24, 0x01	; 1
		return true;
	}
}
    4dcc:	c2 59       	subi	r28, 0x92	; 146
    4dce:	df 4f       	sbci	r29, 0xFF	; 255
    4dd0:	0f b6       	in	r0, 0x3f	; 63
    4dd2:	f8 94       	cli
    4dd4:	de bf       	out	0x3e, r29	; 62
    4dd6:	0f be       	out	0x3f, r0	; 63
    4dd8:	cd bf       	out	0x3d, r28	; 61
    4dda:	df 91       	pop	r29
    4ddc:	cf 91       	pop	r28
    4dde:	1f 91       	pop	r17
    4de0:	0f 91       	pop	r16
    4de2:	ff 90       	pop	r15
    4de4:	ef 90       	pop	r14
    4de6:	df 90       	pop	r13
    4de8:	cf 90       	pop	r12
    4dea:	bf 90       	pop	r11
    4dec:	af 90       	pop	r10
    4dee:	08 95       	ret

00004df0 <_ZN9red_beryl12notificationEv>:
		}
	}
}

void red_beryl::notification()
{
    4df0:	ef 92       	push	r14
    4df2:	ff 92       	push	r15
    4df4:	0f 93       	push	r16
    4df6:	1f 93       	push	r17
    4df8:	cf 93       	push	r28
    4dfa:	df 93       	push	r29
	if(busyNotify)
    4dfc:	fc 01       	movw	r30, r24
    4dfe:	23 89       	ldd	r18, Z+19	; 0x13
    4e00:	22 23       	and	r18, r18
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <_ZN9red_beryl12notificationEv+0x16>
    4e04:	62 c0       	rjmp	.+196    	; 0x4eca <_ZN9red_beryl12notificationEv+0xda>
	{
		if(!persistentNotify)
    4e06:	22 89       	ldd	r18, Z+18	; 0x12
    4e08:	21 11       	cpse	r18, r1
    4e0a:	09 c0       	rjmp	.+18     	; 0x4e1e <_ZN9red_beryl12notificationEv+0x2e>
		{
			warning("Sincronizando");
    4e0c:	6c ef       	ldi	r22, 0xFC	; 252
    4e0e:	77 e0       	ldi	r23, 0x07	; 7
			display.setTextColor(WHITE);
			display.setTextSize(1);
			display.print("OK");
		}
	}
}
    4e10:	df 91       	pop	r29
    4e12:	cf 91       	pop	r28
    4e14:	1f 91       	pop	r17
    4e16:	0f 91       	pop	r16
    4e18:	ff 90       	pop	r15
    4e1a:	ef 90       	pop	r14
{
	if(busyNotify)
	{
		if(!persistentNotify)
		{
			warning("Sincronizando");
    4e1c:	43 cb       	rjmp	.-2426   	; 0x44a4 <_ZN9red_beryl7warningEPKc>
    4e1e:	ec 01       	movw	r28, r24
		}
		else
		{
			warning("Concluido.");
    4e20:	6a e0       	ldi	r22, 0x0A	; 10
    4e22:	78 e0       	ldi	r23, 0x08	; 8
    4e24:	3f db       	rcall	.-2434   	; 0x44a4 <_ZN9red_beryl7warningEPKc>
				
			display.fillRect(display.width()-25, display.height()-15, 2*6+2, lineSize+2, BLACK);
    4e26:	65 96       	adiw	r28, 0x15	; 21
    4e28:	ce 01       	movw	r24, r28
    4e2a:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    4e2e:	8c 01       	movw	r16, r24
    4e30:	ce 01       	movw	r24, r28
    4e32:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4e36:	a8 01       	movw	r20, r16
    4e38:	4f 50       	subi	r20, 0x0F	; 15
    4e3a:	51 09       	sbc	r21, r1
    4e3c:	bc 01       	movw	r22, r24
    4e3e:	69 51       	subi	r22, 0x19	; 25
    4e40:	71 09       	sbc	r23, r1
    4e42:	e1 2c       	mov	r14, r1
    4e44:	f1 2c       	mov	r15, r1
    4e46:	0a e0       	ldi	r16, 0x0A	; 10
    4e48:	10 e0       	ldi	r17, 0x00	; 0
    4e4a:	2e e0       	ldi	r18, 0x0E	; 14
    4e4c:	30 e0       	ldi	r19, 0x00	; 0
    4e4e:	ce 01       	movw	r24, r28
    4e50:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>
			display.drawRect(display.width()-25, display.height()-15, 2*6+2, lineSize+2, WHITE);
    4e54:	ce 01       	movw	r24, r28
    4e56:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    4e5a:	8c 01       	movw	r16, r24
    4e5c:	ce 01       	movw	r24, r28
    4e5e:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4e62:	a8 01       	movw	r20, r16
    4e64:	4f 50       	subi	r20, 0x0F	; 15
    4e66:	51 09       	sbc	r21, r1
    4e68:	bc 01       	movw	r22, r24
    4e6a:	69 51       	subi	r22, 0x19	; 25
    4e6c:	71 09       	sbc	r23, r1
    4e6e:	ee 24       	eor	r14, r14
    4e70:	e3 94       	inc	r14
    4e72:	f1 2c       	mov	r15, r1
    4e74:	0a e0       	ldi	r16, 0x0A	; 10
    4e76:	10 e0       	ldi	r17, 0x00	; 0
    4e78:	2e e0       	ldi	r18, 0x0E	; 14
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	ce 01       	movw	r24, r28
    4e7e:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <_ZN12Adafruit_GFX8drawRectEiiiij>
			display.setCursor(display.width()-23, display.height()-15+1 );
    4e82:	ce 01       	movw	r24, r28
    4e84:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    4e88:	8c 01       	movw	r16, r24
    4e8a:	ce 01       	movw	r24, r28
    4e8c:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4e90:	a8 01       	movw	r20, r16
    4e92:	4e 50       	subi	r20, 0x0E	; 14
    4e94:	51 09       	sbc	r21, r1
    4e96:	bc 01       	movw	r22, r24
    4e98:	67 51       	subi	r22, 0x17	; 23
    4e9a:	71 09       	sbc	r23, r1
    4e9c:	ce 01       	movw	r24, r28
    4e9e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
			display.setTextColor(WHITE);
    4ea2:	61 e0       	ldi	r22, 0x01	; 1
    4ea4:	70 e0       	ldi	r23, 0x00	; 0
    4ea6:	ce 01       	movw	r24, r28
    4ea8:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
			display.setTextSize(1);
    4eac:	61 e0       	ldi	r22, 0x01	; 1
    4eae:	ce 01       	movw	r24, r28
    4eb0:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
			display.print("OK");
    4eb4:	65 e1       	ldi	r22, 0x15	; 21
    4eb6:	78 e0       	ldi	r23, 0x08	; 8
    4eb8:	ce 01       	movw	r24, r28
		}
	}
}
    4eba:	df 91       	pop	r29
    4ebc:	cf 91       	pop	r28
    4ebe:	1f 91       	pop	r17
    4ec0:	0f 91       	pop	r16
    4ec2:	ff 90       	pop	r15
    4ec4:	ef 90       	pop	r14
			display.fillRect(display.width()-25, display.height()-15, 2*6+2, lineSize+2, BLACK);
			display.drawRect(display.width()-25, display.height()-15, 2*6+2, lineSize+2, WHITE);
			display.setCursor(display.width()-23, display.height()-15+1 );
			display.setTextColor(WHITE);
			display.setTextSize(1);
			display.print("OK");
    4ec6:	0c 94 54 07 	jmp	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		}
	}
}
    4eca:	df 91       	pop	r29
    4ecc:	cf 91       	pop	r28
    4ece:	1f 91       	pop	r17
    4ed0:	0f 91       	pop	r16
    4ed2:	ff 90       	pop	r15
    4ed4:	ef 90       	pop	r14
    4ed6:	08 95       	ret

00004ed8 <_ZN9red_beryl7warningEPKcS1_>:
		display.setTextSize(1);
		display.print("Ocupado");
	}
}
void red_beryl::warning(const char *s, const char *s2)
{
    4ed8:	af 92       	push	r10
    4eda:	bf 92       	push	r11
    4edc:	cf 92       	push	r12
    4ede:	df 92       	push	r13
    4ee0:	ef 92       	push	r14
    4ee2:	ff 92       	push	r15
    4ee4:	0f 93       	push	r16
    4ee6:	1f 93       	push	r17
    4ee8:	cf 93       	push	r28
    4eea:	df 93       	push	r29
    4eec:	5b 01       	movw	r10, r22
    4eee:	6a 01       	movw	r12, r20
	display.fillRect(20, lineSize, display.width()-40, lineSize*2+2, BLACK);
    4ef0:	ec 01       	movw	r28, r24
    4ef2:	65 96       	adiw	r28, 0x15	; 21
    4ef4:	ce 01       	movw	r24, r28
    4ef6:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4efa:	9c 01       	movw	r18, r24
    4efc:	28 52       	subi	r18, 0x28	; 40
    4efe:	31 09       	sbc	r19, r1
    4f00:	e1 2c       	mov	r14, r1
    4f02:	f1 2c       	mov	r15, r1
    4f04:	02 e1       	ldi	r16, 0x12	; 18
    4f06:	10 e0       	ldi	r17, 0x00	; 0
    4f08:	48 e0       	ldi	r20, 0x08	; 8
    4f0a:	50 e0       	ldi	r21, 0x00	; 0
    4f0c:	64 e1       	ldi	r22, 0x14	; 20
    4f0e:	70 e0       	ldi	r23, 0x00	; 0
    4f10:	ce 01       	movw	r24, r28
    4f12:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>
	display.drawRect(20, lineSize, display.width()-40, lineSize*2+2, WHITE);
    4f16:	ce 01       	movw	r24, r28
    4f18:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4f1c:	9c 01       	movw	r18, r24
    4f1e:	28 52       	subi	r18, 0x28	; 40
    4f20:	31 09       	sbc	r19, r1
    4f22:	ee 24       	eor	r14, r14
    4f24:	e3 94       	inc	r14
    4f26:	f1 2c       	mov	r15, r1
    4f28:	48 e0       	ldi	r20, 0x08	; 8
    4f2a:	50 e0       	ldi	r21, 0x00	; 0
    4f2c:	64 e1       	ldi	r22, 0x14	; 20
    4f2e:	70 e0       	ldi	r23, 0x00	; 0
    4f30:	ce 01       	movw	r24, r28
    4f32:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <_ZN12Adafruit_GFX8drawRectEiiiij>
	if (strlen(s)*6 < display.width()-40 && strlen(s2)*6 < display.width()-40)
    4f36:	f5 01       	movw	r30, r10
    4f38:	01 90       	ld	r0, Z+
    4f3a:	00 20       	and	r0, r0
    4f3c:	e9 f7       	brne	.-6      	; 0x4f38 <_ZN9red_beryl7warningEPKcS1_+0x60>
    4f3e:	31 97       	sbiw	r30, 0x01	; 1
    4f40:	8f 01       	movw	r16, r30
    4f42:	0a 19       	sub	r16, r10
    4f44:	1b 09       	sbc	r17, r11
    4f46:	ce 01       	movw	r24, r28
    4f48:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4f4c:	f6 e0       	ldi	r31, 0x06	; 6
    4f4e:	ff 2e       	mov	r15, r31
    4f50:	f0 9e       	mul	r15, r16
    4f52:	90 01       	movw	r18, r0
    4f54:	f1 9e       	mul	r15, r17
    4f56:	30 0d       	add	r19, r0
    4f58:	11 24       	eor	r1, r1
    4f5a:	88 97       	sbiw	r24, 0x28	; 40
    4f5c:	28 17       	cp	r18, r24
    4f5e:	39 07       	cpc	r19, r25
    4f60:	a0 f4       	brcc	.+40     	; 0x4f8a <_ZN9red_beryl7warningEPKcS1_+0xb2>
    4f62:	f6 01       	movw	r30, r12
    4f64:	01 90       	ld	r0, Z+
    4f66:	00 20       	and	r0, r0
    4f68:	e9 f7       	brne	.-6      	; 0x4f64 <_ZN9red_beryl7warningEPKcS1_+0x8c>
    4f6a:	31 97       	sbiw	r30, 0x01	; 1
    4f6c:	8f 01       	movw	r16, r30
    4f6e:	0c 19       	sub	r16, r12
    4f70:	1d 09       	sbc	r17, r13
    4f72:	ce 01       	movw	r24, r28
    4f74:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4f78:	f0 9e       	mul	r15, r16
    4f7a:	90 01       	movw	r18, r0
    4f7c:	f1 9e       	mul	r15, r17
    4f7e:	30 0d       	add	r19, r0
    4f80:	11 24       	eor	r1, r1
    4f82:	88 97       	sbiw	r24, 0x28	; 40
    4f84:	28 17       	cp	r18, r24
    4f86:	39 07       	cpc	r19, r25
    4f88:	d8 f0       	brcs	.+54     	; 0x4fc0 <_ZN9red_beryl7warningEPKcS1_+0xe8>
		display.setCursor((display.width()/2)-strlen(s2)*6/2, lineSize*2+1);
		display.print(s2);
	}
	else
	{
		display.setCursor((display.width()/2)-7*6/2, lineSize+5);
    4f8a:	ce 01       	movw	r24, r28
    4f8c:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4f90:	97 fd       	sbrc	r25, 7
    4f92:	01 96       	adiw	r24, 0x01	; 1
    4f94:	95 95       	asr	r25
    4f96:	87 95       	ror	r24
    4f98:	bc 01       	movw	r22, r24
    4f9a:	65 51       	subi	r22, 0x15	; 21
    4f9c:	71 09       	sbc	r23, r1
    4f9e:	4d e0       	ldi	r20, 0x0D	; 13
    4fa0:	50 e0       	ldi	r21, 0x00	; 0
    4fa2:	ce 01       	movw	r24, r28
    4fa4:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		display.setTextColor(WHITE);
    4fa8:	61 e0       	ldi	r22, 0x01	; 1
    4faa:	70 e0       	ldi	r23, 0x00	; 0
    4fac:	ce 01       	movw	r24, r28
    4fae:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
		display.setTextSize(1);
    4fb2:	61 e0       	ldi	r22, 0x01	; 1
    4fb4:	ce 01       	movw	r24, r28
    4fb6:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
		display.print("Ocupado");
    4fba:	62 e0       	ldi	r22, 0x02	; 2
    4fbc:	76 e0       	ldi	r23, 0x06	; 6
    4fbe:	4a c0       	rjmp	.+148    	; 0x5054 <_ZN9red_beryl7warningEPKcS1_+0x17c>
{
	display.fillRect(20, lineSize, display.width()-40, lineSize*2+2, BLACK);
	display.drawRect(20, lineSize, display.width()-40, lineSize*2+2, WHITE);
	if (strlen(s)*6 < display.width()-40 && strlen(s2)*6 < display.width()-40)
	{
		display.setCursor((display.width()/2)-strlen(s)*6/2, lineSize+1);
    4fc0:	ce 01       	movw	r24, r28
    4fc2:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    4fc6:	f5 01       	movw	r30, r10
    4fc8:	01 90       	ld	r0, Z+
    4fca:	00 20       	and	r0, r0
    4fcc:	e9 f7       	brne	.-6      	; 0x4fc8 <_ZN9red_beryl7warningEPKcS1_+0xf0>
    4fce:	31 97       	sbiw	r30, 0x01	; 1
    4fd0:	ea 19       	sub	r30, r10
    4fd2:	fb 09       	sbc	r31, r11
    4fd4:	97 fd       	sbrc	r25, 7
    4fd6:	01 96       	adiw	r24, 0x01	; 1
    4fd8:	95 95       	asr	r25
    4fda:	87 95       	ror	r24
    4fdc:	46 e0       	ldi	r20, 0x06	; 6
    4fde:	4e 9f       	mul	r20, r30
    4fe0:	90 01       	movw	r18, r0
    4fe2:	4f 9f       	mul	r20, r31
    4fe4:	30 0d       	add	r19, r0
    4fe6:	11 24       	eor	r1, r1
    4fe8:	36 95       	lsr	r19
    4fea:	27 95       	ror	r18
    4fec:	bc 01       	movw	r22, r24
    4fee:	62 1b       	sub	r22, r18
    4ff0:	73 0b       	sbc	r23, r19
    4ff2:	49 e0       	ldi	r20, 0x09	; 9
    4ff4:	50 e0       	ldi	r21, 0x00	; 0
    4ff6:	ce 01       	movw	r24, r28
    4ff8:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		display.setTextColor(WHITE);
    4ffc:	61 e0       	ldi	r22, 0x01	; 1
    4ffe:	70 e0       	ldi	r23, 0x00	; 0
    5000:	ce 01       	movw	r24, r28
    5002:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
		display.setTextSize(1);
    5006:	61 e0       	ldi	r22, 0x01	; 1
    5008:	ce 01       	movw	r24, r28
    500a:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
		display.print(s);
    500e:	b5 01       	movw	r22, r10
    5010:	ce 01       	movw	r24, r28
    5012:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		
		display.setCursor((display.width()/2)-strlen(s2)*6/2, lineSize*2+1);
    5016:	ce 01       	movw	r24, r28
    5018:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    501c:	f6 01       	movw	r30, r12
    501e:	01 90       	ld	r0, Z+
    5020:	00 20       	and	r0, r0
    5022:	e9 f7       	brne	.-6      	; 0x501e <_ZN9red_beryl7warningEPKcS1_+0x146>
    5024:	31 97       	sbiw	r30, 0x01	; 1
    5026:	ec 19       	sub	r30, r12
    5028:	fd 09       	sbc	r31, r13
    502a:	97 fd       	sbrc	r25, 7
    502c:	01 96       	adiw	r24, 0x01	; 1
    502e:	95 95       	asr	r25
    5030:	87 95       	ror	r24
    5032:	46 e0       	ldi	r20, 0x06	; 6
    5034:	4e 9f       	mul	r20, r30
    5036:	90 01       	movw	r18, r0
    5038:	4f 9f       	mul	r20, r31
    503a:	30 0d       	add	r19, r0
    503c:	11 24       	eor	r1, r1
    503e:	36 95       	lsr	r19
    5040:	27 95       	ror	r18
    5042:	bc 01       	movw	r22, r24
    5044:	62 1b       	sub	r22, r18
    5046:	73 0b       	sbc	r23, r19
    5048:	41 e1       	ldi	r20, 0x11	; 17
    504a:	50 e0       	ldi	r21, 0x00	; 0
    504c:	ce 01       	movw	r24, r28
    504e:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
		display.print(s2);
    5052:	b6 01       	movw	r22, r12
    5054:	ce 01       	movw	r24, r28
		display.setCursor((display.width()/2)-7*6/2, lineSize+5);
		display.setTextColor(WHITE);
		display.setTextSize(1);
		display.print("Ocupado");
	}
}
    5056:	df 91       	pop	r29
    5058:	cf 91       	pop	r28
    505a:	1f 91       	pop	r17
    505c:	0f 91       	pop	r16
    505e:	ff 90       	pop	r15
    5060:	ef 90       	pop	r14
    5062:	df 90       	pop	r13
    5064:	cf 90       	pop	r12
    5066:	bf 90       	pop	r11
    5068:	af 90       	pop	r10
		display.setTextColor(WHITE);
		display.setTextSize(1);
		display.print(s);
		
		display.setCursor((display.width()/2)-strlen(s2)*6/2, lineSize*2+1);
		display.print(s2);
    506a:	0c 94 54 07 	jmp	0xea8	; 0xea8 <_ZN5Print5printEPKc>

0000506e <_ZN9red_beryl9scrollBarEi>:
	}
	display.print(lt.minuto);   //imprime valor minuto.
}

void red_beryl::scrollBar(int j)
{
    506e:	8f 92       	push	r8
    5070:	9f 92       	push	r9
    5072:	af 92       	push	r10
    5074:	bf 92       	push	r11
    5076:	cf 92       	push	r12
    5078:	df 92       	push	r13
    507a:	ef 92       	push	r14
    507c:	ff 92       	push	r15
    507e:	0f 93       	push	r16
    5080:	1f 93       	push	r17
    5082:	cf 93       	push	r28
    5084:	df 93       	push	r29
    5086:	ec 01       	movw	r28, r24
    5088:	4b 01       	movw	r8, r22
    //CONSERTAR O MOVIMENTO DE LAGARTA QUE A SCROLL BAR ESTA FAZENDO NO MOMENTO MAS NÃO RETIRAR O MOVIMENTO DE EXPANSÃO.
    int offset = 100*(3*8)/(EEPROM.read(0)*8);
    508a:	80 e0       	ldi	r24, 0x00	; 0
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    //Inicializando um int offset que vai receber um a divisão do tamanho de uma tela pelo numero de opções multiplicadas pelo tamanho de uma linha, tudo multiplicado por 100.
    offset = map(offset,1,100,(3*8)-1,0);
    5092:	98 e0       	ldi	r25, 0x08	; 8
    5094:	89 9f       	mul	r24, r25
    5096:	b0 01       	movw	r22, r0
    5098:	11 24       	eor	r1, r1
    509a:	80 e6       	ldi	r24, 0x60	; 96
    509c:	99 e0       	ldi	r25, 0x09	; 9
    509e:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <__divmodhi4>
    50a2:	07 2e       	mov	r0, r23
    50a4:	00 0c       	add	r0, r0
    50a6:	88 0b       	sbc	r24, r24
    50a8:	99 0b       	sbc	r25, r25
    50aa:	1f 92       	push	r1
    50ac:	1f 92       	push	r1
    50ae:	1f 92       	push	r1
    50b0:	1f 92       	push	r1
    50b2:	b7 e1       	ldi	r27, 0x17	; 23
    50b4:	ab 2e       	mov	r10, r27
    50b6:	b1 2c       	mov	r11, r1
    50b8:	c1 2c       	mov	r12, r1
    50ba:	d1 2c       	mov	r13, r1
    50bc:	14 e6       	ldi	r17, 0x64	; 100
    50be:	e1 2e       	mov	r14, r17
    50c0:	f1 2c       	mov	r15, r1
    50c2:	00 e0       	ldi	r16, 0x00	; 0
    50c4:	10 e0       	ldi	r17, 0x00	; 0
    50c6:	21 e0       	ldi	r18, 0x01	; 1
    50c8:	30 e0       	ldi	r19, 0x00	; 0
    50ca:	40 e0       	ldi	r20, 0x00	; 0
    50cc:	50 e0       	ldi	r21, 0x00	; 0
    50ce:	0e 94 96 4b 	call	0x972c	; 0x972c <_Z3maplllll>
    50d2:	8b 01       	movw	r16, r22
    //mapeando o valor de offset de 1 a 100 para o tamanho da tela até 1, ou seja, quanto mais proximo de 100 offset for, menor o offset será, em relação ao tamanho livre na tela,
    // desaparecendo em 100 ou mais. de forma que, quando tiver apenas tres opções ou menos, a barra de scroll não aparecerá, mas a partir de quatro opções, a barra cobrira 75% do espaço livre
    //na tela, dividindo os 25% restantes entre o [numero de opções -1], no caso [4-1=(3)], cada opção alem da selecionada contara com aproximadamente 8,333% para fazer offset relevante a posição
    //da opção selecionada(j)

    offset/=(EEPROM.read(0)-1);   //dividindo o offset pelo numero de opções -1.
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    50dc:	28 2f       	mov	r18, r24
    50de:	30 e0       	ldi	r19, 0x00	; 0
    50e0:	b9 01       	movw	r22, r18
    50e2:	61 50       	subi	r22, 0x01	; 1
    50e4:	71 09       	sbc	r23, r1
    50e6:	c8 01       	movw	r24, r16
    50e8:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <__divmodhi4>
    50ec:	7b 01       	movw	r14, r22
    
    if(offset==0){
    50ee:	0f 90       	pop	r0
    50f0:	0f 90       	pop	r0
    50f2:	0f 90       	pop	r0
    50f4:	0f 90       	pop	r0
    50f6:	67 2b       	or	r22, r23
    50f8:	19 f4       	brne	.+6      	; 0x5100 <_ZN9red_beryl9scrollBarEi+0x92>
      offset=1;
    50fa:	ee 24       	eor	r14, r14
    50fc:	e3 94       	inc	r14
    50fe:	f1 2c       	mov	r15, r1
    }
    display.drawLine(display.width()-1, (lineSize+(j*offset)/2), display.width()-1,display.height()-1-((EEPROM.read(0)-(j+1))*offset)/2, WHITE);
    5100:	65 96       	adiw	r28, 0x15	; 21
    5102:	ce 01       	movw	r24, r28
    5104:	0e 94 3a 52 	call	0xa474	; 0xa474 <_ZNK12Adafruit_GFX6heightEv>
    5108:	8c 01       	movw	r16, r24
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	94 01       	movw	r18, r8
    5116:	2f 5f       	subi	r18, 0xFF	; 255
    5118:	3f 4f       	sbci	r19, 0xFF	; 255
    511a:	82 1b       	sub	r24, r18
    511c:	93 0b       	sbc	r25, r19
    511e:	8e 9d       	mul	r24, r14
    5120:	90 01       	movw	r18, r0
    5122:	8f 9d       	mul	r24, r15
    5124:	30 0d       	add	r19, r0
    5126:	9e 9d       	mul	r25, r14
    5128:	30 0d       	add	r19, r0
    512a:	11 24       	eor	r1, r1
    512c:	37 ff       	sbrs	r19, 7
    512e:	02 c0       	rjmp	.+4      	; 0x5134 <_ZN9red_beryl9scrollBarEi+0xc6>
    5130:	2f 5f       	subi	r18, 0xFF	; 255
    5132:	3f 4f       	sbci	r19, 0xFF	; 255
    5134:	35 95       	asr	r19
    5136:	27 95       	ror	r18
    5138:	01 50       	subi	r16, 0x01	; 1
    513a:	11 09       	sbc	r17, r1
    513c:	02 1b       	sub	r16, r18
    513e:	13 0b       	sbc	r17, r19
    5140:	ce 01       	movw	r24, r28
    5142:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    5146:	6c 01       	movw	r12, r24
    5148:	ce 01       	movw	r24, r28
    514a:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    514e:	96 01       	movw	r18, r12
    5150:	21 50       	subi	r18, 0x01	; 1
    5152:	31 09       	sbc	r19, r1
    5154:	e8 9c       	mul	r14, r8
    5156:	a0 01       	movw	r20, r0
    5158:	e9 9c       	mul	r14, r9
    515a:	50 0d       	add	r21, r0
    515c:	f8 9c       	mul	r15, r8
    515e:	50 0d       	add	r21, r0
    5160:	11 24       	eor	r1, r1
    5162:	57 ff       	sbrs	r21, 7
    5164:	02 c0       	rjmp	.+4      	; 0x516a <_ZN9red_beryl9scrollBarEi+0xfc>
    5166:	4f 5f       	subi	r20, 0xFF	; 255
    5168:	5f 4f       	sbci	r21, 0xFF	; 255
    516a:	55 95       	asr	r21
    516c:	47 95       	ror	r20
    516e:	48 5f       	subi	r20, 0xF8	; 248
    5170:	5f 4f       	sbci	r21, 0xFF	; 255
    5172:	bc 01       	movw	r22, r24
    5174:	61 50       	subi	r22, 0x01	; 1
    5176:	71 09       	sbc	r23, r1
    5178:	ee 24       	eor	r14, r14
    517a:	e3 94       	inc	r14
    517c:	f1 2c       	mov	r15, r1
    517e:	ce 01       	movw	r24, r28
    5180:	0e 94 8c 4d 	call	0x9b18	; 0x9b18 <_ZN12Adafruit_GFX8drawLineEiiiij>
}
    5184:	df 91       	pop	r29
    5186:	cf 91       	pop	r28
    5188:	1f 91       	pop	r17
    518a:	0f 91       	pop	r16
    518c:	ff 90       	pop	r15
    518e:	ef 90       	pop	r14
    5190:	df 90       	pop	r13
    5192:	cf 90       	pop	r12
    5194:	bf 90       	pop	r11
    5196:	af 90       	pop	r10
    5198:	9f 90       	pop	r9
    519a:	8f 90       	pop	r8
    519c:	08 95       	ret

0000519e <_ZN9red_beryl9historicoEv>:
bool red_beryl::nova_leitura()
{
	
}
bool red_beryl::historico()
{	
    519e:	af 92       	push	r10
    51a0:	bf 92       	push	r11
    51a2:	cf 92       	push	r12
    51a4:	df 92       	push	r13
    51a6:	ef 92       	push	r14
    51a8:	ff 92       	push	r15
    51aa:	0f 93       	push	r16
    51ac:	1f 93       	push	r17
    51ae:	cf 93       	push	r28
    51b0:	df 93       	push	r29
    51b2:	ec 01       	movw	r28, r24
	static int i = 0;   //declara a variavel i referente aos numeros do historico(+1), por padrão usaremos apenas 10 valores, mas como o arduino Mega oferece muito mais espaço é possivel liberar mais espaço para salvar as leituras.
	static int l = 1;   //declara a variavel l referente as linhas do historico, estou testando seu uso para um menu mais dinamico e inteligente.
    static bool detalhar = false;   //declara a variavel bool detalhar que define se os detalhes de uma leitura escolhida deverão ser mostrados ou não.
	static int limit = ((EEPROM.length()-3)/sizeof(leitura))-1;
    51b4:	80 91 61 13 	lds	r24, 0x1361	; 0x801361 <_ZGVZN9red_beryl9historicoEvE5limit>
    51b8:	81 11       	cpse	r24, r1
    51ba:	09 c0       	rjmp	.+18     	; 0x51ce <_ZN9red_beryl9historicoEv+0x30>
    51bc:	84 e2       	ldi	r24, 0x24	; 36
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	90 93 36 13 	sts	0x1336, r25	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    51c4:	80 93 35 13 	sts	0x1335, r24	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	80 93 61 13 	sts	0x1361, r24	; 0x801361 <_ZGVZN9red_beryl9historicoEvE5limit>
		if(EEPROM.read(0)!=0)
    51ce:	80 e0       	ldi	r24, 0x00	; 0
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    51d6:	88 23       	and	r24, r24
    51d8:	09 f4       	brne	.+2      	; 0x51dc <_ZN9red_beryl9historicoEv+0x3e>
    51da:	70 c4       	rjmp	.+2272   	; 0x5abc <_ZN9red_beryl9historicoEv+0x91e>
		{    //primeiro testa se tem algo no historico para apresentar.
			if(i>limit)
    51dc:	80 91 33 13 	lds	r24, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    51e0:	90 91 34 13 	lds	r25, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    51e4:	e0 90 35 13 	lds	r14, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    51e8:	f0 90 36 13 	lds	r15, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    51ec:	e8 16       	cp	r14, r24
    51ee:	f9 06       	cpc	r15, r25
    51f0:	34 f4       	brge	.+12     	; 0x51fe <_ZN9red_beryl9historicoEv+0x60>
			{
				i-=limit;
    51f2:	8e 19       	sub	r24, r14
    51f4:	9f 09       	sbc	r25, r15
    51f6:	90 93 34 13 	sts	0x1334, r25	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    51fa:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
			}
			if(detalhar)
    51fe:	80 91 32 13 	lds	r24, 0x1332	; 0x801332 <_ZZN9red_beryl9historicoEvE8detalhar>
    5202:	88 23       	and	r24, r24
    5204:	09 f4       	brne	.+2      	; 0x5208 <_ZN9red_beryl9historicoEv+0x6a>
    5206:	ab c1       	rjmp	.+854    	; 0x555e <_ZN9red_beryl9historicoEv+0x3c0>
			{
				static bool recebeu=false;			/*inicializa uma variavel bool que informa se a leitura ja foi recebida da EEPROM*/
				static bool perguntaDelete=false;   //inicializa uma variavel bool que decide se uma caixa de texto perguntando se o usuario quer deletar uma leitura aparece ou não.
				static leitura leituraTemp;			//inicializa uma struct leitura temporaria para receber a struct leitura da EEPROM, feita static para que não se repita.
				if(!recebeu)
    5208:	80 91 31 13 	lds	r24, 0x1331	; 0x801331 <_ZZN9red_beryl9historicoEvE7recebeu>
    520c:	81 11       	cpse	r24, r1
    520e:	18 c0       	rjmp	.+48     	; 0x5240 <_ZN9red_beryl9historicoEv+0xa2>
				{   //se não tiver recebido a leitura da EEPROM
					EEPROM.get((sizeof(leitura)*i)+1,leituraTemp);    //leituraTemp recebe a leitura da EEPROM.
    5210:	20 91 33 13 	lds	r18, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5214:	30 91 34 13 	lds	r19, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5218:	4e e6       	ldi	r20, 0x6E	; 110
    521a:	42 9f       	mul	r20, r18
    521c:	c0 01       	movw	r24, r0
    521e:	43 9f       	mul	r20, r19
    5220:	90 0d       	add	r25, r0
    5222:	11 24       	eor	r1, r1
    5224:	63 ec       	ldi	r22, 0xC3	; 195
    5226:	72 e1       	ldi	r23, 0x12	; 18
    5228:	01 96       	adiw	r24, 0x01	; 1
    522a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
					recebeu=true;   //recebeu recebe valor true.
    522e:	81 e0       	ldi	r24, 0x01	; 1
    5230:	80 93 31 13 	sts	0x1331, r24	; 0x801331 <_ZZN9red_beryl9historicoEvE7recebeu>
					Serial.println("recebeu leitura");    //imprime a confirmação no serial
    5234:	68 e1       	ldi	r22, 0x18	; 24
    5236:	78 e0       	ldi	r23, 0x08	; 8
    5238:	80 ec       	ldi	r24, 0xC0	; 192
    523a:	90 e1       	ldi	r25, 0x10	; 16
    523c:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				}
				display.setCursor(25,lineSize);    //define a posição do cursor.
    5240:	8e 01       	movw	r16, r28
    5242:	0b 5e       	subi	r16, 0xEB	; 235
    5244:	1f 4f       	sbci	r17, 0xFF	; 255
    5246:	48 e0       	ldi	r20, 0x08	; 8
    5248:	50 e0       	ldi	r21, 0x00	; 0
    524a:	69 e1       	ldi	r22, 0x19	; 25
    524c:	70 e0       	ldi	r23, 0x00	; 0
    524e:	c8 01       	movw	r24, r16
    5250:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				display.setTextColor(WHITE);    //define a cor da fonte(branca).
    5254:	61 e0       	ldi	r22, 0x01	; 1
    5256:	70 e0       	ldi	r23, 0x00	; 0
    5258:	c8 01       	movw	r24, r16
    525a:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
				display.print(leituraTemp.dia);   //imprime o valor dia.
    525e:	60 91 2b 13 	lds	r22, 0x132B	; 0x80132b <_ZZN9red_beryl9historicoEvE11leituraTemp+0x68>
    5262:	70 91 2c 13 	lds	r23, 0x132C	; 0x80132c <_ZZN9red_beryl9historicoEvE11leituraTemp+0x69>
    5266:	4a e0       	ldi	r20, 0x0A	; 10
    5268:	50 e0       	ldi	r21, 0x00	; 0
    526a:	c8 01       	movw	r24, r16
    526c:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.print("/");   //separador de data.
    5270:	64 ea       	ldi	r22, 0xA4	; 164
    5272:	75 e0       	ldi	r23, 0x05	; 5
    5274:	c8 01       	movw	r24, r16
    5276:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				display.print(leituraTemp.mes);   //imprime o valor mes.
    527a:	60 91 2d 13 	lds	r22, 0x132D	; 0x80132d <_ZZN9red_beryl9historicoEvE11leituraTemp+0x6a>
    527e:	70 91 2e 13 	lds	r23, 0x132E	; 0x80132e <_ZZN9red_beryl9historicoEvE11leituraTemp+0x6b>
    5282:	4a e0       	ldi	r20, 0x0A	; 10
    5284:	50 e0       	ldi	r21, 0x00	; 0
    5286:	c8 01       	movw	r24, r16
    5288:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.print("/");   //separador de data.
    528c:	64 ea       	ldi	r22, 0xA4	; 164
    528e:	75 e0       	ldi	r23, 0x05	; 5
    5290:	c8 01       	movw	r24, r16
    5292:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				display.print(leituraTemp.ano);   //imprime o valor ano.
    5296:	60 91 2f 13 	lds	r22, 0x132F	; 0x80132f <_ZZN9red_beryl9historicoEvE11leituraTemp+0x6c>
    529a:	70 91 30 13 	lds	r23, 0x1330	; 0x801330 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x6d>
    529e:	4a e0       	ldi	r20, 0x0A	; 10
    52a0:	50 e0       	ldi	r21, 0x00	; 0
    52a2:	c8 01       	movw	r24, r16
    52a4:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.print("  ");    //espaço vazio.
    52a8:	6e eb       	ldi	r22, 0xBE	; 190
    52aa:	74 e0       	ldi	r23, 0x04	; 4
    52ac:	c8 01       	movw	r24, r16
    52ae:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				display.print(leituraTemp.hora);    //imprime o valor hora.
    52b2:	60 91 27 13 	lds	r22, 0x1327	; 0x801327 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x64>
    52b6:	70 91 28 13 	lds	r23, 0x1328	; 0x801328 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x65>
    52ba:	4a e0       	ldi	r20, 0x0A	; 10
    52bc:	50 e0       	ldi	r21, 0x00	; 0
    52be:	c8 01       	movw	r24, r16
    52c0:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.print(":");   //separador de hora.
    52c4:	69 e2       	ldi	r22, 0x29	; 41
    52c6:	78 e0       	ldi	r23, 0x08	; 8
    52c8:	c8 01       	movw	r24, r16
    52ca:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leituraTemp.minuto<10)
    52ce:	80 91 29 13 	lds	r24, 0x1329	; 0x801329 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x66>
    52d2:	90 91 2a 13 	lds	r25, 0x132A	; 0x80132a <_ZZN9red_beryl9historicoEvE11leituraTemp+0x67>
    52d6:	0a 97       	sbiw	r24, 0x0a	; 10
    52d8:	2c f4       	brge	.+10     	; 0x52e4 <_ZN9red_beryl9historicoEv+0x146>
				{    //se o minuto for menor que 10, imprime 0 para manter a estetica.
					display.print("0");
    52da:	65 ef       	ldi	r22, 0xF5	; 245
    52dc:	76 e0       	ldi	r23, 0x06	; 6
    52de:	c8 01       	movw	r24, r16
    52e0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leituraTemp.minuto);    //imprime o valor minuto.
    52e4:	60 91 29 13 	lds	r22, 0x1329	; 0x801329 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x66>
    52e8:	70 91 2a 13 	lds	r23, 0x132A	; 0x80132a <_ZZN9red_beryl9historicoEvE11leituraTemp+0x67>
    52ec:	4a e0       	ldi	r20, 0x0A	; 10
    52ee:	50 e0       	ldi	r21, 0x00	; 0
    52f0:	c8 01       	movw	r24, r16
    52f2:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.setCursor(2,lineSize*2);   //define a posição do cursor
    52f6:	40 e1       	ldi	r20, 0x10	; 16
    52f8:	50 e0       	ldi	r21, 0x00	; 0
    52fa:	62 e0       	ldi	r22, 0x02	; 2
    52fc:	70 e0       	ldi	r23, 0x00	; 0
    52fe:	c8 01       	movw	r24, r16
    5300:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				display.print("R:");   //real
    5304:	6d e5       	ldi	r22, 0x5D	; 93
    5306:	78 e0       	ldi	r23, 0x08	; 8
    5308:	c8 01       	movw	r24, r16
    530a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leituraTemp.real>=0)
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	a9 01       	movw	r20, r18
    5314:	60 91 c7 12 	lds	r22, 0x12C7	; 0x8012c7 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x4>
    5318:	70 91 c8 12 	lds	r23, 0x12C8	; 0x8012c8 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x5>
    531c:	80 91 c9 12 	lds	r24, 0x12C9	; 0x8012c9 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x6>
    5320:	90 91 ca 12 	lds	r25, 0x12CA	; 0x8012ca <_ZZN9red_beryl9historicoEvE11leituraTemp+0x7>
    5324:	0e 94 43 5d 	call	0xba86	; 0xba86 <__gesf2>
    5328:	87 fd       	sbrc	r24, 7
    532a:	05 c0       	rjmp	.+10     	; 0x5336 <_ZN9red_beryl9historicoEv+0x198>
				{
					display.print(" ");
    532c:	6f eb       	ldi	r22, 0xBF	; 191
    532e:	74 e0       	ldi	r23, 0x04	; 4
    5330:	c8 01       	movw	r24, r16
    5332:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leituraTemp.real);    //imprime o valor real
    5336:	40 91 c7 12 	lds	r20, 0x12C7	; 0x8012c7 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x4>
    533a:	50 91 c8 12 	lds	r21, 0x12C8	; 0x8012c8 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x5>
    533e:	60 91 c9 12 	lds	r22, 0x12C9	; 0x8012c9 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x6>
    5342:	70 91 ca 12 	lds	r23, 0x12CA	; 0x8012ca <_ZZN9red_beryl9historicoEvE11leituraTemp+0x7>
    5346:	22 e0       	ldi	r18, 0x02	; 2
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	c8 01       	movw	r24, r16
    534c:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Print5printEdi>
				display.setCursor(2,lineSize*3);   //define a posição do cursor
    5350:	48 e1       	ldi	r20, 0x18	; 24
    5352:	50 e0       	ldi	r21, 0x00	; 0
    5354:	62 e0       	ldi	r22, 0x02	; 2
    5356:	70 e0       	ldi	r23, 0x00	; 0
    5358:	c8 01       	movw	r24, r16
    535a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				display.print("I:");    //imaginario
    535e:	68 e2       	ldi	r22, 0x28	; 40
    5360:	78 e0       	ldi	r23, 0x08	; 8
    5362:	c8 01       	movw	r24, r16
    5364:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leituraTemp.imag>=0)
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	a9 01       	movw	r20, r18
    536e:	60 91 cb 12 	lds	r22, 0x12CB	; 0x8012cb <_ZZN9red_beryl9historicoEvE11leituraTemp+0x8>
    5372:	70 91 cc 12 	lds	r23, 0x12CC	; 0x8012cc <_ZZN9red_beryl9historicoEvE11leituraTemp+0x9>
    5376:	80 91 cd 12 	lds	r24, 0x12CD	; 0x8012cd <_ZZN9red_beryl9historicoEvE11leituraTemp+0xa>
    537a:	90 91 ce 12 	lds	r25, 0x12CE	; 0x8012ce <_ZZN9red_beryl9historicoEvE11leituraTemp+0xb>
    537e:	0e 94 43 5d 	call	0xba86	; 0xba86 <__gesf2>
    5382:	87 fd       	sbrc	r24, 7
    5384:	05 c0       	rjmp	.+10     	; 0x5390 <_ZN9red_beryl9historicoEv+0x1f2>
				{
					display.print(" ");
    5386:	6f eb       	ldi	r22, 0xBF	; 191
    5388:	74 e0       	ldi	r23, 0x04	; 4
    538a:	c8 01       	movw	r24, r16
    538c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leituraTemp.imag);    //imprime o valor imaginario
    5390:	40 91 cb 12 	lds	r20, 0x12CB	; 0x8012cb <_ZZN9red_beryl9historicoEvE11leituraTemp+0x8>
    5394:	50 91 cc 12 	lds	r21, 0x12CC	; 0x8012cc <_ZZN9red_beryl9historicoEvE11leituraTemp+0x9>
    5398:	60 91 cd 12 	lds	r22, 0x12CD	; 0x8012cd <_ZZN9red_beryl9historicoEvE11leituraTemp+0xa>
    539c:	70 91 ce 12 	lds	r23, 0x12CE	; 0x8012ce <_ZZN9red_beryl9historicoEvE11leituraTemp+0xb>
    53a0:	22 e0       	ldi	r18, 0x02	; 2
    53a2:	30 e0       	ldi	r19, 0x00	; 0
    53a4:	c8 01       	movw	r24, r16
    53a6:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Print5printEdi>

				display.setCursor(display.width()-(6*7), lineSize*2+4);
    53aa:	c8 01       	movw	r24, r16
    53ac:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    53b0:	bc 01       	movw	r22, r24
    53b2:	6a 52       	subi	r22, 0x2A	; 42
    53b4:	71 09       	sbc	r23, r1
    53b6:	44 e1       	ldi	r20, 0x14	; 20
    53b8:	50 e0       	ldi	r21, 0x00	; 0
    53ba:	c8 01       	movw	r24, r16
    53bc:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				display.print(leituraTemp.freq/1000);
    53c0:	60 91 c3 12 	lds	r22, 0x12C3	; 0x8012c3 <_ZZN9red_beryl9historicoEvE11leituraTemp>
    53c4:	70 91 c4 12 	lds	r23, 0x12C4	; 0x8012c4 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x1>
    53c8:	80 91 c5 12 	lds	r24, 0x12C5	; 0x8012c5 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x2>
    53cc:	90 91 c6 12 	lds	r25, 0x12C6	; 0x8012c6 <_ZZN9red_beryl9historicoEvE11leituraTemp+0x3>
    53d0:	28 ee       	ldi	r18, 0xE8	; 232
    53d2:	33 e0       	ldi	r19, 0x03	; 3
    53d4:	40 e0       	ldi	r20, 0x00	; 0
    53d6:	50 e0       	ldi	r21, 0x00	; 0
    53d8:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <__udivmodsi4>
    53dc:	ba 01       	movw	r22, r20
    53de:	a9 01       	movw	r20, r18
    53e0:	2a e0       	ldi	r18, 0x0A	; 10
    53e2:	30 e0       	ldi	r19, 0x00	; 0
    53e4:	c8 01       	movw	r24, r16
    53e6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN5Print5printEmi>
				display.print("KHz");
    53ea:	67 e5       	ldi	r22, 0x57	; 87
    53ec:	78 e0       	ldi	r23, 0x08	; 8
    53ee:	c8 01       	movw	r24, r16
    53f0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>

				if(perguntaDelete)
    53f4:	80 91 c2 12 	lds	r24, 0x12C2	; 0x8012c2 <_ZZN9red_beryl9historicoEvE14perguntaDelete>
    53f8:	88 23       	and	r24, r24
    53fa:	61 f1       	breq	.+88     	; 0x5454 <_ZN9red_beryl9historicoEv+0x2b6>
				{
					warning("Deletar? N/S");
    53fc:	6b e2       	ldi	r22, 0x2B	; 43
    53fe:	78 e0       	ldi	r23, 0x08	; 8
    5400:	ce 01       	movw	r24, r28
    5402:	50 d8       	rcall	.-3936   	; 0x44a4 <_ZN9red_beryl7warningEPKc>
					if(_up)
    5404:	8e 85       	ldd	r24, Y+14	; 0x0e
    5406:	81 11       	cpse	r24, r1
					{
						_up=false;
    5408:	1e 86       	std	Y+14, r1	; 0x0e
					}
					if(_down)
    540a:	8f 85       	ldd	r24, Y+15	; 0x0f
    540c:	81 11       	cpse	r24, r1
					{
						_down=false;
    540e:	1f 86       	std	Y+15, r1	; 0x0f
					}
					if(_yes)
    5410:	88 89       	ldd	r24, Y+16	; 0x10
    5412:	88 23       	and	r24, r24
    5414:	c9 f0       	breq	.+50     	; 0x5448 <_ZN9red_beryl9historicoEv+0x2aa>
					{
						deletaLeitura(i);
    5416:	60 91 33 13 	lds	r22, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    541a:	70 91 34 13 	lds	r23, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    541e:	ce 01       	movw	r24, r28
    5420:	26 dc       	rcall	.-1972   	; 0x4c6e <_ZN9red_beryl13deletaLeituraEi>
						detalhar=false;
    5422:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <_ZZN9red_beryl9historicoEvE8detalhar>
						recebeu=false;
    5426:	10 92 31 13 	sts	0x1331, r1	; 0x801331 <_ZZN9red_beryl9historicoEvE7recebeu>
						perguntaDelete=false;
    542a:	10 92 c2 12 	sts	0x12C2, r1	; 0x8012c2 <_ZZN9red_beryl9historicoEvE14perguntaDelete>
						_yes=false;
    542e:	18 8a       	std	Y+16, r1	; 0x10
						i=0;
    5430:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5434:	10 92 33 13 	sts	0x1333, r1	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
						l=1;
    5438:	81 e0       	ldi	r24, 0x01	; 1
    543a:	90 e0       	ldi	r25, 0x00	; 0
    543c:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5440:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
						_up=true;
    5444:	8e 87       	std	Y+14, r24	; 0x0e
						_down=true;
    5446:	8f 87       	std	Y+15, r24	; 0x0f
					}
					if(_no)
    5448:	89 89       	ldd	r24, Y+17	; 0x11
    544a:	88 23       	and	r24, r24
    544c:	19 f0       	breq	.+6      	; 0x5454 <_ZN9red_beryl9historicoEv+0x2b6>
					{
						perguntaDelete=false;
    544e:	10 92 c2 12 	sts	0x12C2, r1	; 0x8012c2 <_ZZN9red_beryl9historicoEvE14perguntaDelete>
						_no=false;
    5452:	19 8a       	std	Y+17, r1	; 0x11
					}
				}
				if(_yes)
    5454:	88 89       	ldd	r24, Y+16	; 0x10
    5456:	88 23       	and	r24, r24
    5458:	21 f0       	breq	.+8      	; 0x5462 <_ZN9red_beryl9historicoEv+0x2c4>
				{    //se YES for true.
					perguntaDelete=true;
    545a:	81 e0       	ldi	r24, 0x01	; 1
    545c:	80 93 c2 12 	sts	0x12C2, r24	; 0x8012c2 <_ZZN9red_beryl9historicoEvE14perguntaDelete>
					_yes=false;    //reseta YES.
    5460:	18 8a       	std	Y+16, r1	; 0x10
				}
				if(_up)
    5462:	8e 85       	ldd	r24, Y+14	; 0x0e
    5464:	88 23       	and	r24, r24
    5466:	09 f4       	brne	.+2      	; 0x546a <_ZN9red_beryl9historicoEv+0x2cc>
    5468:	40 c0       	rjmp	.+128    	; 0x54ea <_ZN9red_beryl9historicoEv+0x34c>
				{   //se UP for true.
					if(i!=0)
    546a:	80 91 33 13 	lds	r24, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    546e:	90 91 34 13 	lds	r25, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5472:	00 97       	sbiw	r24, 0x00	; 0
    5474:	71 f0       	breq	.+28     	; 0x5492 <_ZN9red_beryl9historicoEv+0x2f4>
					{   //se i não estiver na posição 0
						i--;    //i-1
    5476:	01 97       	sbiw	r24, 0x01	; 1
    5478:	90 93 34 13 	sts	0x1334, r25	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    547c:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
						if(l!=1)
    5480:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5484:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5488:	81 30       	cpi	r24, 0x01	; 1
    548a:	91 05       	cpc	r25, r1
    548c:	59 f1       	breq	.+86     	; 0x54e4 <_ZN9red_beryl9historicoEv+0x346>
						{   //se não estiver selecionando a primeira linha.
							l--;    //seleciona a linha acima da atual.
    548e:	01 97       	sbiw	r24, 0x01	; 1
    5490:	25 c0       	rjmp	.+74     	; 0x54dc <_ZN9red_beryl9historicoEv+0x33e>
						}
					}
					else if(EEPROM.read(0)>1)
    5492:	80 e0       	ldi	r24, 0x00	; 0
    5494:	90 e0       	ldi	r25, 0x00	; 0
    5496:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    549a:	82 30       	cpi	r24, 0x02	; 2
    549c:	18 f1       	brcs	.+70     	; 0x54e4 <_ZN9red_beryl9historicoEv+0x346>
					{    //se i for 0 e haver mais de uma leitura na EEPROM
						if((EEPROM.read(0)-1)>limit)
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	01 97       	sbiw	r24, 0x01	; 1
    54a2:	20 91 35 13 	lds	r18, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    54a6:	30 91 36 13 	lds	r19, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    54aa:	28 17       	cp	r18, r24
    54ac:	39 07       	cpc	r19, r25
    54ae:	2c f4       	brge	.+10     	; 0x54ba <_ZN9red_beryl9historicoEv+0x31c>
						{
							i=limit;
    54b0:	30 93 34 13 	sts	0x1334, r19	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    54b4:	20 93 33 13 	sts	0x1333, r18	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    54b8:	04 c0       	rjmp	.+8      	; 0x54c2 <_ZN9red_beryl9historicoEv+0x324>
						}
						else
						{
							i=EEPROM.read(0)-1;   //i recebe o valor equivalente a ultima leitura valida.
    54ba:	90 93 34 13 	sts	0x1334, r25	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    54be:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
						}
						if(EEPROM.read(0)>2)
    54c2:	80 e0       	ldi	r24, 0x00	; 0
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    54ca:	83 30       	cpi	r24, 0x03	; 3
    54cc:	18 f0       	brcs	.+6      	; 0x54d4 <_ZN9red_beryl9historicoEv+0x336>
						{   //se tiver mais de duas leituras validas
							l=3;    //seleciona a terceira linha para quando retornar ao menu anterior
    54ce:	83 e0       	ldi	r24, 0x03	; 3
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	04 c0       	rjmp	.+8      	; 0x54dc <_ZN9red_beryl9historicoEv+0x33e>
						}
						else if(EEPROM.read(0)==2)
    54d4:	82 30       	cpi	r24, 0x02	; 2
    54d6:	31 f4       	brne	.+12     	; 0x54e4 <_ZN9red_beryl9historicoEv+0x346>
						{   //se tiverem extamente duas leituras validas.
							l=2;    //seleciona a segunda linha para quando retornar ao menu anterior.
    54d8:	82 e0       	ldi	r24, 0x02	; 2
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    54e0:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
						}
					}
					recebeu=false;    //reseta RECEBEU para que o valor em leituraTemp e a tela sejam atualizados com a nova posição de i.
    54e4:	10 92 31 13 	sts	0x1331, r1	; 0x801331 <_ZZN9red_beryl9historicoEvE7recebeu>
					_up=false;   //reseta UP.
    54e8:	1e 86       	std	Y+14, r1	; 0x0e
				}
				if(_down)
    54ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    54ec:	88 23       	and	r24, r24
    54ee:	69 f1       	breq	.+90     	; 0x554a <_ZN9red_beryl9historicoEv+0x3ac>
				{   //se DOWN for true.
					if(i!=EEPROM.read(0)-1 && i!=limit)
    54f0:	80 e0       	ldi	r24, 0x00	; 0
    54f2:	90 e0       	ldi	r25, 0x00	; 0
    54f4:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    54f8:	20 91 33 13 	lds	r18, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    54fc:	30 91 34 13 	lds	r19, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5500:	48 2f       	mov	r20, r24
    5502:	50 e0       	ldi	r21, 0x00	; 0
    5504:	41 50       	subi	r20, 0x01	; 1
    5506:	51 09       	sbc	r21, r1
    5508:	42 17       	cp	r20, r18
    550a:	53 07       	cpc	r21, r19
    550c:	09 f4       	brne	.+2      	; 0x5510 <_ZN9red_beryl9historicoEv+0x372>
    550e:	f9 c2       	rjmp	.+1522   	; 0x5b02 <_ZN9red_beryl9historicoEv+0x964>
    5510:	40 91 35 13 	lds	r20, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    5514:	50 91 36 13 	lds	r21, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    5518:	24 17       	cp	r18, r20
    551a:	35 07       	cpc	r19, r21
    551c:	09 f4       	brne	.+2      	; 0x5520 <_ZN9red_beryl9historicoEv+0x382>
    551e:	f1 c2       	rjmp	.+1506   	; 0x5b02 <_ZN9red_beryl9historicoEv+0x964>
					{    //se i não estiver na ultima posição valida a partir da EEPROM.
						i++;    //i+1
    5520:	2f 5f       	subi	r18, 0xFF	; 255
    5522:	3f 4f       	sbci	r19, 0xFF	; 255
    5524:	30 93 34 13 	sts	0x1334, r19	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5528:	20 93 33 13 	sts	0x1333, r18	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
						if(l!=3)
    552c:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5530:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5534:	83 30       	cpi	r24, 0x03	; 3
    5536:	91 05       	cpc	r25, r1
    5538:	29 f0       	breq	.+10     	; 0x5544 <_ZN9red_beryl9historicoEv+0x3a6>
						{   //se não for a terceira linha
							l++;
    553a:	01 96       	adiw	r24, 0x01	; 1
						}
					}
					else if(EEPROM.read(0)>1)
					{    //se i estiver na ultima posição valida e não for a unica leitura valida
						i=0;    //i recebe o valor 0 e volta a primeira posição.
						l=1;    //seleciona a primeira linha quando voltar ao menu de historicos.
    553c:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5540:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
					}
					recebeu=false;    //reseta RECEBEU para que o valor em leituraTemp e a tela sejam atualizados com a nova posição de i.
    5544:	10 92 31 13 	sts	0x1331, r1	; 0x801331 <_ZZN9red_beryl9historicoEvE7recebeu>
					_down=false;   //reseta DOWN.
    5548:	1f 86       	std	Y+15, r1	; 0x0f
				}
				if(_no)
    554a:	89 89       	ldd	r24, Y+17	; 0x11
    554c:	88 23       	and	r24, r24
    554e:	29 f0       	breq	.+10     	; 0x555a <_ZN9red_beryl9historicoEv+0x3bc>
				{
					recebeu=false;    //reseta RECEBEU
    5550:	10 92 31 13 	sts	0x1331, r1	; 0x801331 <_ZZN9red_beryl9historicoEvE7recebeu>
					detalhar=false;   //reseta DETALHAR
    5554:	10 92 32 13 	sts	0x1332, r1	; 0x801332 <_ZZN9red_beryl9historicoEvE8detalhar>
					_no=false;   //reseta NO
    5558:	19 8a       	std	Y+17, r1	; 0x11
				//choice=12;   //retorna ao menu anterior.
				_no=false;   //reseta NO.
				return true;
			}
		}
	return false;
    555a:	10 e0       	ldi	r17, 0x00	; 0
    555c:	81 c3       	rjmp	.+1794   	; 0x5c60 <_ZN9red_beryl9historicoEv+0xac2>
			}
			else 
			{
				static leitura L1,L2,L3;
				static bool ler = false;
				if(l==1)
    555e:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5562:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5566:	01 97       	sbiw	r24, 0x01	; 1
    5568:	09 f0       	breq	.+2      	; 0x556c <_ZN9red_beryl9historicoEv+0x3ce>
    556a:	b1 c0       	rjmp	.+354    	; 0x56ce <_ZN9red_beryl9historicoEv+0x530>
				{   //se estiver na primeira linha.
					if(!ler)
    556c:	80 91 c1 12 	lds	r24, 0x12C1	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
    5570:	81 11       	cpse	r24, r1
    5572:	34 c0       	rjmp	.+104    	; 0x55dc <_ZN9red_beryl9historicoEv+0x43e>
					{   //se a variavel ler for false: ou seja, se os valores de leitura não tiverem sido recebidos ainda.
						EEPROM.get(((i*sizeof(leitura))+1), L1);   //L1 recebe o valor salvo no historico referente a posição i;
    5574:	00 91 33 13 	lds	r16, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5578:	10 91 34 13 	lds	r17, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    557c:	8e e6       	ldi	r24, 0x6E	; 110
    557e:	80 9f       	mul	r24, r16
    5580:	60 01       	movw	r12, r0
    5582:	81 9f       	mul	r24, r17
    5584:	d0 0c       	add	r13, r0
    5586:	11 24       	eor	r1, r1
    5588:	63 e5       	ldi	r22, 0x53	; 83
    558a:	72 e1       	ldi	r23, 0x12	; 18
    558c:	c6 01       	movw	r24, r12
    558e:	01 96       	adiw	r24, 0x01	; 1
    5590:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
						if((i+1)<EEPROM.read(0) && (i+1)<=limit)
    5594:	58 01       	movw	r10, r16
    5596:	8f ef       	ldi	r24, 0xFF	; 255
    5598:	a8 1a       	sub	r10, r24
    559a:	b8 0a       	sbc	r11, r24
    559c:	80 e0       	ldi	r24, 0x00	; 0
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    55a4:	90 e0       	ldi	r25, 0x00	; 0
    55a6:	a8 16       	cp	r10, r24
    55a8:	b9 06       	cpc	r11, r25
    55aa:	ac f4       	brge	.+42     	; 0x55d6 <_ZN9red_beryl9historicoEv+0x438>
    55ac:	0e 15       	cp	r16, r14
    55ae:	1f 05       	cpc	r17, r15
    55b0:	94 f4       	brge	.+36     	; 0x55d6 <_ZN9red_beryl9historicoEv+0x438>
						{    //se o proximo valor ainda estiver dentro do limite de leituras validas.
							EEPROM.get((((i+1)*sizeof(leitura))+1), L2);   //L2 recebe o valor salvo no historico referente a posição i+1.
    55b2:	65 ee       	ldi	r22, 0xE5	; 229
    55b4:	71 e1       	ldi	r23, 0x11	; 17
    55b6:	c6 01       	movw	r24, r12
    55b8:	81 59       	subi	r24, 0x91	; 145
    55ba:	9f 4f       	sbci	r25, 0xFF	; 255
    55bc:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
							if((i+2)<EEPROM.read(0) && (i+2)<=limit)
    55c0:	80 e0       	ldi	r24, 0x00	; 0
    55c2:	90 e0       	ldi	r25, 0x00	; 0
    55c4:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    55c8:	0e 5f       	subi	r16, 0xFE	; 254
    55ca:	1f 4f       	sbci	r17, 0xFF	; 255
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	08 17       	cp	r16, r24
    55d0:	19 07       	cpc	r17, r25
    55d2:	0c f4       	brge	.+2      	; 0x55d6 <_ZN9red_beryl9historicoEv+0x438>
    55d4:	a0 c2       	rjmp	.+1344   	; 0x5b16 <_ZN9red_beryl9historicoEv+0x978>
							{    //se o proximo valor ainda estiver dentro do limite de leituras validas.
								EEPROM.get((((i+2)*sizeof(leitura))+1), L3);   //L3 recebe o valor salvo no historico referente a posição i+2.
							}
						}
						ler=true;   //ler recebe true.
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	80 93 c1 12 	sts	0x12C1, r24	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
					}
					imprimeEscolha( i+1, l, L1, true);
    55dc:	60 91 33 13 	lds	r22, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    55e0:	70 91 34 13 	lds	r23, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    55e4:	6f 5f       	subi	r22, 0xFF	; 255
    55e6:	7f 4f       	sbci	r23, 0xFF	; 255
    55e8:	81 e0       	ldi	r24, 0x01	; 1
    55ea:	8f 93       	push	r24
    55ec:	8d b7       	in	r24, 0x3d	; 61
    55ee:	9e b7       	in	r25, 0x3e	; 62
    55f0:	8e 56       	subi	r24, 0x6E	; 110
    55f2:	91 09       	sbc	r25, r1
    55f4:	0f b6       	in	r0, 0x3f	; 63
    55f6:	f8 94       	cli
    55f8:	9e bf       	out	0x3e, r25	; 62
    55fa:	0f be       	out	0x3f, r0	; 63
    55fc:	8d bf       	out	0x3d, r24	; 61
    55fe:	ad b7       	in	r26, 0x3d	; 61
    5600:	be b7       	in	r27, 0x3e	; 62
    5602:	11 96       	adiw	r26, 0x01	; 1
    5604:	8e e6       	ldi	r24, 0x6E	; 110
    5606:	e3 e5       	ldi	r30, 0x53	; 83
    5608:	f2 e1       	ldi	r31, 0x12	; 18
    560a:	01 90       	ld	r0, Z+
    560c:	0d 92       	st	X+, r0
    560e:	8a 95       	dec	r24
    5610:	e1 f7       	brne	.-8      	; 0x560a <_ZN9red_beryl9historicoEv+0x46c>
    5612:	41 e0       	ldi	r20, 0x01	; 1
    5614:	50 e0       	ldi	r21, 0x00	; 0
    5616:	ce 01       	movw	r24, r28
    5618:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
					if((i+1)<EEPROM.read(0) && (i+1)<=limit)
    561c:	00 91 33 13 	lds	r16, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5620:	10 91 34 13 	lds	r17, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5624:	8d b7       	in	r24, 0x3d	; 61
    5626:	9e b7       	in	r25, 0x3e	; 62
    5628:	81 59       	subi	r24, 0x91	; 145
    562a:	9f 4f       	sbci	r25, 0xFF	; 255
    562c:	0f b6       	in	r0, 0x3f	; 63
    562e:	f8 94       	cli
    5630:	9e bf       	out	0x3e, r25	; 62
    5632:	0f be       	out	0x3f, r0	; 63
    5634:	8d bf       	out	0x3d, r24	; 61
    5636:	80 e0       	ldi	r24, 0x00	; 0
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    563e:	98 01       	movw	r18, r16
    5640:	2f 5f       	subi	r18, 0xFF	; 255
    5642:	3f 4f       	sbci	r19, 0xFF	; 255
    5644:	90 e0       	ldi	r25, 0x00	; 0
    5646:	28 17       	cp	r18, r24
    5648:	39 07       	cpc	r19, r25
    564a:	0c f0       	brlt	.+2      	; 0x564e <_ZN9red_beryl9historicoEv+0x4b0>
    564c:	40 c0       	rjmp	.+128    	; 0x56ce <_ZN9red_beryl9historicoEv+0x530>
    564e:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    5652:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    5656:	08 17       	cp	r16, r24
    5658:	19 07       	cpc	r17, r25
    565a:	cc f5       	brge	.+114    	; 0x56ce <_ZN9red_beryl9historicoEv+0x530>
					{   //se o proximo valor ainda estiver dentro do limite de leituras validas.
						imprimeEscolha( i+2, l+1, L2, false);
    565c:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5660:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5664:	4f 5f       	subi	r20, 0xFF	; 255
    5666:	5f 4f       	sbci	r21, 0xFF	; 255
    5668:	b8 01       	movw	r22, r16
    566a:	6e 5f       	subi	r22, 0xFE	; 254
    566c:	7f 4f       	sbci	r23, 0xFF	; 255
    566e:	1f 92       	push	r1
    5670:	8d b7       	in	r24, 0x3d	; 61
    5672:	9e b7       	in	r25, 0x3e	; 62
    5674:	8e 56       	subi	r24, 0x6E	; 110
    5676:	91 09       	sbc	r25, r1
    5678:	0f b6       	in	r0, 0x3f	; 63
    567a:	f8 94       	cli
    567c:	9e bf       	out	0x3e, r25	; 62
    567e:	0f be       	out	0x3f, r0	; 63
    5680:	8d bf       	out	0x3d, r24	; 61
    5682:	ad b7       	in	r26, 0x3d	; 61
    5684:	be b7       	in	r27, 0x3e	; 62
    5686:	11 96       	adiw	r26, 0x01	; 1
    5688:	8e e6       	ldi	r24, 0x6E	; 110
    568a:	e5 ee       	ldi	r30, 0xE5	; 229
    568c:	f1 e1       	ldi	r31, 0x11	; 17
    568e:	01 90       	ld	r0, Z+
    5690:	0d 92       	st	X+, r0
    5692:	8a 95       	dec	r24
    5694:	e1 f7       	brne	.-8      	; 0x568e <_ZN9red_beryl9historicoEv+0x4f0>
    5696:	ce 01       	movw	r24, r28
    5698:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
						if((i+2)<EEPROM.read(0) && (i+2)<=limit)
    569c:	00 91 33 13 	lds	r16, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    56a0:	10 91 34 13 	lds	r17, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    56a4:	8d b7       	in	r24, 0x3d	; 61
    56a6:	9e b7       	in	r25, 0x3e	; 62
    56a8:	81 59       	subi	r24, 0x91	; 145
    56aa:	9f 4f       	sbci	r25, 0xFF	; 255
    56ac:	0f b6       	in	r0, 0x3f	; 63
    56ae:	f8 94       	cli
    56b0:	9e bf       	out	0x3e, r25	; 62
    56b2:	0f be       	out	0x3f, r0	; 63
    56b4:	8d bf       	out	0x3d, r24	; 61
    56b6:	80 e0       	ldi	r24, 0x00	; 0
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    56be:	98 01       	movw	r18, r16
    56c0:	2e 5f       	subi	r18, 0xFE	; 254
    56c2:	3f 4f       	sbci	r19, 0xFF	; 255
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	28 17       	cp	r18, r24
    56c8:	39 07       	cpc	r19, r25
    56ca:	0c f4       	brge	.+2      	; 0x56ce <_ZN9red_beryl9historicoEv+0x530>
    56cc:	30 c2       	rjmp	.+1120   	; 0x5b2e <_ZN9red_beryl9historicoEv+0x990>
						{   //se o proximo valor ainda estiver dentro do limite de leituras validas.
							imprimeEscolha( i+3, l+2, L3, false);
						}
					}
				}
				if(l==2)
    56ce:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    56d2:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    56d6:	02 97       	sbiw	r24, 0x02	; 2
    56d8:	09 f0       	breq	.+2      	; 0x56dc <_ZN9red_beryl9historicoEv+0x53e>
    56da:	95 c0       	rjmp	.+298    	; 0x5806 <_ZN9red_beryl9historicoEv+0x668>
				{   //se estiver na segunda linha.
					if(EEPROM.read(0)<2 || i==0)
    56dc:	80 e0       	ldi	r24, 0x00	; 0
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    56e4:	82 30       	cpi	r24, 0x02	; 2
    56e6:	08 f4       	brcc	.+2      	; 0x56ea <_ZN9red_beryl9historicoEv+0x54c>
    56e8:	56 c2       	rjmp	.+1196   	; 0x5b96 <_ZN9red_beryl9historicoEv+0x9f8>
    56ea:	00 91 33 13 	lds	r16, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    56ee:	10 91 34 13 	lds	r17, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    56f2:	01 15       	cp	r16, r1
    56f4:	11 05       	cpc	r17, r1
    56f6:	09 f4       	brne	.+2      	; 0x56fa <_ZN9red_beryl9historicoEv+0x55c>
    56f8:	4e c2       	rjmp	.+1180   	; 0x5b96 <_ZN9red_beryl9historicoEv+0x9f8>
					{   //se tiver menos de dois endereços no historico ou se o i for 0, imediatamente retorna a primeira linha.
						l=1;
					}
					else 
					{    //se tiver pelo menos dois endereços e i for diferente de 0;
						if(!ler)
    56fa:	80 91 c1 12 	lds	r24, 0x12C1	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
    56fe:	81 11       	cpse	r24, r1
    5700:	24 c0       	rjmp	.+72     	; 0x574a <_ZN9red_beryl9historicoEv+0x5ac>
						{   //se a variavel ler for false: ou seja, se os valores de leitura não tiverem sido recebidos ainda.
							EEPROM.get((((i-1)*sizeof(leitura))+1), L1);   //L1 recebe o valor salvo no historico referente a posição i-1;
    5702:	c8 01       	movw	r24, r16
    5704:	01 97       	sbiw	r24, 0x01	; 1
    5706:	2e e6       	ldi	r18, 0x6E	; 110
    5708:	28 9f       	mul	r18, r24
    570a:	70 01       	movw	r14, r0
    570c:	29 9f       	mul	r18, r25
    570e:	f0 0c       	add	r15, r0
    5710:	11 24       	eor	r1, r1
    5712:	63 e5       	ldi	r22, 0x53	; 83
    5714:	72 e1       	ldi	r23, 0x12	; 18
    5716:	c7 01       	movw	r24, r14
    5718:	01 96       	adiw	r24, 0x01	; 1
    571a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
							EEPROM.get((((i)*sizeof(leitura))+1), L2);   //L2 recebe o valor salvo no historico referente a posição i.
    571e:	65 ee       	ldi	r22, 0xE5	; 229
    5720:	71 e1       	ldi	r23, 0x11	; 17
    5722:	c7 01       	movw	r24, r14
    5724:	81 59       	subi	r24, 0x91	; 145
    5726:	9f 4f       	sbci	r25, 0xFF	; 255
    5728:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
							if((i+1)<EEPROM.read(0) && (i+1)<=limit)
    572c:	80 e0       	ldi	r24, 0x00	; 0
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    5734:	90 e0       	ldi	r25, 0x00	; 0
    5736:	98 01       	movw	r18, r16
    5738:	2f 5f       	subi	r18, 0xFF	; 255
    573a:	3f 4f       	sbci	r19, 0xFF	; 255
    573c:	28 17       	cp	r18, r24
    573e:	39 07       	cpc	r19, r25
    5740:	0c f4       	brge	.+2      	; 0x5744 <_ZN9red_beryl9historicoEv+0x5a6>
    5742:	30 c2       	rjmp	.+1120   	; 0x5ba4 <_ZN9red_beryl9historicoEv+0xa06>
							{    //se o proximo valor ainda estiver dentro do limite de leituras validas.
								EEPROM.get((((i+1)*sizeof(leitura))+1), L3);   //L3 recebe o valor salvo no historico referente a posição i+1.
							}
							ler=true;   //ler recebe true.
    5744:	81 e0       	ldi	r24, 0x01	; 1
    5746:	80 93 c1 12 	sts	0x12C1, r24	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
						}
						imprimeEscolha( i, l-1, L1, false);           
    574a:	1f 92       	push	r1
    574c:	8d b7       	in	r24, 0x3d	; 61
    574e:	9e b7       	in	r25, 0x3e	; 62
    5750:	8e 56       	subi	r24, 0x6E	; 110
    5752:	91 09       	sbc	r25, r1
    5754:	0f b6       	in	r0, 0x3f	; 63
    5756:	f8 94       	cli
    5758:	9e bf       	out	0x3e, r25	; 62
    575a:	0f be       	out	0x3f, r0	; 63
    575c:	8d bf       	out	0x3d, r24	; 61
    575e:	ad b7       	in	r26, 0x3d	; 61
    5760:	be b7       	in	r27, 0x3e	; 62
    5762:	11 96       	adiw	r26, 0x01	; 1
    5764:	8e e6       	ldi	r24, 0x6E	; 110
    5766:	e3 e5       	ldi	r30, 0x53	; 83
    5768:	f2 e1       	ldi	r31, 0x12	; 18
    576a:	01 90       	ld	r0, Z+
    576c:	0d 92       	st	X+, r0
    576e:	8a 95       	dec	r24
    5770:	e1 f7       	brne	.-8      	; 0x576a <_ZN9red_beryl9historicoEv+0x5cc>
    5772:	41 e0       	ldi	r20, 0x01	; 1
    5774:	50 e0       	ldi	r21, 0x00	; 0
    5776:	b8 01       	movw	r22, r16
    5778:	ce 01       	movw	r24, r28
    577a:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
						//final da logica das opções na linha 1 para quando a linha 2 estiver selecionada, a proxima parte conta com a linha 2.
						imprimeEscolha( i+1, l, L2, true);          
    577e:	8d b7       	in	r24, 0x3d	; 61
    5780:	9e b7       	in	r25, 0x3e	; 62
    5782:	81 59       	subi	r24, 0x91	; 145
    5784:	9f 4f       	sbci	r25, 0xFF	; 255
    5786:	0f b6       	in	r0, 0x3f	; 63
    5788:	f8 94       	cli
    578a:	9e bf       	out	0x3e, r25	; 62
    578c:	0f be       	out	0x3f, r0	; 63
    578e:	8d bf       	out	0x3d, r24	; 61
    5790:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5794:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5798:	60 91 33 13 	lds	r22, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    579c:	70 91 34 13 	lds	r23, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    57a0:	6f 5f       	subi	r22, 0xFF	; 255
    57a2:	7f 4f       	sbci	r23, 0xFF	; 255
    57a4:	81 e0       	ldi	r24, 0x01	; 1
    57a6:	8f 93       	push	r24
    57a8:	8d b7       	in	r24, 0x3d	; 61
    57aa:	9e b7       	in	r25, 0x3e	; 62
    57ac:	8e 56       	subi	r24, 0x6E	; 110
    57ae:	91 09       	sbc	r25, r1
    57b0:	0f b6       	in	r0, 0x3f	; 63
    57b2:	f8 94       	cli
    57b4:	9e bf       	out	0x3e, r25	; 62
    57b6:	0f be       	out	0x3f, r0	; 63
    57b8:	8d bf       	out	0x3d, r24	; 61
    57ba:	ad b7       	in	r26, 0x3d	; 61
    57bc:	be b7       	in	r27, 0x3e	; 62
    57be:	11 96       	adiw	r26, 0x01	; 1
    57c0:	8e e6       	ldi	r24, 0x6E	; 110
    57c2:	e5 ee       	ldi	r30, 0xE5	; 229
    57c4:	f1 e1       	ldi	r31, 0x11	; 17
    57c6:	01 90       	ld	r0, Z+
    57c8:	0d 92       	st	X+, r0
    57ca:	8a 95       	dec	r24
    57cc:	e1 f7       	brne	.-8      	; 0x57c6 <_ZN9red_beryl9historicoEv+0x628>
    57ce:	ce 01       	movw	r24, r28
    57d0:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
						//final da logica das opções na linha 2 quando selecionada, a proxima parte conta com a linha 3, usando 'if' para verificar se ela deve existir.
						if((i+1)<EEPROM.read(0) && (i+1)<=limit)
    57d4:	00 91 33 13 	lds	r16, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    57d8:	10 91 34 13 	lds	r17, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    57dc:	8d b7       	in	r24, 0x3d	; 61
    57de:	9e b7       	in	r25, 0x3e	; 62
    57e0:	81 59       	subi	r24, 0x91	; 145
    57e2:	9f 4f       	sbci	r25, 0xFF	; 255
    57e4:	0f b6       	in	r0, 0x3f	; 63
    57e6:	f8 94       	cli
    57e8:	9e bf       	out	0x3e, r25	; 62
    57ea:	0f be       	out	0x3f, r0	; 63
    57ec:	8d bf       	out	0x3d, r24	; 61
    57ee:	80 e0       	ldi	r24, 0x00	; 0
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    57f6:	98 01       	movw	r18, r16
    57f8:	2f 5f       	subi	r18, 0xFF	; 255
    57fa:	3f 4f       	sbci	r19, 0xFF	; 255
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	28 17       	cp	r18, r24
    5800:	39 07       	cpc	r19, r25
    5802:	0c f4       	brge	.+2      	; 0x5806 <_ZN9red_beryl9historicoEv+0x668>
    5804:	d7 c1       	rjmp	.+942    	; 0x5bb4 <_ZN9red_beryl9historicoEv+0xa16>
							//portanto, nesse caso a terceira linha existe.
							imprimeEscolha( i+2, l+1, L3, false);
						}
					}
				}
				if(l==3)
    5806:	80 91 17 04 	lds	r24, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    580a:	90 91 18 04 	lds	r25, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    580e:	03 97       	sbiw	r24, 0x03	; 3
    5810:	09 f0       	breq	.+2      	; 0x5814 <_ZN9red_beryl9historicoEv+0x676>
    5812:	ac c0       	rjmp	.+344    	; 0x596c <_ZN9red_beryl9historicoEv+0x7ce>
				{   //se estiver na terceira(e ultima) linha.
					if(EEPROM.read(0)<3 || i==0 || i==1)
    5814:	80 e0       	ldi	r24, 0x00	; 0
    5816:	90 e0       	ldi	r25, 0x00	; 0
    5818:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    581c:	83 30       	cpi	r24, 0x03	; 3
    581e:	08 f4       	brcc	.+2      	; 0x5822 <_ZN9red_beryl9historicoEv+0x684>
    5820:	03 c2       	rjmp	.+1030   	; 0x5c28 <_ZN9red_beryl9historicoEv+0xa8a>
    5822:	00 91 33 13 	lds	r16, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5826:	10 91 34 13 	lds	r17, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    582a:	02 30       	cpi	r16, 0x02	; 2
    582c:	11 05       	cpc	r17, r1
    582e:	08 f4       	brcc	.+2      	; 0x5832 <_ZN9red_beryl9historicoEv+0x694>
    5830:	fb c1       	rjmp	.+1014   	; 0x5c28 <_ZN9red_beryl9historicoEv+0xa8a>
					{   //se tiver menos de tres endereços no historico ou se o i for 0 ou 1, imediatamente retorna a primeira linha.
						l=1;
					}
					else 
					{    //se tiver pelo menos tres endereços e i for diferente de 0 e 1;
						if(!ler)
    5832:	80 91 c1 12 	lds	r24, 0x12C1	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
    5836:	81 11       	cpse	r24, r1
    5838:	1f c0       	rjmp	.+62     	; 0x5878 <_ZN9red_beryl9historicoEv+0x6da>
						{   //se a variavel ler for false: ou seja, se os valores de leitura não tiverem sido recebidos ainda.
							EEPROM.get((((i-2)*sizeof(leitura))+1), L1);   //L1 recebe o valor salvo no historico referente a posição i-2;
    583a:	c8 01       	movw	r24, r16
    583c:	02 97       	sbiw	r24, 0x02	; 2
    583e:	2e e6       	ldi	r18, 0x6E	; 110
    5840:	28 9f       	mul	r18, r24
    5842:	70 01       	movw	r14, r0
    5844:	29 9f       	mul	r18, r25
    5846:	f0 0c       	add	r15, r0
    5848:	11 24       	eor	r1, r1
    584a:	63 e5       	ldi	r22, 0x53	; 83
    584c:	72 e1       	ldi	r23, 0x12	; 18
    584e:	c7 01       	movw	r24, r14
    5850:	01 96       	adiw	r24, 0x01	; 1
    5852:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
							EEPROM.get((((i-1)*sizeof(leitura))+1), L2);   //L2 recebe o valor salvo no historico referente a posição i-1.
    5856:	65 ee       	ldi	r22, 0xE5	; 229
    5858:	71 e1       	ldi	r23, 0x11	; 17
    585a:	c7 01       	movw	r24, r14
    585c:	81 59       	subi	r24, 0x91	; 145
    585e:	9f 4f       	sbci	r25, 0xFF	; 255
    5860:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
							EEPROM.get(((i*sizeof(leitura))+1), L3);   //L3 recebe o valor salvo no historico referente a posição i.
    5864:	67 e7       	ldi	r22, 0x77	; 119
    5866:	71 e1       	ldi	r23, 0x11	; 17
    5868:	c7 01       	movw	r24, r14
    586a:	83 52       	subi	r24, 0x23	; 35
    586c:	9f 4f       	sbci	r25, 0xFF	; 255
    586e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
							ler=true;   //ler recebe true.
    5872:	81 e0       	ldi	r24, 0x01	; 1
    5874:	80 93 c1 12 	sts	0x12C1, r24	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
						}
						imprimeEscolha( i-1, l-2, L1, false);
    5878:	b8 01       	movw	r22, r16
    587a:	61 50       	subi	r22, 0x01	; 1
    587c:	71 09       	sbc	r23, r1
    587e:	1f 92       	push	r1
    5880:	8d b7       	in	r24, 0x3d	; 61
    5882:	9e b7       	in	r25, 0x3e	; 62
    5884:	8e 56       	subi	r24, 0x6E	; 110
    5886:	91 09       	sbc	r25, r1
    5888:	0f b6       	in	r0, 0x3f	; 63
    588a:	f8 94       	cli
    588c:	9e bf       	out	0x3e, r25	; 62
    588e:	0f be       	out	0x3f, r0	; 63
    5890:	8d bf       	out	0x3d, r24	; 61
    5892:	ad b7       	in	r26, 0x3d	; 61
    5894:	be b7       	in	r27, 0x3e	; 62
    5896:	11 96       	adiw	r26, 0x01	; 1
    5898:	8e e6       	ldi	r24, 0x6E	; 110
    589a:	e3 e5       	ldi	r30, 0x53	; 83
    589c:	f2 e1       	ldi	r31, 0x12	; 18
    589e:	01 90       	ld	r0, Z+
    58a0:	0d 92       	st	X+, r0
    58a2:	8a 95       	dec	r24
    58a4:	e1 f7       	brne	.-8      	; 0x589e <_ZN9red_beryl9historicoEv+0x700>
    58a6:	41 e0       	ldi	r20, 0x01	; 1
    58a8:	50 e0       	ldi	r21, 0x00	; 0
    58aa:	ce 01       	movw	r24, r28
    58ac:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
						//Final da logica da linha 1.
						imprimeEscolha( i, l-1, L2, false);
    58b0:	8d b7       	in	r24, 0x3d	; 61
    58b2:	9e b7       	in	r25, 0x3e	; 62
    58b4:	81 59       	subi	r24, 0x91	; 145
    58b6:	9f 4f       	sbci	r25, 0xFF	; 255
    58b8:	0f b6       	in	r0, 0x3f	; 63
    58ba:	f8 94       	cli
    58bc:	9e bf       	out	0x3e, r25	; 62
    58be:	0f be       	out	0x3f, r0	; 63
    58c0:	8d bf       	out	0x3d, r24	; 61
    58c2:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    58c6:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    58ca:	41 50       	subi	r20, 0x01	; 1
    58cc:	51 09       	sbc	r21, r1
    58ce:	60 91 33 13 	lds	r22, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    58d2:	70 91 34 13 	lds	r23, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    58d6:	1f 92       	push	r1
    58d8:	8d b7       	in	r24, 0x3d	; 61
    58da:	9e b7       	in	r25, 0x3e	; 62
    58dc:	8e 56       	subi	r24, 0x6E	; 110
    58de:	91 09       	sbc	r25, r1
    58e0:	0f b6       	in	r0, 0x3f	; 63
    58e2:	f8 94       	cli
    58e4:	9e bf       	out	0x3e, r25	; 62
    58e6:	0f be       	out	0x3f, r0	; 63
    58e8:	8d bf       	out	0x3d, r24	; 61
    58ea:	ad b7       	in	r26, 0x3d	; 61
    58ec:	be b7       	in	r27, 0x3e	; 62
    58ee:	11 96       	adiw	r26, 0x01	; 1
    58f0:	8e e6       	ldi	r24, 0x6E	; 110
    58f2:	e5 ee       	ldi	r30, 0xE5	; 229
    58f4:	f1 e1       	ldi	r31, 0x11	; 17
    58f6:	01 90       	ld	r0, Z+
    58f8:	0d 92       	st	X+, r0
    58fa:	8a 95       	dec	r24
    58fc:	e1 f7       	brne	.-8      	; 0x58f6 <_ZN9red_beryl9historicoEv+0x758>
    58fe:	ce 01       	movw	r24, r28
    5900:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
						//Final da logica da linha 2.
						imprimeEscolha( i+1, l, L3, true);
    5904:	8d b7       	in	r24, 0x3d	; 61
    5906:	9e b7       	in	r25, 0x3e	; 62
    5908:	81 59       	subi	r24, 0x91	; 145
    590a:	9f 4f       	sbci	r25, 0xFF	; 255
    590c:	0f b6       	in	r0, 0x3f	; 63
    590e:	f8 94       	cli
    5910:	9e bf       	out	0x3e, r25	; 62
    5912:	0f be       	out	0x3f, r0	; 63
    5914:	8d bf       	out	0x3d, r24	; 61
    5916:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    591a:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    591e:	60 91 33 13 	lds	r22, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5922:	70 91 34 13 	lds	r23, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5926:	6f 5f       	subi	r22, 0xFF	; 255
    5928:	7f 4f       	sbci	r23, 0xFF	; 255
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	8f 93       	push	r24
    592e:	8d b7       	in	r24, 0x3d	; 61
    5930:	9e b7       	in	r25, 0x3e	; 62
    5932:	8e 56       	subi	r24, 0x6E	; 110
    5934:	91 09       	sbc	r25, r1
    5936:	0f b6       	in	r0, 0x3f	; 63
    5938:	f8 94       	cli
    593a:	9e bf       	out	0x3e, r25	; 62
    593c:	0f be       	out	0x3f, r0	; 63
    593e:	8d bf       	out	0x3d, r24	; 61
    5940:	ad b7       	in	r26, 0x3d	; 61
    5942:	be b7       	in	r27, 0x3e	; 62
    5944:	11 96       	adiw	r26, 0x01	; 1
    5946:	8e e6       	ldi	r24, 0x6E	; 110
    5948:	e7 e7       	ldi	r30, 0x77	; 119
    594a:	f1 e1       	ldi	r31, 0x11	; 17
    594c:	01 90       	ld	r0, Z+
    594e:	0d 92       	st	X+, r0
    5950:	8a 95       	dec	r24
    5952:	e1 f7       	brne	.-8      	; 0x594c <_ZN9red_beryl9historicoEv+0x7ae>
    5954:	ce 01       	movw	r24, r28
    5956:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
    595a:	8d b7       	in	r24, 0x3d	; 61
    595c:	9e b7       	in	r25, 0x3e	; 62
    595e:	81 59       	subi	r24, 0x91	; 145
    5960:	9f 4f       	sbci	r25, 0xFF	; 255
    5962:	0f b6       	in	r0, 0x3f	; 63
    5964:	f8 94       	cli
    5966:	9e bf       	out	0x3e, r25	; 62
    5968:	0f be       	out	0x3f, r0	; 63
    596a:	8d bf       	out	0x3d, r24	; 61
					}
				}
				if(_up)
    596c:	8e 85       	ldd	r24, Y+14	; 0x0e
    596e:	88 23       	and	r24, r24
    5970:	09 f4       	brne	.+2      	; 0x5974 <_ZN9red_beryl9historicoEv+0x7d6>
    5972:	46 c0       	rjmp	.+140    	; 0x5a00 <_ZN9red_beryl9historicoEv+0x862>
				{   //se UP for true
					if(l==1)
    5974:	20 91 17 04 	lds	r18, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5978:	30 91 18 04 	lds	r19, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    597c:	80 91 33 13 	lds	r24, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5980:	90 91 34 13 	lds	r25, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5984:	21 30       	cpi	r18, 0x01	; 1
    5986:	31 05       	cpc	r19, r1
    5988:	69 f5       	brne	.+90     	; 0x59e4 <_ZN9red_beryl9historicoEv+0x846>
					{   //se a linha 1 estiver selecionada.
						if(i!=0)
    598a:	00 97       	sbiw	r24, 0x00	; 0
    598c:	31 f0       	breq	.+12     	; 0x599a <_ZN9red_beryl9historicoEv+0x7fc>
						{   //se i não for 0.
							i--;    //i-1;    
    598e:	01 97       	sbiw	r24, 0x01	; 1
    5990:	90 93 34 13 	sts	0x1334, r25	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5994:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5998:	30 c0       	rjmp	.+96     	; 0x59fa <_ZN9red_beryl9historicoEv+0x85c>
						}
						else if(EEPROM.read(0)>1)
    599a:	80 e0       	ldi	r24, 0x00	; 0
    599c:	90 e0       	ldi	r25, 0x00	; 0
    599e:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    59a2:	82 30       	cpi	r24, 0x02	; 2
    59a4:	50 f1       	brcs	.+84     	; 0x59fa <_ZN9red_beryl9historicoEv+0x85c>
						{    //se i for 0 e houver mais de uma leitura salva no historico.
							if((EEPROM.read(0)-1)>limit)
    59a6:	90 e0       	ldi	r25, 0x00	; 0
    59a8:	01 97       	sbiw	r24, 0x01	; 1
    59aa:	20 91 35 13 	lds	r18, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    59ae:	30 91 36 13 	lds	r19, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    59b2:	28 17       	cp	r18, r24
    59b4:	39 07       	cpc	r19, r25
    59b6:	2c f4       	brge	.+10     	; 0x59c2 <_ZN9red_beryl9historicoEv+0x824>
							{
								i=limit;
    59b8:	30 93 34 13 	sts	0x1334, r19	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    59bc:	20 93 33 13 	sts	0x1333, r18	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    59c0:	04 c0       	rjmp	.+8      	; 0x59ca <_ZN9red_beryl9historicoEv+0x82c>
							}
							else
								i=EEPROM.read(0)-1;   //i recebe o valor da ultima posição valida do historico.
    59c2:	90 93 34 13 	sts	0x1334, r25	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    59c6:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
							if(i>1)
    59ca:	80 91 33 13 	lds	r24, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    59ce:	90 91 34 13 	lds	r25, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    59d2:	02 97       	sbiw	r24, 0x02	; 2
    59d4:	94 f0       	brlt	.+36     	; 0x59fa <_ZN9red_beryl9historicoEv+0x85c>
							{      //se i for maior que 1.
								l=3;    //seleciona a terceira linha.
    59d6:	83 e0       	ldi	r24, 0x03	; 3
    59d8:	90 e0       	ldi	r25, 0x00	; 0
    59da:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    59de:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    59e2:	0b c0       	rjmp	.+22     	; 0x59fa <_ZN9red_beryl9historicoEv+0x85c>
							}
						}
					}
					else 
					{    //para as linhas 2 e 3, sempre que UP for true, apenas decresce os valores de i e l.
						i--;
    59e4:	01 97       	sbiw	r24, 0x01	; 1
    59e6:	90 93 34 13 	sts	0x1334, r25	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    59ea:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
						l--;
    59ee:	21 50       	subi	r18, 0x01	; 1
    59f0:	31 09       	sbc	r19, r1
    59f2:	30 93 18 04 	sts	0x0418, r19	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    59f6:	20 93 17 04 	sts	0x0417, r18	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
					}
					ler=false;    //reseta LER
    59fa:	10 92 c1 12 	sts	0x12C1, r1	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
					_up=false;   //reseta UP.
    59fe:	1e 86       	std	Y+14, r1	; 0x0e
				}
				if(_down)
    5a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a02:	88 23       	and	r24, r24
    5a04:	d9 f1       	breq	.+118    	; 0x5a7c <_ZN9red_beryl9historicoEv+0x8de>
				{   //se DOWN for true.
					if(l==3)
    5a06:	e0 90 17 04 	lds	r14, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5a0a:	f0 90 18 04 	lds	r15, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5a0e:	00 91 33 13 	lds	r16, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5a12:	10 91 34 13 	lds	r17, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5a16:	93 e0       	ldi	r25, 0x03	; 3
    5a18:	e9 16       	cp	r14, r25
    5a1a:	f1 04       	cpc	r15, r1
    5a1c:	89 f4       	brne	.+34     	; 0x5a40 <_ZN9red_beryl9historicoEv+0x8a2>
					{   //se a linha 3 estiver selecionada.
						if(i==EEPROM.read(0)-1 || i>=limit)
    5a1e:	80 e0       	ldi	r24, 0x00	; 0
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    5a26:	90 e0       	ldi	r25, 0x00	; 0
    5a28:	01 97       	sbiw	r24, 0x01	; 1
    5a2a:	80 17       	cp	r24, r16
    5a2c:	91 07       	cpc	r25, r17
    5a2e:	c9 f0       	breq	.+50     	; 0x5a62 <_ZN9red_beryl9historicoEv+0x8c4>
    5a30:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    5a34:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    5a38:	08 17       	cp	r16, r24
    5a3a:	19 07       	cpc	r17, r25
    5a3c:	94 f4       	brge	.+36     	; 0x5a62 <_ZN9red_beryl9historicoEv+0x8c4>
    5a3e:	fb c0       	rjmp	.+502    	; 0x5c36 <_ZN9red_beryl9historicoEv+0xa98>
							i++;    //incrementa o valor de i.
						}
					}
					else 
					{    //se a linha 1 ou 2 estiver selecionada.
						if(!(i==EEPROM.read(0)-1 || i==limit))
    5a40:	80 e0       	ldi	r24, 0x00	; 0
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    5a48:	90 e0       	ldi	r25, 0x00	; 0
    5a4a:	01 97       	sbiw	r24, 0x01	; 1
    5a4c:	80 17       	cp	r24, r16
    5a4e:	91 07       	cpc	r25, r17
    5a50:	41 f0       	breq	.+16     	; 0x5a62 <_ZN9red_beryl9historicoEv+0x8c4>
    5a52:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    5a56:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    5a5a:	08 17       	cp	r16, r24
    5a5c:	19 07       	cpc	r17, r25
    5a5e:	09 f0       	breq	.+2      	; 0x5a62 <_ZN9red_beryl9historicoEv+0x8c4>
    5a60:	f1 c0       	rjmp	.+482    	; 0x5c44 <_ZN9red_beryl9historicoEv+0xaa6>
				{   //se DOWN for true.
					if(l==3)
					{   //se a linha 3 estiver selecionada.
						if(i==EEPROM.read(0)-1 || i>=limit)
						{    //se i for igual a ultima leitura possivel.
							i=0;    //volta a primeira leitura.
    5a62:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5a66:	10 92 33 13 	sts	0x1333, r1	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
							l=1;    //seleciona a primeira linha.
    5a6a:	81 e0       	ldi	r24, 0x01	; 1
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
    5a6e:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5a72:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
						{    //se i for igual a ultima leitura possivel.
							i=0;    //volta a primeira leitura.
							l=1;    //seleciona a primeira linha.
						}
					}
					ler=false;    //reseta LER
    5a76:	10 92 c1 12 	sts	0x12C1, r1	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
					_down=false;   //reset DOWN
    5a7a:	1f 86       	std	Y+15, r1	; 0x0f
				}
				if(_yes)
    5a7c:	88 89       	ldd	r24, Y+16	; 0x10
    5a7e:	88 23       	and	r24, r24
    5a80:	31 f0       	breq	.+12     	; 0x5a8e <_ZN9red_beryl9historicoEv+0x8f0>
				{
					detalhar=true;
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	80 93 32 13 	sts	0x1332, r24	; 0x801332 <_ZZN9red_beryl9historicoEvE8detalhar>
					ler=false;
    5a88:	10 92 c1 12 	sts	0x12C1, r1	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
					_yes=false;    //reseta YES
    5a8c:	18 8a       	std	Y+16, r1	; 0x10
				}
				if(_no)
    5a8e:	19 89       	ldd	r17, Y+17	; 0x11
    5a90:	11 23       	and	r17, r17
    5a92:	69 f0       	breq	.+26     	; 0x5aae <_ZN9red_beryl9historicoEv+0x910>
				{   //se NO for true.
					//choice=12;   //reseta choice.
					i=0;
    5a94:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5a98:	10 92 33 13 	sts	0x1333, r1	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
					l=1;
    5a9c:	81 e0       	ldi	r24, 0x01	; 1
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5aa4:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
					ler=false;
    5aa8:	10 92 c1 12 	sts	0x12C1, r1	; 0x8012c1 <_ZZN9red_beryl9historicoEvE3ler>
    5aac:	28 c0       	rjmp	.+80     	; 0x5afe <_ZN9red_beryl9historicoEv+0x960>
					_no=false;   //reseta NO.
					return true;
				}
				scrollBar(i);
    5aae:	60 91 33 13 	lds	r22, 0x1333	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5ab2:	70 91 34 13 	lds	r23, 0x1334	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5ab6:	ce 01       	movw	r24, r28
    5ab8:	da da       	rcall	.-2636   	; 0x506e <_ZN9red_beryl9scrollBarEi>
    5aba:	d2 c0       	rjmp	.+420    	; 0x5c60 <_ZN9red_beryl9historicoEv+0xac2>
			}
		}
		else
		{   //se o historico estiver vazio.
			display.setCursor(0, lineSize*2);    //define a posição do cursor
    5abc:	40 e1       	ldi	r20, 0x10	; 16
    5abe:	50 e0       	ldi	r21, 0x00	; 0
    5ac0:	60 e0       	ldi	r22, 0x00	; 0
    5ac2:	70 e0       	ldi	r23, 0x00	; 0
    5ac4:	8e 01       	movw	r16, r28
    5ac6:	0b 5e       	subi	r16, 0xEB	; 235
    5ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    5aca:	c8 01       	movw	r24, r16
    5acc:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
			display.setTextColor(WHITE);    //define a cor da fonte(branca);
    5ad0:	61 e0       	ldi	r22, 0x01	; 1
    5ad2:	70 e0       	ldi	r23, 0x00	; 0
    5ad4:	c8 01       	movw	r24, r16
    5ad6:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
			display.print(" Historico Vazio.");
    5ada:	68 e3       	ldi	r22, 0x38	; 56
    5adc:	78 e0       	ldi	r23, 0x08	; 8
    5ade:	c8 01       	movw	r24, r16
    5ae0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			if(_yes)
    5ae4:	88 89       	ldd	r24, Y+16	; 0x10
    5ae6:	81 11       	cpse	r24, r1
			{
				_yes=false;    //reseta YES
    5ae8:	18 8a       	std	Y+16, r1	; 0x10
			}
			if(_up)
    5aea:	8e 85       	ldd	r24, Y+14	; 0x0e
    5aec:	81 11       	cpse	r24, r1
			{
				_up=false;   //reseta UP.
    5aee:	1e 86       	std	Y+14, r1	; 0x0e
			}
			if(_down)
    5af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    5af2:	81 11       	cpse	r24, r1
			{
				_down=false;   //reseta DOWN.
    5af4:	1f 86       	std	Y+15, r1	; 0x0f
			}
			if(_no)
    5af6:	19 89       	ldd	r17, Y+17	; 0x11
    5af8:	11 23       	and	r17, r17
    5afa:	09 f4       	brne	.+2      	; 0x5afe <_ZN9red_beryl9historicoEv+0x960>
    5afc:	2e cd       	rjmp	.-1444   	; 0x555a <_ZN9red_beryl9historicoEv+0x3bc>
			{
				//choice=12;   //retorna ao menu anterior.
				_no=false;   //reseta NO.
    5afe:	19 8a       	std	Y+17, r1	; 0x11
				return true;
    5b00:	af c0       	rjmp	.+350    	; 0x5c60 <_ZN9red_beryl9historicoEv+0xac2>
						if(l!=3)
						{   //se não for a terceira linha
							l++;
						}
					}
					else if(EEPROM.read(0)>1)
    5b02:	82 30       	cpi	r24, 0x02	; 2
    5b04:	08 f4       	brcc	.+2      	; 0x5b08 <_ZN9red_beryl9historicoEv+0x96a>
    5b06:	1e cd       	rjmp	.-1476   	; 0x5544 <_ZN9red_beryl9historicoEv+0x3a6>
					{    //se i estiver na ultima posição valida e não for a unica leitura valida
						i=0;    //i recebe o valor 0 e volta a primeira posição.
    5b08:	10 92 34 13 	sts	0x1334, r1	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5b0c:	10 92 33 13 	sts	0x1333, r1	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
						l=1;    //seleciona a primeira linha quando voltar ao menu de historicos.
    5b10:	81 e0       	ldi	r24, 0x01	; 1
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    5b14:	13 cd       	rjmp	.-1498   	; 0x553c <_ZN9red_beryl9historicoEv+0x39e>
					{   //se a variavel ler for false: ou seja, se os valores de leitura não tiverem sido recebidos ainda.
						EEPROM.get(((i*sizeof(leitura))+1), L1);   //L1 recebe o valor salvo no historico referente a posição i;
						if((i+1)<EEPROM.read(0) && (i+1)<=limit)
						{    //se o proximo valor ainda estiver dentro do limite de leituras validas.
							EEPROM.get((((i+1)*sizeof(leitura))+1), L2);   //L2 recebe o valor salvo no historico referente a posição i+1.
							if((i+2)<EEPROM.read(0) && (i+2)<=limit)
    5b16:	ae 14       	cp	r10, r14
    5b18:	bf 04       	cpc	r11, r15
    5b1a:	0c f0       	brlt	.+2      	; 0x5b1e <_ZN9red_beryl9historicoEv+0x980>
    5b1c:	5c cd       	rjmp	.-1352   	; 0x55d6 <_ZN9red_beryl9historicoEv+0x438>
							{    //se o proximo valor ainda estiver dentro do limite de leituras validas.
								EEPROM.get((((i+2)*sizeof(leitura))+1), L3);   //L3 recebe o valor salvo no historico referente a posição i+2.
    5b1e:	67 e7       	ldi	r22, 0x77	; 119
    5b20:	71 e1       	ldi	r23, 0x11	; 17
    5b22:	c6 01       	movw	r24, r12
    5b24:	83 52       	subi	r24, 0x23	; 35
    5b26:	9f 4f       	sbci	r25, 0xFF	; 255
    5b28:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
    5b2c:	54 cd       	rjmp	.-1368   	; 0x55d6 <_ZN9red_beryl9historicoEv+0x438>
					}
					imprimeEscolha( i+1, l, L1, true);
					if((i+1)<EEPROM.read(0) && (i+1)<=limit)
					{   //se o proximo valor ainda estiver dentro do limite de leituras validas.
						imprimeEscolha( i+2, l+1, L2, false);
						if((i+2)<EEPROM.read(0) && (i+2)<=limit)
    5b2e:	20 91 35 13 	lds	r18, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    5b32:	30 91 36 13 	lds	r19, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    5b36:	c8 01       	movw	r24, r16
    5b38:	01 96       	adiw	r24, 0x01	; 1
    5b3a:	82 17       	cp	r24, r18
    5b3c:	93 07       	cpc	r25, r19
    5b3e:	0c f0       	brlt	.+2      	; 0x5b42 <_ZN9red_beryl9historicoEv+0x9a4>
    5b40:	c6 cd       	rjmp	.-1140   	; 0x56ce <_ZN9red_beryl9historicoEv+0x530>
						{   //se o proximo valor ainda estiver dentro do limite de leituras validas.
							imprimeEscolha( i+3, l+2, L3, false);
    5b42:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5b46:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5b4a:	4e 5f       	subi	r20, 0xFE	; 254
    5b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b4e:	b8 01       	movw	r22, r16
    5b50:	6d 5f       	subi	r22, 0xFD	; 253
    5b52:	7f 4f       	sbci	r23, 0xFF	; 255
    5b54:	1f 92       	push	r1
    5b56:	8d b7       	in	r24, 0x3d	; 61
    5b58:	9e b7       	in	r25, 0x3e	; 62
    5b5a:	8e 56       	subi	r24, 0x6E	; 110
    5b5c:	91 09       	sbc	r25, r1
    5b5e:	0f b6       	in	r0, 0x3f	; 63
    5b60:	f8 94       	cli
    5b62:	9e bf       	out	0x3e, r25	; 62
    5b64:	0f be       	out	0x3f, r0	; 63
    5b66:	8d bf       	out	0x3d, r24	; 61
    5b68:	ad b7       	in	r26, 0x3d	; 61
    5b6a:	be b7       	in	r27, 0x3e	; 62
    5b6c:	11 96       	adiw	r26, 0x01	; 1
    5b6e:	8e e6       	ldi	r24, 0x6E	; 110
    5b70:	e7 e7       	ldi	r30, 0x77	; 119
    5b72:	f1 e1       	ldi	r31, 0x11	; 17
    5b74:	01 90       	ld	r0, Z+
    5b76:	0d 92       	st	X+, r0
    5b78:	8a 95       	dec	r24
    5b7a:	e1 f7       	brne	.-8      	; 0x5b74 <_ZN9red_beryl9historicoEv+0x9d6>
    5b7c:	ce 01       	movw	r24, r28
    5b7e:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
    5b82:	8d b7       	in	r24, 0x3d	; 61
    5b84:	9e b7       	in	r25, 0x3e	; 62
    5b86:	81 59       	subi	r24, 0x91	; 145
    5b88:	9f 4f       	sbci	r25, 0xFF	; 255
    5b8a:	0f b6       	in	r0, 0x3f	; 63
    5b8c:	f8 94       	cli
    5b8e:	9e bf       	out	0x3e, r25	; 62
    5b90:	0f be       	out	0x3f, r0	; 63
    5b92:	8d bf       	out	0x3d, r24	; 61
    5b94:	9c cd       	rjmp	.-1224   	; 0x56ce <_ZN9red_beryl9historicoEv+0x530>
				}
				if(l==2)
				{   //se estiver na segunda linha.
					if(EEPROM.read(0)<2 || i==0)
					{   //se tiver menos de dois endereços no historico ou se o i for 0, imediatamente retorna a primeira linha.
						l=1;
    5b96:	81 e0       	ldi	r24, 0x01	; 1
    5b98:	90 e0       	ldi	r25, 0x00	; 0
    5b9a:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5b9e:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5ba2:	31 ce       	rjmp	.-926    	; 0x5806 <_ZN9red_beryl9historicoEv+0x668>
					{    //se tiver pelo menos dois endereços e i for diferente de 0;
						if(!ler)
						{   //se a variavel ler for false: ou seja, se os valores de leitura não tiverem sido recebidos ainda.
							EEPROM.get((((i-1)*sizeof(leitura))+1), L1);   //L1 recebe o valor salvo no historico referente a posição i-1;
							EEPROM.get((((i)*sizeof(leitura))+1), L2);   //L2 recebe o valor salvo no historico referente a posição i.
							if((i+1)<EEPROM.read(0) && (i+1)<=limit)
    5ba4:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    5ba8:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    5bac:	08 17       	cp	r16, r24
    5bae:	19 07       	cpc	r17, r25
    5bb0:	9c f1       	brlt	.+102    	; 0x5c18 <_ZN9red_beryl9historicoEv+0xa7a>
    5bb2:	c8 cd       	rjmp	.-1136   	; 0x5744 <_ZN9red_beryl9historicoEv+0x5a6>
						}
						imprimeEscolha( i, l-1, L1, false);           
						//final da logica das opções na linha 1 para quando a linha 2 estiver selecionada, a proxima parte conta com a linha 2.
						imprimeEscolha( i+1, l, L2, true);          
						//final da logica das opções na linha 2 quando selecionada, a proxima parte conta com a linha 3, usando 'if' para verificar se ela deve existir.
						if((i+1)<EEPROM.read(0) && (i+1)<=limit)
    5bb4:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <_ZZN9red_beryl9historicoEvE5limit>
    5bb8:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <_ZZN9red_beryl9historicoEvE5limit+0x1>
    5bbc:	08 17       	cp	r16, r24
    5bbe:	19 07       	cpc	r17, r25
    5bc0:	0c f0       	brlt	.+2      	; 0x5bc4 <_ZN9red_beryl9historicoEv+0xa26>
    5bc2:	21 ce       	rjmp	.-958    	; 0x5806 <_ZN9red_beryl9historicoEv+0x668>
						{   //se o numero de leituras for maior que i+1(ou seja, se i=1(primeira linha 0), a terceira linha seria(i+1)=2, nesse caso, tivermos 3 leituras EEPROM.read(0)=[3]>[2]
							//portanto, nesse caso a terceira linha existe.
							imprimeEscolha( i+2, l+1, L3, false);
    5bc4:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5bc8:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5bcc:	4f 5f       	subi	r20, 0xFF	; 255
    5bce:	5f 4f       	sbci	r21, 0xFF	; 255
    5bd0:	b8 01       	movw	r22, r16
    5bd2:	6e 5f       	subi	r22, 0xFE	; 254
    5bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5bd6:	1f 92       	push	r1
    5bd8:	8d b7       	in	r24, 0x3d	; 61
    5bda:	9e b7       	in	r25, 0x3e	; 62
    5bdc:	8e 56       	subi	r24, 0x6E	; 110
    5bde:	91 09       	sbc	r25, r1
    5be0:	0f b6       	in	r0, 0x3f	; 63
    5be2:	f8 94       	cli
    5be4:	9e bf       	out	0x3e, r25	; 62
    5be6:	0f be       	out	0x3f, r0	; 63
    5be8:	8d bf       	out	0x3d, r24	; 61
    5bea:	ad b7       	in	r26, 0x3d	; 61
    5bec:	be b7       	in	r27, 0x3e	; 62
    5bee:	11 96       	adiw	r26, 0x01	; 1
    5bf0:	8e e6       	ldi	r24, 0x6E	; 110
    5bf2:	e7 e7       	ldi	r30, 0x77	; 119
    5bf4:	f1 e1       	ldi	r31, 0x11	; 17
    5bf6:	01 90       	ld	r0, Z+
    5bf8:	0d 92       	st	X+, r0
    5bfa:	8a 95       	dec	r24
    5bfc:	e1 f7       	brne	.-8      	; 0x5bf6 <_ZN9red_beryl9historicoEv+0xa58>
    5bfe:	ce 01       	movw	r24, r28
    5c00:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <_ZN9red_beryl14imprimeEscolhaEii8leiturasb>
    5c04:	8d b7       	in	r24, 0x3d	; 61
    5c06:	9e b7       	in	r25, 0x3e	; 62
    5c08:	81 59       	subi	r24, 0x91	; 145
    5c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0c:	0f b6       	in	r0, 0x3f	; 63
    5c0e:	f8 94       	cli
    5c10:	9e bf       	out	0x3e, r25	; 62
    5c12:	0f be       	out	0x3f, r0	; 63
    5c14:	8d bf       	out	0x3d, r24	; 61
    5c16:	f7 cd       	rjmp	.-1042   	; 0x5806 <_ZN9red_beryl9historicoEv+0x668>
						{   //se a variavel ler for false: ou seja, se os valores de leitura não tiverem sido recebidos ainda.
							EEPROM.get((((i-1)*sizeof(leitura))+1), L1);   //L1 recebe o valor salvo no historico referente a posição i-1;
							EEPROM.get((((i)*sizeof(leitura))+1), L2);   //L2 recebe o valor salvo no historico referente a posição i.
							if((i+1)<EEPROM.read(0) && (i+1)<=limit)
							{    //se o proximo valor ainda estiver dentro do limite de leituras validas.
								EEPROM.get((((i+1)*sizeof(leitura))+1), L3);   //L3 recebe o valor salvo no historico referente a posição i+1.
    5c18:	67 e7       	ldi	r22, 0x77	; 119
    5c1a:	71 e1       	ldi	r23, 0x11	; 17
    5c1c:	c7 01       	movw	r24, r14
    5c1e:	83 52       	subi	r24, 0x23	; 35
    5c20:	9f 4f       	sbci	r25, 0xFF	; 255
    5c22:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.5>
    5c26:	8e cd       	rjmp	.-1252   	; 0x5744 <_ZN9red_beryl9historicoEv+0x5a6>
				}
				if(l==3)
				{   //se estiver na terceira(e ultima) linha.
					if(EEPROM.read(0)<3 || i==0 || i==1)
					{   //se tiver menos de tres endereços no historico ou se o i for 0 ou 1, imediatamente retorna a primeira linha.
						l=1;
    5c28:	81 e0       	ldi	r24, 0x01	; 1
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	90 93 18 04 	sts	0x0418, r25	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5c30:	80 93 17 04 	sts	0x0417, r24	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5c34:	9b ce       	rjmp	.-714    	; 0x596c <_ZN9red_beryl9historicoEv+0x7ce>
							i=0;    //volta a primeira leitura.
							l=1;    //seleciona a primeira linha.
						}
						else
						{   //se i não for a ultima leitura possivel.
							i++;    //incrementa o valor de i.
    5c36:	0f 5f       	subi	r16, 0xFF	; 255
    5c38:	1f 4f       	sbci	r17, 0xFF	; 255
    5c3a:	10 93 34 13 	sts	0x1334, r17	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5c3e:	00 93 33 13 	sts	0x1333, r16	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
    5c42:	19 cf       	rjmp	.-462    	; 0x5a76 <_ZN9red_beryl9historicoEv+0x8d8>
					}
					else 
					{    //se a linha 1 ou 2 estiver selecionada.
						if(!(i==EEPROM.read(0)-1 || i==limit))
						{    //se i NÃO for igual a ultima leitura possivel.
							i++;  //incremente o valor de i.
    5c44:	0f 5f       	subi	r16, 0xFF	; 255
    5c46:	1f 4f       	sbci	r17, 0xFF	; 255
    5c48:	10 93 34 13 	sts	0x1334, r17	; 0x801334 <_ZZN9red_beryl9historicoEvE1i+0x1>
    5c4c:	00 93 33 13 	sts	0x1333, r16	; 0x801333 <_ZZN9red_beryl9historicoEvE1i>
							l++;    //incrementa o valor l(indo para a segunda ou terceira linha).
    5c50:	9f ef       	ldi	r25, 0xFF	; 255
    5c52:	e9 1a       	sub	r14, r25
    5c54:	f9 0a       	sbc	r15, r25
    5c56:	f0 92 18 04 	sts	0x0418, r15	; 0x800418 <_ZZN9red_beryl9historicoEvE1l+0x1>
    5c5a:	e0 92 17 04 	sts	0x0417, r14	; 0x800417 <_ZZN9red_beryl9historicoEvE1l>
    5c5e:	0b cf       	rjmp	.-490    	; 0x5a76 <_ZN9red_beryl9historicoEv+0x8d8>
				_no=false;   //reseta NO.
				return true;
			}
		}
	return false;
}
    5c60:	81 2f       	mov	r24, r17
    5c62:	df 91       	pop	r29
    5c64:	cf 91       	pop	r28
    5c66:	1f 91       	pop	r17
    5c68:	0f 91       	pop	r16
    5c6a:	ff 90       	pop	r15
    5c6c:	ef 90       	pop	r14
    5c6e:	df 90       	pop	r13
    5c70:	cf 90       	pop	r12
    5c72:	bf 90       	pop	r11
    5c74:	af 90       	pop	r10
    5c76:	08 95       	ret

00005c78 <_ZN9red_beryl12menu_leituraEv>:
	if(_yes){
		_yes = false;
	}
}
bool red_beryl::menu_leitura()
{
    5c78:	6f 92       	push	r6
    5c7a:	7f 92       	push	r7
    5c7c:	8f 92       	push	r8
    5c7e:	9f 92       	push	r9
    5c80:	af 92       	push	r10
    5c82:	bf 92       	push	r11
    5c84:	cf 92       	push	r12
    5c86:	df 92       	push	r13
    5c88:	ef 92       	push	r14
    5c8a:	ff 92       	push	r15
    5c8c:	0f 93       	push	r16
    5c8e:	1f 93       	push	r17
    5c90:	cf 93       	push	r28
    5c92:	df 93       	push	r29
    5c94:	ec 01       	movw	r28, r24
	static int choice=1;
	static char* menu[] = { (char*)"0.default", (char*)"1.Nova Leitura", (char*)"2.Historico" };
	switch(choice){
    5c96:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
    5c9a:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    5c9e:	82 30       	cpi	r24, 0x02	; 2
    5ca0:	91 05       	cpc	r25, r1
    5ca2:	09 f4       	brne	.+2      	; 0x5ca6 <_ZN9red_beryl12menu_leituraEv+0x2e>
    5ca4:	c5 c3       	rjmp	.+1930   	; 0x6430 <_ZN9red_beryl12menu_leituraEv+0x7b8>
    5ca6:	24 f4       	brge	.+8      	; 0x5cb0 <_ZN9red_beryl12menu_leituraEv+0x38>
    5ca8:	01 97       	sbiw	r24, 0x01	; 1
    5caa:	09 f4       	brne	.+2      	; 0x5cae <_ZN9red_beryl12menu_leituraEv+0x36>
    5cac:	8c c3       	rjmp	.+1816   	; 0x63c6 <_ZN9red_beryl12menu_leituraEv+0x74e>
    5cae:	ec c3       	rjmp	.+2008   	; 0x6488 <_ZN9red_beryl12menu_leituraEv+0x810>
    5cb0:	8b 30       	cpi	r24, 0x0B	; 11
    5cb2:	91 05       	cpc	r25, r1
    5cb4:	21 f0       	breq	.+8      	; 0x5cbe <_ZN9red_beryl12menu_leituraEv+0x46>
    5cb6:	45 97       	sbiw	r24, 0x15	; 21
    5cb8:	09 f4       	brne	.+2      	; 0x5cbc <_ZN9red_beryl12menu_leituraEv+0x44>
    5cba:	78 c3       	rjmp	.+1776   	; 0x63ac <_ZN9red_beryl12menu_leituraEv+0x734>
    5cbc:	e5 c3       	rjmp	.+1994   	; 0x6488 <_ZN9red_beryl12menu_leituraEv+0x810>
		case 11:		//Nova leitura
		{
			static bool done=false;
			static long frequencia = 50000;
			
			if(!done){
    5cbe:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <_ZZN9red_beryl12menu_leituraEvE4done>
    5cc2:	9e 01       	movw	r18, r28
    5cc4:	2b 5e       	subi	r18, 0xEB	; 235
    5cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    5cc8:	69 01       	movw	r12, r18
    5cca:	81 11       	cpse	r24, r1
    5ccc:	14 c1       	rjmp	.+552    	; 0x5ef6 <_ZN9red_beryl12menu_leituraEv+0x27e>
				display.fillRect(10, lineSize, display.width()-20, lineSize*3, BLACK);
    5cce:	c9 01       	movw	r24, r18
    5cd0:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    5cd4:	9c 01       	movw	r18, r24
    5cd6:	24 51       	subi	r18, 0x14	; 20
    5cd8:	31 09       	sbc	r19, r1
    5cda:	e1 2c       	mov	r14, r1
    5cdc:	f1 2c       	mov	r15, r1
    5cde:	08 e1       	ldi	r16, 0x18	; 24
    5ce0:	10 e0       	ldi	r17, 0x00	; 0
    5ce2:	48 e0       	ldi	r20, 0x08	; 8
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	6a e0       	ldi	r22, 0x0A	; 10
    5ce8:	70 e0       	ldi	r23, 0x00	; 0
    5cea:	c6 01       	movw	r24, r12
    5cec:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>
				display.drawRect(10, lineSize, display.width()-20, lineSize*3, WHITE);
    5cf0:	c6 01       	movw	r24, r12
    5cf2:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    5cf6:	9c 01       	movw	r18, r24
    5cf8:	24 51       	subi	r18, 0x14	; 20
    5cfa:	31 09       	sbc	r19, r1
    5cfc:	ee 24       	eor	r14, r14
    5cfe:	e3 94       	inc	r14
    5d00:	f1 2c       	mov	r15, r1
    5d02:	48 e0       	ldi	r20, 0x08	; 8
    5d04:	50 e0       	ldi	r21, 0x00	; 0
    5d06:	6a e0       	ldi	r22, 0x0A	; 10
    5d08:	70 e0       	ldi	r23, 0x00	; 0
    5d0a:	c6 01       	movw	r24, r12
    5d0c:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <_ZN12Adafruit_GFX8drawRectEiiiij>
				display.setCursor(13, lineSize+2);
    5d10:	4a e0       	ldi	r20, 0x0A	; 10
    5d12:	50 e0       	ldi	r21, 0x00	; 0
    5d14:	6d e0       	ldi	r22, 0x0D	; 13
    5d16:	70 e0       	ldi	r23, 0x00	; 0
    5d18:	c6 01       	movw	r24, r12
    5d1a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				display.setTextColor(WHITE);
    5d1e:	61 e0       	ldi	r22, 0x01	; 1
    5d20:	70 e0       	ldi	r23, 0x00	; 0
    5d22:	c6 01       	movw	r24, r12
    5d24:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
				display.setTextSize(1);
    5d28:	61 e0       	ldi	r22, 0x01	; 1
    5d2a:	c6 01       	movw	r24, r12
    5d2c:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
				display.print("Frequencia?");
    5d30:	6a e4       	ldi	r22, 0x4A	; 74
    5d32:	78 e0       	ldi	r23, 0x08	; 8
    5d34:	c6 01       	movw	r24, r12
    5d36:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			
				display.drawRect(display.width()/3-2, lineSize*2+2, 3*6+4, 11, WHITE);
    5d3a:	c6 01       	movw	r24, r12
    5d3c:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    5d40:	f3 e0       	ldi	r31, 0x03	; 3
    5d42:	af 2e       	mov	r10, r31
    5d44:	b1 2c       	mov	r11, r1
    5d46:	b5 01       	movw	r22, r10
    5d48:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <__divmodhi4>
    5d4c:	62 50       	subi	r22, 0x02	; 2
    5d4e:	71 09       	sbc	r23, r1
    5d50:	0b e0       	ldi	r16, 0x0B	; 11
    5d52:	10 e0       	ldi	r17, 0x00	; 0
    5d54:	26 e1       	ldi	r18, 0x16	; 22
    5d56:	30 e0       	ldi	r19, 0x00	; 0
    5d58:	42 e1       	ldi	r20, 0x12	; 18
    5d5a:	50 e0       	ldi	r21, 0x00	; 0
    5d5c:	c6 01       	movw	r24, r12
    5d5e:	0e 94 f9 4d 	call	0x9bf2	; 0x9bf2 <_ZN12Adafruit_GFX8drawRectEiiiij>
				display.setCursor(display.width()/3, lineSize*2+4);
    5d62:	c6 01       	movw	r24, r12
    5d64:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    5d68:	b5 01       	movw	r22, r10
    5d6a:	0e 94 41 5e 	call	0xbc82	; 0xbc82 <__divmodhi4>
    5d6e:	44 e1       	ldi	r20, 0x14	; 20
    5d70:	50 e0       	ldi	r21, 0x00	; 0
    5d72:	c6 01       	movw	r24, r12
    5d74:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				display.setTextColor(WHITE);
    5d78:	61 e0       	ldi	r22, 0x01	; 1
    5d7a:	70 e0       	ldi	r23, 0x00	; 0
    5d7c:	c6 01       	movw	r24, r12
    5d7e:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
				if(frequencia<25000)
    5d82:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_ZZN9red_beryl12menu_leituraEvE10frequencia>
    5d86:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x1>
    5d8a:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x2>
    5d8e:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x3>
    5d92:	88 3a       	cpi	r24, 0xA8	; 168
    5d94:	31 e6       	ldi	r19, 0x61	; 97
    5d96:	93 07       	cpc	r25, r19
    5d98:	a1 05       	cpc	r26, r1
    5d9a:	b1 05       	cpc	r27, r1
    5d9c:	1c f4       	brge	.+6      	; 0x5da4 <_ZN9red_beryl12menu_leituraEv+0x12c>
				{
					display.print("  ");
    5d9e:	6e eb       	ldi	r22, 0xBE	; 190
    5da0:	74 e0       	ldi	r23, 0x04	; 4
    5da2:	07 c0       	rjmp	.+14     	; 0x5db2 <_ZN9red_beryl12menu_leituraEv+0x13a>
				}
				else if(frequencia<100000)
    5da4:	80 3a       	cpi	r24, 0xA0	; 160
    5da6:	96 48       	sbci	r25, 0x86	; 134
    5da8:	a1 40       	sbci	r26, 0x01	; 1
    5daa:	b1 05       	cpc	r27, r1
    5dac:	2c f4       	brge	.+10     	; 0x5db8 <_ZN9red_beryl12menu_leituraEv+0x140>
				{
					display.print(" ");
    5dae:	6f eb       	ldi	r22, 0xBF	; 191
    5db0:	74 e0       	ldi	r23, 0x04	; 4
    5db2:	c6 01       	movw	r24, r12
    5db4:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(frequencia/1000);
    5db8:	60 91 27 04 	lds	r22, 0x0427	; 0x800427 <_ZZN9red_beryl12menu_leituraEvE10frequencia>
    5dbc:	70 91 28 04 	lds	r23, 0x0428	; 0x800428 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x1>
    5dc0:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x2>
    5dc4:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x3>
    5dc8:	28 ee       	ldi	r18, 0xE8	; 232
    5dca:	33 e0       	ldi	r19, 0x03	; 3
    5dcc:	40 e0       	ldi	r20, 0x00	; 0
    5dce:	50 e0       	ldi	r21, 0x00	; 0
    5dd0:	0e 94 76 5e 	call	0xbcec	; 0xbcec <__divmodsi4>
    5dd4:	ba 01       	movw	r22, r20
    5dd6:	a9 01       	movw	r20, r18
    5dd8:	2a e0       	ldi	r18, 0x0A	; 10
    5dda:	30 e0       	ldi	r19, 0x00	; 0
    5ddc:	c6 01       	movw	r24, r12
    5dde:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN5Print5printEli>
				display.setTextColor(WHITE);
    5de2:	61 e0       	ldi	r22, 0x01	; 1
    5de4:	70 e0       	ldi	r23, 0x00	; 0
    5de6:	c6 01       	movw	r24, r12
    5de8:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
				display.print(" KHz");
    5dec:	66 e5       	ldi	r22, 0x56	; 86
    5dee:	78 e0       	ldi	r23, 0x08	; 8
    5df0:	c6 01       	movw	r24, r12
    5df2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				
				
				if(_up)
    5df6:	8e 85       	ldd	r24, Y+14	; 0x0e
    5df8:	88 23       	and	r24, r24
    5dfa:	d9 f1       	breq	.+118    	; 0x5e72 <_ZN9red_beryl12menu_leituraEv+0x1fa>
				{
					_up = false;
    5dfc:	1e 86       	std	Y+14, r1	; 0x0e
					switch(frequencia)
    5dfe:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_ZZN9red_beryl12menu_leituraEvE10frequencia>
    5e02:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x1>
    5e06:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x2>
    5e0a:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x3>
    5e0e:	88 3a       	cpi	r24, 0xA8	; 168
    5e10:	f1 e6       	ldi	r31, 0x61	; 97
    5e12:	9f 07       	cpc	r25, r31
    5e14:	a1 05       	cpc	r26, r1
    5e16:	b1 05       	cpc	r27, r1
    5e18:	d9 f0       	breq	.+54     	; 0x5e50 <_ZN9red_beryl12menu_leituraEv+0x1d8>
    5e1a:	54 f4       	brge	.+20     	; 0x5e30 <_ZN9red_beryl12menu_leituraEv+0x1b8>
    5e1c:	88 38       	cpi	r24, 0x88	; 136
    5e1e:	93 41       	sbci	r25, 0x13	; 19
    5e20:	a1 05       	cpc	r26, r1
    5e22:	b1 05       	cpc	r27, r1
    5e24:	31 f5       	brne	.+76     	; 0x5e72 <_ZN9red_beryl12menu_leituraEv+0x1fa>
					{
						case 5000:
						{
							frequencia = 25000;
    5e26:	88 ea       	ldi	r24, 0xA8	; 168
    5e28:	91 e6       	ldi	r25, 0x61	; 97
    5e2a:	a0 e0       	ldi	r26, 0x00	; 0
    5e2c:	b0 e0       	ldi	r27, 0x00	; 0
    5e2e:	19 c0       	rjmp	.+50     	; 0x5e62 <_ZN9red_beryl12menu_leituraEv+0x1ea>
				
				
				if(_up)
				{
					_up = false;
					switch(frequencia)
    5e30:	80 35       	cpi	r24, 0x50	; 80
    5e32:	e3 ec       	ldi	r30, 0xC3	; 195
    5e34:	9e 07       	cpc	r25, r30
    5e36:	a1 05       	cpc	r26, r1
    5e38:	b1 05       	cpc	r27, r1
    5e3a:	79 f0       	breq	.+30     	; 0x5e5a <_ZN9red_beryl12menu_leituraEv+0x1e2>
    5e3c:	80 3a       	cpi	r24, 0xA0	; 160
    5e3e:	96 48       	sbci	r25, 0x86	; 134
    5e40:	a1 40       	sbci	r26, 0x01	; 1
    5e42:	b1 05       	cpc	r27, r1
    5e44:	b1 f4       	brne	.+44     	; 0x5e72 <_ZN9red_beryl12menu_leituraEv+0x1fa>
							frequencia = 100000;
							break;
						}
						case 100000:
						{
							frequencia = 5000;
    5e46:	88 e8       	ldi	r24, 0x88	; 136
    5e48:	93 e1       	ldi	r25, 0x13	; 19
    5e4a:	a0 e0       	ldi	r26, 0x00	; 0
    5e4c:	b0 e0       	ldi	r27, 0x00	; 0
    5e4e:	09 c0       	rjmp	.+18     	; 0x5e62 <_ZN9red_beryl12menu_leituraEv+0x1ea>
							frequencia = 25000;
							break;
						}
						case 25000:
						{
							frequencia = 50000;
    5e50:	80 e5       	ldi	r24, 0x50	; 80
    5e52:	93 ec       	ldi	r25, 0xC3	; 195
    5e54:	a0 e0       	ldi	r26, 0x00	; 0
    5e56:	b0 e0       	ldi	r27, 0x00	; 0
    5e58:	04 c0       	rjmp	.+8      	; 0x5e62 <_ZN9red_beryl12menu_leituraEv+0x1ea>
							break;
						}
						case 50000:
						{
							frequencia = 100000;
    5e5a:	80 ea       	ldi	r24, 0xA0	; 160
    5e5c:	96 e8       	ldi	r25, 0x86	; 134
    5e5e:	a1 e0       	ldi	r26, 0x01	; 1
    5e60:	b0 e0       	ldi	r27, 0x00	; 0
							break;
						}
						case 100000:
						{
							frequencia = 5000;
    5e62:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_ZZN9red_beryl12menu_leituraEvE10frequencia>
    5e66:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x1>
    5e6a:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x2>
    5e6e:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x3>
							break;
						}
					}
				}
				if(_down)
    5e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e74:	88 23       	and	r24, r24
    5e76:	09 f4       	brne	.+2      	; 0x5e7a <_ZN9red_beryl12menu_leituraEv+0x202>
    5e78:	4d c1       	rjmp	.+666    	; 0x6114 <_ZN9red_beryl12menu_leituraEv+0x49c>
				{
					_down = false;
    5e7a:	1f 86       	std	Y+15, r1	; 0x0f
					switch(frequencia)
    5e7c:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <_ZZN9red_beryl12menu_leituraEvE10frequencia>
    5e80:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x1>
    5e84:	a0 91 29 04 	lds	r26, 0x0429	; 0x800429 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x2>
    5e88:	b0 91 2a 04 	lds	r27, 0x042A	; 0x80042a <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x3>
    5e8c:	88 3a       	cpi	r24, 0xA8	; 168
    5e8e:	21 e6       	ldi	r18, 0x61	; 97
    5e90:	92 07       	cpc	r25, r18
    5e92:	a1 05       	cpc	r26, r1
    5e94:	b1 05       	cpc	r27, r1
    5e96:	e9 f0       	breq	.+58     	; 0x5ed2 <_ZN9red_beryl12menu_leituraEv+0x25a>
    5e98:	5c f4       	brge	.+22     	; 0x5eb0 <_ZN9red_beryl12menu_leituraEv+0x238>
    5e9a:	88 38       	cpi	r24, 0x88	; 136
    5e9c:	93 41       	sbci	r25, 0x13	; 19
    5e9e:	a1 05       	cpc	r26, r1
    5ea0:	b1 05       	cpc	r27, r1
    5ea2:	09 f0       	breq	.+2      	; 0x5ea6 <_ZN9red_beryl12menu_leituraEv+0x22e>
    5ea4:	37 c1       	rjmp	.+622    	; 0x6114 <_ZN9red_beryl12menu_leituraEv+0x49c>
					{
						
						
						case 5000:
						{
							frequencia = 100000;
    5ea6:	80 ea       	ldi	r24, 0xA0	; 160
    5ea8:	96 e8       	ldi	r25, 0x86	; 134
    5eaa:	a1 e0       	ldi	r26, 0x01	; 1
    5eac:	b0 e0       	ldi	r27, 0x00	; 0
    5eae:	15 c0       	rjmp	.+42     	; 0x5eda <_ZN9red_beryl12menu_leituraEv+0x262>
					}
				}
				if(_down)
				{
					_down = false;
					switch(frequencia)
    5eb0:	80 35       	cpi	r24, 0x50	; 80
    5eb2:	f3 ec       	ldi	r31, 0xC3	; 195
    5eb4:	9f 07       	cpc	r25, r31
    5eb6:	a1 05       	cpc	r26, r1
    5eb8:	b1 05       	cpc	r27, r1
    5eba:	c1 f0       	breq	.+48     	; 0x5eec <_ZN9red_beryl12menu_leituraEv+0x274>
    5ebc:	80 3a       	cpi	r24, 0xA0	; 160
    5ebe:	96 48       	sbci	r25, 0x86	; 134
    5ec0:	a1 40       	sbci	r26, 0x01	; 1
    5ec2:	b1 05       	cpc	r27, r1
    5ec4:	09 f0       	breq	.+2      	; 0x5ec8 <_ZN9red_beryl12menu_leituraEv+0x250>
    5ec6:	26 c1       	rjmp	.+588    	; 0x6114 <_ZN9red_beryl12menu_leituraEv+0x49c>
							frequencia = 25000;
							break;
						}
						case 100000:
						{
							frequencia = 50000;
    5ec8:	80 e5       	ldi	r24, 0x50	; 80
    5eca:	93 ec       	ldi	r25, 0xC3	; 195
    5ecc:	a0 e0       	ldi	r26, 0x00	; 0
    5ece:	b0 e0       	ldi	r27, 0x00	; 0
    5ed0:	04 c0       	rjmp	.+8      	; 0x5eda <_ZN9red_beryl12menu_leituraEv+0x262>
							frequencia = 100000;
							break;
						}
						case 25000:
						{
							frequencia = 5000;
    5ed2:	88 e8       	ldi	r24, 0x88	; 136
    5ed4:	93 e1       	ldi	r25, 0x13	; 19
    5ed6:	a0 e0       	ldi	r26, 0x00	; 0
    5ed8:	b0 e0       	ldi	r27, 0x00	; 0
    5eda:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <_ZZN9red_beryl12menu_leituraEvE10frequencia>
    5ede:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x1>
    5ee2:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x2>
    5ee6:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x3>
							break;
    5eea:	14 c1       	rjmp	.+552    	; 0x6114 <_ZN9red_beryl12menu_leituraEv+0x49c>
						}
						case 50000:
						{
							frequencia = 25000;
    5eec:	88 ea       	ldi	r24, 0xA8	; 168
    5eee:	91 e6       	ldi	r25, 0x61	; 97
    5ef0:	a0 e0       	ldi	r26, 0x00	; 0
    5ef2:	b0 e0       	ldi	r27, 0x00	; 0
    5ef4:	f2 cf       	rjmp	.-28     	; 0x5eda <_ZN9red_beryl12menu_leituraEv+0x262>
						}
					}
				}
			}
			else{
				display.setCursor(1, lineSize);
    5ef6:	48 e0       	ldi	r20, 0x08	; 8
    5ef8:	50 e0       	ldi	r21, 0x00	; 0
    5efa:	61 e0       	ldi	r22, 0x01	; 1
    5efc:	70 e0       	ldi	r23, 0x00	; 0
    5efe:	c9 01       	movw	r24, r18
    5f00:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				
				display.setTextColor(WHITE);
    5f04:	61 e0       	ldi	r22, 0x01	; 1
    5f06:	70 e0       	ldi	r23, 0x00	; 0
    5f08:	c6 01       	movw	r24, r12
    5f0a:	0e 94 27 52 	call	0xa44e	; 0xa44e <_ZN12Adafruit_GFX12setTextColorEj>
				display.setTextSize(1);
    5f0e:	61 e0       	ldi	r22, 0x01	; 1
    5f10:	c6 01       	movw	r24, r12
    5f12:	0e 94 21 52 	call	0xa442	; 0xa442 <_ZN12Adafruit_GFX11setTextSizeEh>
				if(leitura0.dia<10){
    5f16:	8e 01       	movw	r16, r28
    5f18:	05 55       	subi	r16, 0x55	; 85
    5f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    5f1c:	f8 01       	movw	r30, r16
    5f1e:	80 81       	ld	r24, Z
    5f20:	91 81       	ldd	r25, Z+1	; 0x01
    5f22:	0a 97       	sbiw	r24, 0x0a	; 10
    5f24:	2c f4       	brge	.+10     	; 0x5f30 <_ZN9red_beryl12menu_leituraEv+0x2b8>
					display.print("0");
    5f26:	65 ef       	ldi	r22, 0xF5	; 245
    5f28:	76 e0       	ldi	r23, 0x06	; 6
    5f2a:	c6 01       	movw	r24, r12
    5f2c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leitura0.dia);
    5f30:	f8 01       	movw	r30, r16
    5f32:	60 81       	ld	r22, Z
    5f34:	71 81       	ldd	r23, Z+1	; 0x01
    5f36:	4a e0       	ldi	r20, 0x0A	; 10
    5f38:	50 e0       	ldi	r21, 0x00	; 0
    5f3a:	c6 01       	movw	r24, r12
    5f3c:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.print("/");
    5f40:	64 ea       	ldi	r22, 0xA4	; 164
    5f42:	75 e0       	ldi	r23, 0x05	; 5
    5f44:	c6 01       	movw	r24, r12
    5f46:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leitura0.mes<10){
    5f4a:	8e 01       	movw	r16, r28
    5f4c:	03 55       	subi	r16, 0x53	; 83
    5f4e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f50:	f8 01       	movw	r30, r16
    5f52:	80 81       	ld	r24, Z
    5f54:	91 81       	ldd	r25, Z+1	; 0x01
    5f56:	0a 97       	sbiw	r24, 0x0a	; 10
    5f58:	2c f4       	brge	.+10     	; 0x5f64 <_ZN9red_beryl12menu_leituraEv+0x2ec>
					display.print("0");
    5f5a:	65 ef       	ldi	r22, 0xF5	; 245
    5f5c:	76 e0       	ldi	r23, 0x06	; 6
    5f5e:	c6 01       	movw	r24, r12
    5f60:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leitura0.mes);
    5f64:	f8 01       	movw	r30, r16
    5f66:	60 81       	ld	r22, Z
    5f68:	71 81       	ldd	r23, Z+1	; 0x01
    5f6a:	4a e0       	ldi	r20, 0x0A	; 10
    5f6c:	50 e0       	ldi	r21, 0x00	; 0
    5f6e:	c6 01       	movw	r24, r12
    5f70:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.print(" ");
    5f74:	6f eb       	ldi	r22, 0xBF	; 191
    5f76:	74 e0       	ldi	r23, 0x04	; 4
    5f78:	c6 01       	movw	r24, r12
    5f7a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leitura0.hora<10){
    5f7e:	8e 01       	movw	r16, r28
    5f80:	09 55       	subi	r16, 0x59	; 89
    5f82:	1f 4f       	sbci	r17, 0xFF	; 255
    5f84:	f8 01       	movw	r30, r16
    5f86:	80 81       	ld	r24, Z
    5f88:	91 81       	ldd	r25, Z+1	; 0x01
    5f8a:	0a 97       	sbiw	r24, 0x0a	; 10
    5f8c:	2c f4       	brge	.+10     	; 0x5f98 <_ZN9red_beryl12menu_leituraEv+0x320>
					display.print("0");
    5f8e:	65 ef       	ldi	r22, 0xF5	; 245
    5f90:	76 e0       	ldi	r23, 0x06	; 6
    5f92:	c6 01       	movw	r24, r12
    5f94:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leitura0.hora);
    5f98:	f8 01       	movw	r30, r16
    5f9a:	60 81       	ld	r22, Z
    5f9c:	71 81       	ldd	r23, Z+1	; 0x01
    5f9e:	4a e0       	ldi	r20, 0x0A	; 10
    5fa0:	50 e0       	ldi	r21, 0x00	; 0
    5fa2:	c6 01       	movw	r24, r12
    5fa4:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.print(":");
    5fa8:	69 e2       	ldi	r22, 0x29	; 41
    5faa:	78 e0       	ldi	r23, 0x08	; 8
    5fac:	c6 01       	movw	r24, r12
    5fae:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leitura0.minuto<10){
    5fb2:	8e 01       	movw	r16, r28
    5fb4:	07 55       	subi	r16, 0x57	; 87
    5fb6:	1f 4f       	sbci	r17, 0xFF	; 255
    5fb8:	f8 01       	movw	r30, r16
    5fba:	80 81       	ld	r24, Z
    5fbc:	91 81       	ldd	r25, Z+1	; 0x01
    5fbe:	0a 97       	sbiw	r24, 0x0a	; 10
    5fc0:	2c f4       	brge	.+10     	; 0x5fcc <_ZN9red_beryl12menu_leituraEv+0x354>
					display.print("0");
    5fc2:	65 ef       	ldi	r22, 0xF5	; 245
    5fc4:	76 e0       	ldi	r23, 0x06	; 6
    5fc6:	c6 01       	movw	r24, r12
    5fc8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leitura0.minuto);
    5fcc:	f8 01       	movw	r30, r16
    5fce:	60 81       	ld	r22, Z
    5fd0:	71 81       	ldd	r23, Z+1	; 0x01
    5fd2:	4a e0       	ldi	r20, 0x0A	; 10
    5fd4:	50 e0       	ldi	r21, 0x00	; 0
    5fd6:	c6 01       	movw	r24, r12
    5fd8:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				display.print(" ");
    5fdc:	6f eb       	ldi	r22, 0xBF	; 191
    5fde:	74 e0       	ldi	r23, 0x04	; 4
    5fe0:	c6 01       	movw	r24, r12
    5fe2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leitura0.freq/1000<10){
    5fe6:	8e 01       	movw	r16, r28
    5fe8:	0d 5b       	subi	r16, 0xBD	; 189
    5fea:	1f 4f       	sbci	r17, 0xFF	; 255
    5fec:	f8 01       	movw	r30, r16
    5fee:	80 81       	ld	r24, Z
    5ff0:	91 81       	ldd	r25, Z+1	; 0x01
    5ff2:	a2 81       	ldd	r26, Z+2	; 0x02
    5ff4:	b3 81       	ldd	r27, Z+3	; 0x03
    5ff6:	80 31       	cpi	r24, 0x10	; 16
    5ff8:	f7 e2       	ldi	r31, 0x27	; 39
    5ffa:	9f 07       	cpc	r25, r31
    5ffc:	a1 05       	cpc	r26, r1
    5ffe:	b1 05       	cpc	r27, r1
    6000:	38 f4       	brcc	.+14     	; 0x6010 <_ZN9red_beryl12menu_leituraEv+0x398>
					display.setCursor(display.width()-2-6*4, lineSize);
    6002:	c6 01       	movw	r24, r12
    6004:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    6008:	bc 01       	movw	r22, r24
    600a:	6a 51       	subi	r22, 0x1A	; 26
    600c:	71 09       	sbc	r23, r1
    600e:	12 c0       	rjmp	.+36     	; 0x6034 <_ZN9red_beryl12menu_leituraEv+0x3bc>
				}
				else if(leitura0.freq/1000<100){
    6010:	80 3a       	cpi	r24, 0xA0	; 160
    6012:	96 48       	sbci	r25, 0x86	; 134
    6014:	a1 40       	sbci	r26, 0x01	; 1
    6016:	b1 05       	cpc	r27, r1
    6018:	38 f4       	brcc	.+14     	; 0x6028 <_ZN9red_beryl12menu_leituraEv+0x3b0>
					display.setCursor(display.width()-2-6*5, lineSize);
    601a:	c6 01       	movw	r24, r12
    601c:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    6020:	bc 01       	movw	r22, r24
    6022:	60 52       	subi	r22, 0x20	; 32
    6024:	71 09       	sbc	r23, r1
    6026:	06 c0       	rjmp	.+12     	; 0x6034 <_ZN9red_beryl12menu_leituraEv+0x3bc>
				}
				else{
					display.setCursor(display.width()-2-6*6, lineSize);
    6028:	c6 01       	movw	r24, r12
    602a:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    602e:	bc 01       	movw	r22, r24
    6030:	66 52       	subi	r22, 0x26	; 38
    6032:	71 09       	sbc	r23, r1
    6034:	48 e0       	ldi	r20, 0x08	; 8
    6036:	50 e0       	ldi	r21, 0x00	; 0
    6038:	c6 01       	movw	r24, r12
    603a:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				}
				display.print(leitura0.freq/1000);
    603e:	f8 01       	movw	r30, r16
    6040:	60 81       	ld	r22, Z
    6042:	71 81       	ldd	r23, Z+1	; 0x01
    6044:	82 81       	ldd	r24, Z+2	; 0x02
    6046:	93 81       	ldd	r25, Z+3	; 0x03
    6048:	28 ee       	ldi	r18, 0xE8	; 232
    604a:	33 e0       	ldi	r19, 0x03	; 3
    604c:	40 e0       	ldi	r20, 0x00	; 0
    604e:	50 e0       	ldi	r21, 0x00	; 0
    6050:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <__udivmodsi4>
    6054:	ba 01       	movw	r22, r20
    6056:	a9 01       	movw	r20, r18
    6058:	2a e0       	ldi	r18, 0x0A	; 10
    605a:	30 e0       	ldi	r19, 0x00	; 0
    605c:	c6 01       	movw	r24, r12
    605e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <_ZN5Print5printEmi>
				display.print("KHz");
    6062:	67 e5       	ldi	r22, 0x57	; 87
    6064:	78 e0       	ldi	r23, 0x08	; 8
    6066:	c6 01       	movw	r24, r12
    6068:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				
				display.setCursor(1, lineSize*2);
    606c:	40 e1       	ldi	r20, 0x10	; 16
    606e:	50 e0       	ldi	r21, 0x00	; 0
    6070:	61 e0       	ldi	r22, 0x01	; 1
    6072:	70 e0       	ldi	r23, 0x00	; 0
    6074:	c6 01       	movw	r24, r12
    6076:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				display.print("  R:");
    607a:	6b e5       	ldi	r22, 0x5B	; 91
    607c:	78 e0       	ldi	r23, 0x08	; 8
    607e:	c6 01       	movw	r24, r12
    6080:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leitura0.real>=0)
    6084:	8e 01       	movw	r16, r28
    6086:	09 5b       	subi	r16, 0xB9	; 185
    6088:	1f 4f       	sbci	r17, 0xFF	; 255
    608a:	20 e0       	ldi	r18, 0x00	; 0
    608c:	30 e0       	ldi	r19, 0x00	; 0
    608e:	a9 01       	movw	r20, r18
    6090:	f8 01       	movw	r30, r16
    6092:	60 81       	ld	r22, Z
    6094:	71 81       	ldd	r23, Z+1	; 0x01
    6096:	82 81       	ldd	r24, Z+2	; 0x02
    6098:	93 81       	ldd	r25, Z+3	; 0x03
    609a:	0e 94 43 5d 	call	0xba86	; 0xba86 <__gesf2>
    609e:	87 fd       	sbrc	r24, 7
    60a0:	05 c0       	rjmp	.+10     	; 0x60ac <_ZN9red_beryl12menu_leituraEv+0x434>
				{
					display.print(" ");
    60a2:	6f eb       	ldi	r22, 0xBF	; 191
    60a4:	74 e0       	ldi	r23, 0x04	; 4
    60a6:	c6 01       	movw	r24, r12
    60a8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leitura0.real);
    60ac:	f8 01       	movw	r30, r16
    60ae:	40 81       	ld	r20, Z
    60b0:	51 81       	ldd	r21, Z+1	; 0x01
    60b2:	62 81       	ldd	r22, Z+2	; 0x02
    60b4:	73 81       	ldd	r23, Z+3	; 0x03
    60b6:	22 e0       	ldi	r18, 0x02	; 2
    60b8:	30 e0       	ldi	r19, 0x00	; 0
    60ba:	c6 01       	movw	r24, r12
    60bc:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Print5printEdi>
				display.setCursor(1, lineSize*3);
    60c0:	48 e1       	ldi	r20, 0x18	; 24
    60c2:	50 e0       	ldi	r21, 0x00	; 0
    60c4:	61 e0       	ldi	r22, 0x01	; 1
    60c6:	70 e0       	ldi	r23, 0x00	; 0
    60c8:	c6 01       	movw	r24, r12
    60ca:	0e 94 1b 52 	call	0xa436	; 0xa436 <_ZN12Adafruit_GFX9setCursorEii>
				display.print("  J:");
    60ce:	60 e6       	ldi	r22, 0x60	; 96
    60d0:	78 e0       	ldi	r23, 0x08	; 8
    60d2:	c6 01       	movw	r24, r12
    60d4:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				if(leitura0.imag>=0)
    60d8:	8e 01       	movw	r16, r28
    60da:	05 5b       	subi	r16, 0xB5	; 181
    60dc:	1f 4f       	sbci	r17, 0xFF	; 255
    60de:	20 e0       	ldi	r18, 0x00	; 0
    60e0:	30 e0       	ldi	r19, 0x00	; 0
    60e2:	a9 01       	movw	r20, r18
    60e4:	f8 01       	movw	r30, r16
    60e6:	60 81       	ld	r22, Z
    60e8:	71 81       	ldd	r23, Z+1	; 0x01
    60ea:	82 81       	ldd	r24, Z+2	; 0x02
    60ec:	93 81       	ldd	r25, Z+3	; 0x03
    60ee:	0e 94 43 5d 	call	0xba86	; 0xba86 <__gesf2>
    60f2:	87 fd       	sbrc	r24, 7
    60f4:	05 c0       	rjmp	.+10     	; 0x6100 <_ZN9red_beryl12menu_leituraEv+0x488>
				{
					display.print(" ");
    60f6:	6f eb       	ldi	r22, 0xBF	; 191
    60f8:	74 e0       	ldi	r23, 0x04	; 4
    60fa:	c6 01       	movw	r24, r12
    60fc:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				}
				display.print(leitura0.imag);
    6100:	f8 01       	movw	r30, r16
    6102:	40 81       	ld	r20, Z
    6104:	51 81       	ldd	r21, Z+1	; 0x01
    6106:	62 81       	ldd	r22, Z+2	; 0x02
    6108:	73 81       	ldd	r23, Z+3	; 0x03
    610a:	22 e0       	ldi	r18, 0x02	; 2
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	c6 01       	movw	r24, r12
    6110:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Print5printEdi>
			}
			
			if(_yes){
    6114:	88 89       	ldd	r24, Y+16	; 0x10
    6116:	88 23       	and	r24, r24
    6118:	09 f4       	brne	.+2      	; 0x611c <_ZN9red_beryl12menu_leituraEv+0x4a4>
    611a:	2a c1       	rjmp	.+596    	; 0x6370 <_ZN9red_beryl12menu_leituraEv+0x6f8>
				if(!done){
    611c:	80 91 40 13 	lds	r24, 0x1340	; 0x801340 <_ZZN9red_beryl12menu_leituraEvE4done>
    6120:	81 11       	cpse	r24, r1
    6122:	1d c1       	rjmp	.+570    	; 0x635e <_ZN9red_beryl12menu_leituraEv+0x6e6>
					warning("Configurando", "frequencia.");
    6124:	45 ed       	ldi	r20, 0xD5	; 213
    6126:	5a e0       	ldi	r21, 0x0A	; 10
    6128:	65 e6       	ldi	r22, 0x65	; 101
    612a:	78 e0       	ldi	r23, 0x08	; 8
    612c:	ce 01       	movw	r24, r28
    612e:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <_ZN9red_beryl7warningEPKcS1_>
					upperBar();
    6132:	ce 01       	movw	r24, r28
    6134:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN9red_beryl8upperBarEv>
					display.display();
    6138:	c6 01       	movw	r24, r12
    613a:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16Adafruit_SSD13067displayEv>
					while(!crystal.configurar(frequencia)){
    613e:	8e 01       	movw	r16, r28
    6140:	02 54       	subi	r16, 0x42	; 66
    6142:	1f 4f       	sbci	r17, 0xFF	; 255
    6144:	40 91 27 04 	lds	r20, 0x0427	; 0x800427 <_ZZN9red_beryl12menu_leituraEvE10frequencia>
    6148:	50 91 28 04 	lds	r21, 0x0428	; 0x800428 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x1>
    614c:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x2>
    6150:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <_ZZN9red_beryl12menu_leituraEvE10frequencia+0x3>
    6154:	c8 01       	movw	r24, r16
    6156:	c2 d3       	rcall	.+1924   	; 0x68dc <_ZN11red_crystal10configurarEl>
    6158:	81 11       	cpse	r24, r1
    615a:	07 c0       	rjmp	.+14     	; 0x616a <_ZN9red_beryl12menu_leituraEv+0x4f2>
						Serial.println("Configurando...");
    615c:	62 e7       	ldi	r22, 0x72	; 114
    615e:	78 e0       	ldi	r23, 0x08	; 8
    6160:	80 ec       	ldi	r24, 0xC0	; 192
    6162:	90 e1       	ldi	r25, 0x10	; 16
    6164:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
			if(_yes){
				if(!done){
					warning("Configurando", "frequencia.");
					upperBar();
					display.display();
					while(!crystal.configurar(frequencia)){
    6168:	ed cf       	rjmp	.-38     	; 0x6144 <_ZN9red_beryl12menu_leituraEv+0x4cc>
						Serial.println("Configurando...");
					}
					warning("Realizando", "leitura.");
    616a:	42 eb       	ldi	r20, 0xB2	; 178
    616c:	5c e0       	ldi	r21, 0x0C	; 12
    616e:	62 e8       	ldi	r22, 0x82	; 130
    6170:	78 e0       	ldi	r23, 0x08	; 8
    6172:	ce 01       	movw	r24, r28
    6174:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <_ZN9red_beryl7warningEPKcS1_>
					upperBar();
    6178:	ce 01       	movw	r24, r28
    617a:	0e 94 91 20 	call	0x4122	; 0x4122 <_ZN9red_beryl8upperBarEv>
					display.display();
    617e:	c6 01       	movw	r24, r12
    6180:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN16Adafruit_SSD13067displayEv>
					if(!crystal.lerAD(getPoint(), leitura0))
    6184:	7e 01       	movw	r14, r28
    6186:	f3 e4       	ldi	r31, 0x43	; 67
    6188:	ef 0e       	add	r14, r31
    618a:	f1 1c       	adc	r15, r1
    618c:	6c 85       	ldd	r22, Y+12	; 0x0c
    618e:	7d 85       	ldd	r23, Y+13	; 0x0d
    6190:	a7 01       	movw	r20, r14
    6192:	c8 01       	movw	r24, r16
    6194:	af d4       	rcall	.+2398   	; 0x6af4 <_ZN11red_crystal5lerADEiR8leituras>
    6196:	81 11       	cpse	r24, r1
    6198:	04 c0       	rjmp	.+8      	; 0x61a2 <_ZN9red_beryl12menu_leituraEv+0x52a>
					{
						_yes = false;
    619a:	18 8a       	std	Y+16, r1	; 0x10
						done=false;
    619c:	10 92 40 13 	sts	0x1340, r1	; 0x801340 <_ZZN9red_beryl12menu_leituraEvE4done>
    61a0:	e1 c0       	rjmp	.+450    	; 0x6364 <_ZN9red_beryl12menu_leituraEv+0x6ec>
						choice = 1;
					}
					else
					{				
						leitura0.hora=clock.hora();
    61a2:	8e 01       	movw	r16, r28
    61a4:	0f 54       	subi	r16, 0x4F	; 79
    61a6:	1f 4f       	sbci	r17, 0xFF	; 255
    61a8:	c8 01       	movw	r24, r16
    61aa:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <_ZN10red_quartz4horaEv>
    61ae:	4e 01       	movw	r8, r28
    61b0:	27 ea       	ldi	r18, 0xA7	; 167
    61b2:	82 0e       	add	r8, r18
    61b4:	91 1c       	adc	r9, r1
    61b6:	f4 01       	movw	r30, r8
    61b8:	91 83       	std	Z+1, r25	; 0x01
    61ba:	80 83       	st	Z, r24
						leitura0.minuto=clock.minuto();
    61bc:	c8 01       	movw	r24, r16
    61be:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <_ZN10red_quartz6minutoEv>
    61c2:	5e 01       	movw	r10, r28
    61c4:	f9 ea       	ldi	r31, 0xA9	; 169
    61c6:	af 0e       	add	r10, r31
    61c8:	b1 1c       	adc	r11, r1
    61ca:	f5 01       	movw	r30, r10
    61cc:	91 83       	std	Z+1, r25	; 0x01
    61ce:	80 83       	st	Z, r24
						leitura0.dia=clock.dia();
    61d0:	c8 01       	movw	r24, r16
    61d2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <_ZN10red_quartz3diaEv>
    61d6:	6e 01       	movw	r12, r28
    61d8:	fb ea       	ldi	r31, 0xAB	; 171
    61da:	cf 0e       	add	r12, r31
    61dc:	d1 1c       	adc	r13, r1
    61de:	f6 01       	movw	r30, r12
    61e0:	91 83       	std	Z+1, r25	; 0x01
    61e2:	80 83       	st	Z, r24
						leitura0.mes=clock.mes();
    61e4:	c8 01       	movw	r24, r16
    61e6:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <_ZN10red_quartz3mesEv>
    61ea:	3e 01       	movw	r6, r28
    61ec:	fd ea       	ldi	r31, 0xAD	; 173
    61ee:	6f 0e       	add	r6, r31
    61f0:	71 1c       	adc	r7, r1
    61f2:	f3 01       	movw	r30, r6
    61f4:	91 83       	std	Z+1, r25	; 0x01
    61f6:	80 83       	st	Z, r24
						leitura0.ano=clock.ano();
    61f8:	c8 01       	movw	r24, r16
    61fa:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <_ZN10red_quartz3anoEv>
    61fe:	02 50       	subi	r16, 0x02	; 2
    6200:	11 09       	sbc	r17, r1
    6202:	f8 01       	movw	r30, r16
    6204:	91 83       	std	Z+1, r25	; 0x01
    6206:	80 83       	st	Z, r24
								
						Serial.println(leitura0.hora);
    6208:	f4 01       	movw	r30, r8
    620a:	60 81       	ld	r22, Z
    620c:	71 81       	ldd	r23, Z+1	; 0x01
    620e:	4a e0       	ldi	r20, 0x0A	; 10
    6210:	50 e0       	ldi	r21, 0x00	; 0
    6212:	80 ec       	ldi	r24, 0xC0	; 192
    6214:	90 e1       	ldi	r25, 0x10	; 16
    6216:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
						Serial.println(leitura0.minuto);
    621a:	f5 01       	movw	r30, r10
    621c:	60 81       	ld	r22, Z
    621e:	71 81       	ldd	r23, Z+1	; 0x01
    6220:	4a e0       	ldi	r20, 0x0A	; 10
    6222:	50 e0       	ldi	r21, 0x00	; 0
    6224:	80 ec       	ldi	r24, 0xC0	; 192
    6226:	90 e1       	ldi	r25, 0x10	; 16
    6228:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
						Serial.println(leitura0.dia);
    622c:	f6 01       	movw	r30, r12
    622e:	60 81       	ld	r22, Z
    6230:	71 81       	ldd	r23, Z+1	; 0x01
    6232:	4a e0       	ldi	r20, 0x0A	; 10
    6234:	50 e0       	ldi	r21, 0x00	; 0
    6236:	80 ec       	ldi	r24, 0xC0	; 192
    6238:	90 e1       	ldi	r25, 0x10	; 16
    623a:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
						Serial.println(leitura0.mes);
    623e:	f3 01       	movw	r30, r6
    6240:	60 81       	ld	r22, Z
    6242:	71 81       	ldd	r23, Z+1	; 0x01
    6244:	4a e0       	ldi	r20, 0x0A	; 10
    6246:	50 e0       	ldi	r21, 0x00	; 0
    6248:	80 ec       	ldi	r24, 0xC0	; 192
    624a:	90 e1       	ldi	r25, 0x10	; 16
    624c:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
						Serial.println(leitura0.ano);
    6250:	f8 01       	movw	r30, r16
    6252:	60 81       	ld	r22, Z
    6254:	71 81       	ldd	r23, Z+1	; 0x01
    6256:	4a e0       	ldi	r20, 0x0A	; 10
    6258:	50 e0       	ldi	r21, 0x00	; 0
    625a:	80 ec       	ldi	r24, 0xC0	; 192
    625c:	90 e1       	ldi	r25, 0x10	; 16
    625e:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
						done=true;
    6262:	81 e0       	ldi	r24, 0x01	; 1
    6264:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <_ZZN9red_beryl12menu_leituraEvE4done>
					
						static int limit = ((EEPROM.length()-3)/sizeof(leitura));
    6268:	90 91 69 13 	lds	r25, 0x1369	; 0x801369 <_ZGVZN9red_beryl12menu_leituraEvE5limit>
    626c:	91 11       	cpse	r25, r1
    626e:	08 c0       	rjmp	.+16     	; 0x6280 <_ZN9red_beryl12menu_leituraEv+0x608>
    6270:	25 e2       	ldi	r18, 0x25	; 37
    6272:	30 e0       	ldi	r19, 0x00	; 0
    6274:	30 93 3f 13 	sts	0x133F, r19	; 0x80133f <_ZZN9red_beryl12menu_leituraEvE5limit+0x1>
    6278:	20 93 3e 13 	sts	0x133E, r18	; 0x80133e <_ZZN9red_beryl12menu_leituraEvE5limit>
    627c:	80 93 69 13 	sts	0x1369, r24	; 0x801369 <_ZGVZN9red_beryl12menu_leituraEvE5limit>

						if(EEPROM.read(0)>=limit)												// Se o numero de leitura for superior ao limite de memoria.
    6280:	80 e0       	ldi	r24, 0x00	; 0
    6282:	90 e0       	ldi	r25, 0x00	; 0
    6284:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    6288:	08 2f       	mov	r16, r24
    628a:	10 e0       	ldi	r17, 0x00	; 0
    628c:	20 91 3e 13 	lds	r18, 0x133E	; 0x80133e <_ZZN9red_beryl12menu_leituraEvE5limit>
    6290:	30 91 3f 13 	lds	r19, 0x133F	; 0x80133f <_ZZN9red_beryl12menu_leituraEvE5limit+0x1>
    6294:	02 17       	cp	r16, r18
    6296:	13 07       	cpc	r17, r19
    6298:	bc f1       	brlt	.+110    	; 0x6308 <_ZN9red_beryl12menu_leituraEv+0x690>
						{
							int tempPos=EEPROM.read(0)-limit;									// Cria uma variavel temporaria que recebe o valor de posição.
    629a:	02 1b       	sub	r16, r18
    629c:	13 0b       	sbc	r17, r19
							if(tempPos>=limit)
    629e:	02 17       	cp	r16, r18
    62a0:	13 07       	cpc	r17, r19
    62a2:	14 f0       	brlt	.+4      	; 0x62a8 <_ZN9red_beryl12menu_leituraEv+0x630>
							{
								tempPos-=limit;
    62a4:	02 1b       	sub	r16, r18
    62a6:	13 0b       	sbc	r17, r19
							}
							EEPROM.put((tempPos*sizeof(leitura))+1, leitura0);
    62a8:	2e e6       	ldi	r18, 0x6E	; 110
    62aa:	20 9f       	mul	r18, r16
    62ac:	c0 01       	movw	r24, r0
    62ae:	21 9f       	mul	r18, r17
    62b0:	90 0d       	add	r25, r0
    62b2:	11 24       	eor	r1, r1
    62b4:	b7 01       	movw	r22, r14
    62b6:	01 96       	adiw	r24, 0x01	; 1
    62b8:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.4>
							Serial.print("Sobreescreveu na posição ");
    62bc:	6d e8       	ldi	r22, 0x8D	; 141
    62be:	78 e0       	ldi	r23, 0x08	; 8
    62c0:	80 ec       	ldi	r24, 0xC0	; 192
    62c2:	90 e1       	ldi	r25, 0x10	; 16
    62c4:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
							Serial.print(tempPos+1);
    62c8:	b8 01       	movw	r22, r16
    62ca:	6f 5f       	subi	r22, 0xFF	; 255
    62cc:	7f 4f       	sbci	r23, 0xFF	; 255
    62ce:	4a e0       	ldi	r20, 0x0A	; 10
    62d0:	50 e0       	ldi	r21, 0x00	; 0
    62d2:	80 ec       	ldi	r24, 0xC0	; 192
    62d4:	90 e1       	ldi	r25, 0x10	; 16
    62d6:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
							Serial.println(".");
    62da:	62 e0       	ldi	r22, 0x02	; 2
    62dc:	77 e0       	ldi	r23, 0x07	; 7
    62de:	80 ec       	ldi	r24, 0xC0	; 192
    62e0:	90 e1       	ldi	r25, 0x10	; 16
    62e2:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
							if(EEPROM.read(0)>=limit*2)
    62e6:	80 e0       	ldi	r24, 0x00	; 0
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    62ee:	60 91 3e 13 	lds	r22, 0x133E	; 0x80133e <_ZZN9red_beryl12menu_leituraEvE5limit>
    62f2:	70 91 3f 13 	lds	r23, 0x133F	; 0x80133f <_ZZN9red_beryl12menu_leituraEvE5limit+0x1>
    62f6:	48 2f       	mov	r20, r24
    62f8:	50 e0       	ldi	r21, 0x00	; 0
    62fa:	9b 01       	movw	r18, r22
    62fc:	22 0f       	add	r18, r18
    62fe:	33 1f       	adc	r19, r19
    6300:	42 17       	cp	r20, r18
    6302:	53 07       	cpc	r21, r19
    6304:	0c f1       	brlt	.+66     	; 0x6348 <_ZN9red_beryl12menu_leituraEv+0x6d0>
    6306:	22 c0       	rjmp	.+68     	; 0x634c <_ZN9red_beryl12menu_leituraEv+0x6d4>
							else
								EEPROM.write(0, EEPROM.read(0)+1);
						}
						else
						{
							EEPROM.put( ( ( EEPROM.read(0)*sizeof(leitura) )+1)  , leitura0);  		//salva a nova leitura na EEPROM.
    6308:	fe e6       	ldi	r31, 0x6E	; 110
    630a:	8f 9f       	mul	r24, r31
    630c:	c0 01       	movw	r24, r0
    630e:	11 24       	eor	r1, r1
    6310:	b7 01       	movw	r22, r14
    6312:	01 96       	adiw	r24, 0x01	; 1
    6314:	0e 94 16 10 	call	0x202c	; 0x202c <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.4>
							Serial.println("Salvo na EEPROM ");
    6318:	69 ea       	ldi	r22, 0xA9	; 169
    631a:	78 e0       	ldi	r23, 0x08	; 8
    631c:	80 ec       	ldi	r24, 0xC0	; 192
    631e:	90 e1       	ldi	r25, 0x10	; 16
    6320:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
							Serial.print(EEPROM.read(0)+1);
    6324:	80 e0       	ldi	r24, 0x00	; 0
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    632c:	68 2f       	mov	r22, r24
    632e:	70 e0       	ldi	r23, 0x00	; 0
    6330:	6f 5f       	subi	r22, 0xFF	; 255
    6332:	7f 4f       	sbci	r23, 0xFF	; 255
    6334:	4a e0       	ldi	r20, 0x0A	; 10
    6336:	50 e0       	ldi	r21, 0x00	; 0
    6338:	80 ec       	ldi	r24, 0xC0	; 192
    633a:	90 e1       	ldi	r25, 0x10	; 16
    633c:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
							EEPROM.write(0 , ( EEPROM.read(0)+1 ));    							//o valor da posição '0' recebe 'i'.
    6340:	80 e0       	ldi	r24, 0x00	; 0
    6342:	90 e0       	ldi	r25, 0x00	; 0
    6344:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <_ZN11EEPROMClass4readEi.isra.0>
    6348:	61 e0       	ldi	r22, 0x01	; 1
    634a:	68 0f       	add	r22, r24
    634c:	80 e0       	ldi	r24, 0x00	; 0
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <_ZN11EEPROMClass5writeEih.isra.1>
						}
						_yes=false;
    6354:	18 8a       	std	Y+16, r1	; 0x10
						done=true;
    6356:	81 e0       	ldi	r24, 0x01	; 1
    6358:	80 93 40 13 	sts	0x1340, r24	; 0x801340 <_ZZN9red_beryl12menu_leituraEvE4done>
    635c:	09 c0       	rjmp	.+18     	; 0x6370 <_ZN9red_beryl12menu_leituraEv+0x6f8>
					}
				}
				else{
					done=false;
    635e:	10 92 40 13 	sts	0x1340, r1	; 0x801340 <_ZZN9red_beryl12menu_leituraEvE4done>
					_yes=false;
    6362:	18 8a       	std	Y+16, r1	; 0x10
					choice=1;
    6364:	81 e0       	ldi	r24, 0x01	; 1
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    636c:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
				}
			}
			if(_no)
    6370:	89 89       	ldd	r24, Y+17	; 0x11
    6372:	88 23       	and	r24, r24
    6374:	59 f0       	breq	.+22     	; 0x638c <_ZN9red_beryl12menu_leituraEv+0x714>
			{
				if(done)
    6376:	90 91 40 13 	lds	r25, 0x1340	; 0x801340 <_ZZN9red_beryl12menu_leituraEvE4done>
    637a:	91 11       	cpse	r25, r1
				{
					done=false;
    637c:	10 92 40 13 	sts	0x1340, r1	; 0x801340 <_ZZN9red_beryl12menu_leituraEvE4done>
				}
				choice=1;
    6380:	21 e0       	ldi	r18, 0x01	; 1
    6382:	30 e0       	ldi	r19, 0x00	; 0
    6384:	30 93 2c 04 	sts	0x042C, r19	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    6388:	20 93 2b 04 	sts	0x042B, r18	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
			}
			if(_up || _down || _yes || _no){
    638c:	9e 85       	ldd	r25, Y+14	; 0x0e
    638e:	91 11       	cpse	r25, r1
    6390:	09 c0       	rjmp	.+18     	; 0x63a4 <_ZN9red_beryl12menu_leituraEv+0x72c>
    6392:	9f 85       	ldd	r25, Y+15	; 0x0f
    6394:	91 11       	cpse	r25, r1
    6396:	06 c0       	rjmp	.+12     	; 0x63a4 <_ZN9red_beryl12menu_leituraEv+0x72c>
    6398:	98 89       	ldd	r25, Y+16	; 0x10
    639a:	91 11       	cpse	r25, r1
    639c:	03 c0       	rjmp	.+6      	; 0x63a4 <_ZN9red_beryl12menu_leituraEv+0x72c>
    639e:	88 23       	and	r24, r24
    63a0:	09 f4       	brne	.+2      	; 0x63a4 <_ZN9red_beryl12menu_leituraEv+0x72c>
    63a2:	90 c0       	rjmp	.+288    	; 0x64c4 <_ZN9red_beryl12menu_leituraEv+0x84c>
				_up=false;
    63a4:	1e 86       	std	Y+14, r1	; 0x0e
				_down=false;
    63a6:	1f 86       	std	Y+15, r1	; 0x0f
				_yes=false;
    63a8:	18 8a       	std	Y+16, r1	; 0x10
    63aa:	40 c0       	rjmp	.+128    	; 0x642c <_ZN9red_beryl12menu_leituraEv+0x7b4>
			}
			break;
		}
		case 21:		//Historico
		{
			if(historico())
    63ac:	ce 01       	movw	r24, r28
    63ae:	0e 94 cf 28 	call	0x519e	; 0x519e <_ZN9red_beryl9historicoEv>
    63b2:	88 23       	and	r24, r24
    63b4:	09 f4       	brne	.+2      	; 0x63b8 <_ZN9red_beryl12menu_leituraEv+0x740>
    63b6:	74 c0       	rjmp	.+232    	; 0x64a0 <_ZN9red_beryl12menu_leituraEv+0x828>
			{
				choice = 2;
    63b8:	82 e0       	ldi	r24, 0x02	; 2
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    63c0:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
    63c4:	6d c0       	rjmp	.+218    	; 0x64a0 <_ZN9red_beryl12menu_leituraEv+0x828>
			}
			break;
		}
		case 1:			//Opção Nova leitura
		{
			display.fillRect(1, lineSize, display.width()-5, lineSize, WHITE);  //desenha um quadrado em volta da opção 1 selecionada
    63c6:	6e 01       	movw	r12, r28
    63c8:	25 e1       	ldi	r18, 0x15	; 21
    63ca:	c2 0e       	add	r12, r18
    63cc:	d1 1c       	adc	r13, r1
    63ce:	c6 01       	movw	r24, r12
    63d0:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    63d4:	9c 01       	movw	r18, r24
    63d6:	25 50       	subi	r18, 0x05	; 5
    63d8:	31 09       	sbc	r19, r1
    63da:	ee 24       	eor	r14, r14
    63dc:	e3 94       	inc	r14
    63de:	f1 2c       	mov	r15, r1
    63e0:	08 e0       	ldi	r16, 0x08	; 8
    63e2:	10 e0       	ldi	r17, 0x00	; 0
    63e4:	48 e0       	ldi	r20, 0x08	; 8
    63e6:	50 e0       	ldi	r21, 0x00	; 0
    63e8:	61 e0       	ldi	r22, 0x01	; 1
    63ea:	70 e0       	ldi	r23, 0x00	; 0
    63ec:	c6 01       	movw	r24, r12
    63ee:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>
			menuOption(menu[1], 1, true);
    63f2:	21 e0       	ldi	r18, 0x01	; 1
    63f4:	41 e0       	ldi	r20, 0x01	; 1
    63f6:	50 e0       	ldi	r21, 0x00	; 0
    63f8:	6a eb       	ldi	r22, 0xBA	; 186
    63fa:	78 e0       	ldi	r23, 0x08	; 8
    63fc:	ce 01       	movw	r24, r28
    63fe:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			menuOption(menu[2], 2, false);
    6402:	20 e0       	ldi	r18, 0x00	; 0
    6404:	42 e0       	ldi	r20, 0x02	; 2
    6406:	50 e0       	ldi	r21, 0x00	; 0
    6408:	69 ec       	ldi	r22, 0xC9	; 201
    640a:	78 e0       	ldi	r23, 0x08	; 8
    640c:	ce 01       	movw	r24, r28
    640e:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			
			if(_yes){
    6412:	88 89       	ldd	r24, Y+16	; 0x10
    6414:	88 23       	and	r24, r24
    6416:	09 f4       	brne	.+2      	; 0x641a <_ZN9red_beryl12menu_leituraEv+0x7a2>
    6418:	43 c0       	rjmp	.+134    	; 0x64a0 <_ZN9red_beryl12menu_leituraEv+0x828>
				choice=11;
    641a:	8b e0       	ldi	r24, 0x0B	; 11
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    6422:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
				_yes=false;
    6426:	18 8a       	std	Y+16, r1	; 0x10
				
				_up=false;
    6428:	1e 86       	std	Y+14, r1	; 0x0e
				_down=false;
    642a:	1f 86       	std	Y+15, r1	; 0x0f
				_no=false;
    642c:	19 8a       	std	Y+17, r1	; 0x11
    642e:	38 c0       	rjmp	.+112    	; 0x64a0 <_ZN9red_beryl12menu_leituraEv+0x828>
			}
			break;
		}
		case 2:			//Opção Historico
		{
			menuOption(menu[1], 1, false);
    6430:	20 e0       	ldi	r18, 0x00	; 0
    6432:	41 e0       	ldi	r20, 0x01	; 1
    6434:	50 e0       	ldi	r21, 0x00	; 0
    6436:	6a eb       	ldi	r22, 0xBA	; 186
    6438:	78 e0       	ldi	r23, 0x08	; 8
    643a:	ce 01       	movw	r24, r28
    643c:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			
			display.fillRect(1, lineSize*2, display.width()-5, lineSize, WHITE);//desenha um quadrado em volta da opção 1 selecionada
    6440:	6e 01       	movw	r12, r28
    6442:	35 e1       	ldi	r19, 0x15	; 21
    6444:	c3 0e       	add	r12, r19
    6446:	d1 1c       	adc	r13, r1
    6448:	c6 01       	movw	r24, r12
    644a:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    644e:	9c 01       	movw	r18, r24
    6450:	25 50       	subi	r18, 0x05	; 5
    6452:	31 09       	sbc	r19, r1
    6454:	ee 24       	eor	r14, r14
    6456:	e3 94       	inc	r14
    6458:	f1 2c       	mov	r15, r1
    645a:	08 e0       	ldi	r16, 0x08	; 8
    645c:	10 e0       	ldi	r17, 0x00	; 0
    645e:	40 e1       	ldi	r20, 0x10	; 16
    6460:	50 e0       	ldi	r21, 0x00	; 0
    6462:	61 e0       	ldi	r22, 0x01	; 1
    6464:	70 e0       	ldi	r23, 0x00	; 0
    6466:	c6 01       	movw	r24, r12
    6468:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>
			menuOption(menu[2], 2, true);
    646c:	21 e0       	ldi	r18, 0x01	; 1
    646e:	42 e0       	ldi	r20, 0x02	; 2
    6470:	50 e0       	ldi	r21, 0x00	; 0
    6472:	69 ec       	ldi	r22, 0xC9	; 201
    6474:	78 e0       	ldi	r23, 0x08	; 8
    6476:	ce 01       	movw	r24, r28
    6478:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			
			if(_yes){
    647c:	88 89       	ldd	r24, Y+16	; 0x10
    647e:	88 23       	and	r24, r24
    6480:	79 f0       	breq	.+30     	; 0x64a0 <_ZN9red_beryl12menu_leituraEv+0x828>
				choice=21;
    6482:	85 e1       	ldi	r24, 0x15	; 21
    6484:	90 e0       	ldi	r25, 0x00	; 0
    6486:	cb cf       	rjmp	.-106    	; 0x641e <_ZN9red_beryl12menu_leituraEv+0x7a6>
			
			break;
		}
		default:		//Se por alguma razão algo estiver diferente.
		{
			choice=1;
    6488:	81 e0       	ldi	r24, 0x01	; 1
    648a:	90 e0       	ldi	r25, 0x00	; 0
    648c:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    6490:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
			Serial.println("CUIDADO, algo deu errado, choice resetado para 1");
    6494:	65 ed       	ldi	r22, 0xD5	; 213
    6496:	78 e0       	ldi	r23, 0x08	; 8
    6498:	80 ec       	ldi	r24, 0xC0	; 192
    649a:	90 e1       	ldi	r25, 0x10	; 16
    649c:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
			break;
		}
	}
	if(_up){
    64a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    64a2:	88 23       	and	r24, r24
    64a4:	79 f0       	breq	.+30     	; 0x64c4 <_ZN9red_beryl12menu_leituraEv+0x84c>
		choice--;
    64a6:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
    64aa:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    64ae:	01 97       	sbiw	r24, 0x01	; 1
		if(choice < 1){
    64b0:	18 16       	cp	r1, r24
    64b2:	19 06       	cpc	r1, r25
    64b4:	14 f0       	brlt	.+4      	; 0x64ba <_ZN9red_beryl12menu_leituraEv+0x842>
			choice = 2;
    64b6:	82 e0       	ldi	r24, 0x02	; 2
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    64be:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
		}
		_up=false;
    64c2:	1e 86       	std	Y+14, r1	; 0x0e
	}
	if(_down){
    64c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    64c6:	88 23       	and	r24, r24
    64c8:	79 f0       	breq	.+30     	; 0x64e8 <_ZN9red_beryl12menu_leituraEv+0x870>
		choice++;
    64ca:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
    64ce:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    64d2:	01 96       	adiw	r24, 0x01	; 1
		if(choice > 2){
    64d4:	83 30       	cpi	r24, 0x03	; 3
    64d6:	91 05       	cpc	r25, r1
    64d8:	14 f0       	brlt	.+4      	; 0x64de <_ZN9red_beryl12menu_leituraEv+0x866>
			choice = 1;
    64da:	81 e0       	ldi	r24, 0x01	; 1
    64dc:	90 e0       	ldi	r25, 0x00	; 0
    64de:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    64e2:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
		}
		_down=false;
    64e6:	1f 86       	std	Y+15, r1	; 0x0f
	}
	if(_yes){
    64e8:	88 89       	ldd	r24, Y+16	; 0x10
    64ea:	81 11       	cpse	r24, r1
		_yes=false;
    64ec:	18 8a       	std	Y+16, r1	; 0x10
	}
	if(_no){
    64ee:	89 89       	ldd	r24, Y+17	; 0x11
    64f0:	88 23       	and	r24, r24
    64f2:	49 f0       	breq	.+18     	; 0x6506 <_ZN9red_beryl12menu_leituraEv+0x88e>
		_no=false;
    64f4:	19 8a       	std	Y+17, r1	; 0x11
		choice=1;
    64f6:	81 e0       	ldi	r24, 0x01	; 1
    64f8:	90 e0       	ldi	r25, 0x00	; 0
    64fa:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <_ZZN9red_beryl12menu_leituraEvE6choice+0x1>
    64fe:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <_ZZN9red_beryl12menu_leituraEvE6choice>
		return false;
    6502:	80 e0       	ldi	r24, 0x00	; 0
    6504:	01 c0       	rjmp	.+2      	; 0x6508 <_ZN9red_beryl12menu_leituraEv+0x890>
	}
	return true;
    6506:	81 e0       	ldi	r24, 0x01	; 1
}
    6508:	df 91       	pop	r29
    650a:	cf 91       	pop	r28
    650c:	1f 91       	pop	r17
    650e:	0f 91       	pop	r16
    6510:	ff 90       	pop	r15
    6512:	ef 90       	pop	r14
    6514:	df 90       	pop	r13
    6516:	cf 90       	pop	r12
    6518:	bf 90       	pop	r11
    651a:	af 90       	pop	r10
    651c:	9f 90       	pop	r9
    651e:	8f 90       	pop	r8
    6520:	7f 90       	pop	r7
    6522:	6f 90       	pop	r6
    6524:	08 95       	ret

00006526 <_ZN9red_beryl4menuEv>:
			display.print("OK");
		}
	}
}
void red_beryl::menu()
{
    6526:	cf 92       	push	r12
    6528:	df 92       	push	r13
    652a:	ef 92       	push	r14
    652c:	ff 92       	push	r15
    652e:	0f 93       	push	r16
    6530:	1f 93       	push	r17
    6532:	cf 93       	push	r28
    6534:	df 93       	push	r29
    6536:	ec 01       	movw	r28, r24
	static int choice=1;
	static char* menu[] = { (char*)"0.default", (char*)"1.Leituras", (char*)"2.Sincronizar", (char*)"3.Ajustes" };
	switch(choice){
    6538:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZZN9red_beryl4menuEvE6choice>
    653c:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <_ZZN9red_beryl4menuEvE6choice+0x1>
    6540:	83 30       	cpi	r24, 0x03	; 3
    6542:	91 05       	cpc	r25, r1
    6544:	09 f4       	brne	.+2      	; 0x6548 <_ZN9red_beryl4menuEv+0x22>
    6546:	90 c0       	rjmp	.+288    	; 0x6668 <_ZN9red_beryl4menuEv+0x142>
    6548:	3c f4       	brge	.+14     	; 0x6558 <_ZN9red_beryl4menuEv+0x32>
    654a:	81 30       	cpi	r24, 0x01	; 1
    654c:	91 05       	cpc	r25, r1
    654e:	c9 f1       	breq	.+114    	; 0x65c2 <_ZN9red_beryl4menuEv+0x9c>
    6550:	02 97       	sbiw	r24, 0x02	; 2
    6552:	09 f4       	brne	.+2      	; 0x6556 <_ZN9red_beryl4menuEv+0x30>
    6554:	6b c0       	rjmp	.+214    	; 0x662c <_ZN9red_beryl4menuEv+0x106>
    6556:	bf c0       	rjmp	.+382    	; 0x66d6 <_ZN9red_beryl4menuEv+0x1b0>
    6558:	85 31       	cpi	r24, 0x15	; 21
    655a:	91 05       	cpc	r25, r1
    655c:	11 f1       	breq	.+68     	; 0x65a2 <_ZN9red_beryl4menuEv+0x7c>
    655e:	8f 31       	cpi	r24, 0x1F	; 31
    6560:	91 05       	cpc	r25, r1
    6562:	39 f1       	breq	.+78     	; 0x65b2 <_ZN9red_beryl4menuEv+0x8c>
    6564:	0b 97       	sbiw	r24, 0x0b	; 11
    6566:	09 f0       	breq	.+2      	; 0x656a <_ZN9red_beryl4menuEv+0x44>
    6568:	b6 c0       	rjmp	.+364    	; 0x66d6 <_ZN9red_beryl4menuEv+0x1b0>
		case 11:		//Menu Leituras
		{
			if(!menu_leitura()){		//chama a função [bool] menu_leitura, se retornar [false], retorna a opção 1 do menu.
    656a:	ce 01       	movw	r24, r28
    656c:	85 db       	rcall	.-2294   	; 0x5c78 <_ZN9red_beryl12menu_leituraEv>
    656e:	81 11       	cpse	r24, r1
    6570:	06 c0       	rjmp	.+12     	; 0x657e <_ZN9red_beryl4menuEv+0x58>
				choice = 1;
    6572:	81 e0       	ldi	r24, 0x01	; 1
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <_ZZN9red_beryl4menuEvE6choice+0x1>
    657a:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <_ZZN9red_beryl4menuEvE6choice>
			}
			if(_up || _down || _yes || _no){
    657e:	8e 85       	ldd	r24, Y+14	; 0x0e
    6580:	81 11       	cpse	r24, r1
    6582:	0a c0       	rjmp	.+20     	; 0x6598 <_ZN9red_beryl4menuEv+0x72>
    6584:	8f 85       	ldd	r24, Y+15	; 0x0f
    6586:	81 11       	cpse	r24, r1
    6588:	07 c0       	rjmp	.+14     	; 0x6598 <_ZN9red_beryl4menuEv+0x72>
    658a:	88 89       	ldd	r24, Y+16	; 0x10
    658c:	81 11       	cpse	r24, r1
    658e:	04 c0       	rjmp	.+8      	; 0x6598 <_ZN9red_beryl4menuEv+0x72>
    6590:	89 89       	ldd	r24, Y+17	; 0x11
    6592:	88 23       	and	r24, r24
    6594:	09 f4       	brne	.+2      	; 0x6598 <_ZN9red_beryl4menuEv+0x72>
    6596:	b1 c0       	rjmp	.+354    	; 0x66fa <_ZN9red_beryl4menuEv+0x1d4>
				_up=false;
    6598:	1e 86       	std	Y+14, r1	; 0x0e
				_down=false;
    659a:	1f 86       	std	Y+15, r1	; 0x0f
				_yes=false;
    659c:	18 8a       	std	Y+16, r1	; 0x10
				_no=false;
    659e:	19 8a       	std	Y+17, r1	; 0x11
    65a0:	9a c0       	rjmp	.+308    	; 0x66d6 <_ZN9red_beryl4menuEv+0x1b0>
			}
			break;
		}
		case 21:		//Menu Sincronização(bluetooth)
		{
			if(!menu_sinc()){		//chama a função [bool] menu_sinc, se retornar [false], retorna a opção 2 do menu.
    65a2:	ce 01       	movw	r24, r28
    65a4:	0e 94 72 10 	call	0x20e4	; 0x20e4 <_ZN9red_beryl9menu_sincEv>
    65a8:	81 11       	cpse	r24, r1
    65aa:	95 c0       	rjmp	.+298    	; 0x66d6 <_ZN9red_beryl4menuEv+0x1b0>
				choice = 2;
    65ac:	82 e0       	ldi	r24, 0x02	; 2
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	8e c0       	rjmp	.+284    	; 0x66ce <_ZN9red_beryl4menuEv+0x1a8>
			}
			break;
		}
		case 31:		//Menu Ajustes
		{
			if(!menu_ajuste()){		//chama a função [bool] menu_ajuste, se retornar [false], retorna a opção 3 do menu.
    65b2:	ce 01       	movw	r24, r28
    65b4:	0e 94 96 1d 	call	0x3b2c	; 0x3b2c <_ZN9red_beryl11menu_ajusteEv>
    65b8:	81 11       	cpse	r24, r1
    65ba:	8d c0       	rjmp	.+282    	; 0x66d6 <_ZN9red_beryl4menuEv+0x1b0>
				choice = 3;
    65bc:	83 e0       	ldi	r24, 0x03	; 3
    65be:	90 e0       	ldi	r25, 0x00	; 0
    65c0:	86 c0       	rjmp	.+268    	; 0x66ce <_ZN9red_beryl4menuEv+0x1a8>
			}
			break;
		}
		case 1:			//Leituras
		{
			display.fillRect(1, lineSize, display.width()-5, lineSize, WHITE);  //desenha um quadrado em volta da opção 1 selecionada
    65c2:	6e 01       	movw	r12, r28
    65c4:	85 e1       	ldi	r24, 0x15	; 21
    65c6:	c8 0e       	add	r12, r24
    65c8:	d1 1c       	adc	r13, r1
    65ca:	c6 01       	movw	r24, r12
    65cc:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    65d0:	9c 01       	movw	r18, r24
    65d2:	25 50       	subi	r18, 0x05	; 5
    65d4:	31 09       	sbc	r19, r1
    65d6:	ee 24       	eor	r14, r14
    65d8:	e3 94       	inc	r14
    65da:	f1 2c       	mov	r15, r1
    65dc:	08 e0       	ldi	r16, 0x08	; 8
    65de:	10 e0       	ldi	r17, 0x00	; 0
    65e0:	48 e0       	ldi	r20, 0x08	; 8
    65e2:	50 e0       	ldi	r21, 0x00	; 0
    65e4:	61 e0       	ldi	r22, 0x01	; 1
    65e6:	70 e0       	ldi	r23, 0x00	; 0
    65e8:	c6 01       	movw	r24, r12
    65ea:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>

			menuOption(menu[1], 1, true);
    65ee:	21 e0       	ldi	r18, 0x01	; 1
    65f0:	41 e0       	ldi	r20, 0x01	; 1
    65f2:	50 e0       	ldi	r21, 0x00	; 0
    65f4:	66 e0       	ldi	r22, 0x06	; 6
    65f6:	79 e0       	ldi	r23, 0x09	; 9
    65f8:	ce 01       	movw	r24, r28
    65fa:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			menuOption(menu[2], 2, false);
    65fe:	20 e0       	ldi	r18, 0x00	; 0
    6600:	42 e0       	ldi	r20, 0x02	; 2
    6602:	50 e0       	ldi	r21, 0x00	; 0
    6604:	61 e1       	ldi	r22, 0x11	; 17
    6606:	79 e0       	ldi	r23, 0x09	; 9
    6608:	ce 01       	movw	r24, r28
    660a:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			menuOption(menu[3], 3, false);
    660e:	20 e0       	ldi	r18, 0x00	; 0
    6610:	43 e0       	ldi	r20, 0x03	; 3
    6612:	50 e0       	ldi	r21, 0x00	; 0
    6614:	6f e1       	ldi	r22, 0x1F	; 31
    6616:	79 e0       	ldi	r23, 0x09	; 9
    6618:	ce 01       	movw	r24, r28
    661a:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>

			if(_yes){
    661e:	88 89       	ldd	r24, Y+16	; 0x10
    6620:	88 23       	and	r24, r24
    6622:	09 f4       	brne	.+2      	; 0x6626 <_ZN9red_beryl4menuEv+0x100>
    6624:	58 c0       	rjmp	.+176    	; 0x66d6 <_ZN9red_beryl4menuEv+0x1b0>
				choice=11;
    6626:	8b e0       	ldi	r24, 0x0B	; 11
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	51 c0       	rjmp	.+162    	; 0x66ce <_ZN9red_beryl4menuEv+0x1a8>
			}
			break;
		}
		case 2:			//Sincronização(bluetooth)
		{
			menuOption(menu[1], 1, false);
    662c:	20 e0       	ldi	r18, 0x00	; 0
    662e:	41 e0       	ldi	r20, 0x01	; 1
    6630:	50 e0       	ldi	r21, 0x00	; 0
    6632:	66 e0       	ldi	r22, 0x06	; 6
    6634:	79 e0       	ldi	r23, 0x09	; 9
    6636:	ce 01       	movw	r24, r28
    6638:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			menuOption(menu[2], 2, true);
    663c:	21 e0       	ldi	r18, 0x01	; 1
    663e:	42 e0       	ldi	r20, 0x02	; 2
    6640:	50 e0       	ldi	r21, 0x00	; 0
    6642:	61 e1       	ldi	r22, 0x11	; 17
    6644:	79 e0       	ldi	r23, 0x09	; 9
    6646:	ce 01       	movw	r24, r28
    6648:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			menuOption(menu[3], 3, false);
    664c:	20 e0       	ldi	r18, 0x00	; 0
    664e:	43 e0       	ldi	r20, 0x03	; 3
    6650:	50 e0       	ldi	r21, 0x00	; 0
    6652:	6f e1       	ldi	r22, 0x1F	; 31
    6654:	79 e0       	ldi	r23, 0x09	; 9
    6656:	ce 01       	movw	r24, r28
    6658:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			
			if(_yes){
    665c:	88 89       	ldd	r24, Y+16	; 0x10
    665e:	88 23       	and	r24, r24
    6660:	d1 f1       	breq	.+116    	; 0x66d6 <_ZN9red_beryl4menuEv+0x1b0>
				choice=21;
    6662:	85 e1       	ldi	r24, 0x15	; 21
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	33 c0       	rjmp	.+102    	; 0x66ce <_ZN9red_beryl4menuEv+0x1a8>
			}
			break;
		}
		case 3:			//Ajustes(opções)
		{
			menuOption(menu[1], 1, false);
    6668:	20 e0       	ldi	r18, 0x00	; 0
    666a:	41 e0       	ldi	r20, 0x01	; 1
    666c:	50 e0       	ldi	r21, 0x00	; 0
    666e:	66 e0       	ldi	r22, 0x06	; 6
    6670:	79 e0       	ldi	r23, 0x09	; 9
    6672:	ce 01       	movw	r24, r28
    6674:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			menuOption(menu[2], 2, false);
    6678:	20 e0       	ldi	r18, 0x00	; 0
    667a:	42 e0       	ldi	r20, 0x02	; 2
    667c:	50 e0       	ldi	r21, 0x00	; 0
    667e:	61 e1       	ldi	r22, 0x11	; 17
    6680:	79 e0       	ldi	r23, 0x09	; 9
    6682:	ce 01       	movw	r24, r28
    6684:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			display.fillRect(1, lineSize*3, display.width()-5, lineSize, WHITE);//desenha um quadrado em volta da opção 1 selecionada
    6688:	6e 01       	movw	r12, r28
    668a:	85 e1       	ldi	r24, 0x15	; 21
    668c:	c8 0e       	add	r12, r24
    668e:	d1 1c       	adc	r13, r1
    6690:	c6 01       	movw	r24, r12
    6692:	0e 94 36 52 	call	0xa46c	; 0xa46c <_ZNK12Adafruit_GFX5widthEv>
    6696:	9c 01       	movw	r18, r24
    6698:	25 50       	subi	r18, 0x05	; 5
    669a:	31 09       	sbc	r19, r1
    669c:	ee 24       	eor	r14, r14
    669e:	e3 94       	inc	r14
    66a0:	f1 2c       	mov	r15, r1
    66a2:	08 e0       	ldi	r16, 0x08	; 8
    66a4:	10 e0       	ldi	r17, 0x00	; 0
    66a6:	48 e1       	ldi	r20, 0x18	; 24
    66a8:	50 e0       	ldi	r21, 0x00	; 0
    66aa:	61 e0       	ldi	r22, 0x01	; 1
    66ac:	70 e0       	ldi	r23, 0x00	; 0
    66ae:	c6 01       	movw	r24, r12
    66b0:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <_ZN12Adafruit_GFX8fillRectEiiiij>
			menuOption(menu[3], 3, true);
    66b4:	21 e0       	ldi	r18, 0x01	; 1
    66b6:	43 e0       	ldi	r20, 0x03	; 3
    66b8:	50 e0       	ldi	r21, 0x00	; 0
    66ba:	6f e1       	ldi	r22, 0x1F	; 31
    66bc:	79 e0       	ldi	r23, 0x09	; 9
    66be:	ce 01       	movw	r24, r28
    66c0:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN9red_beryl10menuOptionEPKcib>
			
			if(_yes){
    66c4:	88 89       	ldd	r24, Y+16	; 0x10
    66c6:	88 23       	and	r24, r24
    66c8:	31 f0       	breq	.+12     	; 0x66d6 <_ZN9red_beryl4menuEv+0x1b0>
				choice=31;
    66ca:	8f e1       	ldi	r24, 0x1F	; 31
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <_ZZN9red_beryl4menuEvE6choice+0x1>
    66d2:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <_ZZN9red_beryl4menuEvE6choice>
		default:		//Se por alguma razão algo estiver diferente
		{
			break;
		}
	}
	if(_up){
    66d6:	8e 85       	ldd	r24, Y+14	; 0x0e
    66d8:	88 23       	and	r24, r24
    66da:	79 f0       	breq	.+30     	; 0x66fa <_ZN9red_beryl4menuEv+0x1d4>
		choice--;
    66dc:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZZN9red_beryl4menuEvE6choice>
    66e0:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <_ZZN9red_beryl4menuEvE6choice+0x1>
    66e4:	01 97       	sbiw	r24, 0x01	; 1
		if(choice < 1){
    66e6:	18 16       	cp	r1, r24
    66e8:	19 06       	cpc	r1, r25
    66ea:	14 f0       	brlt	.+4      	; 0x66f0 <_ZN9red_beryl4menuEv+0x1ca>
			choice = 3;
    66ec:	83 e0       	ldi	r24, 0x03	; 3
    66ee:	90 e0       	ldi	r25, 0x00	; 0
    66f0:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <_ZZN9red_beryl4menuEvE6choice+0x1>
    66f4:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <_ZZN9red_beryl4menuEvE6choice>
		}
		_up = false;
    66f8:	1e 86       	std	Y+14, r1	; 0x0e
	}
	if(_down){
    66fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    66fc:	88 23       	and	r24, r24
    66fe:	79 f0       	breq	.+30     	; 0x671e <_ZN9red_beryl4menuEv+0x1f8>
		choice++;
    6700:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <_ZZN9red_beryl4menuEvE6choice>
    6704:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <_ZZN9red_beryl4menuEvE6choice+0x1>
    6708:	01 96       	adiw	r24, 0x01	; 1
		if(choice > 3){
    670a:	84 30       	cpi	r24, 0x04	; 4
    670c:	91 05       	cpc	r25, r1
    670e:	14 f0       	brlt	.+4      	; 0x6714 <_ZN9red_beryl4menuEv+0x1ee>
			choice = 1;
    6710:	81 e0       	ldi	r24, 0x01	; 1
    6712:	90 e0       	ldi	r25, 0x00	; 0
    6714:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <_ZZN9red_beryl4menuEvE6choice+0x1>
    6718:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <_ZZN9red_beryl4menuEvE6choice>
		}
		_down = false;
    671c:	1f 86       	std	Y+15, r1	; 0x0f
	}
	if(_no){
    671e:	89 89       	ldd	r24, Y+17	; 0x11
    6720:	81 11       	cpse	r24, r1
		_no = false;
    6722:	19 8a       	std	Y+17, r1	; 0x11
	}
	if(_yes){
    6724:	88 89       	ldd	r24, Y+16	; 0x10
    6726:	81 11       	cpse	r24, r1
		_yes = false;
    6728:	18 8a       	std	Y+16, r1	; 0x10
	}
}
    672a:	df 91       	pop	r29
    672c:	cf 91       	pop	r28
    672e:	1f 91       	pop	r17
    6730:	0f 91       	pop	r16
    6732:	ff 90       	pop	r15
    6734:	ef 90       	pop	r14
    6736:	df 90       	pop	r13
    6738:	cf 90       	pop	r12
    673a:	08 95       	ret

0000673c <_ZN11red_crystalC1Ev>:

#define PI (3.14159265)

red_crystal::red_crystal()
{
	Serial.println("Construtor basico red_crystal utilizado.");
    673c:	69 e2       	ldi	r22, 0x29	; 41
    673e:	79 e0       	ldi	r23, 0x09	; 9
    6740:	80 ec       	ldi	r24, 0xC0	; 192
    6742:	90 e1       	ldi	r25, 0x10	; 16
    6744:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_ZN5Print7printlnEPKc>

00006748 <_ZN11red_crystal5resetEv>:
	}
}


bool red_crystal::reset()
{
    6748:	cf 93       	push	r28
	if(AD5933::reset())
    674a:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <_ZN6AD59335resetEv>
    674e:	c8 2f       	mov	r28, r24
    6750:	81 11       	cpse	r24, r1
    6752:	06 c0       	rjmp	.+12     	; 0x6760 <_ZN11red_crystal5resetEv+0x18>
	{
		return true;
	}
	else
	{
		Serial.println("AD-reset falhou.");
    6754:	62 e5       	ldi	r22, 0x52	; 82
    6756:	79 e0       	ldi	r23, 0x09	; 9
    6758:	80 ec       	ldi	r24, 0xC0	; 192
    675a:	90 e1       	ldi	r25, 0x10	; 16
    675c:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		return false;
	}
}
    6760:	8c 2f       	mov	r24, r28
    6762:	cf 91       	pop	r28
    6764:	08 95       	ret

00006766 <_ZN11red_crystal13initialConfigEv>:


bool red_crystal::initialConfig()
{
    6766:	0f 93       	push	r16
    6768:	1f 93       	push	r17
    676a:	cf 93       	push	r28
    676c:	8c 01       	movw	r16, r24
	if(!AD5933::reset()){
    676e:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <_ZN6AD59335resetEv>
    6772:	c8 2f       	mov	r28, r24
    6774:	81 11       	cpse	r24, r1
    6776:	03 c0       	rjmp	.+6      	; 0x677e <_ZN11red_crystal13initialConfigEv+0x18>
		Serial.println("ERRO: Reset falhou!");
    6778:	63 e6       	ldi	r22, 0x63	; 99
    677a:	79 e0       	ldi	r23, 0x09	; 9
    677c:	5c c0       	rjmp	.+184    	; 0x6836 <_ZN11red_crystal13initialConfigEv+0xd0>
		return false;
	}
	if(!AD5933::setInternalClock(true)){
    677e:	81 e0       	ldi	r24, 0x01	; 1
    6780:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <_ZN6AD593316setInternalClockEb>
    6784:	c8 2f       	mov	r28, r24
    6786:	81 11       	cpse	r24, r1
    6788:	03 c0       	rjmp	.+6      	; 0x6790 <_ZN11red_crystal13initialConfigEv+0x2a>
		Serial.println("ERRO: SetInternalClock falhou!");
    678a:	67 e7       	ldi	r22, 0x77	; 119
    678c:	79 e0       	ldi	r23, 0x09	; 9
    678e:	53 c0       	rjmp	.+166    	; 0x6836 <_ZN11red_crystal13initialConfigEv+0xd0>
		return false;
	}
	if(!AD5933::setStartFrequency(START_FREQ*0.95)){
    6790:	6c e8       	ldi	r22, 0x8C	; 140
    6792:	79 eb       	ldi	r23, 0xB9	; 185
    6794:	80 e0       	ldi	r24, 0x00	; 0
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	0e 94 68 52 	call	0xa4d0	; 0xa4d0 <_ZN6AD593317setStartFrequencyEm>
    679c:	c8 2f       	mov	r28, r24
    679e:	81 11       	cpse	r24, r1
    67a0:	03 c0       	rjmp	.+6      	; 0x67a8 <_ZN11red_crystal13initialConfigEv+0x42>
		Serial.println("ERRO: SetStartFrequency falhou!");
    67a2:	66 e9       	ldi	r22, 0x96	; 150
    67a4:	79 e0       	ldi	r23, 0x09	; 9
    67a6:	47 c0       	rjmp	.+142    	; 0x6836 <_ZN11red_crystal13initialConfigEv+0xd0>
		return false;
	}
	_freq=START_FREQ;
    67a8:	80 e5       	ldi	r24, 0x50	; 80
    67aa:	93 ec       	ldi	r25, 0xC3	; 195
    67ac:	a0 e0       	ldi	r26, 0x00	; 0
    67ae:	b0 e0       	ldi	r27, 0x00	; 0
    67b0:	f8 01       	movw	r30, r16
    67b2:	e9 5d       	subi	r30, 0xD9	; 217
    67b4:	fb 4f       	sbci	r31, 0xFB	; 251
    67b6:	80 83       	st	Z, r24
    67b8:	91 83       	std	Z+1, r25	; 0x01
    67ba:	a2 83       	std	Z+2, r26	; 0x02
    67bc:	b3 83       	std	Z+3, r27	; 0x03
	if(!AD5933::setIncrementFrequency(FREQ_INCR)){
    67be:	64 ef       	ldi	r22, 0xF4	; 244
    67c0:	71 e0       	ldi	r23, 0x01	; 1
    67c2:	80 e0       	ldi	r24, 0x00	; 0
    67c4:	90 e0       	ldi	r25, 0x00	; 0
    67c6:	0e 94 a0 52 	call	0xa540	; 0xa540 <_ZN6AD593321setIncrementFrequencyEm>
    67ca:	c8 2f       	mov	r28, r24
    67cc:	81 11       	cpse	r24, r1
    67ce:	03 c0       	rjmp	.+6      	; 0x67d6 <_ZN11red_crystal13initialConfigEv+0x70>
		Serial.println("ERRO: SetIncrementFrequency falhou!");
    67d0:	66 eb       	ldi	r22, 0xB6	; 182
    67d2:	79 e0       	ldi	r23, 0x09	; 9
    67d4:	30 c0       	rjmp	.+96     	; 0x6836 <_ZN11red_crystal13initialConfigEv+0xd0>
		return false;
	}
	if(!AD5933::setNumberIncrements(NUM_INCR)){
    67d6:	8a e0       	ldi	r24, 0x0A	; 10
    67d8:	90 e0       	ldi	r25, 0x00	; 0
    67da:	0e 94 dc 52 	call	0xa5b8	; 0xa5b8 <_ZN6AD593319setNumberIncrementsEj>
    67de:	c8 2f       	mov	r28, r24
    67e0:	81 11       	cpse	r24, r1
    67e2:	03 c0       	rjmp	.+6      	; 0x67ea <_ZN11red_crystal13initialConfigEv+0x84>
		Serial.println("ERRO: SetNumberIncrements falhou!");
    67e4:	6a ed       	ldi	r22, 0xDA	; 218
    67e6:	79 e0       	ldi	r23, 0x09	; 9
    67e8:	26 c0       	rjmp	.+76     	; 0x6836 <_ZN11red_crystal13initialConfigEv+0xd0>
		return false;
	}
	if(!AD5933::setRange(_range)){
    67ea:	f8 01       	movw	r30, r16
    67ec:	e5 5d       	subi	r30, 0xD5	; 213
    67ee:	fb 4f       	sbci	r31, 0xFB	; 251
    67f0:	80 81       	ld	r24, Z
    67f2:	0e 94 72 53 	call	0xa6e4	; 0xa6e4 <_ZN6AD59338setRangeEh>
    67f6:	c8 2f       	mov	r28, r24
    67f8:	81 11       	cpse	r24, r1
    67fa:	03 c0       	rjmp	.+6      	; 0x6802 <_ZN11red_crystal13initialConfigEv+0x9c>
		Serial.println("ERR: SetRange falhou!");
    67fc:	6c ef       	ldi	r22, 0xFC	; 252
    67fe:	79 e0       	ldi	r23, 0x09	; 9
    6800:	1a c0       	rjmp	.+52     	; 0x6836 <_ZN11red_crystal13initialConfigEv+0xd0>
		return false;
	}
	if(!AD5933::setPGAGain(PGA_GAIN_X1)){
    6802:	81 e0       	ldi	r24, 0x01	; 1
    6804:	0e 94 b9 53 	call	0xa772	; 0xa772 <_ZN6AD593310setPGAGainEh>
    6808:	c8 2f       	mov	r28, r24
    680a:	81 11       	cpse	r24, r1
    680c:	03 c0       	rjmp	.+6      	; 0x6814 <_ZN11red_crystal13initialConfigEv+0xae>
		Serial.println("ERRO: SetPGAGain falhou!");
    680e:	62 e1       	ldi	r22, 0x12	; 18
    6810:	7a e0       	ldi	r23, 0x0A	; 10
    6812:	11 c0       	rjmp	.+34     	; 0x6836 <_ZN11red_crystal13initialConfigEv+0xd0>
		return false;
	}
	if(!AD5933::calibrate(gain, phase, REF_RESIST, (NUM_INCR+1)))
    6814:	b8 01       	movw	r22, r16
    6816:	65 56       	subi	r22, 0x65	; 101
    6818:	7c 4f       	sbci	r23, 0xFC	; 252
    681a:	2b e0       	ldi	r18, 0x0B	; 11
    681c:	30 e0       	ldi	r19, 0x00	; 0
    681e:	44 ee       	ldi	r20, 0xE4	; 228
    6820:	53 e0       	ldi	r21, 0x03	; 3
    6822:	c8 01       	movw	r24, r16
    6824:	81 59       	subi	r24, 0x91	; 145
    6826:	9f 4f       	sbci	r25, 0xFF	; 255
    6828:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <_ZN6AD59339calibrateEPfPdii>
    682c:	c8 2f       	mov	r28, r24
    682e:	81 11       	cpse	r24, r1
    6830:	06 c0       	rjmp	.+12     	; 0x683e <_ZN11red_crystal13initialConfigEv+0xd8>
    {
      Serial.println("ERRO: Calibração falhou!");
    6832:	6b e2       	ldi	r22, 0x2B	; 43
    6834:	7a e0       	ldi	r23, 0x0A	; 10
    6836:	80 ec       	ldi	r24, 0xC0	; 192
    6838:	90 e1       	ldi	r25, 0x10	; 16
    683a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	  return false;
    }
	return true;
}
    683e:	8c 2f       	mov	r24, r28
    6840:	cf 91       	pop	r28
    6842:	1f 91       	pop	r17
    6844:	0f 91       	pop	r16
    6846:	08 95       	ret

00006848 <_ZN11red_crystal4initEv>:
{
	Serial.println("Construtor basico red_crystal utilizado.");
}

void red_crystal::init()
{
    6848:	0f 93       	push	r16
    684a:	1f 93       	push	r17
    684c:	cf 93       	push	r28
    684e:	df 93       	push	r29
    6850:	ec 01       	movw	r28, r24
	Serial.println("Inicializador red_crystal utilizado.");
    6852:	66 e4       	ldi	r22, 0x46	; 70
    6854:	7a e0       	ldi	r23, 0x0A	; 10
    6856:	80 ec       	ldi	r24, 0xC0	; 192
    6858:	90 e1       	ldi	r25, 0x10	; 16
    685a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	Wire.setClock(400000);  //Definir a velocidade de clock do Wire para conversar com a AD.
    685e:	40 e8       	ldi	r20, 0x80	; 128
    6860:	5a e1       	ldi	r21, 0x1A	; 26
    6862:	66 e0       	ldi	r22, 0x06	; 6
    6864:	70 e0       	ldi	r23, 0x00	; 0
    6866:	84 e8       	ldi	r24, 0x84	; 132
    6868:	94 e1       	ldi	r25, 0x14	; 20
    686a:	0e 94 65 49 	call	0x92ca	; 0x92ca <_ZN7TwoWire8setClockEm>
	leitura1 = {1};
    686e:	fe 01       	movw	r30, r28
    6870:	31 96       	adiw	r30, 0x01	; 1
    6872:	8e e6       	ldi	r24, 0x6E	; 110
    6874:	df 01       	movw	r26, r30
    6876:	1d 92       	st	X+, r1
    6878:	8a 95       	dec	r24
    687a:	e9 f7       	brne	.-6      	; 0x6876 <_ZN11red_crystal4initEv+0x2e>
    687c:	81 e0       	ldi	r24, 0x01	; 1
    687e:	90 e0       	ldi	r25, 0x00	; 0
    6880:	a0 e0       	ldi	r26, 0x00	; 0
    6882:	b0 e0       	ldi	r27, 0x00	; 0
    6884:	89 83       	std	Y+1, r24	; 0x01
    6886:	9a 83       	std	Y+2, r25	; 0x02
    6888:	ab 83       	std	Y+3, r26	; 0x03
    688a:	bc 83       	std	Y+4, r27	; 0x04
	_pinD7 = 7;
    688c:	8e 01       	movw	r16, r28
    688e:	03 5d       	subi	r16, 0xD3	; 211
    6890:	1b 4f       	sbci	r17, 0xFB	; 251
    6892:	87 e0       	ldi	r24, 0x07	; 7
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	f8 01       	movw	r30, r16
    6898:	91 83       	std	Z+1, r25	; 0x01
    689a:	80 83       	st	Z, r24
	pinMode(_pinD7, OUTPUT);
    689c:	61 e0       	ldi	r22, 0x01	; 1
    689e:	0e 94 04 4b 	call	0x9608	; 0x9608 <pinMode>
	digitalWrite(_pinD7, LOW);
    68a2:	60 e0       	ldi	r22, 0x00	; 0
    68a4:	d8 01       	movw	r26, r16
    68a6:	8c 91       	ld	r24, X
    68a8:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
	_range = 1;
    68ac:	fe 01       	movw	r30, r28
    68ae:	e5 5d       	subi	r30, 0xD5	; 213
    68b0:	fb 4f       	sbci	r31, 0xFB	; 251
    68b2:	81 e0       	ldi	r24, 0x01	; 1
    68b4:	90 e0       	ldi	r25, 0x00	; 0
    68b6:	91 83       	std	Z+1, r25	; 0x01
    68b8:	80 83       	st	Z, r24
	if(initialConfig()){
    68ba:	ce 01       	movw	r24, r28
    68bc:	54 df       	rcall	.-344    	; 0x6766 <_ZN11red_crystal13initialConfigEv>
    68be:	88 23       	and	r24, r24
    68c0:	19 f0       	breq	.+6      	; 0x68c8 <_ZN11red_crystal4initEv+0x80>
		Serial.println("Configuração inicial da AD5933 concluida.");
    68c2:	6b e6       	ldi	r22, 0x6B	; 107
    68c4:	7a e0       	ldi	r23, 0x0A	; 10
    68c6:	02 c0       	rjmp	.+4      	; 0x68cc <_ZN11red_crystal4initEv+0x84>
	}
	else
	{
		Serial.println("Erro ao configurar a AD5933.");
    68c8:	67 e9       	ldi	r22, 0x97	; 151
    68ca:	7a e0       	ldi	r23, 0x0A	; 10
    68cc:	80 ec       	ldi	r24, 0xC0	; 192
    68ce:	90 e1       	ldi	r25, 0x10	; 16
	}
}
    68d0:	df 91       	pop	r29
    68d2:	cf 91       	pop	r28
    68d4:	1f 91       	pop	r17
    68d6:	0f 91       	pop	r16
	if(initialConfig()){
		Serial.println("Configuração inicial da AD5933 concluida.");
	}
	else
	{
		Serial.println("Erro ao configurar a AD5933.");
    68d8:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_ZN5Print7printlnEPKc>

000068dc <_ZN11red_crystal10configurarEl>:
	  return false;
    }
	return true;
}
bool red_crystal::configurar(long f)
{
    68dc:	3f 92       	push	r3
    68de:	4f 92       	push	r4
    68e0:	5f 92       	push	r5
    68e2:	6f 92       	push	r6
    68e4:	7f 92       	push	r7
    68e6:	8f 92       	push	r8
    68e8:	9f 92       	push	r9
    68ea:	af 92       	push	r10
    68ec:	bf 92       	push	r11
    68ee:	cf 92       	push	r12
    68f0:	df 92       	push	r13
    68f2:	ef 92       	push	r14
    68f4:	ff 92       	push	r15
    68f6:	0f 93       	push	r16
    68f8:	1f 93       	push	r17
    68fa:	cf 93       	push	r28
    68fc:	df 93       	push	r29
    68fe:	00 d0       	rcall	.+0      	; 0x6900 <_ZN11red_crystal10configurarEl+0x24>
    6900:	1f 92       	push	r1
    6902:	cd b7       	in	r28, 0x3d	; 61
    6904:	de b7       	in	r29, 0x3e	; 62
    6906:	9c 83       	std	Y+4, r25	; 0x04
    6908:	8b 83       	std	Y+3, r24	; 0x03
    690a:	6a 01       	movw	r12, r20
    690c:	7b 01       	movw	r14, r22
	if(!AD5933::reset()){
    690e:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <_ZN6AD59335resetEv>
    6912:	81 11       	cpse	r24, r1
    6914:	03 c0       	rjmp	.+6      	; 0x691c <_ZN11red_crystal10configurarEl+0x40>
		Serial.println("ERRO: Reset falhou!");
    6916:	63 e6       	ldi	r22, 0x63	; 99
    6918:	79 e0       	ldi	r23, 0x09	; 9
    691a:	07 c0       	rjmp	.+14     	; 0x692a <_ZN11red_crystal10configurarEl+0x4e>
		return false;
	}
	if(!AD5933::setInternalClock(true)){
    691c:	81 e0       	ldi	r24, 0x01	; 1
    691e:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <_ZN6AD593316setInternalClockEb>
    6922:	81 11       	cpse	r24, r1
    6924:	08 c0       	rjmp	.+16     	; 0x6936 <_ZN11red_crystal10configurarEl+0x5a>
		Serial.println("ERRO: SetInternalClock falhou!");
    6926:	67 e7       	ldi	r22, 0x77	; 119
    6928:	79 e0       	ldi	r23, 0x09	; 9
    692a:	80 ec       	ldi	r24, 0xC0	; 192
    692c:	90 e1       	ldi	r25, 0x10	; 16
    692e:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		return false;
    6932:	31 2c       	mov	r3, r1
    6934:	c8 c0       	rjmp	.+400    	; 0x6ac6 <_ZN11red_crystal10configurarEl+0x1ea>
	}
	if(!AD5933::setStartFrequency(f*0.95)){
    6936:	c7 01       	movw	r24, r14
    6938:	b6 01       	movw	r22, r12
    693a:	0e 94 35 5c 	call	0xb86a	; 0xb86a <__floatsisf>
    693e:	23 e3       	ldi	r18, 0x33	; 51
    6940:	33 e3       	ldi	r19, 0x33	; 51
    6942:	43 e7       	ldi	r20, 0x73	; 115
    6944:	5f e3       	ldi	r21, 0x3F	; 63
    6946:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    694a:	0e 94 07 5c 	call	0xb80e	; 0xb80e <__fixunssfsi>
    694e:	2b 01       	movw	r4, r22
    6950:	3c 01       	movw	r6, r24
    6952:	0e 94 68 52 	call	0xa4d0	; 0xa4d0 <_ZN6AD593317setStartFrequencyEm>
    6956:	81 11       	cpse	r24, r1
    6958:	03 c0       	rjmp	.+6      	; 0x6960 <_ZN11red_crystal10configurarEl+0x84>
		Serial.println("ERRO: SetStartFrequency falhou!");
    695a:	66 e9       	ldi	r22, 0x96	; 150
    695c:	79 e0       	ldi	r23, 0x09	; 9
    695e:	e5 cf       	rjmp	.-54     	; 0x692a <_ZN11red_crystal10configurarEl+0x4e>
		return false;
	}
	_freq=f;
    6960:	8b 81       	ldd	r24, Y+3	; 0x03
    6962:	9c 81       	ldd	r25, Y+4	; 0x04
    6964:	89 5d       	subi	r24, 0xD9	; 217
    6966:	9b 4f       	sbci	r25, 0xFB	; 251
    6968:	9a 83       	std	Y+2, r25	; 0x02
    696a:	89 83       	std	Y+1, r24	; 0x01
    696c:	fc 01       	movw	r30, r24
    696e:	c0 82       	st	Z, r12
    6970:	d1 82       	std	Z+1, r13	; 0x01
    6972:	e2 82       	std	Z+2, r14	; 0x02
    6974:	f3 82       	std	Z+3, r15	; 0x03
	if(!AD5933::setIncrementFrequency(f/100)){
    6976:	c7 01       	movw	r24, r14
    6978:	b6 01       	movw	r22, r12
    697a:	24 e6       	ldi	r18, 0x64	; 100
    697c:	30 e0       	ldi	r19, 0x00	; 0
    697e:	40 e0       	ldi	r20, 0x00	; 0
    6980:	50 e0       	ldi	r21, 0x00	; 0
    6982:	0e 94 76 5e 	call	0xbcec	; 0xbcec <__divmodsi4>
    6986:	49 01       	movw	r8, r18
    6988:	5a 01       	movw	r10, r20
    698a:	ca 01       	movw	r24, r20
    698c:	b9 01       	movw	r22, r18
    698e:	0e 94 a0 52 	call	0xa540	; 0xa540 <_ZN6AD593321setIncrementFrequencyEm>
    6992:	81 11       	cpse	r24, r1
    6994:	03 c0       	rjmp	.+6      	; 0x699c <_ZN11red_crystal10configurarEl+0xc0>
		Serial.println("ERRO: SetIncrementFrequency falhou!");
    6996:	66 eb       	ldi	r22, 0xB6	; 182
    6998:	79 e0       	ldi	r23, 0x09	; 9
    699a:	c7 cf       	rjmp	.-114    	; 0x692a <_ZN11red_crystal10configurarEl+0x4e>
		return false;
	}
	if(!AD5933::setNumberIncrements(NUM_INCR)){
    699c:	8a e0       	ldi	r24, 0x0A	; 10
    699e:	90 e0       	ldi	r25, 0x00	; 0
    69a0:	0e 94 dc 52 	call	0xa5b8	; 0xa5b8 <_ZN6AD593319setNumberIncrementsEj>
    69a4:	81 11       	cpse	r24, r1
    69a6:	03 c0       	rjmp	.+6      	; 0x69ae <_ZN11red_crystal10configurarEl+0xd2>
		Serial.println("ERRO: SetNumberIncrements falhou!");
    69a8:	6a ed       	ldi	r22, 0xDA	; 218
    69aa:	79 e0       	ldi	r23, 0x09	; 9
    69ac:	be cf       	rjmp	.-132    	; 0x692a <_ZN11red_crystal10configurarEl+0x4e>
		return false;
	}
	if(!AD5933::setRange(_range)){
    69ae:	eb 81       	ldd	r30, Y+3	; 0x03
    69b0:	fc 81       	ldd	r31, Y+4	; 0x04
    69b2:	e5 5d       	subi	r30, 0xD5	; 213
    69b4:	fb 4f       	sbci	r31, 0xFB	; 251
    69b6:	80 81       	ld	r24, Z
    69b8:	0e 94 72 53 	call	0xa6e4	; 0xa6e4 <_ZN6AD59338setRangeEh>
    69bc:	38 2e       	mov	r3, r24
    69be:	81 11       	cpse	r24, r1
    69c0:	03 c0       	rjmp	.+6      	; 0x69c8 <_ZN11red_crystal10configurarEl+0xec>
		Serial.println("ERR: SetRange falhou!");
    69c2:	6c ef       	ldi	r22, 0xFC	; 252
    69c4:	79 e0       	ldi	r23, 0x09	; 9
    69c6:	2a c0       	rjmp	.+84     	; 0x6a1c <_ZN11red_crystal10configurarEl+0x140>
		return false;
	}
	if(!AD5933::setPGAGain(PGA_GAIN_X1)){
    69c8:	81 e0       	ldi	r24, 0x01	; 1
    69ca:	0e 94 b9 53 	call	0xa772	; 0xa772 <_ZN6AD593310setPGAGainEh>
    69ce:	81 11       	cpse	r24, r1
    69d0:	03 c0       	rjmp	.+6      	; 0x69d8 <_ZN11red_crystal10configurarEl+0xfc>
		Serial.println("ERRO: SetPGAGain falhou!");
    69d2:	62 e1       	ldi	r22, 0x12	; 18
    69d4:	7a e0       	ldi	r23, 0x0A	; 10
    69d6:	a9 cf       	rjmp	.-174    	; 0x692a <_ZN11red_crystal10configurarEl+0x4e>
		return false;
	}
	
	digitalWrite(_pinD7, LOW);
    69d8:	60 e0       	ldi	r22, 0x00	; 0
    69da:	eb 81       	ldd	r30, Y+3	; 0x03
    69dc:	fc 81       	ldd	r31, Y+4	; 0x04
    69de:	e3 5d       	subi	r30, 0xD3	; 211
    69e0:	fb 4f       	sbci	r31, 0xFB	; 251
    69e2:	80 81       	ld	r24, Z
    69e4:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
	delay(10);
    69e8:	6a e0       	ldi	r22, 0x0A	; 10
    69ea:	70 e0       	ldi	r23, 0x00	; 0
    69ec:	80 e0       	ldi	r24, 0x00	; 0
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
	if(!AD5933::calibrate(gain, phase, REF_RESIST, (NUM_INCR+1)))
    69f4:	0b 81       	ldd	r16, Y+3	; 0x03
    69f6:	1c 81       	ldd	r17, Y+4	; 0x04
    69f8:	01 59       	subi	r16, 0x91	; 145
    69fa:	1f 4f       	sbci	r17, 0xFF	; 255
    69fc:	2b e0       	ldi	r18, 0x0B	; 11
    69fe:	30 e0       	ldi	r19, 0x00	; 0
    6a00:	44 ee       	ldi	r20, 0xE4	; 228
    6a02:	53 e0       	ldi	r21, 0x03	; 3
    6a04:	6b 81       	ldd	r22, Y+3	; 0x03
    6a06:	7c 81       	ldd	r23, Y+4	; 0x04
    6a08:	65 56       	subi	r22, 0x65	; 101
    6a0a:	7c 4f       	sbci	r23, 0xFC	; 252
    6a0c:	c8 01       	movw	r24, r16
    6a0e:	0e 94 dd 54 	call	0xa9ba	; 0xa9ba <_ZN6AD59339calibrateEPfPdii>
    6a12:	38 2e       	mov	r3, r24
    6a14:	81 11       	cpse	r24, r1
    6a16:	07 c0       	rjmp	.+14     	; 0x6a26 <_ZN11red_crystal10configurarEl+0x14a>
    {
      Serial.println("ERRO: Calibração falhou!");
    6a18:	6b e2       	ldi	r22, 0x2B	; 43
    6a1a:	7a e0       	ldi	r23, 0x0A	; 10
    6a1c:	80 ec       	ldi	r24, 0xC0	; 192
    6a1e:	90 e1       	ldi	r25, 0x10	; 16
    6a20:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	  return false;
    6a24:	50 c0       	rjmp	.+160    	; 0x6ac6 <_ZN11red_crystal10configurarEl+0x1ea>
    6a26:	8b 81       	ldd	r24, Y+3	; 0x03
    6a28:	9c 81       	ldd	r25, Y+4	; 0x04
    6a2a:	85 56       	subi	r24, 0x65	; 101
    6a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    6a2e:	9c 83       	std	Y+4, r25	; 0x04
    6a30:	8b 83       	std	Y+3, r24	; 0x03
    }
	else
	{
		for(int i=0;i<11;i++)
		{
			Serial.print("gain=");
    6a32:	64 eb       	ldi	r22, 0xB4	; 180
    6a34:	7a e0       	ldi	r23, 0x0A	; 10
    6a36:	80 ec       	ldi	r24, 0xC0	; 192
    6a38:	90 e1       	ldi	r25, 0x10	; 16
    6a3a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			Serial.println(gain[i], 15);
    6a3e:	f8 01       	movw	r30, r16
    6a40:	41 91       	ld	r20, Z+
    6a42:	51 91       	ld	r21, Z+
    6a44:	61 91       	ld	r22, Z+
    6a46:	71 91       	ld	r23, Z+
    6a48:	8f 01       	movw	r16, r30
    6a4a:	2f e0       	ldi	r18, 0x0F	; 15
    6a4c:	30 e0       	ldi	r19, 0x00	; 0
    6a4e:	80 ec       	ldi	r24, 0xC0	; 192
    6a50:	90 e1       	ldi	r25, 0x10	; 16
    6a52:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
      Serial.println("ERRO: Calibração falhou!");
	  return false;
    }
	else
	{
		for(int i=0;i<11;i++)
    6a56:	8b 81       	ldd	r24, Y+3	; 0x03
    6a58:	9c 81       	ldd	r25, Y+4	; 0x04
    6a5a:	08 17       	cp	r16, r24
    6a5c:	19 07       	cpc	r17, r25
    6a5e:	49 f7       	brne	.-46     	; 0x6a32 <_ZN11red_crystal10configurarEl+0x156>
		{
			Serial.print("gain=");
			Serial.println(gain[i], 15);
		}
	}
	delay(10);
    6a60:	6a e0       	ldi	r22, 0x0A	; 10
    6a62:	70 e0       	ldi	r23, 0x00	; 0
    6a64:	80 e0       	ldi	r24, 0x00	; 0
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>

	if(!AD5933::reset()){
    6a6c:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <_ZN6AD59335resetEv>
    6a70:	88 23       	and	r24, r24
    6a72:	09 f4       	brne	.+2      	; 0x6a76 <_ZN11red_crystal10configurarEl+0x19a>
    6a74:	50 cf       	rjmp	.-352    	; 0x6916 <_ZN11red_crystal10configurarEl+0x3a>
		Serial.println("ERRO: Reset falhou!");
		return false;
	}
	if(!AD5933::setInternalClock(true)){
    6a76:	81 e0       	ldi	r24, 0x01	; 1
    6a78:	0e 94 f1 52 	call	0xa5e2	; 0xa5e2 <_ZN6AD593316setInternalClockEb>
    6a7c:	88 23       	and	r24, r24
    6a7e:	09 f4       	brne	.+2      	; 0x6a82 <_ZN11red_crystal10configurarEl+0x1a6>
    6a80:	52 cf       	rjmp	.-348    	; 0x6926 <_ZN11red_crystal10configurarEl+0x4a>
		Serial.println("ERRO: SetInternalClock falhou!");
		return false;
	}
	if(!AD5933::setStartFrequency(f*0.95)){
    6a82:	c3 01       	movw	r24, r6
    6a84:	b2 01       	movw	r22, r4
    6a86:	0e 94 68 52 	call	0xa4d0	; 0xa4d0 <_ZN6AD593317setStartFrequencyEm>
    6a8a:	88 23       	and	r24, r24
    6a8c:	09 f4       	brne	.+2      	; 0x6a90 <_ZN11red_crystal10configurarEl+0x1b4>
    6a8e:	65 cf       	rjmp	.-310    	; 0x695a <_ZN11red_crystal10configurarEl+0x7e>
		Serial.println("ERRO: SetStartFrequency falhou!");
		return false;
	}
	_freq=f;
    6a90:	e9 81       	ldd	r30, Y+1	; 0x01
    6a92:	fa 81       	ldd	r31, Y+2	; 0x02
    6a94:	c0 82       	st	Z, r12
    6a96:	d1 82       	std	Z+1, r13	; 0x01
    6a98:	e2 82       	std	Z+2, r14	; 0x02
    6a9a:	f3 82       	std	Z+3, r15	; 0x03
	if(!AD5933::setIncrementFrequency(f/100)){
    6a9c:	c5 01       	movw	r24, r10
    6a9e:	b4 01       	movw	r22, r8
    6aa0:	0e 94 a0 52 	call	0xa540	; 0xa540 <_ZN6AD593321setIncrementFrequencyEm>
    6aa4:	88 23       	and	r24, r24
    6aa6:	09 f4       	brne	.+2      	; 0x6aaa <_ZN11red_crystal10configurarEl+0x1ce>
    6aa8:	76 cf       	rjmp	.-276    	; 0x6996 <_ZN11red_crystal10configurarEl+0xba>
		Serial.println("ERRO: SetIncrementFrequency falhou!");
		return false;
	}
	if(!AD5933::setNumberIncrements(NUM_INCR)){
    6aaa:	8a e0       	ldi	r24, 0x0A	; 10
    6aac:	90 e0       	ldi	r25, 0x00	; 0
    6aae:	0e 94 dc 52 	call	0xa5b8	; 0xa5b8 <_ZN6AD593319setNumberIncrementsEj>
    6ab2:	88 23       	and	r24, r24
    6ab4:	09 f4       	brne	.+2      	; 0x6ab8 <_ZN11red_crystal10configurarEl+0x1dc>
    6ab6:	78 cf       	rjmp	.-272    	; 0x69a8 <_ZN11red_crystal10configurarEl+0xcc>
		Serial.println("ERRO: SetNumberIncrements falhou!");
		return false;
	}
	if(!AD5933::setPGAGain(PGA_GAIN_X1)){
    6ab8:	81 e0       	ldi	r24, 0x01	; 1
    6aba:	0e 94 b9 53 	call	0xa772	; 0xa772 <_ZN6AD593310setPGAGainEh>
    6abe:	38 2e       	mov	r3, r24
    6ac0:	88 23       	and	r24, r24
    6ac2:	09 f4       	brne	.+2      	; 0x6ac6 <_ZN11red_crystal10configurarEl+0x1ea>
    6ac4:	86 cf       	rjmp	.-244    	; 0x69d2 <_ZN11red_crystal10configurarEl+0xf6>
		Serial.println("ERRO: SetPGAGain falhou!");
		return false;
	}
	return true;
}
    6ac6:	83 2d       	mov	r24, r3
    6ac8:	0f 90       	pop	r0
    6aca:	0f 90       	pop	r0
    6acc:	0f 90       	pop	r0
    6ace:	0f 90       	pop	r0
    6ad0:	df 91       	pop	r29
    6ad2:	cf 91       	pop	r28
    6ad4:	1f 91       	pop	r17
    6ad6:	0f 91       	pop	r16
    6ad8:	ff 90       	pop	r15
    6ada:	ef 90       	pop	r14
    6adc:	df 90       	pop	r13
    6ade:	cf 90       	pop	r12
    6ae0:	bf 90       	pop	r11
    6ae2:	af 90       	pop	r10
    6ae4:	9f 90       	pop	r9
    6ae6:	8f 90       	pop	r8
    6ae8:	7f 90       	pop	r7
    6aea:	6f 90       	pop	r6
    6aec:	5f 90       	pop	r5
    6aee:	4f 90       	pop	r4
    6af0:	3f 90       	pop	r3
    6af2:	08 95       	ret

00006af4 <_ZN11red_crystal5lerADEiR8leituras>:

bool red_crystal::lerAD(int point, leitura &l)
{
    6af4:	2f 92       	push	r2
    6af6:	3f 92       	push	r3
    6af8:	4f 92       	push	r4
    6afa:	5f 92       	push	r5
    6afc:	6f 92       	push	r6
    6afe:	7f 92       	push	r7
    6b00:	8f 92       	push	r8
    6b02:	9f 92       	push	r9
    6b04:	af 92       	push	r10
    6b06:	bf 92       	push	r11
    6b08:	cf 92       	push	r12
    6b0a:	df 92       	push	r13
    6b0c:	ef 92       	push	r14
    6b0e:	ff 92       	push	r15
    6b10:	0f 93       	push	r16
    6b12:	1f 93       	push	r17
    6b14:	cf 93       	push	r28
    6b16:	df 93       	push	r29
    6b18:	cd b7       	in	r28, 0x3d	; 61
    6b1a:	de b7       	in	r29, 0x3e	; 62
    6b1c:	cb 58       	subi	r28, 0x8B	; 139
    6b1e:	d1 09       	sbc	r29, r1
    6b20:	0f b6       	in	r0, 0x3f	; 63
    6b22:	f8 94       	cli
    6b24:	de bf       	out	0x3e, r29	; 62
    6b26:	0f be       	out	0x3f, r0	; 63
    6b28:	cd bf       	out	0x3d, r28	; 61
    6b2a:	8c 01       	movw	r16, r24
    6b2c:	1b 01       	movw	r2, r22
    6b2e:	ca 57       	subi	r28, 0x7A	; 122
    6b30:	df 4f       	sbci	r29, 0xFF	; 255
    6b32:	59 83       	std	Y+1, r21	; 0x01
    6b34:	48 83       	st	Y, r20
    6b36:	c6 58       	subi	r28, 0x86	; 134
    6b38:	d0 40       	sbci	r29, 0x00	; 0
	digitalWrite(_pinD7, HIGH);
    6b3a:	fc 01       	movw	r30, r24
    6b3c:	e3 5d       	subi	r30, 0xD3	; 211
    6b3e:	fb 4f       	sbci	r31, 0xFB	; 251
    6b40:	61 e0       	ldi	r22, 0x01	; 1
    6b42:	80 81       	ld	r24, Z
    6b44:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
	if(!(AD5933::setPowerMode(POWER_STANDBY) 	&&
    6b48:	80 eb       	ldi	r24, 0xB0	; 176
    6b4a:	0e 94 4e 53 	call	0xa69c	; 0xa69c <_ZN6AD593312setPowerModeEh>
	AD5933::setControlMode(CTRL_INIT_START_FREQ)	&&
	AD5933::setControlMode(CTRL_START_FREQ_SWEEP) ))
    6b4e:	88 23       	and	r24, r24
    6b50:	69 f0       	breq	.+26     	; 0x6b6c <_ZN11red_crystal5lerADEiR8leituras+0x78>

bool red_crystal::lerAD(int point, leitura &l)
{
	digitalWrite(_pinD7, HIGH);
	if(!(AD5933::setPowerMode(POWER_STANDBY) 	&&
	AD5933::setControlMode(CTRL_INIT_START_FREQ)	&&
    6b52:	80 e1       	ldi	r24, 0x10	; 16
    6b54:	0e 94 33 53 	call	0xa666	; 0xa666 <_ZN6AD593314setControlModeEh>
}

bool red_crystal::lerAD(int point, leitura &l)
{
	digitalWrite(_pinD7, HIGH);
	if(!(AD5933::setPowerMode(POWER_STANDBY) 	&&
    6b58:	88 23       	and	r24, r24
    6b5a:	41 f0       	breq	.+16     	; 0x6b6c <_ZN11red_crystal5lerADEiR8leituras+0x78>
	AD5933::setControlMode(CTRL_INIT_START_FREQ)	&&
	AD5933::setControlMode(CTRL_START_FREQ_SWEEP) ))
    6b5c:	80 e2       	ldi	r24, 0x20	; 32
    6b5e:	0e 94 33 53 	call	0xa666	; 0xa666 <_ZN6AD593314setControlModeEh>
    6b62:	ea 96       	adiw	r28, 0x3a	; 58
    6b64:	8f af       	std	Y+63, r24	; 0x3f
    6b66:	ea 97       	sbiw	r28, 0x3a	; 58
    6b68:	81 11       	cpse	r24, r1
    6b6a:	0a c0       	rjmp	.+20     	; 0x6b80 <_ZN11red_crystal5lerADEiR8leituras+0x8c>
	{
		Serial.print("Falhou em inicializar SWEEP.");
    6b6c:	69 e8       	ldi	r22, 0x89	; 137
    6b6e:	7b e0       	ldi	r23, 0x0B	; 11
    6b70:	80 ec       	ldi	r24, 0xC0	; 192
    6b72:	90 e1       	ldi	r25, 0x10	; 16
    6b74:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		return false;
    6b78:	ea 96       	adiw	r28, 0x3a	; 58
    6b7a:	1f ae       	std	Y+63, r1	; 0x3f
    6b7c:	ea 97       	sbiw	r28, 0x3a	; 58
    6b7e:	42 c3       	rjmp	.+1668   	; 0x7204 <_ZN11red_crystal5lerADEiR8leituras+0x710>
	}
	long cfreq=_freq*0.95;
    6b80:	f8 01       	movw	r30, r16
    6b82:	e9 5d       	subi	r30, 0xD9	; 217
    6b84:	fb 4f       	sbci	r31, 0xFB	; 251
    6b86:	c0 80       	ld	r12, Z
    6b88:	d1 80       	ldd	r13, Z+1	; 0x01
    6b8a:	e2 80       	ldd	r14, Z+2	; 0x02
    6b8c:	f3 80       	ldd	r15, Z+3	; 0x03
    6b8e:	c7 01       	movw	r24, r14
    6b90:	b6 01       	movw	r22, r12
    6b92:	0e 94 33 5c 	call	0xb866	; 0xb866 <__floatunsisf>
    6b96:	23 e3       	ldi	r18, 0x33	; 51
    6b98:	33 e3       	ldi	r19, 0x33	; 51
    6b9a:	43 e7       	ldi	r20, 0x73	; 115
    6b9c:	5f e3       	ldi	r21, 0x3F	; 63
    6b9e:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    6ba2:	0e 94 02 5c 	call	0xb804	; 0xb804 <__fixsfsi>
    6ba6:	e9 96       	adiw	r28, 0x39	; 57
    6ba8:	6c af       	std	Y+60, r22	; 0x3c
    6baa:	7d af       	std	Y+61, r23	; 0x3d
    6bac:	8e af       	std	Y+62, r24	; 0x3e
    6bae:	9f af       	std	Y+63, r25	; 0x3f
    6bb0:	e9 97       	sbiw	r28, 0x39	; 57
	long inc = _freq/100;
    6bb2:	c7 01       	movw	r24, r14
    6bb4:	b6 01       	movw	r22, r12
    6bb6:	24 e6       	ldi	r18, 0x64	; 100
    6bb8:	30 e0       	ldi	r19, 0x00	; 0
    6bba:	40 e0       	ldi	r20, 0x00	; 0
    6bbc:	50 e0       	ldi	r21, 0x00	; 0
    6bbe:	0e 94 54 5e 	call	0xbca8	; 0xbca8 <__udivmodsi4>
    6bc2:	c8 57       	subi	r28, 0x78	; 120
    6bc4:	df 4f       	sbci	r29, 0xFF	; 255
    6bc6:	28 83       	st	Y, r18
    6bc8:	39 83       	std	Y+1, r19	; 0x01
    6bca:	4a 83       	std	Y+2, r20	; 0x02
    6bcc:	5b 83       	std	Y+3, r21	; 0x03
    6bce:	c8 58       	subi	r28, 0x88	; 136
    6bd0:	d0 40       	sbci	r29, 0x00	; 0
	medReal=0;
    6bd2:	d8 01       	movw	r26, r16
    6bd4:	a9 53       	subi	r26, 0x39	; 57
    6bd6:	bc 4f       	sbci	r27, 0xFC	; 252
    6bd8:	1d 92       	st	X+, r1
    6bda:	1d 92       	st	X+, r1
    6bdc:	1d 92       	st	X+, r1
    6bde:	1c 92       	st	X, r1
    6be0:	13 97       	sbiw	r26, 0x03	; 3
	medImag=0;
    6be2:	f8 01       	movw	r30, r16
    6be4:	e5 53       	subi	r30, 0x35	; 53
    6be6:	fc 4f       	sbci	r31, 0xFC	; 252
    6be8:	10 82       	st	Z, r1
    6bea:	11 82       	std	Z+1, r1	; 0x01
    6bec:	12 82       	std	Z+2, r1	; 0x02
    6bee:	13 82       	std	Z+3, r1	; 0x03
    6bf0:	98 01       	movw	r18, r16
    6bf2:	25 56       	subi	r18, 0x65	; 101
    6bf4:	3c 4f       	sbci	r19, 0xFC	; 252
    6bf6:	ec 96       	adiw	r28, 0x3c	; 60
    6bf8:	3f af       	std	Y+63, r19	; 0x3f
    6bfa:	2e af       	std	Y+62, r18	; 0x3e
    6bfc:	ec 97       	sbiw	r28, 0x3c	; 60
    6bfe:	a8 01       	movw	r20, r16
    6c00:	41 59       	subi	r20, 0x91	; 145
    6c02:	5f 4f       	sbci	r21, 0xFF	; 255
    6c04:	e5 96       	adiw	r28, 0x35	; 53
    6c06:	5f af       	std	Y+63, r21	; 0x3f
    6c08:	4e af       	std	Y+62, r20	; 0x3e
    6c0a:	e5 97       	sbiw	r28, 0x35	; 53
		
		Serial.print("|I=");
		double j = (double) impedance * sin(ph);
		Serial.println(j);
		
		medReal+=r;
    6c0c:	c0 58       	subi	r28, 0x80	; 128
    6c0e:	df 4f       	sbci	r29, 0xFF	; 255
    6c10:	b9 83       	std	Y+1, r27	; 0x01
    6c12:	a8 83       	st	Y, r26
    6c14:	c0 58       	subi	r28, 0x80	; 128
    6c16:	d0 40       	sbci	r29, 0x00	; 0

		medImag+=j;
    6c18:	ce 57       	subi	r28, 0x7E	; 126
    6c1a:	df 4f       	sbci	r29, 0xFF	; 255
    6c1c:	f9 83       	std	Y+1, r31	; 0x01
    6c1e:	e8 83       	st	Y, r30
    6c20:	c2 58       	subi	r28, 0x82	; 130
    6c22:	d0 40       	sbci	r29, 0x00	; 0
	medReal=0;
	medImag=0;
	
	int real, imag;
	int i=0;
	while((AD5933::readStatusRegister() & STATUS_SWEEP_DONE) != STATUS_SWEEP_DONE){
    6c24:	0e 94 ee 53 	call	0xa7dc	; 0xa7dc <_ZN6AD593318readStatusRegisterEv>
    6c28:	82 fd       	sbrc	r24, 2
    6c2a:	e5 c1       	rjmp	.+970    	; 0x6ff6 <_ZN11red_crystal5lerADEiR8leituras+0x502>
		if(!AD5933::getComplexData(&real, &imag)){
    6c2c:	be 01       	movw	r22, r28
    6c2e:	61 59       	subi	r22, 0x91	; 145
    6c30:	7f 4f       	sbci	r23, 0xFF	; 255
    6c32:	ce 01       	movw	r24, r28
    6c34:	8f 58       	subi	r24, 0x8F	; 143
    6c36:	9f 4f       	sbci	r25, 0xFF	; 255
    6c38:	0e 94 2a 54 	call	0xa854	; 0xa854 <_ZN6AD593314getComplexDataEPiS0_>
    6c3c:	81 11       	cpse	r24, r1
    6c3e:	06 c0       	rjmp	.+12     	; 0x6c4c <_ZN11red_crystal5lerADEiR8leituras+0x158>
			Serial.println("Falhou em adquirir DATA de frequencia.");
    6c40:	6a eb       	ldi	r22, 0xBA	; 186
    6c42:	7a e0       	ldi	r23, 0x0A	; 10
    6c44:	80 ec       	ldi	r24, 0xC0	; 192
    6c46:	90 e1       	ldi	r25, 0x10	; 16
    6c48:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		}
		Serial.print(cfreq);
    6c4c:	2a e0       	ldi	r18, 0x0A	; 10
    6c4e:	30 e0       	ldi	r19, 0x00	; 0
    6c50:	e9 96       	adiw	r28, 0x39	; 57
    6c52:	4c ad       	ldd	r20, Y+60	; 0x3c
    6c54:	5d ad       	ldd	r21, Y+61	; 0x3d
    6c56:	6e ad       	ldd	r22, Y+62	; 0x3e
    6c58:	7f ad       	ldd	r23, Y+63	; 0x3f
    6c5a:	e9 97       	sbiw	r28, 0x39	; 57
    6c5c:	80 ec       	ldi	r24, 0xC0	; 192
    6c5e:	90 e1       	ldi	r25, 0x10	; 16
    6c60:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN5Print5printEli>

		long tempPow = pow(real, 2) + pow(imag, 2);
    6c64:	e3 96       	adiw	r28, 0x33	; 51
    6c66:	6e ad       	ldd	r22, Y+62	; 0x3e
    6c68:	7f ad       	ldd	r23, Y+63	; 0x3f
    6c6a:	e3 97       	sbiw	r28, 0x33	; 51
    6c6c:	07 2e       	mov	r0, r23
    6c6e:	00 0c       	add	r0, r0
    6c70:	88 0b       	sbc	r24, r24
    6c72:	99 0b       	sbc	r25, r25
    6c74:	0e 94 35 5c 	call	0xb86a	; 0xb86a <__floatsisf>
    6c78:	2b 01       	movw	r4, r22
    6c7a:	3c 01       	movw	r6, r24
    6c7c:	e1 96       	adiw	r28, 0x31	; 49
    6c7e:	6e ad       	ldd	r22, Y+62	; 0x3e
    6c80:	7f ad       	ldd	r23, Y+63	; 0x3f
    6c82:	e1 97       	sbiw	r28, 0x31	; 49
    6c84:	07 2e       	mov	r0, r23
    6c86:	00 0c       	add	r0, r0
    6c88:	88 0b       	sbc	r24, r24
    6c8a:	99 0b       	sbc	r25, r25
    6c8c:	0e 94 35 5c 	call	0xb86a	; 0xb86a <__floatsisf>
    6c90:	4b 01       	movw	r8, r22
    6c92:	5c 01       	movw	r10, r24
		double magnitude = sqrt(tempPow);
    6c94:	a3 01       	movw	r20, r6
    6c96:	92 01       	movw	r18, r4
    6c98:	c3 01       	movw	r24, r6
    6c9a:	b2 01       	movw	r22, r4
    6c9c:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    6ca0:	6b 01       	movw	r12, r22
    6ca2:	7c 01       	movw	r14, r24
    6ca4:	a5 01       	movw	r20, r10
    6ca6:	94 01       	movw	r18, r8
    6ca8:	c5 01       	movw	r24, r10
    6caa:	b4 01       	movw	r22, r8
    6cac:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    6cb0:	9b 01       	movw	r18, r22
    6cb2:	ac 01       	movw	r20, r24
    6cb4:	c7 01       	movw	r24, r14
    6cb6:	b6 01       	movw	r22, r12
    6cb8:	0e 94 cd 5a 	call	0xb59a	; 0xb59a <__addsf3>
    6cbc:	0e 94 02 5c 	call	0xb804	; 0xb804 <__fixsfsi>
    6cc0:	0e 94 35 5c 	call	0xb86a	; 0xb86a <__floatsisf>
    6cc4:	0e 94 bb 5d 	call	0xbb76	; 0xbb76 <sqrt>
    6cc8:	c4 58       	subi	r28, 0x84	; 132
    6cca:	df 4f       	sbci	r29, 0xFF	; 255
    6ccc:	68 83       	st	Y, r22
    6cce:	79 83       	std	Y+1, r23	; 0x01
    6cd0:	8a 83       	std	Y+2, r24	; 0x02
    6cd2:	9b 83       	std	Y+3, r25	; 0x03
    6cd4:	cc 57       	subi	r28, 0x7C	; 124
    6cd6:	d0 40       	sbci	r29, 0x00	; 0
    6cd8:	e5 96       	adiw	r28, 0x35	; 53
    6cda:	2e ad       	ldd	r18, Y+62	; 0x3e
    6cdc:	3f ad       	ldd	r19, Y+63	; 0x3f
    6cde:	e5 97       	sbiw	r28, 0x35	; 53
    6ce0:	cc 57       	subi	r28, 0x7C	; 124
    6ce2:	df 4f       	sbci	r29, 0xFF	; 255
    6ce4:	39 83       	std	Y+1, r19	; 0x01
    6ce6:	28 83       	st	Y, r18
    6ce8:	c4 58       	subi	r28, 0x84	; 132
    6cea:	d0 40       	sbci	r29, 0x00	; 0
		
		float tempImp = magnitude*gain[i];
		double impedance = 1.0/tempImp;
    6cec:	d9 01       	movw	r26, r18
    6cee:	2d 91       	ld	r18, X+
    6cf0:	3d 91       	ld	r19, X+
    6cf2:	4d 91       	ld	r20, X+
    6cf4:	5d 91       	ld	r21, X+
    6cf6:	e5 96       	adiw	r28, 0x35	; 53
    6cf8:	bf af       	std	Y+63, r27	; 0x3f
    6cfa:	ae af       	std	Y+62, r26	; 0x3e
    6cfc:	e5 97       	sbiw	r28, 0x35	; 53
    6cfe:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    6d02:	9b 01       	movw	r18, r22
    6d04:	ac 01       	movw	r20, r24
    6d06:	60 e0       	ldi	r22, 0x00	; 0
    6d08:	70 e0       	ldi	r23, 0x00	; 0
    6d0a:	80 e8       	ldi	r24, 0x80	; 128
    6d0c:	9f e3       	ldi	r25, 0x3F	; 63
    6d0e:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    6d12:	6b 01       	movw	r12, r22
    6d14:	7c 01       	movw	r14, r24
		
		double ph = atan2(imag, real);
    6d16:	a3 01       	movw	r20, r6
    6d18:	92 01       	movw	r18, r4
    6d1a:	c5 01       	movw	r24, r10
    6d1c:	b4 01       	movw	r22, r8
    6d1e:	0e 94 40 5b 	call	0xb680	; 0xb680 <atan2>
    6d22:	4b 01       	movw	r8, r22
    6d24:	5c 01       	movw	r10, r24
		
		Serial.print("imag/real=phase == ");
    6d26:	61 ee       	ldi	r22, 0xE1	; 225
    6d28:	7a e0       	ldi	r23, 0x0A	; 10
    6d2a:	80 ec       	ldi	r24, 0xC0	; 192
    6d2c:	90 e1       	ldi	r25, 0x10	; 16
    6d2e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.print(imag);
    6d32:	e1 96       	adiw	r28, 0x31	; 49
    6d34:	6e ad       	ldd	r22, Y+62	; 0x3e
    6d36:	7f ad       	ldd	r23, Y+63	; 0x3f
    6d38:	e1 97       	sbiw	r28, 0x31	; 49
    6d3a:	4a e0       	ldi	r20, 0x0A	; 10
    6d3c:	50 e0       	ldi	r21, 0x00	; 0
    6d3e:	80 ec       	ldi	r24, 0xC0	; 192
    6d40:	90 e1       	ldi	r25, 0x10	; 16
    6d42:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		Serial.print("/");
    6d46:	64 ea       	ldi	r22, 0xA4	; 164
    6d48:	75 e0       	ldi	r23, 0x05	; 5
    6d4a:	80 ec       	ldi	r24, 0xC0	; 192
    6d4c:	90 e1       	ldi	r25, 0x10	; 16
    6d4e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.print(real);
    6d52:	e3 96       	adiw	r28, 0x33	; 51
    6d54:	6e ad       	ldd	r22, Y+62	; 0x3e
    6d56:	7f ad       	ldd	r23, Y+63	; 0x3f
    6d58:	e3 97       	sbiw	r28, 0x33	; 51
    6d5a:	4a e0       	ldi	r20, 0x0A	; 10
    6d5c:	50 e0       	ldi	r21, 0x00	; 0
    6d5e:	80 ec       	ldi	r24, 0xC0	; 192
    6d60:	90 e1       	ldi	r25, 0x10	; 16
    6d62:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
		Serial.print("=");
    6d66:	6f e9       	ldi	r22, 0x9F	; 159
    6d68:	70 e1       	ldi	r23, 0x10	; 16
    6d6a:	80 ec       	ldi	r24, 0xC0	; 192
    6d6c:	90 e1       	ldi	r25, 0x10	; 16
    6d6e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.println((double) imag/real);
    6d72:	e1 96       	adiw	r28, 0x31	; 49
    6d74:	6e ad       	ldd	r22, Y+62	; 0x3e
    6d76:	7f ad       	ldd	r23, Y+63	; 0x3f
    6d78:	e1 97       	sbiw	r28, 0x31	; 49
    6d7a:	07 2e       	mov	r0, r23
    6d7c:	00 0c       	add	r0, r0
    6d7e:	88 0b       	sbc	r24, r24
    6d80:	99 0b       	sbc	r25, r25
    6d82:	0e 94 35 5c 	call	0xb86a	; 0xb86a <__floatsisf>
    6d86:	2b 01       	movw	r4, r22
    6d88:	3c 01       	movw	r6, r24
    6d8a:	e3 96       	adiw	r28, 0x33	; 51
    6d8c:	6e ad       	ldd	r22, Y+62	; 0x3e
    6d8e:	7f ad       	ldd	r23, Y+63	; 0x3f
    6d90:	e3 97       	sbiw	r28, 0x33	; 51
    6d92:	07 2e       	mov	r0, r23
    6d94:	00 0c       	add	r0, r0
    6d96:	88 0b       	sbc	r24, r24
    6d98:	99 0b       	sbc	r25, r25
    6d9a:	0e 94 35 5c 	call	0xb86a	; 0xb86a <__floatsisf>
    6d9e:	9b 01       	movw	r18, r22
    6da0:	ac 01       	movw	r20, r24
    6da2:	c3 01       	movw	r24, r6
    6da4:	b2 01       	movw	r22, r4
    6da6:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    6daa:	ab 01       	movw	r20, r22
    6dac:	bc 01       	movw	r22, r24
    6dae:	22 e0       	ldi	r18, 0x02	; 2
    6db0:	30 e0       	ldi	r19, 0x00	; 0
    6db2:	80 ec       	ldi	r24, 0xC0	; 192
    6db4:	90 e1       	ldi	r25, 0x10	; 16
    6db6:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
		
		Serial.print(ph);
    6dba:	22 e0       	ldi	r18, 0x02	; 2
    6dbc:	30 e0       	ldi	r19, 0x00	; 0
    6dbe:	b5 01       	movw	r22, r10
    6dc0:	a4 01       	movw	r20, r8
    6dc2:	80 ec       	ldi	r24, 0xC0	; 192
    6dc4:	90 e1       	ldi	r25, 0x10	; 16
    6dc6:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Print5printEdi>
		Serial.print(":");
    6dca:	69 e2       	ldi	r22, 0x29	; 41
    6dcc:	78 e0       	ldi	r23, 0x08	; 8
    6dce:	80 ec       	ldi	r24, 0xC0	; 192
    6dd0:	90 e1       	ldi	r25, 0x10	; 16
    6dd2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.println(ph * 180/PI);
    6dd6:	20 e0       	ldi	r18, 0x00	; 0
    6dd8:	30 e0       	ldi	r19, 0x00	; 0
    6dda:	44 e3       	ldi	r20, 0x34	; 52
    6ddc:	53 e4       	ldi	r21, 0x43	; 67
    6dde:	c5 01       	movw	r24, r10
    6de0:	b4 01       	movw	r22, r8
    6de2:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    6de6:	2b ed       	ldi	r18, 0xDB	; 219
    6de8:	3f e0       	ldi	r19, 0x0F	; 15
    6dea:	49 e4       	ldi	r20, 0x49	; 73
    6dec:	50 e4       	ldi	r21, 0x40	; 64
    6dee:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    6df2:	ab 01       	movw	r20, r22
    6df4:	bc 01       	movw	r22, r24
    6df6:	22 e0       	ldi	r18, 0x02	; 2
    6df8:	30 e0       	ldi	r19, 0x00	; 0
    6dfa:	80 ec       	ldi	r24, 0xC0	; 192
    6dfc:	90 e1       	ldi	r25, 0x10	; 16
    6dfe:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
		
		ph -= phase[i];
    6e02:	ec 96       	adiw	r28, 0x3c	; 60
    6e04:	ee ad       	ldd	r30, Y+62	; 0x3e
    6e06:	ff ad       	ldd	r31, Y+63	; 0x3f
    6e08:	ec 97       	sbiw	r28, 0x3c	; 60
    6e0a:	21 91       	ld	r18, Z+
    6e0c:	31 91       	ld	r19, Z+
    6e0e:	41 91       	ld	r20, Z+
    6e10:	51 91       	ld	r21, Z+
    6e12:	ec 96       	adiw	r28, 0x3c	; 60
    6e14:	ff af       	std	Y+63, r31	; 0x3f
    6e16:	ee af       	std	Y+62, r30	; 0x3e
    6e18:	ec 97       	sbiw	r28, 0x3c	; 60
    6e1a:	c5 01       	movw	r24, r10
    6e1c:	b4 01       	movw	r22, r8
    6e1e:	0e 94 cc 5a 	call	0xb598	; 0xb598 <__subsf3>
    6e22:	4b 01       	movw	r8, r22
    6e24:	5c 01       	movw	r10, r24
		Serial.print("M=");
    6e26:	69 e1       	ldi	r22, 0x19	; 25
    6e28:	7f e0       	ldi	r23, 0x0F	; 15
    6e2a:	80 ec       	ldi	r24, 0xC0	; 192
    6e2c:	90 e1       	ldi	r25, 0x10	; 16
    6e2e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.println(magnitude);
    6e32:	22 e0       	ldi	r18, 0x02	; 2
    6e34:	30 e0       	ldi	r19, 0x00	; 0
    6e36:	c4 58       	subi	r28, 0x84	; 132
    6e38:	df 4f       	sbci	r29, 0xFF	; 255
    6e3a:	48 81       	ld	r20, Y
    6e3c:	59 81       	ldd	r21, Y+1	; 0x01
    6e3e:	6a 81       	ldd	r22, Y+2	; 0x02
    6e40:	7b 81       	ldd	r23, Y+3	; 0x03
    6e42:	cc 57       	subi	r28, 0x7C	; 124
    6e44:	d0 40       	sbci	r29, 0x00	; 0
    6e46:	80 ec       	ldi	r24, 0xC0	; 192
    6e48:	90 e1       	ldi	r25, 0x10	; 16
    6e4a:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
		Serial.print("|Z|=");
    6e4e:	65 ef       	ldi	r22, 0xF5	; 245
    6e50:	7a e0       	ldi	r23, 0x0A	; 10
    6e52:	80 ec       	ldi	r24, 0xC0	; 192
    6e54:	90 e1       	ldi	r25, 0x10	; 16
    6e56:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.println(impedance);
    6e5a:	22 e0       	ldi	r18, 0x02	; 2
    6e5c:	30 e0       	ldi	r19, 0x00	; 0
    6e5e:	b7 01       	movw	r22, r14
    6e60:	a6 01       	movw	r20, r12
    6e62:	80 ec       	ldi	r24, 0xC0	; 192
    6e64:	90 e1       	ldi	r25, 0x10	; 16
    6e66:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
		Serial.print("G=");
    6e6a:	6a ef       	ldi	r22, 0xFA	; 250
    6e6c:	7a e0       	ldi	r23, 0x0A	; 10
    6e6e:	80 ec       	ldi	r24, 0xC0	; 192
    6e70:	90 e1       	ldi	r25, 0x10	; 16
    6e72:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.println(gain[i], 15);
    6e76:	cc 57       	subi	r28, 0x7C	; 124
    6e78:	df 4f       	sbci	r29, 0xFF	; 255
    6e7a:	a8 81       	ld	r26, Y
    6e7c:	b9 81       	ldd	r27, Y+1	; 0x01
    6e7e:	c4 58       	subi	r28, 0x84	; 132
    6e80:	d0 40       	sbci	r29, 0x00	; 0
    6e82:	4d 91       	ld	r20, X+
    6e84:	5d 91       	ld	r21, X+
    6e86:	6d 91       	ld	r22, X+
    6e88:	7c 91       	ld	r23, X
    6e8a:	2f e0       	ldi	r18, 0x0F	; 15
    6e8c:	30 e0       	ldi	r19, 0x00	; 0
    6e8e:	80 ec       	ldi	r24, 0xC0	; 192
    6e90:	90 e1       	ldi	r25, 0x10	; 16
    6e92:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
		Serial.print("phase:");
    6e96:	6d ef       	ldi	r22, 0xFD	; 253
    6e98:	7a e0       	ldi	r23, 0x0A	; 10
    6e9a:	80 ec       	ldi	r24, 0xC0	; 192
    6e9c:	90 e1       	ldi	r25, 0x10	; 16
    6e9e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.println(ph  * 180.00 / PI);
    6ea2:	20 e0       	ldi	r18, 0x00	; 0
    6ea4:	30 e0       	ldi	r19, 0x00	; 0
    6ea6:	44 e3       	ldi	r20, 0x34	; 52
    6ea8:	53 e4       	ldi	r21, 0x43	; 67
    6eaa:	c5 01       	movw	r24, r10
    6eac:	b4 01       	movw	r22, r8
    6eae:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    6eb2:	2b ed       	ldi	r18, 0xDB	; 219
    6eb4:	3f e0       	ldi	r19, 0x0F	; 15
    6eb6:	49 e4       	ldi	r20, 0x49	; 73
    6eb8:	50 e4       	ldi	r21, 0x40	; 64
    6eba:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    6ebe:	ab 01       	movw	r20, r22
    6ec0:	bc 01       	movw	r22, r24
    6ec2:	22 e0       	ldi	r18, 0x02	; 2
    6ec4:	30 e0       	ldi	r19, 0x00	; 0
    6ec6:	80 ec       	ldi	r24, 0xC0	; 192
    6ec8:	90 e1       	ldi	r25, 0x10	; 16
    6eca:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
		
		Serial.print("R=");
    6ece:	64 e0       	ldi	r22, 0x04	; 4
    6ed0:	7b e0       	ldi	r23, 0x0B	; 11
    6ed2:	80 ec       	ldi	r24, 0xC0	; 192
    6ed4:	90 e1       	ldi	r25, 0x10	; 16
    6ed6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		double r = (double) impedance * cos(ph);
    6eda:	c5 01       	movw	r24, r10
    6edc:	b4 01       	movw	r22, r8
    6ede:	0e 94 97 5b 	call	0xb72e	; 0xb72e <cos>
    6ee2:	9b 01       	movw	r18, r22
    6ee4:	ac 01       	movw	r20, r24
    6ee6:	c7 01       	movw	r24, r14
    6ee8:	b6 01       	movw	r22, r12
    6eea:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    6eee:	2b 01       	movw	r4, r22
    6ef0:	3c 01       	movw	r6, r24
		Serial.print(r);
    6ef2:	22 e0       	ldi	r18, 0x02	; 2
    6ef4:	30 e0       	ldi	r19, 0x00	; 0
    6ef6:	ab 01       	movw	r20, r22
    6ef8:	bc 01       	movw	r22, r24
    6efa:	80 ec       	ldi	r24, 0xC0	; 192
    6efc:	90 e1       	ldi	r25, 0x10	; 16
    6efe:	0e 94 2f 09 	call	0x125e	; 0x125e <_ZN5Print5printEdi>
		
		Serial.print("|I=");
    6f02:	67 e0       	ldi	r22, 0x07	; 7
    6f04:	7b e0       	ldi	r23, 0x0B	; 11
    6f06:	80 ec       	ldi	r24, 0xC0	; 192
    6f08:	90 e1       	ldi	r25, 0x10	; 16
    6f0a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		double j = (double) impedance * sin(ph);
    6f0e:	c5 01       	movw	r24, r10
    6f10:	b4 01       	movw	r22, r8
    6f12:	0e 94 b1 5d 	call	0xbb62	; 0xbb62 <sin>
    6f16:	9b 01       	movw	r18, r22
    6f18:	ac 01       	movw	r20, r24
    6f1a:	c7 01       	movw	r24, r14
    6f1c:	b6 01       	movw	r22, r12
    6f1e:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    6f22:	6b 01       	movw	r12, r22
    6f24:	7c 01       	movw	r14, r24
		Serial.println(j);
    6f26:	22 e0       	ldi	r18, 0x02	; 2
    6f28:	30 e0       	ldi	r19, 0x00	; 0
    6f2a:	ab 01       	movw	r20, r22
    6f2c:	bc 01       	movw	r22, r24
    6f2e:	80 ec       	ldi	r24, 0xC0	; 192
    6f30:	90 e1       	ldi	r25, 0x10	; 16
    6f32:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
		
		medReal+=r;
    6f36:	a3 01       	movw	r20, r6
    6f38:	92 01       	movw	r18, r4
    6f3a:	c0 58       	subi	r28, 0x80	; 128
    6f3c:	df 4f       	sbci	r29, 0xFF	; 255
    6f3e:	e8 81       	ld	r30, Y
    6f40:	f9 81       	ldd	r31, Y+1	; 0x01
    6f42:	c0 58       	subi	r28, 0x80	; 128
    6f44:	d0 40       	sbci	r29, 0x00	; 0
    6f46:	60 81       	ld	r22, Z
    6f48:	71 81       	ldd	r23, Z+1	; 0x01
    6f4a:	82 81       	ldd	r24, Z+2	; 0x02
    6f4c:	93 81       	ldd	r25, Z+3	; 0x03
    6f4e:	0e 94 cd 5a 	call	0xb59a	; 0xb59a <__addsf3>
    6f52:	c0 58       	subi	r28, 0x80	; 128
    6f54:	df 4f       	sbci	r29, 0xFF	; 255
    6f56:	a8 81       	ld	r26, Y
    6f58:	b9 81       	ldd	r27, Y+1	; 0x01
    6f5a:	c0 58       	subi	r28, 0x80	; 128
    6f5c:	d0 40       	sbci	r29, 0x00	; 0
    6f5e:	6d 93       	st	X+, r22
    6f60:	7d 93       	st	X+, r23
    6f62:	8d 93       	st	X+, r24
    6f64:	9c 93       	st	X, r25
    6f66:	13 97       	sbiw	r26, 0x03	; 3

		medImag+=j;
    6f68:	a7 01       	movw	r20, r14
    6f6a:	96 01       	movw	r18, r12
    6f6c:	ce 57       	subi	r28, 0x7E	; 126
    6f6e:	df 4f       	sbci	r29, 0xFF	; 255
    6f70:	e8 81       	ld	r30, Y
    6f72:	f9 81       	ldd	r31, Y+1	; 0x01
    6f74:	c2 58       	subi	r28, 0x82	; 130
    6f76:	d0 40       	sbci	r29, 0x00	; 0
    6f78:	60 81       	ld	r22, Z
    6f7a:	71 81       	ldd	r23, Z+1	; 0x01
    6f7c:	82 81       	ldd	r24, Z+2	; 0x02
    6f7e:	93 81       	ldd	r25, Z+3	; 0x03
    6f80:	0e 94 cd 5a 	call	0xb59a	; 0xb59a <__addsf3>
    6f84:	ce 57       	subi	r28, 0x7E	; 126
    6f86:	df 4f       	sbci	r29, 0xFF	; 255
    6f88:	a8 81       	ld	r26, Y
    6f8a:	b9 81       	ldd	r27, Y+1	; 0x01
    6f8c:	c2 58       	subi	r28, 0x82	; 130
    6f8e:	d0 40       	sbci	r29, 0x00	; 0
    6f90:	6d 93       	st	X+, r22
    6f92:	7d 93       	st	X+, r23
    6f94:	8d 93       	st	X+, r24
    6f96:	9c 93       	st	X, r25
    6f98:	13 97       	sbiw	r26, 0x03	; 3
		
		arrayR[i] = r;
    6f9a:	ec 96       	adiw	r28, 0x3c	; 60
    6f9c:	ee ad       	ldd	r30, Y+62	; 0x3e
    6f9e:	ff ad       	ldd	r31, Y+63	; 0x3f
    6fa0:	ec 97       	sbiw	r28, 0x3c	; 60
    6fa2:	40 aa       	std	Z+48, r4	; 0x30
    6fa4:	51 aa       	std	Z+49, r5	; 0x31
    6fa6:	62 aa       	std	Z+50, r6	; 0x32
    6fa8:	73 aa       	std	Z+51, r7	; 0x33
		arrayJ[i] = j;
    6faa:	e5 96       	adiw	r28, 0x35	; 53
    6fac:	ee ad       	ldd	r30, Y+62	; 0x3e
    6fae:	ff ad       	ldd	r31, Y+63	; 0x3f
    6fb0:	e5 97       	sbiw	r28, 0x35	; 53
    6fb2:	e8 57       	subi	r30, 0x78	; 120
    6fb4:	fc 4f       	sbci	r31, 0xFC	; 252
    6fb6:	c0 82       	st	Z, r12
    6fb8:	d1 82       	std	Z+1, r13	; 0x01
    6fba:	e2 82       	std	Z+2, r14	; 0x02
    6fbc:	f3 82       	std	Z+3, r15	; 0x03
		
		i++;
		cfreq +=inc;
    6fbe:	e9 96       	adiw	r28, 0x39	; 57
    6fc0:	2c ad       	ldd	r18, Y+60	; 0x3c
    6fc2:	3d ad       	ldd	r19, Y+61	; 0x3d
    6fc4:	4e ad       	ldd	r20, Y+62	; 0x3e
    6fc6:	5f ad       	ldd	r21, Y+63	; 0x3f
    6fc8:	e9 97       	sbiw	r28, 0x39	; 57
    6fca:	c8 57       	subi	r28, 0x78	; 120
    6fcc:	df 4f       	sbci	r29, 0xFF	; 255
    6fce:	88 81       	ld	r24, Y
    6fd0:	99 81       	ldd	r25, Y+1	; 0x01
    6fd2:	aa 81       	ldd	r26, Y+2	; 0x02
    6fd4:	bb 81       	ldd	r27, Y+3	; 0x03
    6fd6:	c8 58       	subi	r28, 0x88	; 136
    6fd8:	d0 40       	sbci	r29, 0x00	; 0
    6fda:	28 0f       	add	r18, r24
    6fdc:	39 1f       	adc	r19, r25
    6fde:	4a 1f       	adc	r20, r26
    6fe0:	5b 1f       	adc	r21, r27
    6fe2:	e9 96       	adiw	r28, 0x39	; 57
    6fe4:	2c af       	std	Y+60, r18	; 0x3c
    6fe6:	3d af       	std	Y+61, r19	; 0x3d
    6fe8:	4e af       	std	Y+62, r20	; 0x3e
    6fea:	5f af       	std	Y+63, r21	; 0x3f
    6fec:	e9 97       	sbiw	r28, 0x39	; 57
		AD5933::setControlMode(CTRL_INCREMENT_FREQ);
    6fee:	80 e3       	ldi	r24, 0x30	; 48
    6ff0:	0e 94 33 53 	call	0xa666	; 0xa666 <_ZN6AD593314setControlModeEh>
	medReal=0;
	medImag=0;
	
	int real, imag;
	int i=0;
	while((AD5933::readStatusRegister() & STATUS_SWEEP_DONE) != STATUS_SWEEP_DONE){
    6ff4:	17 ce       	rjmp	.-978    	; 0x6c24 <_ZN11red_crystal5lerADEiR8leituras+0x130>
		
		i++;
		cfreq +=inc;
		AD5933::setControlMode(CTRL_INCREMENT_FREQ);
	}
	medReal/=(NUM_INCR+1);
    6ff6:	78 01       	movw	r14, r16
    6ff8:	99 e3       	ldi	r25, 0x39	; 57
    6ffa:	e9 1a       	sub	r14, r25
    6ffc:	9c ef       	ldi	r25, 0xFC	; 252
    6ffe:	f9 0a       	sbc	r15, r25
    7000:	20 e0       	ldi	r18, 0x00	; 0
    7002:	30 e0       	ldi	r19, 0x00	; 0
    7004:	40 e3       	ldi	r20, 0x30	; 48
    7006:	51 e4       	ldi	r21, 0x41	; 65
    7008:	d7 01       	movw	r26, r14
    700a:	6d 91       	ld	r22, X+
    700c:	7d 91       	ld	r23, X+
    700e:	8d 91       	ld	r24, X+
    7010:	9c 91       	ld	r25, X
    7012:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    7016:	f7 01       	movw	r30, r14
    7018:	60 83       	st	Z, r22
    701a:	71 83       	std	Z+1, r23	; 0x01
    701c:	82 83       	std	Z+2, r24	; 0x02
    701e:	93 83       	std	Z+3, r25	; 0x03
	medImag/=(NUM_INCR+1);
    7020:	98 01       	movw	r18, r16
    7022:	25 53       	subi	r18, 0x35	; 53
    7024:	3c 4f       	sbci	r19, 0xFC	; 252
    7026:	e5 96       	adiw	r28, 0x35	; 53
    7028:	3f af       	std	Y+63, r19	; 0x3f
    702a:	2e af       	std	Y+62, r18	; 0x3e
    702c:	e5 97       	sbiw	r28, 0x35	; 53
    702e:	20 e0       	ldi	r18, 0x00	; 0
    7030:	30 e0       	ldi	r19, 0x00	; 0
    7032:	40 e3       	ldi	r20, 0x30	; 48
    7034:	51 e4       	ldi	r21, 0x41	; 65
    7036:	e5 96       	adiw	r28, 0x35	; 53
    7038:	ae ad       	ldd	r26, Y+62	; 0x3e
    703a:	bf ad       	ldd	r27, Y+63	; 0x3f
    703c:	e5 97       	sbiw	r28, 0x35	; 53
    703e:	6d 91       	ld	r22, X+
    7040:	7d 91       	ld	r23, X+
    7042:	8d 91       	ld	r24, X+
    7044:	9c 91       	ld	r25, X
    7046:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    704a:	e5 96       	adiw	r28, 0x35	; 53
    704c:	ee ad       	ldd	r30, Y+62	; 0x3e
    704e:	ff ad       	ldd	r31, Y+63	; 0x3f
    7050:	e5 97       	sbiw	r28, 0x35	; 53
    7052:	60 83       	st	Z, r22
    7054:	71 83       	std	Z+1, r23	; 0x01
    7056:	82 83       	std	Z+2, r24	; 0x02
    7058:	93 83       	std	Z+3, r25	; 0x03
	float medGain=0;
	if(point == 1)
    705a:	f1 e0       	ldi	r31, 0x01	; 1
    705c:	2f 16       	cp	r2, r31
    705e:	31 04       	cpc	r3, r1
    7060:	19 f4       	brne	.+6      	; 0x7068 <_ZN11red_crystal5lerADEiR8leituras+0x574>
	{
		Serial.println("Modo 1point.");
    7062:	6b e0       	ldi	r22, 0x0B	; 11
    7064:	7b e0       	ldi	r23, 0x0B	; 11
    7066:	44 c0       	rjmp	.+136    	; 0x70f0 <_ZN11red_crystal5lerADEiR8leituras+0x5fc>
	}
	else if(point == 2)				//CHANGE THIS, MAKE SURE THE TWO-POINT FACTOR IS CALCULATED WITH THE NUMBER OF READINGS IN MIND.
    7068:	22 e0       	ldi	r18, 0x02	; 2
    706a:	22 16       	cp	r2, r18
    706c:	31 04       	cpc	r3, r1
    706e:	f1 f5       	brne	.+124    	; 0x70ec <_ZN11red_crystal5lerADEiR8leituras+0x5f8>
	{
		float firstP = gain[0];
    7070:	f8 01       	movw	r30, r16
    7072:	e1 59       	subi	r30, 0x91	; 145
    7074:	ff 4f       	sbci	r31, 0xFF	; 255
    7076:	80 80       	ld	r8, Z
    7078:	91 80       	ldd	r9, Z+1	; 0x01
    707a:	a2 80       	ldd	r10, Z+2	; 0x02
    707c:	b3 80       	ldd	r11, Z+3	; 0x03
		float finalP = gain[10];
		float dif = finalP-firstP;
    707e:	a5 01       	movw	r20, r10
    7080:	94 01       	movw	r18, r8
    7082:	b8 96       	adiw	r30, 0x28	; 40
    7084:	60 81       	ld	r22, Z
    7086:	71 81       	ldd	r23, Z+1	; 0x01
    7088:	82 81       	ldd	r24, Z+2	; 0x02
    708a:	93 81       	ldd	r25, Z+3	; 0x03
    708c:	0e 94 cc 5a 	call	0xb598	; 0xb598 <__subsf3>
		dif /= 10;
    7090:	20 e0       	ldi	r18, 0x00	; 0
    7092:	30 e0       	ldi	r19, 0x00	; 0
    7094:	40 e2       	ldi	r20, 0x20	; 32
    7096:	51 e4       	ldi	r21, 0x41	; 65
    7098:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    709c:	2b 01       	movw	r4, r22
    709e:	3c 01       	movw	r6, r24
    70a0:	18 01       	movw	r2, r16
    70a2:	33 e7       	ldi	r19, 0x73	; 115
    70a4:	23 0e       	add	r2, r19
    70a6:	31 1c       	adc	r3, r1
		for(int i=1;i<10;i++)
    70a8:	cc 24       	eor	r12, r12
    70aa:	c3 94       	inc	r12
    70ac:	d1 2c       	mov	r13, r1
		{
			gain[i] = firstP + (i*dif);
    70ae:	b6 01       	movw	r22, r12
    70b0:	0d 2c       	mov	r0, r13
    70b2:	00 0c       	add	r0, r0
    70b4:	88 0b       	sbc	r24, r24
    70b6:	99 0b       	sbc	r25, r25
    70b8:	0e 94 35 5c 	call	0xb86a	; 0xb86a <__floatsisf>
    70bc:	a3 01       	movw	r20, r6
    70be:	92 01       	movw	r18, r4
    70c0:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    70c4:	a5 01       	movw	r20, r10
    70c6:	94 01       	movw	r18, r8
    70c8:	0e 94 cd 5a 	call	0xb59a	; 0xb59a <__addsf3>
    70cc:	d1 01       	movw	r26, r2
    70ce:	6d 93       	st	X+, r22
    70d0:	7d 93       	st	X+, r23
    70d2:	8d 93       	st	X+, r24
    70d4:	9d 93       	st	X+, r25
    70d6:	1d 01       	movw	r2, r26
	{
		float firstP = gain[0];
		float finalP = gain[10];
		float dif = finalP-firstP;
		dif /= 10;
		for(int i=1;i<10;i++)
    70d8:	bf ef       	ldi	r27, 0xFF	; 255
    70da:	cb 1a       	sub	r12, r27
    70dc:	db 0a       	sbc	r13, r27
    70de:	ea e0       	ldi	r30, 0x0A	; 10
    70e0:	ce 16       	cp	r12, r30
    70e2:	d1 04       	cpc	r13, r1
    70e4:	21 f7       	brne	.-56     	; 0x70ae <_ZN11red_crystal5lerADEiR8leituras+0x5ba>
		{
			gain[i] = firstP + (i*dif);
		}
		Serial.println("Modo 2point.");
    70e6:	68 e1       	ldi	r22, 0x18	; 24
    70e8:	7b e0       	ldi	r23, 0x0B	; 11
    70ea:	02 c0       	rjmp	.+4      	; 0x70f0 <_ZN11red_crystal5lerADEiR8leituras+0x5fc>
	}
	else
	{
		Serial.println("Erro, modo point falhou, padrão utilizado.");
    70ec:	65 e2       	ldi	r22, 0x25	; 37
    70ee:	7b e0       	ldi	r23, 0x0B	; 11
    70f0:	80 ec       	ldi	r24, 0xC0	; 192
    70f2:	90 e1       	ldi	r25, 0x10	; 16
    70f4:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	for(int i=0;i<NUM_INCR+1;i++)
	{
		medGain+=gain[i];
	}
	medGain/=(NUM_INCR+1);
	digitalWrite(_pinD7, LOW);
    70f8:	f8 01       	movw	r30, r16
    70fa:	e3 5d       	subi	r30, 0xD3	; 211
    70fc:	fb 4f       	sbci	r31, 0xFB	; 251
    70fe:	60 e0       	ldi	r22, 0x00	; 0
    7100:	80 81       	ld	r24, Z
    7102:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
	Serial.println("Completo!");
    7106:	61 e5       	ldi	r22, 0x51	; 81
    7108:	7b e0       	ldi	r23, 0x0B	; 11
    710a:	80 ec       	ldi	r24, 0xC0	; 192
    710c:	90 e1       	ldi	r25, 0x10	; 16
    710e:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	Serial.print("MedReal=");
    7112:	6b e5       	ldi	r22, 0x5B	; 91
    7114:	7b e0       	ldi	r23, 0x0B	; 11
    7116:	80 ec       	ldi	r24, 0xC0	; 192
    7118:	90 e1       	ldi	r25, 0x10	; 16
    711a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.println(medReal);
    711e:	d7 01       	movw	r26, r14
    7120:	4d 91       	ld	r20, X+
    7122:	5d 91       	ld	r21, X+
    7124:	6d 91       	ld	r22, X+
    7126:	7c 91       	ld	r23, X
    7128:	22 e0       	ldi	r18, 0x02	; 2
    712a:	30 e0       	ldi	r19, 0x00	; 0
    712c:	80 ec       	ldi	r24, 0xC0	; 192
    712e:	90 e1       	ldi	r25, 0x10	; 16
    7130:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
	Serial.print("MedImag=");
    7134:	64 e6       	ldi	r22, 0x64	; 100
    7136:	7b e0       	ldi	r23, 0x0B	; 11
    7138:	80 ec       	ldi	r24, 0xC0	; 192
    713a:	90 e1       	ldi	r25, 0x10	; 16
    713c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.println(medImag);
    7140:	e5 96       	adiw	r28, 0x35	; 53
    7142:	ee ad       	ldd	r30, Y+62	; 0x3e
    7144:	ff ad       	ldd	r31, Y+63	; 0x3f
    7146:	e5 97       	sbiw	r28, 0x35	; 53
    7148:	40 81       	ld	r20, Z
    714a:	51 81       	ldd	r21, Z+1	; 0x01
    714c:	62 81       	ldd	r22, Z+2	; 0x02
    714e:	73 81       	ldd	r23, Z+3	; 0x03
    7150:	22 e0       	ldi	r18, 0x02	; 2
    7152:	30 e0       	ldi	r19, 0x00	; 0
    7154:	80 ec       	ldi	r24, 0xC0	; 192
    7156:	90 e1       	ldi	r25, 0x10	; 16
    7158:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
	leitura leiTemp = {_freq, medReal, medImag };
    715c:	9e 01       	movw	r18, r28
    715e:	2f 5f       	subi	r18, 0xFF	; 255
    7160:	3f 4f       	sbci	r19, 0xFF	; 255
    7162:	19 01       	movw	r2, r18
    7164:	8e e6       	ldi	r24, 0x6E	; 110
    7166:	d9 01       	movw	r26, r18
    7168:	1d 92       	st	X+, r1
    716a:	8a 95       	dec	r24
    716c:	e9 f7       	brne	.-6      	; 0x7168 <_ZN11red_crystal5lerADEiR8leituras+0x674>
    716e:	f8 01       	movw	r30, r16
    7170:	e9 5d       	subi	r30, 0xD9	; 217
    7172:	fb 4f       	sbci	r31, 0xFB	; 251
    7174:	80 80       	ld	r8, Z
    7176:	91 80       	ldd	r9, Z+1	; 0x01
    7178:	a2 80       	ldd	r10, Z+2	; 0x02
    717a:	b3 80       	ldd	r11, Z+3	; 0x03
    717c:	f7 01       	movw	r30, r14
    717e:	c0 80       	ld	r12, Z
    7180:	d1 80       	ldd	r13, Z+1	; 0x01
    7182:	e2 80       	ldd	r14, Z+2	; 0x02
    7184:	f3 80       	ldd	r15, Z+3	; 0x03
    7186:	e5 96       	adiw	r28, 0x35	; 53
    7188:	ae ad       	ldd	r26, Y+62	; 0x3e
    718a:	bf ad       	ldd	r27, Y+63	; 0x3f
    718c:	e5 97       	sbiw	r28, 0x35	; 53
    718e:	4d 90       	ld	r4, X+
    7190:	5d 90       	ld	r5, X+
    7192:	6d 90       	ld	r6, X+
    7194:	7c 90       	ld	r7, X
	memcpy(leiTemp.arrayR, arrayR, sizeof leiTemp.arrayR);
    7196:	f8 01       	movw	r30, r16
    7198:	e1 53       	subi	r30, 0x31	; 49
    719a:	fc 4f       	sbci	r31, 0xFC	; 252
    719c:	8c e2       	ldi	r24, 0x2C	; 44
    719e:	de 01       	movw	r26, r28
    71a0:	1d 96       	adiw	r26, 0x0d	; 13
    71a2:	01 90       	ld	r0, Z+
    71a4:	0d 92       	st	X+, r0
    71a6:	8a 95       	dec	r24
    71a8:	e1 f7       	brne	.-8      	; 0x71a2 <_ZN11red_crystal5lerADEiR8leituras+0x6ae>
	memcpy(leiTemp.arrayJ, arrayJ, sizeof leiTemp.arrayJ);
    71aa:	f8 01       	movw	r30, r16
    71ac:	e5 50       	subi	r30, 0x05	; 5
    71ae:	fc 4f       	sbci	r31, 0xFC	; 252
    71b0:	8c e2       	ldi	r24, 0x2C	; 44
    71b2:	de 01       	movw	r26, r28
    71b4:	d9 96       	adiw	r26, 0x39	; 57
    71b6:	01 90       	ld	r0, Z+
    71b8:	0d 92       	st	X+, r0
    71ba:	8a 95       	dec	r24
    71bc:	e1 f7       	brne	.-8      	; 0x71b6 <_ZN11red_crystal5lerADEiR8leituras+0x6c2>
	
	// Set AD5933 power mode to standby when finished
	if (!AD5933::setPowerMode(POWER_STANDBY)){
    71be:	80 eb       	ldi	r24, 0xB0	; 176
    71c0:	0e 94 4e 53 	call	0xa69c	; 0xa69c <_ZN6AD593312setPowerModeEh>
    71c4:	81 11       	cpse	r24, r1
    71c6:	06 c0       	rjmp	.+12     	; 0x71d4 <_ZN11red_crystal5lerADEiR8leituras+0x6e0>
		Serial.println("Could not set to standby...");
    71c8:	6d e6       	ldi	r22, 0x6D	; 109
    71ca:	7b e0       	ldi	r23, 0x0B	; 11
    71cc:	80 ec       	ldi	r24, 0xC0	; 192
    71ce:	90 e1       	ldi	r25, 0x10	; 16
    71d0:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	}
	l = leiTemp;
    71d4:	89 82       	std	Y+1, r8	; 0x01
    71d6:	9a 82       	std	Y+2, r9	; 0x02
    71d8:	ab 82       	std	Y+3, r10	; 0x03
    71da:	bc 82       	std	Y+4, r11	; 0x04
    71dc:	cd 82       	std	Y+5, r12	; 0x05
    71de:	de 82       	std	Y+6, r13	; 0x06
    71e0:	ef 82       	std	Y+7, r14	; 0x07
    71e2:	f8 86       	std	Y+8, r15	; 0x08
    71e4:	49 86       	std	Y+9, r4	; 0x09
    71e6:	5a 86       	std	Y+10, r5	; 0x0a
    71e8:	6b 86       	std	Y+11, r6	; 0x0b
    71ea:	7c 86       	std	Y+12, r7	; 0x0c
    71ec:	8e e6       	ldi	r24, 0x6E	; 110
    71ee:	f1 01       	movw	r30, r2
    71f0:	ca 57       	subi	r28, 0x7A	; 122
    71f2:	df 4f       	sbci	r29, 0xFF	; 255
    71f4:	a8 81       	ld	r26, Y
    71f6:	b9 81       	ldd	r27, Y+1	; 0x01
    71f8:	c6 58       	subi	r28, 0x86	; 134
    71fa:	d0 40       	sbci	r29, 0x00	; 0
    71fc:	01 90       	ld	r0, Z+
    71fe:	0d 92       	st	X+, r0
    7200:	8a 95       	dec	r24
    7202:	e1 f7       	brne	.-8      	; 0x71fc <_ZN11red_crystal5lerADEiR8leituras+0x708>
	return true;
}
    7204:	ea 96       	adiw	r28, 0x3a	; 58
    7206:	8f ad       	ldd	r24, Y+63	; 0x3f
    7208:	ea 97       	sbiw	r28, 0x3a	; 58
    720a:	c5 57       	subi	r28, 0x75	; 117
    720c:	df 4f       	sbci	r29, 0xFF	; 255
    720e:	0f b6       	in	r0, 0x3f	; 63
    7210:	f8 94       	cli
    7212:	de bf       	out	0x3e, r29	; 62
    7214:	0f be       	out	0x3f, r0	; 63
    7216:	cd bf       	out	0x3d, r28	; 61
    7218:	df 91       	pop	r29
    721a:	cf 91       	pop	r28
    721c:	1f 91       	pop	r17
    721e:	0f 91       	pop	r16
    7220:	ff 90       	pop	r15
    7222:	ef 90       	pop	r14
    7224:	df 90       	pop	r13
    7226:	cf 90       	pop	r12
    7228:	bf 90       	pop	r11
    722a:	af 90       	pop	r10
    722c:	9f 90       	pop	r9
    722e:	8f 90       	pop	r8
    7230:	7f 90       	pop	r7
    7232:	6f 90       	pop	r6
    7234:	5f 90       	pop	r5
    7236:	4f 90       	pop	r4
    7238:	3f 90       	pop	r3
    723a:	2f 90       	pop	r2
    723c:	08 95       	ret

0000723e <_ZN11red_crystal11temperaturaEv>:
double red_crystal::temperatura()
{
	return AD5933::getTemperature();
    723e:	0c 94 f0 53 	jmp	0xa7e0	; 0xa7e0 <_ZN6AD593314getTemperatureEv>

00007242 <_ZN11red_crystal8setRangeEi>:
}

bool red_crystal::setRange(int range)
{
	if(range<1 || range>4)
    7242:	9b 01       	movw	r18, r22
    7244:	21 50       	subi	r18, 0x01	; 1
    7246:	31 09       	sbc	r19, r1
    7248:	24 30       	cpi	r18, 0x04	; 4
    724a:	31 05       	cpc	r19, r1
    724c:	38 f4       	brcc	.+14     	; 0x725c <_ZN11red_crystal8setRangeEi+0x1a>
	{
		return false;
	}
	else
	{
		_range = range;
    724e:	fc 01       	movw	r30, r24
    7250:	e5 5d       	subi	r30, 0xD5	; 213
    7252:	fb 4f       	sbci	r31, 0xFB	; 251
    7254:	71 83       	std	Z+1, r23	; 0x01
    7256:	60 83       	st	Z, r22
		return true;
    7258:	81 e0       	ldi	r24, 0x01	; 1
    725a:	08 95       	ret

bool red_crystal::setRange(int range)
{
	if(range<1 || range>4)
	{
		return false;
    725c:	80 e0       	ldi	r24, 0x00	; 0
	{
		_range = range;
		return true;
	}
	return false;
}
    725e:	08 95       	ret

00007260 <_ZN11red_crystal8getRangeEv>:
int red_crystal::getRange()
{
	return _range;
    7260:	85 5d       	subi	r24, 0xD5	; 213
    7262:	9b 4f       	sbci	r25, 0xFB	; 251
    7264:	fc 01       	movw	r30, r24
    7266:	80 81       	ld	r24, Z
    7268:	91 81       	ldd	r25, Z+1	; 0x01
    726a:	08 95       	ret

0000726c <_ZN11EEPROMClass5writeEih.isra.1>:
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    726c:	0c 94 ce 66 	jmp	0xcd9c	; 0xcd9c <eeprom_write_byte>

00007270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>:

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7270:	80 e0       	ldi	r24, 0x00	; 0
    7272:	90 e0       	ldi	r25, 0x00	; 0
    7274:	0c 94 c6 66 	jmp	0xcd8c	; 0xcd8c <eeprom_read_byte>

00007278 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.4>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return E2END + 1; }
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
    7278:	cf 92       	push	r12
    727a:	df 92       	push	r13
    727c:	ef 92       	push	r14
    727e:	ff 92       	push	r15
    7280:	0f 93       	push	r16
    7282:	1f 93       	push	r17
    7284:	cf 93       	push	r28
    7286:	df 93       	push	r29
    7288:	eb 01       	movw	r28, r22
    728a:	7b 01       	movw	r14, r22
    728c:	2e e6       	ldi	r18, 0x6E	; 110
    728e:	e2 0e       	add	r14, r18
    7290:	f1 1c       	adc	r15, r1
    7292:	8b 01       	movw	r16, r22

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7294:	6c 01       	movw	r12, r24
    7296:	c6 1a       	sub	r12, r22
    7298:	d7 0a       	sbc	r13, r23
    729a:	c6 01       	movw	r24, r12
    729c:	80 0f       	add	r24, r16
    729e:	91 1f       	adc	r25, r17
    72a0:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <eeprom_read_byte>
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    72a4:	f8 01       	movw	r30, r16
    72a6:	81 93       	st	Z+, r24
    72a8:	8f 01       	movw	r16, r30
    72aa:	ee 15       	cp	r30, r14
    72ac:	ff 05       	cpc	r31, r15
    72ae:	a9 f7       	brne	.-22     	; 0x729a <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.4+0x22>
        return t;
    }
    72b0:	ce 01       	movw	r24, r28
    72b2:	df 91       	pop	r29
    72b4:	cf 91       	pop	r28
    72b6:	1f 91       	pop	r17
    72b8:	0f 91       	pop	r16
    72ba:	ff 90       	pop	r15
    72bc:	ef 90       	pop	r14
    72be:	df 90       	pop	r13
    72c0:	cf 90       	pop	r12
    72c2:	08 95       	ret

000072c4 <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.3>:
    
    template< typename T > const T &put( int idx, const T &t ){
    72c4:	af 92       	push	r10
    72c6:	bf 92       	push	r11
    72c8:	df 92       	push	r13
    72ca:	ef 92       	push	r14
    72cc:	ff 92       	push	r15
    72ce:	0f 93       	push	r16
    72d0:	1f 93       	push	r17
    72d2:	cf 93       	push	r28
    72d4:	df 93       	push	r29
    72d6:	ec 01       	movw	r28, r24
    72d8:	7b 01       	movw	r14, r22
    72da:	8b 01       	movw	r16, r22
    72dc:	5c 01       	movw	r10, r24
    72de:	8e e6       	ldi	r24, 0x6E	; 110
    72e0:	a8 0e       	add	r10, r24
    72e2:	b1 1c       	adc	r11, r1
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    72e4:	f8 01       	movw	r30, r16
    72e6:	d1 90       	ld	r13, Z+
    72e8:	8f 01       	movw	r16, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    72ea:	ce 01       	movw	r24, r28
    72ec:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    72f0:	d8 16       	cp	r13, r24
    72f2:	21 f0       	breq	.+8      	; 0x72fc <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.3+0x38>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    72f4:	6d 2d       	mov	r22, r13
    72f6:	ce 01       	movw	r24, r28
    72f8:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
    72fc:	21 96       	adiw	r28, 0x01	; 1
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    72fe:	ca 15       	cp	r28, r10
    7300:	db 05       	cpc	r29, r11
    7302:	81 f7       	brne	.-32     	; 0x72e4 <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.3+0x20>
        return t;
    }
    7304:	c7 01       	movw	r24, r14
    7306:	df 91       	pop	r29
    7308:	cf 91       	pop	r28
    730a:	1f 91       	pop	r17
    730c:	0f 91       	pop	r16
    730e:	ff 90       	pop	r15
    7310:	ef 90       	pop	r14
    7312:	df 90       	pop	r13
    7314:	bf 90       	pop	r11
    7316:	af 90       	pop	r10
    7318:	08 95       	ret

0000731a <_ZN8red_fangC1Ev>:
#include <Wire.h>
#include <leituras.h>
#include <EEPROM.h>
#include <red_beryl.h>

red_fang::red_fang()
    731a:	cf 93       	push	r28
    731c:	df 93       	push	r29
    731e:	ec 01       	movw	r28, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    7320:	26 e0       	ldi	r18, 0x06	; 6
    7322:	40 e0       	ldi	r20, 0x00	; 0
    7324:	5b e4       	ldi	r21, 0x4B	; 75
    7326:	60 e0       	ldi	r22, 0x00	; 0
    7328:	70 e0       	ldi	r23, 0x00	; 0
    732a:	80 ec       	ldi	r24, 0xC0	; 192
    732c:	90 e1       	ldi	r25, 0x10	; 16
    732e:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN14HardwareSerial5beginEmh>
{
	Serial.begin(19200);
	Serial.println("Construtor basico red_fang utilizado.");
    7332:	66 ea       	ldi	r22, 0xA6	; 166
    7334:	7b e0       	ldi	r23, 0x0B	; 11
    7336:	80 ec       	ldi	r24, 0xC0	; 192
    7338:	90 e1       	ldi	r25, 0x10	; 16
    733a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	_Get=false;
    733e:	18 82       	st	Y, r1
	_Req=false;
    7340:	19 82       	std	Y+1, r1	; 0x01
	_complex=false;
    7342:	1a 82       	std	Y+2, r1	; 0x02
	_isBeingUsed=false;
    7344:	1b 82       	std	Y+3, r1	; 0x03
	_freq = 1010;
    7346:	82 ef       	ldi	r24, 0xF2	; 242
    7348:	93 e0       	ldi	r25, 0x03	; 3
    734a:	a0 e0       	ldi	r26, 0x00	; 0
    734c:	b0 e0       	ldi	r27, 0x00	; 0
    734e:	8c 83       	std	Y+4, r24	; 0x04
    7350:	9d 83       	std	Y+5, r25	; 0x05
    7352:	ae 83       	std	Y+6, r26	; 0x06
    7354:	bf 83       	std	Y+7, r27	; 0x07
	_num = 0;
    7356:	19 86       	std	Y+9, r1	; 0x09
    7358:	18 86       	std	Y+8, r1	; 0x08
    735a:	26 e0       	ldi	r18, 0x06	; 6
    735c:	40 e8       	ldi	r20, 0x80	; 128
    735e:	55 e2       	ldi	r21, 0x25	; 37
    7360:	60 e0       	ldi	r22, 0x00	; 0
    7362:	70 e0       	ldi	r23, 0x00	; 0
    7364:	86 ed       	ldi	r24, 0xD6	; 214
    7366:	94 e1       	ldi	r25, 0x14	; 20
    7368:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <_ZN14HardwareSerial5beginEmh>
	Serial1.begin(9600);
	Serial.end();
    736c:	80 ec       	ldi	r24, 0xC0	; 192
    736e:	90 e1       	ldi	r25, 0x10	; 16
}
    7370:	df 91       	pop	r29
    7372:	cf 91       	pop	r28
	_complex=false;
	_isBeingUsed=false;
	_freq = 1010;
	_num = 0;
	Serial1.begin(9600);
	Serial.end();
    7374:	0c 94 49 06 	jmp	0xc92	; 0xc92 <_ZN14HardwareSerial3endEv>

00007378 <_ZN8red_fang12serialEnviarEPc>:
			}
		}
	}
}
void red_fang::serialEnviar(char message[])
{
    7378:	0f 93       	push	r16
    737a:	1f 93       	push	r17
    737c:	cf 93       	push	r28
    737e:	df 93       	push	r29
    7380:	8c 01       	movw	r16, r24
    7382:	eb 01       	movw	r28, r22
	Serial1.print("S");
    7384:	66 e3       	ldi	r22, 0x36	; 54
    7386:	78 e0       	ldi	r23, 0x08	; 8
    7388:	86 ed       	ldi	r24, 0xD6	; 214
    738a:	94 e1       	ldi	r25, 0x14	; 20
    738c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    Serial.println("[S] enviado.");
    7390:	6c ec       	ldi	r22, 0xCC	; 204
    7392:	7b e0       	ldi	r23, 0x0B	; 11
    7394:	80 ec       	ldi	r24, 0xC0	; 192
    7396:	90 e1       	ldi	r25, 0x10	; 16
    7398:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	Serial1.print(message);
    739c:	be 01       	movw	r22, r28
    739e:	86 ed       	ldi	r24, 0xD6	; 214
    73a0:	94 e1       	ldi	r25, 0x14	; 20
    73a2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    Serial.print("[");
    73a6:	69 ed       	ldi	r22, 0xD9	; 217
    73a8:	7b e0       	ldi	r23, 0x0B	; 11
    73aa:	80 ec       	ldi	r24, 0xC0	; 192
    73ac:	90 e1       	ldi	r25, 0x10	; 16
    73ae:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    Serial.print(message);
    73b2:	be 01       	movw	r22, r28
    73b4:	80 ec       	ldi	r24, 0xC0	; 192
    73b6:	90 e1       	ldi	r25, 0x10	; 16
    73b8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    Serial.println("] enviado.");
    73bc:	6f ed       	ldi	r22, 0xDF	; 223
    73be:	7b e0       	ldi	r23, 0x0B	; 11
    73c0:	80 ec       	ldi	r24, 0xC0	; 192
    73c2:	90 e1       	ldi	r25, 0x10	; 16
    73c4:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	Serial1.print("E");
    73c8:	6b ed       	ldi	r22, 0xDB	; 219
    73ca:	7b e0       	ldi	r23, 0x0B	; 11
    73cc:	86 ed       	ldi	r24, 0xD6	; 214
    73ce:	94 e1       	ldi	r25, 0x14	; 20
    73d0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    Serial.println("[E] enviado.");
    73d4:	6d ed       	ldi	r22, 0xDD	; 221
    73d6:	7b e0       	ldi	r23, 0x0B	; 11
    73d8:	80 ec       	ldi	r24, 0xC0	; 192
    73da:	90 e1       	ldi	r25, 0x10	; 16
    73dc:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    delay(100);
    73e0:	64 e6       	ldi	r22, 0x64	; 100
    73e2:	70 e0       	ldi	r23, 0x00	; 0
    73e4:	80 e0       	ldi	r24, 0x00	; 0
    73e6:	90 e0       	ldi	r25, 0x00	; 0
    73e8:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
	_isBeingUsed = false;
    73ec:	f8 01       	movw	r30, r16
    73ee:	13 82       	std	Z+3, r1	; 0x03
	//Serial1.flushRX();
}
    73f0:	df 91       	pop	r29
    73f2:	cf 91       	pop	r28
    73f4:	1f 91       	pop	r17
    73f6:	0f 91       	pop	r16
    73f8:	08 95       	ret

000073fa <_ZN8red_fang13deletaLeituraEi>:
bool red_fang::deletaLeitura(int delPos)

{   /* Função deletaLeitura, recebe como paramento um int delPos(deleta posição) que será a posição da leitura na EEPROM a ser deletada. */
    73fa:	af 92       	push	r10
    73fc:	bf 92       	push	r11
    73fe:	cf 92       	push	r12
    7400:	df 92       	push	r13
    7402:	ef 92       	push	r14
    7404:	ff 92       	push	r15
    7406:	0f 93       	push	r16
    7408:	1f 93       	push	r17
    740a:	cf 93       	push	r28
    740c:	df 93       	push	r29
    740e:	cd b7       	in	r28, 0x3d	; 61
    7410:	de b7       	in	r29, 0x3e	; 62
    7412:	ce 56       	subi	r28, 0x6E	; 110
    7414:	d1 09       	sbc	r29, r1
    7416:	0f b6       	in	r0, 0x3f	; 63
    7418:	f8 94       	cli
    741a:	de bf       	out	0x3e, r29	; 62
    741c:	0f be       	out	0x3f, r0	; 63
    741e:	cd bf       	out	0x3d, r28	; 61
    7420:	8b 01       	movw	r16, r22
	Serial.print("deletaleitura chamado com posição:");Serial.println(delPos);
    7422:	6a ee       	ldi	r22, 0xEA	; 234
    7424:	7b e0       	ldi	r23, 0x0B	; 11
    7426:	80 ec       	ldi	r24, 0xC0	; 192
    7428:	90 e1       	ldi	r25, 0x10	; 16
    742a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    742e:	4a e0       	ldi	r20, 0x0A	; 10
    7430:	50 e0       	ldi	r21, 0x00	; 0
    7432:	b8 01       	movw	r22, r16
    7434:	80 ec       	ldi	r24, 0xC0	; 192
    7436:	90 e1       	ldi	r25, 0x10	; 16
    7438:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
	if(delPos>EEPROM.read(0) || delPos<0 )
    743c:	19 df       	rcall	.-462    	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    743e:	90 e0       	ldi	r25, 0x00	; 0
    7440:	80 17       	cp	r24, r16
    7442:	91 07       	cpc	r25, r17
    7444:	0c f4       	brge	.+2      	; 0x7448 <_ZN8red_fang13deletaLeituraEi+0x4e>
    7446:	7f c0       	rjmp	.+254    	; 0x7546 <_ZN8red_fang13deletaLeituraEi+0x14c>
    7448:	17 fd       	sbrc	r17, 7
    744a:	7d c0       	rjmp	.+250    	; 0x7546 <_ZN8red_fang13deletaLeituraEi+0x14c>
    744c:	8e e6       	ldi	r24, 0x6E	; 110
    744e:	80 9f       	mul	r24, r16
    7450:	70 01       	movw	r14, r0
    7452:	81 9f       	mul	r24, r17
    7454:	f0 0c       	add	r15, r0
    7456:	11 24       	eor	r1, r1
    7458:	2f ef       	ldi	r18, 0xFF	; 255
    745a:	e2 1a       	sub	r14, r18
		return false;
	}
	else
	{   //se o numero recebido estiver dentro do numero de leituras possiveis
		leitura lTemp;    //inicializa uma leitura temporaria para receber o valor de leitura do proximo valor e substituir no valor atual.
		for(int i=delPos;i<EEPROM.read(0);i++)
    745c:	f2 0a       	sbc	r15, r18
    745e:	08 df       	rcall	.-496    	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    7460:	90 e0       	ldi	r25, 0x00	; 0
    7462:	57 01       	movw	r10, r14
    7464:	2e e6       	ldi	r18, 0x6E	; 110
    7466:	a2 0e       	add	r10, r18
    7468:	b1 1c       	adc	r11, r1
    746a:	08 17       	cp	r16, r24
    746c:	19 07       	cpc	r17, r25
    746e:	5c f5       	brge	.+86     	; 0x74c6 <_ZN8red_fang13deletaLeituraEi+0xcc>
		{   //EEPROM.get((22*i)+1,leituraTemp);    //leituraTemp recebe a leitura da EEPROM.
                                              //EEPROM.put( ((EEPROM.read(0)*22)+1)  , leitura0);   //salva a nova leitura na EEPROM.
			EEPROM.get( 1+ ( sizeof(leitura)*(i+1) ) ,lTemp );   //lTemp recebe o valor da proxima leitura.
    7470:	68 01       	movw	r12, r16
    7472:	8f ef       	ldi	r24, 0xFF	; 255
    7474:	c8 1a       	sub	r12, r24
    7476:	d8 0a       	sbc	r13, r24
    7478:	be 01       	movw	r22, r28
    747a:	6f 5f       	subi	r22, 0xFF	; 255
    747c:	7f 4f       	sbci	r23, 0xFF	; 255
    747e:	c5 01       	movw	r24, r10
    7480:	fb de       	rcall	.-522    	; 0x7278 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.4>
			EEPROM.put( 1+ ( sizeof(leitura)*i ), lTemp );       //endereço EEPROM selecionado atual[i] recebe lTemp.
    7482:	be 01       	movw	r22, r28
    7484:	6f 5f       	subi	r22, 0xFF	; 255
    7486:	7f 4f       	sbci	r23, 0xFF	; 255
    7488:	c7 01       	movw	r24, r14
    748a:	1c df       	rcall	.-456    	; 0x72c4 <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.3>
			Serial.print("Posição ");Serial.print(i);Serial.print(" substituida por leitura na posição ");Serial.println(i+1);
    748c:	6a ec       	ldi	r22, 0xCA	; 202
    748e:	77 e0       	ldi	r23, 0x07	; 7
    7490:	80 ec       	ldi	r24, 0xC0	; 192
    7492:	90 e1       	ldi	r25, 0x10	; 16
    7494:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    7498:	4a e0       	ldi	r20, 0x0A	; 10
    749a:	50 e0       	ldi	r21, 0x00	; 0
    749c:	b8 01       	movw	r22, r16
    749e:	80 ec       	ldi	r24, 0xC0	; 192
    74a0:	90 e1       	ldi	r25, 0x10	; 16
    74a2:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
    74a6:	65 ed       	ldi	r22, 0xD5	; 213
    74a8:	77 e0       	ldi	r23, 0x07	; 7
    74aa:	80 ec       	ldi	r24, 0xC0	; 192
    74ac:	90 e1       	ldi	r25, 0x10	; 16
    74ae:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    74b2:	4a e0       	ldi	r20, 0x0A	; 10
    74b4:	50 e0       	ldi	r21, 0x00	; 0
    74b6:	b6 01       	movw	r22, r12
    74b8:	80 ec       	ldi	r24, 0xC0	; 192
    74ba:	90 e1       	ldi	r25, 0x10	; 16
    74bc:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
		return false;
	}
	else
	{   //se o numero recebido estiver dentro do numero de leituras possiveis
		leitura lTemp;    //inicializa uma leitura temporaria para receber o valor de leitura do proximo valor e substituir no valor atual.
		for(int i=delPos;i<EEPROM.read(0);i++)
    74c0:	75 01       	movw	r14, r10
    74c2:	86 01       	movw	r16, r12
    74c4:	cc cf       	rjmp	.-104    	; 0x745e <_ZN8red_fang13deletaLeituraEi+0x64>
                                              //EEPROM.put( ((EEPROM.read(0)*22)+1)  , leitura0);   //salva a nova leitura na EEPROM.
			EEPROM.get( 1+ ( sizeof(leitura)*(i+1) ) ,lTemp );   //lTemp recebe o valor da proxima leitura.
			EEPROM.put( 1+ ( sizeof(leitura)*i ), lTemp );       //endereço EEPROM selecionado atual[i] recebe lTemp.
			Serial.print("Posição ");Serial.print(i);Serial.print(" substituida por leitura na posição ");Serial.println(i+1);
		}
		for(int i= 1+ ( (EEPROM.read(0)-1)*sizeof(leitura)) ; i<=(EEPROM.read(0))*sizeof( leitura); i++)
    74c6:	01 97       	sbiw	r24, 0x01	; 1
    74c8:	2e e6       	ldi	r18, 0x6E	; 110
    74ca:	28 9f       	mul	r18, r24
    74cc:	80 01       	movw	r16, r0
    74ce:	29 9f       	mul	r18, r25
    74d0:	10 0d       	add	r17, r0
    74d2:	11 24       	eor	r1, r1
    74d4:	0f 5f       	subi	r16, 0xFF	; 255
    74d6:	1f 4f       	sbci	r17, 0xFF	; 255
    74d8:	cb de       	rcall	.-618    	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    74da:	9e e6       	ldi	r25, 0x6E	; 110
    74dc:	89 9f       	mul	r24, r25
    74de:	90 01       	movw	r18, r0
    74e0:	11 24       	eor	r1, r1
    74e2:	20 17       	cp	r18, r16
    74e4:	31 07       	cpc	r19, r17
		{    //logica de apagar o ultimo endereço.
			EEPROM.write(i,0);
    74e6:	10 f1       	brcs	.+68     	; 0x752c <_ZN8red_fang13deletaLeituraEi+0x132>
    74e8:	60 e0       	ldi	r22, 0x00	; 0
    74ea:	c8 01       	movw	r24, r16
    74ec:	bf de       	rcall	.-642    	; 0x726c <_ZN11EEPROMClass5writeEih.isra.1>
			Serial.print("Apagando ");
    74ee:	6f e0       	ldi	r22, 0x0F	; 15
    74f0:	7c e0       	ldi	r23, 0x0C	; 12
    74f2:	80 ec       	ldi	r24, 0xC0	; 192
    74f4:	90 e1       	ldi	r25, 0x10	; 16
    74f6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			Serial.print(i);
    74fa:	4a e0       	ldi	r20, 0x0A	; 10
    74fc:	50 e0       	ldi	r21, 0x00	; 0
    74fe:	b8 01       	movw	r22, r16
    7500:	80 ec       	ldi	r24, 0xC0	; 192
    7502:	90 e1       	ldi	r25, 0x10	; 16
    7504:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
			Serial.print("/");
    7508:	64 ea       	ldi	r22, 0xA4	; 164
    750a:	75 e0       	ldi	r23, 0x05	; 5
    750c:	80 ec       	ldi	r24, 0xC0	; 192
    750e:	90 e1       	ldi	r25, 0x10	; 16
    7510:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			Serial.println((EEPROM.read(0))*sizeof( leitura));
    7514:	ad de       	rcall	.-678    	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    7516:	2e e6       	ldi	r18, 0x6E	; 110
    7518:	82 9f       	mul	r24, r18
    751a:	b0 01       	movw	r22, r0
    751c:	11 24       	eor	r1, r1
    751e:	4a e0       	ldi	r20, 0x0A	; 10
    7520:	50 e0       	ldi	r21, 0x00	; 0
    7522:	80 ec       	ldi	r24, 0xC0	; 192
    7524:	90 e1       	ldi	r25, 0x10	; 16
    7526:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print7printlnEji>
		}
		EEPROM.write(0, EEPROM.read(0)-1);    //diminui o valor do endereço 0 da EEPROM.
    752a:	d4 cf       	rjmp	.-88     	; 0x74d4 <_ZN8red_fang13deletaLeituraEi+0xda>
    752c:	6f ef       	ldi	r22, 0xFF	; 255
    752e:	68 0f       	add	r22, r24
    7530:	80 e0       	ldi	r24, 0x00	; 0
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	9b de       	rcall	.-714    	; 0x726c <_ZN11EEPROMClass5writeEih.isra.1>
		Serial.println("DeletaLeitura concluido.");
    7536:	60 e3       	ldi	r22, 0x30	; 48
    7538:	77 e0       	ldi	r23, 0x07	; 7
    753a:	80 ec       	ldi	r24, 0xC0	; 192
    753c:	90 e1       	ldi	r25, 0x10	; 16
    753e:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		return true;
    7542:	81 e0       	ldi	r24, 0x01	; 1
    7544:	07 c0       	rjmp	.+14     	; 0x7554 <_ZN8red_fang13deletaLeituraEi+0x15a>

{   /* Função deletaLeitura, recebe como paramento um int delPos(deleta posição) que será a posição da leitura na EEPROM a ser deletada. */
	Serial.print("deletaleitura chamado com posição:");Serial.println(delPos);
	if(delPos>EEPROM.read(0) || delPos<0 )
	{    //verificar se o numero recebido esta dentro do numero de leituras possiveis.
		Serial.println("Numero de posição recebido superior ao numero de leituras reconhecidas na EEPROM, ou Negativo. Retornando 'false'");
    7546:	66 e5       	ldi	r22, 0x56	; 86
    7548:	77 e0       	ldi	r23, 0x07	; 7
    754a:	80 ec       	ldi	r24, 0xC0	; 192
    754c:	90 e1       	ldi	r25, 0x10	; 16
    754e:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		return false;
    7552:	80 e0       	ldi	r24, 0x00	; 0
		}
		EEPROM.write(0, EEPROM.read(0)-1);    //diminui o valor do endereço 0 da EEPROM.
		Serial.println("DeletaLeitura concluido.");
		return true;
	}
}
    7554:	c2 59       	subi	r28, 0x92	; 146
    7556:	df 4f       	sbci	r29, 0xFF	; 255
    7558:	0f b6       	in	r0, 0x3f	; 63
    755a:	f8 94       	cli
    755c:	de bf       	out	0x3e, r29	; 62
    755e:	0f be       	out	0x3f, r0	; 63
    7560:	cd bf       	out	0x3d, r28	; 61
    7562:	df 91       	pop	r29
    7564:	cf 91       	pop	r28
    7566:	1f 91       	pop	r17
    7568:	0f 91       	pop	r16
    756a:	ff 90       	pop	r15
    756c:	ef 90       	pop	r14
    756e:	df 90       	pop	r13
    7570:	cf 90       	pop	r12
    7572:	bf 90       	pop	r11
    7574:	af 90       	pop	r10
    7576:	08 95       	ret

00007578 <_ZN8red_fang13serialLeituraE8leiturasi>:

bool red_fang::serialLeitura(leitura lt, int i)
{    //função serialLeitura que retorna true quando completa para enviar uma leitura em pacotes divididos em ciclos.
    7578:	8f 92       	push	r8
    757a:	9f 92       	push	r9
    757c:	af 92       	push	r10
    757e:	bf 92       	push	r11
    7580:	cf 92       	push	r12
    7582:	df 92       	push	r13
    7584:	ef 92       	push	r14
    7586:	ff 92       	push	r15
    7588:	0f 93       	push	r16
    758a:	1f 93       	push	r17
    758c:	cf 93       	push	r28
    758e:	df 93       	push	r29
    7590:	cd b7       	in	r28, 0x3d	; 61
    7592:	de b7       	in	r29, 0x3e	; 62
    7594:	ec 97       	sbiw	r28, 0x3c	; 60
    7596:	0f b6       	in	r0, 0x3f	; 63
    7598:	f8 94       	cli
    759a:	de bf       	out	0x3e, r29	; 62
    759c:	0f be       	out	0x3f, r0	; 63
    759e:	cd bf       	out	0x3d, r28	; 61
    75a0:	8c 01       	movw	r16, r24
    75a2:	c6 54       	subi	r28, 0x46	; 70
    75a4:	df 4f       	sbci	r29, 0xFF	; 255
    75a6:	88 81       	ld	r24, Y
    75a8:	99 81       	ldd	r25, Y+1	; 0x01
    75aa:	ca 5b       	subi	r28, 0xBA	; 186
    75ac:	d0 40       	sbci	r29, 0x00	; 0
			return true;
		}
	}
	*/
  
	switch(i)
    75ae:	81 30       	cpi	r24, 0x01	; 1
    75b0:	91 05       	cpc	r25, r1
    75b2:	09 f4       	brne	.+2      	; 0x75b6 <_ZN8red_fang13serialLeituraE8leiturasi+0x3e>
    75b4:	0b c1       	rjmp	.+534    	; 0x77cc <_ZN8red_fang13serialLeituraE8leiturasi+0x254>
    75b6:	24 f4       	brge	.+8      	; 0x75c0 <_ZN8red_fang13serialLeituraE8leiturasi+0x48>
    75b8:	89 2b       	or	r24, r25
    75ba:	09 f4       	brne	.+2      	; 0x75be <_ZN8red_fang13serialLeituraE8leiturasi+0x46>
    75bc:	4a c0       	rjmp	.+148    	; 0x7652 <_ZN8red_fang13serialLeituraE8leiturasi+0xda>
    75be:	43 c1       	rjmp	.+646    	; 0x7846 <_ZN8red_fang13serialLeituraE8leiturasi+0x2ce>
    75c0:	82 30       	cpi	r24, 0x02	; 2
    75c2:	91 05       	cpc	r25, r1
    75c4:	09 f4       	brne	.+2      	; 0x75c8 <_ZN8red_fang13serialLeituraE8leiturasi+0x50>
    75c6:	28 c1       	rjmp	.+592    	; 0x7818 <_ZN8red_fang13serialLeituraE8leiturasi+0x2a0>
    75c8:	03 97       	sbiw	r24, 0x03	; 3
    75ca:	09 f0       	breq	.+2      	; 0x75ce <_ZN8red_fang13serialLeituraE8leiturasi+0x56>
    75cc:	3c c1       	rjmp	.+632    	; 0x7846 <_ZN8red_fang13serialLeituraE8leiturasi+0x2ce>
			break;
		}
		case 3:
		{
			//char lStr[30], filler[30];    //Inicializar um char lStr para recebe tudo e passar a proxima função e um filler para ajudar a construir a string.
			strcpy (lStr, "|");
    75ce:	69 e1       	ldi	r22, 0x19	; 25
    75d0:	7c e0       	ldi	r23, 0x0C	; 12
    75d2:	ce 01       	movw	r24, r28
    75d4:	4f 96       	adiw	r24, 0x1f	; 31
    75d6:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			strcat (lStr, "F");   //Recebe o tag inicial do tipo de informação a ser enviada, F para Frequencia.
    75da:	6d e1       	ldi	r22, 0x1D	; 29
    75dc:	7c e0       	ldi	r23, 0x0C	; 12
    75de:	ce 01       	movw	r24, r28
    75e0:	4f 96       	adiw	r24, 0x1f	; 31
    75e2:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			int n = snprintf(filler, 30, "%lu", lt.freq);   //PODE NÃO FUNCIONAR! filler recebe os caracteres traduzidos do valor frequencia.
    75e6:	60 96       	adiw	r28, 0x10	; 16
    75e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    75ea:	60 97       	sbiw	r28, 0x10	; 16
    75ec:	8f 93       	push	r24
    75ee:	2f 96       	adiw	r28, 0x0f	; 15
    75f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    75f2:	2f 97       	sbiw	r28, 0x0f	; 15
    75f4:	8f 93       	push	r24
    75f6:	2e 96       	adiw	r28, 0x0e	; 14
    75f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    75fa:	2e 97       	sbiw	r28, 0x0e	; 14
    75fc:	8f 93       	push	r24
    75fe:	2d 96       	adiw	r28, 0x0d	; 13
    7600:	8f ad       	ldd	r24, Y+63	; 0x3f
    7602:	2d 97       	sbiw	r28, 0x0d	; 13
    7604:	8f 93       	push	r24
    7606:	8f e1       	ldi	r24, 0x1F	; 31
    7608:	9c e0       	ldi	r25, 0x0C	; 12
    760a:	9f 93       	push	r25
    760c:	8f 93       	push	r24
    760e:	1f 92       	push	r1
    7610:	8e e1       	ldi	r24, 0x1E	; 30
    7612:	8f 93       	push	r24
    7614:	8e 01       	movw	r16, r28
    7616:	0f 5f       	subi	r16, 0xFF	; 255
    7618:	1f 4f       	sbci	r17, 0xFF	; 255
    761a:	1f 93       	push	r17
    761c:	0f 93       	push	r16
    761e:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <snprintf>
			strcat( lStr, filler);    //filler(frequencia) adicionado a string.
    7622:	b8 01       	movw	r22, r16
    7624:	ce 01       	movw	r24, r28
    7626:	4f 96       	adiw	r24, 0x1f	; 31
    7628:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>

			//serialEnviar(lStr);   //chama a função serialEnviar.
			strcat (lStr, "E");
    762c:	6b ed       	ldi	r22, 0xDB	; 219
    762e:	7b e0       	ldi	r23, 0x0B	; 11
    7630:	ce 01       	movw	r24, r28
    7632:	4f 96       	adiw	r24, 0x1f	; 31
    7634:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			Serial1.print(lStr);
    7638:	be 01       	movw	r22, r28
    763a:	61 5e       	subi	r22, 0xE1	; 225
    763c:	7f 4f       	sbci	r23, 0xFF	; 255
    763e:	86 ed       	ldi	r24, 0xD6	; 214
    7640:	94 e1       	ldi	r25, 0x14	; 20
    7642:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			return false;
    7646:	0f b6       	in	r0, 0x3f	; 63
    7648:	f8 94       	cli
    764a:	de bf       	out	0x3e, r29	; 62
    764c:	0f be       	out	0x3f, r0	; 63
    764e:	cd bf       	out	0x3d, r28	; 61
    7650:	e1 c0       	rjmp	.+450    	; 0x7814 <_ZN8red_fang13serialLeituraE8leiturasi+0x29c>
    7652:	c0 55       	subi	r28, 0x50	; 80
    7654:	df 4f       	sbci	r29, 0xFF	; 255
    7656:	e8 80       	ld	r14, Y
    7658:	f9 80       	ldd	r15, Y+1	; 0x01
    765a:	c0 5b       	subi	r28, 0xB0	; 176
    765c:	d0 40       	sbci	r29, 0x00	; 0
    765e:	ce 54       	subi	r28, 0x4E	; 78
    7660:	df 4f       	sbci	r29, 0xFF	; 255
    7662:	08 81       	ld	r16, Y
    7664:	19 81       	ldd	r17, Y+1	; 0x01
    7666:	c2 5b       	subi	r28, 0xB2	; 178
    7668:	d0 40       	sbci	r29, 0x00	; 0
    766a:	cc 54       	subi	r28, 0x4C	; 76
    766c:	df 4f       	sbci	r29, 0xFF	; 255
    766e:	88 80       	ld	r8, Y
    7670:	99 80       	ldd	r9, Y+1	; 0x01
    7672:	c4 5b       	subi	r28, 0xB4	; 180
    7674:	d0 40       	sbci	r29, 0x00	; 0
    7676:	ca 54       	subi	r28, 0x4A	; 74
    7678:	df 4f       	sbci	r29, 0xFF	; 255
    767a:	a8 80       	ld	r10, Y
    767c:	b9 80       	ldd	r11, Y+1	; 0x01
    767e:	c6 5b       	subi	r28, 0xB6	; 182
    7680:	d0 40       	sbci	r29, 0x00	; 0
    7682:	c8 54       	subi	r28, 0x48	; 72
    7684:	df 4f       	sbci	r29, 0xFF	; 255
    7686:	c8 80       	ld	r12, Y
    7688:	d9 80       	ldd	r13, Y+1	; 0x01
    768a:	c8 5b       	subi	r28, 0xB8	; 184
    768c:	d0 40       	sbci	r29, 0x00	; 0
	switch(i)
	{    //usa-se switch case para dividir o que cada ciclo diferente deve fazer.
		case 0:
		{    //0 é referente ao primeiro ciclo referente a DATA e HORA da leitura.
			//char lStr[30], filler[30];    //Inicializar um char lStr para receber tudo e passar a proxima função e um filler para ajudar a construir lStr.
			strcpy (lStr, "S");
    768e:	66 e3       	ldi	r22, 0x36	; 54
    7690:	78 e0       	ldi	r23, 0x08	; 8
    7692:	ce 01       	movw	r24, r28
    7694:	4f 96       	adiw	r24, 0x1f	; 31
    7696:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			strcat (lStr, "D");   //Recebe o tag inicial do tipo de informação a ser enviada, D para data.
    769a:	66 e1       	ldi	r22, 0x16	; 22
    769c:	76 e0       	ldi	r23, 0x06	; 6
    769e:	ce 01       	movw	r24, r28
    76a0:	4f 96       	adiw	r24, 0x1f	; 31
    76a2:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
      
			if(lt.dia<10)
    76a6:	8a e0       	ldi	r24, 0x0A	; 10
    76a8:	88 16       	cp	r8, r24
    76aa:	91 04       	cpc	r9, r1
    76ac:	34 f4       	brge	.+12     	; 0x76ba <_ZN8red_fang13serialLeituraE8leiturasi+0x142>
			{
				strcat (lStr, "0"); 
    76ae:	65 ef       	ldi	r22, 0xF5	; 245
    76b0:	76 e0       	ldi	r23, 0x06	; 6
    76b2:	ce 01       	movw	r24, r28
    76b4:	4f 96       	adiw	r24, 0x1f	; 31
    76b6:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    76ba:	4a e0       	ldi	r20, 0x0A	; 10
    76bc:	be 01       	movw	r22, r28
    76be:	6f 5f       	subi	r22, 0xFF	; 255
    76c0:	7f 4f       	sbci	r23, 0xFF	; 255
    76c2:	c4 01       	movw	r24, r8
    76c4:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			}              //se o valor de dia for inferior a 10, a string recebe um 0.
        
			itoa (lt.dia,filler, 10);   //filler recebe os caracteres traduzidos do valor dia.
			strcat (lStr, filler);    //filler(dia) adicionado a string
    76c8:	be 01       	movw	r22, r28
    76ca:	6f 5f       	subi	r22, 0xFF	; 255
    76cc:	7f 4f       	sbci	r23, 0xFF	; 255
    76ce:	ce 01       	movw	r24, r28
    76d0:	4f 96       	adiw	r24, 0x1f	; 31
    76d2:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			strcat( lStr, "/");   //Separador de data adicionado a string.
    76d6:	64 ea       	ldi	r22, 0xA4	; 164
    76d8:	75 e0       	ldi	r23, 0x05	; 5
    76da:	ce 01       	movw	r24, r28
    76dc:	4f 96       	adiw	r24, 0x1f	; 31
    76de:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
        
			if(lt.mes<10)
    76e2:	9a e0       	ldi	r25, 0x0A	; 10
    76e4:	a9 16       	cp	r10, r25
    76e6:	b1 04       	cpc	r11, r1
    76e8:	34 f4       	brge	.+12     	; 0x76f6 <_ZN8red_fang13serialLeituraE8leiturasi+0x17e>
			{
				strcat (lStr, "0");
    76ea:	65 ef       	ldi	r22, 0xF5	; 245
    76ec:	76 e0       	ldi	r23, 0x06	; 6
    76ee:	ce 01       	movw	r24, r28
    76f0:	4f 96       	adiw	r24, 0x1f	; 31
    76f2:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    76f6:	4a e0       	ldi	r20, 0x0A	; 10
    76f8:	be 01       	movw	r22, r28
    76fa:	6f 5f       	subi	r22, 0xFF	; 255
    76fc:	7f 4f       	sbci	r23, 0xFF	; 255
    76fe:	c5 01       	movw	r24, r10
    7700:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			}    //se o valor de mes for inferior a 10, a string recebe um 0.
      
			itoa ( lt.mes, filler, 10);    //filler recebe os caracteres traduzidos do valor mes.
			strcat ( lStr, filler );   //filler(mes) adicionado a string.
    7704:	be 01       	movw	r22, r28
    7706:	6f 5f       	subi	r22, 0xFF	; 255
    7708:	7f 4f       	sbci	r23, 0xFF	; 255
    770a:	ce 01       	movw	r24, r28
    770c:	4f 96       	adiw	r24, 0x1f	; 31
    770e:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			strcat( lStr, "/" );    //Separador de data adicionado a string.
    7712:	64 ea       	ldi	r22, 0xA4	; 164
    7714:	75 e0       	ldi	r23, 0x05	; 5
    7716:	ce 01       	movw	r24, r28
    7718:	4f 96       	adiw	r24, 0x1f	; 31
    771a:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
        
			if(lt.ano<10)
    771e:	ea e0       	ldi	r30, 0x0A	; 10
    7720:	ce 16       	cp	r12, r30
    7722:	d1 04       	cpc	r13, r1
    7724:	34 f4       	brge	.+12     	; 0x7732 <_ZN8red_fang13serialLeituraE8leiturasi+0x1ba>
			{
				strcat(lStr, "0" );
    7726:	65 ef       	ldi	r22, 0xF5	; 245
    7728:	76 e0       	ldi	r23, 0x06	; 6
    772a:	ce 01       	movw	r24, r28
    772c:	4f 96       	adiw	r24, 0x1f	; 31
    772e:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    7732:	4a e0       	ldi	r20, 0x0A	; 10
    7734:	be 01       	movw	r22, r28
    7736:	6f 5f       	subi	r22, 0xFF	; 255
    7738:	7f 4f       	sbci	r23, 0xFF	; 255
    773a:	c6 01       	movw	r24, r12
    773c:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			}   //se o valor de ano for inferior a 10, a string recebe um 0.

			itoa (lt.ano, filler, 10);    //filler recebe os caracteres traduzidos do valor ano.
			strcat( lStr, filler);    //filler(ano) adicionado a string.
    7740:	be 01       	movw	r22, r28
    7742:	6f 5f       	subi	r22, 0xFF	; 255
    7744:	7f 4f       	sbci	r23, 0xFF	; 255
    7746:	ce 01       	movw	r24, r28
    7748:	4f 96       	adiw	r24, 0x1f	; 31
    774a:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			strcat ( lStr, " ");    //espaço adicionado a string.
    774e:	6f eb       	ldi	r22, 0xBF	; 191
    7750:	74 e0       	ldi	r23, 0x04	; 4
    7752:	ce 01       	movw	r24, r28
    7754:	4f 96       	adiw	r24, 0x1f	; 31
    7756:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
        
			if(lt.hora<10)
    775a:	fa e0       	ldi	r31, 0x0A	; 10
    775c:	ef 16       	cp	r14, r31
    775e:	f1 04       	cpc	r15, r1
    7760:	34 f4       	brge	.+12     	; 0x776e <_ZN8red_fang13serialLeituraE8leiturasi+0x1f6>
			{
				strcat(lStr, "0" );
    7762:	65 ef       	ldi	r22, 0xF5	; 245
    7764:	76 e0       	ldi	r23, 0x06	; 6
    7766:	ce 01       	movw	r24, r28
    7768:	4f 96       	adiw	r24, 0x1f	; 31
    776a:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    776e:	4a e0       	ldi	r20, 0x0A	; 10
    7770:	be 01       	movw	r22, r28
    7772:	6f 5f       	subi	r22, 0xFF	; 255
    7774:	7f 4f       	sbci	r23, 0xFF	; 255
    7776:	c7 01       	movw	r24, r14
    7778:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			}   //se o valor de hora for inferior a 10, a string recebe um 0.

			itoa (lt.hora, filler, 10);   //filler recebe os caracteres traduzidos do valor hora.
			strcat( lStr, filler);    //filer(hora) adicionado a string.
    777c:	be 01       	movw	r22, r28
    777e:	6f 5f       	subi	r22, 0xFF	; 255
    7780:	7f 4f       	sbci	r23, 0xFF	; 255
    7782:	ce 01       	movw	r24, r28
    7784:	4f 96       	adiw	r24, 0x1f	; 31
    7786:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			strcat( lStr, ":");   //separador de hora adicionado a string.
    778a:	69 e2       	ldi	r22, 0x29	; 41
    778c:	78 e0       	ldi	r23, 0x08	; 8
    778e:	ce 01       	movw	r24, r28
    7790:	4f 96       	adiw	r24, 0x1f	; 31
    7792:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
        
			if(lt.minuto<10)
    7796:	0a 30       	cpi	r16, 0x0A	; 10
    7798:	11 05       	cpc	r17, r1
    779a:	34 f4       	brge	.+12     	; 0x77a8 <_ZN8red_fang13serialLeituraE8leiturasi+0x230>
			{
				strcat(lStr, "0" );
    779c:	65 ef       	ldi	r22, 0xF5	; 245
    779e:	76 e0       	ldi	r23, 0x06	; 6
    77a0:	ce 01       	movw	r24, r28
    77a2:	4f 96       	adiw	r24, 0x1f	; 31
    77a4:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    77a8:	4a e0       	ldi	r20, 0x0A	; 10
    77aa:	be 01       	movw	r22, r28
    77ac:	6f 5f       	subi	r22, 0xFF	; 255
    77ae:	7f 4f       	sbci	r23, 0xFF	; 255
    77b0:	c8 01       	movw	r24, r16
    77b2:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			}   //se o valor de minuto for inferior a 10, a string recebe um 0.

			itoa (lt.minuto, filler, 10);   //filler recebe os caracteres traduzidos do valor hora.
			strcat( lStr, filler);    //filler(minuto) adicionado a string.
    77b6:	be 01       	movw	r22, r28
    77b8:	6f 5f       	subi	r22, 0xFF	; 255
    77ba:	7f 4f       	sbci	r23, 0xFF	; 255
    77bc:	ce 01       	movw	r24, r28
    77be:	4f 96       	adiw	r24, 0x1f	; 31
    77c0:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>

			//serialEnviar(lStr);   //a string construida até aqui é enviada a função serialEnviar() para ser enviada ao bluetooth dentro do pacote S||E.
      
			Serial1.print(lStr);
    77c4:	be 01       	movw	r22, r28
    77c6:	61 5e       	subi	r22, 0xE1	; 225
    77c8:	7f 4f       	sbci	r23, 0xFF	; 255
    77ca:	20 c0       	rjmp	.+64     	; 0x780c <_ZN8red_fang13serialLeituraE8leiturasi+0x294>
			break;
		}
		case 1:
		{    //1 é referente ao segundo ciclo referente ao valor REAL da leitura.
			//char lStr[30];    //Inicializar um char lStr para receber tudo e passar a proxima função.
			strcpy (lStr, "|");
    77cc:	7e 01       	movw	r14, r28
    77ce:	8f e1       	ldi	r24, 0x1F	; 31
    77d0:	e8 0e       	add	r14, r24
    77d2:	f1 1c       	adc	r15, r1
    77d4:	69 e1       	ldi	r22, 0x19	; 25
    77d6:	7c e0       	ldi	r23, 0x0C	; 12
    77d8:	c7 01       	movw	r24, r14
    77da:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			strcat (lStr, "R");   //Recebe o tag inicial do tipo de informação a ser enviada, R para Real.
    77de:	64 e7       	ldi	r22, 0x74	; 116
    77e0:	7c e0       	ldi	r23, 0x0C	; 12
    77e2:	c7 01       	movw	r24, r14
    77e4:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			dtostrf(lt.real, 2, 2, &lStr[strlen(lStr)]);    //Recebe o valor real.
    77e8:	f7 01       	movw	r30, r14
    77ea:	01 90       	ld	r0, Z+
    77ec:	00 20       	and	r0, r0
    77ee:	e9 f7       	brne	.-6      	; 0x77ea <_ZN8red_fang13serialLeituraE8leiturasi+0x272>
    77f0:	8f 01       	movw	r16, r30
    77f2:	01 50       	subi	r16, 0x01	; 1
    77f4:	11 09       	sbc	r17, r1
    77f6:	64 96       	adiw	r28, 0x14	; 20
    77f8:	6c ad       	ldd	r22, Y+60	; 0x3c
    77fa:	7d ad       	ldd	r23, Y+61	; 0x3d
    77fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    77fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    7800:	64 97       	sbiw	r28, 0x14	; 20
    7802:	22 e0       	ldi	r18, 0x02	; 2
    7804:	42 e0       	ldi	r20, 0x02	; 2
    7806:	0e 94 c7 5e 	call	0xbd8e	; 0xbd8e <dtostrf>
			//serialEnviar(lStr);   //chama a função serialEnviar.
			Serial1.print(lStr);
    780a:	b7 01       	movw	r22, r14
    780c:	86 ed       	ldi	r24, 0xD6	; 214
    780e:	94 e1       	ldi	r25, 0x14	; 20
    7810:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			return false;   //retorna false
    7814:	80 e0       	ldi	r24, 0x00	; 0
    7816:	20 c0       	rjmp	.+64     	; 0x7858 <_ZN8red_fang13serialLeituraE8leiturasi+0x2e0>
			break;	
		}
		case 2:
		{    //2 é referente ao terceiro ciclo referente ao valor IMAGINARIO da leitura.
			//char lStr[30];    //Inicializar um char lStr para receber tudo e passar a proxima função.
			strcpy (lStr, "J");   //Recebe o tag inicial do tipo de informação a ser enviada, J para Imaginario.
    7818:	7e 01       	movw	r14, r28
    781a:	9f e1       	ldi	r25, 0x1F	; 31
    781c:	e9 0e       	add	r14, r25
    781e:	f1 1c       	adc	r15, r1
    7820:	6b e1       	ldi	r22, 0x1B	; 27
    7822:	7c e0       	ldi	r23, 0x0C	; 12
    7824:	c7 01       	movw	r24, r14
    7826:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			dtostrf(lt.imag, 2, 2, &lStr[strlen(lStr)]);    //Recebe o valor imaginario.
    782a:	f7 01       	movw	r30, r14
    782c:	01 90       	ld	r0, Z+
    782e:	00 20       	and	r0, r0
    7830:	e9 f7       	brne	.-6      	; 0x782c <_ZN8red_fang13serialLeituraE8leiturasi+0x2b4>
    7832:	8f 01       	movw	r16, r30
    7834:	01 50       	subi	r16, 0x01	; 1
    7836:	11 09       	sbc	r17, r1
    7838:	68 96       	adiw	r28, 0x18	; 24
    783a:	6c ad       	ldd	r22, Y+60	; 0x3c
    783c:	7d ad       	ldd	r23, Y+61	; 0x3d
    783e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7840:	9f ad       	ldd	r25, Y+63	; 0x3f
    7842:	68 97       	sbiw	r28, 0x18	; 24
    7844:	de cf       	rjmp	.-68     	; 0x7802 <_ZN8red_fang13serialLeituraE8leiturasi+0x28a>
			return false;
			break;
		}
		default:
		{
			Serial.println("SUCESSO.");
    7846:	63 e2       	ldi	r22, 0x23	; 35
    7848:	7c e0       	ldi	r23, 0x0C	; 12
    784a:	80 ec       	ldi	r24, 0xC0	; 192
    784c:	90 e1       	ldi	r25, 0x10	; 16
    784e:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
			_isBeingUsed = false;
    7852:	f8 01       	movw	r30, r16
    7854:	13 82       	std	Z+3, r1	; 0x03
			return true;
    7856:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
}
    7858:	ec 96       	adiw	r28, 0x3c	; 60
    785a:	0f b6       	in	r0, 0x3f	; 63
    785c:	f8 94       	cli
    785e:	de bf       	out	0x3e, r29	; 62
    7860:	0f be       	out	0x3f, r0	; 63
    7862:	cd bf       	out	0x3d, r28	; 61
    7864:	df 91       	pop	r29
    7866:	cf 91       	pop	r28
    7868:	1f 91       	pop	r17
    786a:	0f 91       	pop	r16
    786c:	ff 90       	pop	r15
    786e:	ef 90       	pop	r14
    7870:	df 90       	pop	r13
    7872:	cf 90       	pop	r12
    7874:	bf 90       	pop	r11
    7876:	af 90       	pop	r10
    7878:	9f 90       	pop	r9
    787a:	8f 90       	pop	r8
    787c:	08 95       	ret

0000787e <_ZN8red_fang10getComplexE8leiturasi>:

bool red_fang::getComplex(leitura lt, int n)
{
    787e:	8f 92       	push	r8
    7880:	9f 92       	push	r9
    7882:	af 92       	push	r10
    7884:	bf 92       	push	r11
    7886:	cf 92       	push	r12
    7888:	df 92       	push	r13
    788a:	ef 92       	push	r14
    788c:	ff 92       	push	r15
    788e:	0f 93       	push	r16
    7890:	1f 93       	push	r17
    7892:	cf 93       	push	r28
    7894:	df 93       	push	r29
    7896:	cd b7       	in	r28, 0x3d	; 61
    7898:	de b7       	in	r29, 0x3e	; 62
    789a:	ca 55       	subi	r28, 0x5A	; 90
    789c:	d1 09       	sbc	r29, r1
    789e:	0f b6       	in	r0, 0x3f	; 63
    78a0:	f8 94       	cli
    78a2:	de bf       	out	0x3e, r29	; 62
    78a4:	0f be       	out	0x3f, r0	; 63
    78a6:	cd bf       	out	0x3d, r28	; 61
    78a8:	c8 52       	subi	r28, 0x28	; 40
    78aa:	df 4f       	sbci	r29, 0xFF	; 255
    78ac:	88 81       	ld	r24, Y
    78ae:	99 81       	ldd	r25, Y+1	; 0x01
    78b0:	c8 5d       	subi	r28, 0xD8	; 216
    78b2:	d0 40       	sbci	r29, 0x00	; 0
	char string[60], filler[30];
	switch(n)
    78b4:	82 30       	cpi	r24, 0x02	; 2
    78b6:	91 05       	cpc	r25, r1
    78b8:	09 f4       	brne	.+2      	; 0x78bc <_ZN8red_fang10getComplexE8leiturasi+0x3e>
    78ba:	28 c1       	rjmp	.+592    	; 0x7b0c <_ZN8red_fang10getComplexE8leiturasi+0x28e>
    78bc:	04 f5       	brge	.+64     	; 0x78fe <_ZN8red_fang10getComplexE8leiturasi+0x80>
    78be:	00 97       	sbiw	r24, 0x00	; 0
    78c0:	09 f4       	brne	.+2      	; 0x78c4 <_ZN8red_fang10getComplexE8leiturasi+0x46>
    78c2:	67 c0       	rjmp	.+206    	; 0x7992 <_ZN8red_fang10getComplexE8leiturasi+0x114>
    78c4:	01 97       	sbiw	r24, 0x01	; 1
    78c6:	09 f0       	breq	.+2      	; 0x78ca <_ZN8red_fang10getComplexE8leiturasi+0x4c>
    78c8:	ac c1       	rjmp	.+856    	; 0x7c22 <_ZN8red_fang10getComplexE8leiturasi+0x3a4>
			return false;
			break;
		}
		case 1:				//real
		{
			strcpy (string, "|");
    78ca:	69 e1       	ldi	r22, 0x19	; 25
    78cc:	7c e0       	ldi	r23, 0x0C	; 12
    78ce:	ce 01       	movw	r24, r28
    78d0:	01 96       	adiw	r24, 0x01	; 1
    78d2:	7c 01       	movw	r14, r24
    78d4:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			strcat (string, "R");   //Recebe o tag inicial do tipo de informação a ser enviada, R para Real.
    78d8:	64 e7       	ldi	r22, 0x74	; 116
    78da:	7c e0       	ldi	r23, 0x0C	; 12
    78dc:	c7 01       	movw	r24, r14
    78de:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			dtostrf(lt.real, 2, 2, &string[strlen(string)]);    //Recebe o valor real.
    78e2:	f7 01       	movw	r30, r14
    78e4:	01 90       	ld	r0, Z+
    78e6:	00 20       	and	r0, r0
    78e8:	e9 f7       	brne	.-6      	; 0x78e4 <_ZN8red_fang10getComplexE8leiturasi+0x66>
    78ea:	8f 01       	movw	r16, r30
    78ec:	01 50       	subi	r16, 0x01	; 1
    78ee:	11 09       	sbc	r17, r1
    78f0:	e2 96       	adiw	r28, 0x32	; 50
    78f2:	6c ad       	ldd	r22, Y+60	; 0x3c
    78f4:	7d ad       	ldd	r23, Y+61	; 0x3d
    78f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    78f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    78fa:	e2 97       	sbiw	r28, 0x32	; 50
    78fc:	1b c1       	rjmp	.+566    	; 0x7b34 <_ZN8red_fang10getComplexE8leiturasi+0x2b6>
}

bool red_fang::getComplex(leitura lt, int n)
{
	char string[60], filler[30];
	switch(n)
    78fe:	83 30       	cpi	r24, 0x03	; 3
    7900:	91 05       	cpc	r25, r1
    7902:	09 f4       	brne	.+2      	; 0x7906 <_ZN8red_fang10getComplexE8leiturasi+0x88>
    7904:	22 c1       	rjmp	.+580    	; 0x7b4a <_ZN8red_fang10getComplexE8leiturasi+0x2cc>
    7906:	04 97       	sbiw	r24, 0x04	; 4
    7908:	09 f0       	breq	.+2      	; 0x790c <_ZN8red_fang10getComplexE8leiturasi+0x8e>
    790a:	8b c1       	rjmp	.+790    	; 0x7c22 <_ZN8red_fang10getComplexE8leiturasi+0x3a4>
			}
			break;
		}
		case 4:
		{
			strcpy (string, "|");
    790c:	69 e1       	ldi	r22, 0x19	; 25
    790e:	7c e0       	ldi	r23, 0x0C	; 12
    7910:	ce 01       	movw	r24, r28
    7912:	01 96       	adiw	r24, 0x01	; 1
    7914:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			strcat (string, "F");   //Recebe o tag inicial do tipo de informação a ser enviada, F para Frequencia.
    7918:	6d e1       	ldi	r22, 0x1D	; 29
    791a:	7c e0       	ldi	r23, 0x0C	; 12
    791c:	ce 01       	movw	r24, r28
    791e:	01 96       	adiw	r24, 0x01	; 1
    7920:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			int x = snprintf(filler, 30, "%lu", lt.freq);   //PODE NÃO FUNCIONAR! filler recebe os caracteres traduzidos do valor frequencia.
    7924:	ae 96       	adiw	r28, 0x2e	; 46
    7926:	8f ad       	ldd	r24, Y+63	; 0x3f
    7928:	ae 97       	sbiw	r28, 0x2e	; 46
    792a:	8f 93       	push	r24
    792c:	ad 96       	adiw	r28, 0x2d	; 45
    792e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7930:	ad 97       	sbiw	r28, 0x2d	; 45
    7932:	8f 93       	push	r24
    7934:	ac 96       	adiw	r28, 0x2c	; 44
    7936:	8f ad       	ldd	r24, Y+63	; 0x3f
    7938:	ac 97       	sbiw	r28, 0x2c	; 44
    793a:	8f 93       	push	r24
    793c:	ab 96       	adiw	r28, 0x2b	; 43
    793e:	8f ad       	ldd	r24, Y+63	; 0x3f
    7940:	ab 97       	sbiw	r28, 0x2b	; 43
    7942:	8f 93       	push	r24
    7944:	8f e1       	ldi	r24, 0x1F	; 31
    7946:	9c e0       	ldi	r25, 0x0C	; 12
    7948:	9f 93       	push	r25
    794a:	8f 93       	push	r24
    794c:	1f 92       	push	r1
    794e:	8e e1       	ldi	r24, 0x1E	; 30
    7950:	8f 93       	push	r24
    7952:	7e 01       	movw	r14, r28
    7954:	9d e3       	ldi	r25, 0x3D	; 61
    7956:	e9 0e       	add	r14, r25
    7958:	f1 1c       	adc	r15, r1
    795a:	ff 92       	push	r15
    795c:	ef 92       	push	r14
    795e:	0e 94 7c 61 	call	0xc2f8	; 0xc2f8 <snprintf>
			strcat( string, filler);    //filler(frequencia) adicionado a string.
    7962:	b7 01       	movw	r22, r14
    7964:	ce 01       	movw	r24, r28
    7966:	01 96       	adiw	r24, 0x01	; 1
    7968:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			//serialEnviar(string);   //chama a função serialEnviar.
			strcat ( string, "E");		//trocar isso para o proximo caso quando tudo estiver pronto.
    796c:	6b ed       	ldi	r22, 0xDB	; 219
    796e:	7b e0       	ldi	r23, 0x0B	; 11
    7970:	ce 01       	movw	r24, r28
    7972:	01 96       	adiw	r24, 0x01	; 1
    7974:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			Serial1.print(string);
    7978:	be 01       	movw	r22, r28
    797a:	6f 5f       	subi	r22, 0xFF	; 255
    797c:	7f 4f       	sbci	r23, 0xFF	; 255
    797e:	86 ed       	ldi	r24, 0xD6	; 214
    7980:	94 e1       	ldi	r25, 0x14	; 20
    7982:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			return false;
    7986:	0f b6       	in	r0, 0x3f	; 63
    7988:	f8 94       	cli
    798a:	de bf       	out	0x3e, r29	; 62
    798c:	0f be       	out	0x3f, r0	; 63
    798e:	cd bf       	out	0x3d, r28	; 61
    7990:	da c0       	rjmp	.+436    	; 0x7b46 <_ZN8red_fang10getComplexE8leiturasi+0x2c8>
    7992:	c2 53       	subi	r28, 0x32	; 50
    7994:	df 4f       	sbci	r29, 0xFF	; 255
    7996:	e8 80       	ld	r14, Y
    7998:	f9 80       	ldd	r15, Y+1	; 0x01
    799a:	ce 5c       	subi	r28, 0xCE	; 206
    799c:	d0 40       	sbci	r29, 0x00	; 0
    799e:	c0 53       	subi	r28, 0x30	; 48
    79a0:	df 4f       	sbci	r29, 0xFF	; 255
    79a2:	08 81       	ld	r16, Y
    79a4:	19 81       	ldd	r17, Y+1	; 0x01
    79a6:	c0 5d       	subi	r28, 0xD0	; 208
    79a8:	d0 40       	sbci	r29, 0x00	; 0
    79aa:	ce 52       	subi	r28, 0x2E	; 46
    79ac:	df 4f       	sbci	r29, 0xFF	; 255
    79ae:	88 80       	ld	r8, Y
    79b0:	99 80       	ldd	r9, Y+1	; 0x01
    79b2:	c2 5d       	subi	r28, 0xD2	; 210
    79b4:	d0 40       	sbci	r29, 0x00	; 0
    79b6:	cc 52       	subi	r28, 0x2C	; 44
    79b8:	df 4f       	sbci	r29, 0xFF	; 255
    79ba:	a8 80       	ld	r10, Y
    79bc:	b9 80       	ldd	r11, Y+1	; 0x01
    79be:	c4 5d       	subi	r28, 0xD4	; 212
    79c0:	d0 40       	sbci	r29, 0x00	; 0
    79c2:	ca 52       	subi	r28, 0x2A	; 42
    79c4:	df 4f       	sbci	r29, 0xFF	; 255
    79c6:	c8 80       	ld	r12, Y
    79c8:	d9 80       	ldd	r13, Y+1	; 0x01
    79ca:	c6 5d       	subi	r28, 0xD6	; 214
    79cc:	d0 40       	sbci	r29, 0x00	; 0
	char string[60], filler[30];
	switch(n)
	{
		case 0:
		{		//data e hora.
			strcpy (string, "S");
    79ce:	66 e3       	ldi	r22, 0x36	; 54
    79d0:	78 e0       	ldi	r23, 0x08	; 8
    79d2:	ce 01       	movw	r24, r28
    79d4:	01 96       	adiw	r24, 0x01	; 1
    79d6:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			strcat (string, "D");
    79da:	66 e1       	ldi	r22, 0x16	; 22
    79dc:	76 e0       	ldi	r23, 0x06	; 6
    79de:	ce 01       	movw	r24, r28
    79e0:	01 96       	adiw	r24, 0x01	; 1
    79e2:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			if(lt.dia<10)
    79e6:	8a e0       	ldi	r24, 0x0A	; 10
    79e8:	88 16       	cp	r8, r24
    79ea:	91 04       	cpc	r9, r1
    79ec:	34 f4       	brge	.+12     	; 0x79fa <_ZN8red_fang10getComplexE8leiturasi+0x17c>
				{
					strcat (string, "0"); 
    79ee:	65 ef       	ldi	r22, 0xF5	; 245
    79f0:	76 e0       	ldi	r23, 0x06	; 6
    79f2:	ce 01       	movw	r24, r28
    79f4:	01 96       	adiw	r24, 0x01	; 1
    79f6:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    79fa:	4a e0       	ldi	r20, 0x0A	; 10
    79fc:	be 01       	movw	r22, r28
    79fe:	63 5c       	subi	r22, 0xC3	; 195
    7a00:	7f 4f       	sbci	r23, 0xFF	; 255
    7a02:	c4 01       	movw	r24, r8
    7a04:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
				}		
				itoa (lt.dia, filler, 10);
				strcat (string, filler);
    7a08:	be 01       	movw	r22, r28
    7a0a:	63 5c       	subi	r22, 0xC3	; 195
    7a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    7a0e:	ce 01       	movw	r24, r28
    7a10:	01 96       	adiw	r24, 0x01	; 1
    7a12:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
				strcat( string, "/");
    7a16:	64 ea       	ldi	r22, 0xA4	; 164
    7a18:	75 e0       	ldi	r23, 0x05	; 5
    7a1a:	ce 01       	movw	r24, r28
    7a1c:	01 96       	adiw	r24, 0x01	; 1
    7a1e:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			
			if(lt.mes<10)
    7a22:	9a e0       	ldi	r25, 0x0A	; 10
    7a24:	a9 16       	cp	r10, r25
    7a26:	b1 04       	cpc	r11, r1
    7a28:	34 f4       	brge	.+12     	; 0x7a36 <_ZN8red_fang10getComplexE8leiturasi+0x1b8>
				{
					strcat (string, "0"); 
    7a2a:	65 ef       	ldi	r22, 0xF5	; 245
    7a2c:	76 e0       	ldi	r23, 0x06	; 6
    7a2e:	ce 01       	movw	r24, r28
    7a30:	01 96       	adiw	r24, 0x01	; 1
    7a32:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    7a36:	4a e0       	ldi	r20, 0x0A	; 10
    7a38:	be 01       	movw	r22, r28
    7a3a:	63 5c       	subi	r22, 0xC3	; 195
    7a3c:	7f 4f       	sbci	r23, 0xFF	; 255
    7a3e:	c5 01       	movw	r24, r10
    7a40:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
				}		
				itoa (lt.mes, filler, 10);
				strcat (string, filler);
    7a44:	be 01       	movw	r22, r28
    7a46:	63 5c       	subi	r22, 0xC3	; 195
    7a48:	7f 4f       	sbci	r23, 0xFF	; 255
    7a4a:	ce 01       	movw	r24, r28
    7a4c:	01 96       	adiw	r24, 0x01	; 1
    7a4e:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
				strcat( string, "/");
    7a52:	64 ea       	ldi	r22, 0xA4	; 164
    7a54:	75 e0       	ldi	r23, 0x05	; 5
    7a56:	ce 01       	movw	r24, r28
    7a58:	01 96       	adiw	r24, 0x01	; 1
    7a5a:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			
			if(lt.ano<10)
    7a5e:	8a e0       	ldi	r24, 0x0A	; 10
    7a60:	c8 16       	cp	r12, r24
    7a62:	d1 04       	cpc	r13, r1
    7a64:	34 f4       	brge	.+12     	; 0x7a72 <_ZN8red_fang10getComplexE8leiturasi+0x1f4>
				{
					strcat (string, "0"); 
    7a66:	65 ef       	ldi	r22, 0xF5	; 245
    7a68:	76 e0       	ldi	r23, 0x06	; 6
    7a6a:	ce 01       	movw	r24, r28
    7a6c:	01 96       	adiw	r24, 0x01	; 1
    7a6e:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    7a72:	4a e0       	ldi	r20, 0x0A	; 10
    7a74:	be 01       	movw	r22, r28
    7a76:	63 5c       	subi	r22, 0xC3	; 195
    7a78:	7f 4f       	sbci	r23, 0xFF	; 255
    7a7a:	c6 01       	movw	r24, r12
    7a7c:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
				}		
				itoa (lt.ano, filler, 10);
				strcat (string, filler);
    7a80:	be 01       	movw	r22, r28
    7a82:	63 5c       	subi	r22, 0xC3	; 195
    7a84:	7f 4f       	sbci	r23, 0xFF	; 255
    7a86:	ce 01       	movw	r24, r28
    7a88:	01 96       	adiw	r24, 0x01	; 1
    7a8a:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
				strcat( string, " ");
    7a8e:	6f eb       	ldi	r22, 0xBF	; 191
    7a90:	74 e0       	ldi	r23, 0x04	; 4
    7a92:	ce 01       	movw	r24, r28
    7a94:	01 96       	adiw	r24, 0x01	; 1
    7a96:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			
			if(lt.hora<10)
    7a9a:	9a e0       	ldi	r25, 0x0A	; 10
    7a9c:	e9 16       	cp	r14, r25
    7a9e:	f1 04       	cpc	r15, r1
    7aa0:	34 f4       	brge	.+12     	; 0x7aae <_ZN8red_fang10getComplexE8leiturasi+0x230>
				{
					strcat (string, "0"); 
    7aa2:	65 ef       	ldi	r22, 0xF5	; 245
    7aa4:	76 e0       	ldi	r23, 0x06	; 6
    7aa6:	ce 01       	movw	r24, r28
    7aa8:	01 96       	adiw	r24, 0x01	; 1
    7aaa:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    7aae:	4a e0       	ldi	r20, 0x0A	; 10
    7ab0:	be 01       	movw	r22, r28
    7ab2:	63 5c       	subi	r22, 0xC3	; 195
    7ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ab6:	c7 01       	movw	r24, r14
    7ab8:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
				}		
				itoa (lt.hora, filler, 10);
				strcat (string, filler);
    7abc:	be 01       	movw	r22, r28
    7abe:	63 5c       	subi	r22, 0xC3	; 195
    7ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac2:	ce 01       	movw	r24, r28
    7ac4:	01 96       	adiw	r24, 0x01	; 1
    7ac6:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
				strcat( string, ":");
    7aca:	69 e2       	ldi	r22, 0x29	; 41
    7acc:	78 e0       	ldi	r23, 0x08	; 8
    7ace:	ce 01       	movw	r24, r28
    7ad0:	01 96       	adiw	r24, 0x01	; 1
    7ad2:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			
			if(lt.minuto<10)
    7ad6:	0a 30       	cpi	r16, 0x0A	; 10
    7ad8:	11 05       	cpc	r17, r1
    7ada:	34 f4       	brge	.+12     	; 0x7ae8 <_ZN8red_fang10getComplexE8leiturasi+0x26a>
				{
					strcat (string, "0"); 
    7adc:	65 ef       	ldi	r22, 0xF5	; 245
    7ade:	76 e0       	ldi	r23, 0x06	; 6
    7ae0:	ce 01       	movw	r24, r28
    7ae2:	01 96       	adiw	r24, 0x01	; 1
    7ae4:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    7ae8:	4a e0       	ldi	r20, 0x0A	; 10
    7aea:	be 01       	movw	r22, r28
    7aec:	63 5c       	subi	r22, 0xC3	; 195
    7aee:	7f 4f       	sbci	r23, 0xFF	; 255
    7af0:	c8 01       	movw	r24, r16
    7af2:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
				}		
				itoa (lt.minuto, filler, 10);
				strcat (string, filler);
    7af6:	be 01       	movw	r22, r28
    7af8:	63 5c       	subi	r22, 0xC3	; 195
    7afa:	7f 4f       	sbci	r23, 0xFF	; 255
    7afc:	ce 01       	movw	r24, r28
    7afe:	01 96       	adiw	r24, 0x01	; 1
    7b00:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			
			//serialEnviar(string);
			Serial1.print(string);
    7b04:	be 01       	movw	r22, r28
    7b06:	6f 5f       	subi	r22, 0xFF	; 255
    7b08:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0a:	19 c0       	rjmp	.+50     	; 0x7b3e <_ZN8red_fang10getComplexE8leiturasi+0x2c0>
			return false;   //retorna false
			break;
		}
		case 2:				//imaginario
		{
			strcpy (string, ":");
    7b0c:	69 e2       	ldi	r22, 0x29	; 41
    7b0e:	78 e0       	ldi	r23, 0x08	; 8
    7b10:	ce 01       	movw	r24, r28
    7b12:	01 96       	adiw	r24, 0x01	; 1
    7b14:	7c 01       	movw	r14, r24
    7b16:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			dtostrf(lt.imag, 2, 2, &string[strlen(string)]);
    7b1a:	f7 01       	movw	r30, r14
    7b1c:	01 90       	ld	r0, Z+
    7b1e:	00 20       	and	r0, r0
    7b20:	e9 f7       	brne	.-6      	; 0x7b1c <_ZN8red_fang10getComplexE8leiturasi+0x29e>
    7b22:	8f 01       	movw	r16, r30
    7b24:	01 50       	subi	r16, 0x01	; 1
    7b26:	11 09       	sbc	r17, r1
    7b28:	e6 96       	adiw	r28, 0x36	; 54
    7b2a:	6c ad       	ldd	r22, Y+60	; 0x3c
    7b2c:	7d ad       	ldd	r23, Y+61	; 0x3d
    7b2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    7b30:	9f ad       	ldd	r25, Y+63	; 0x3f
    7b32:	e6 97       	sbiw	r28, 0x36	; 54
		}
		case 1:				//real
		{
			strcpy (string, "|");
			strcat (string, "R");   //Recebe o tag inicial do tipo de informação a ser enviada, R para Real.
			dtostrf(lt.real, 2, 2, &string[strlen(string)]);    //Recebe o valor real.
    7b34:	22 e0       	ldi	r18, 0x02	; 2
    7b36:	42 e0       	ldi	r20, 0x02	; 2
    7b38:	0e 94 c7 5e 	call	0xbd8e	; 0xbd8e <dtostrf>
			//serialEnviar(string);   //chama a função serialEnviar.
			Serial1.print(string);
    7b3c:	b7 01       	movw	r22, r14
    7b3e:	86 ed       	ldi	r24, 0xD6	; 214
    7b40:	94 e1       	ldi	r25, 0x14	; 20
    7b42:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			return false;   //retorna false
    7b46:	80 e0       	ldi	r24, 0x00	; 0
    7b48:	73 c0       	rjmp	.+230    	; 0x7c30 <_ZN8red_fang10getComplexE8leiturasi+0x3b2>
			break;
		}
		case 3:				//pares de leitura
		{
			static int x=0;
			if(x<11)
    7b4a:	e0 90 03 14 	lds	r14, 0x1403	; 0x801403 <_ZZN8red_fang10getComplexE8leiturasiE1x>
    7b4e:	f0 90 04 14 	lds	r15, 0x1404	; 0x801404 <_ZZN8red_fang10getComplexE8leiturasiE1x+0x1>
    7b52:	9b e0       	ldi	r25, 0x0B	; 11
    7b54:	e9 16       	cp	r14, r25
    7b56:	f1 04       	cpc	r15, r1
    7b58:	0c f0       	brlt	.+2      	; 0x7b5c <_ZN8red_fang10getComplexE8leiturasi+0x2de>
    7b5a:	5e c0       	rjmp	.+188    	; 0x7c18 <_ZN8red_fang10getComplexE8leiturasi+0x39a>
			{
				strcpy (string, "|");
    7b5c:	69 e1       	ldi	r22, 0x19	; 25
    7b5e:	7c e0       	ldi	r23, 0x0C	; 12
    7b60:	ce 01       	movw	r24, r28
    7b62:	01 96       	adiw	r24, 0x01	; 1
    7b64:	6c 01       	movw	r12, r24
    7b66:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
				strcat (string, "R");
    7b6a:	64 e7       	ldi	r22, 0x74	; 116
    7b6c:	7c e0       	ldi	r23, 0x0C	; 12
    7b6e:	c6 01       	movw	r24, r12
    7b70:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
				dtostrf(lt.arrayR[x], 2, 2, &string[strlen(string)]);
    7b74:	f6 01       	movw	r30, r12
    7b76:	01 90       	ld	r0, Z+
    7b78:	00 20       	and	r0, r0
    7b7a:	e9 f7       	brne	.-6      	; 0x7b76 <_ZN8red_fang10getComplexE8leiturasi+0x2f8>
    7b7c:	8f 01       	movw	r16, r30
    7b7e:	01 50       	subi	r16, 0x01	; 1
    7b80:	11 09       	sbc	r17, r1
    7b82:	f7 01       	movw	r30, r14
    7b84:	33 96       	adiw	r30, 0x03	; 3
    7b86:	ee 0f       	add	r30, r30
    7b88:	ff 1f       	adc	r31, r31
    7b8a:	ee 0f       	add	r30, r30
    7b8c:	ff 1f       	adc	r31, r31
    7b8e:	8a e6       	ldi	r24, 0x6A	; 106
    7b90:	90 e0       	ldi	r25, 0x00	; 0
    7b92:	8c 0f       	add	r24, r28
    7b94:	9d 1f       	adc	r25, r29
    7b96:	e8 0f       	add	r30, r24
    7b98:	f9 1f       	adc	r31, r25
    7b9a:	60 81       	ld	r22, Z
    7b9c:	71 81       	ldd	r23, Z+1	; 0x01
    7b9e:	82 81       	ldd	r24, Z+2	; 0x02
    7ba0:	93 81       	ldd	r25, Z+3	; 0x03
    7ba2:	22 e0       	ldi	r18, 0x02	; 2
    7ba4:	42 e0       	ldi	r20, 0x02	; 2
    7ba6:	0e 94 c7 5e 	call	0xbd8e	; 0xbd8e <dtostrf>
				strcat (string, ":");
    7baa:	69 e2       	ldi	r22, 0x29	; 41
    7bac:	78 e0       	ldi	r23, 0x08	; 8
    7bae:	c6 01       	movw	r24, r12
    7bb0:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
				dtostrf(lt.arrayJ[x], 2, 2, &string[strlen(string)]);
    7bb4:	f6 01       	movw	r30, r12
    7bb6:	01 90       	ld	r0, Z+
    7bb8:	00 20       	and	r0, r0
    7bba:	e9 f7       	brne	.-6      	; 0x7bb6 <_ZN8red_fang10getComplexE8leiturasi+0x338>
    7bbc:	8f 01       	movw	r16, r30
    7bbe:	01 50       	subi	r16, 0x01	; 1
    7bc0:	11 09       	sbc	r17, r1
    7bc2:	e0 91 03 14 	lds	r30, 0x1403	; 0x801403 <_ZZN8red_fang10getComplexE8leiturasiE1x>
    7bc6:	f0 91 04 14 	lds	r31, 0x1404	; 0x801404 <_ZZN8red_fang10getComplexE8leiturasiE1x+0x1>
    7bca:	3e 96       	adiw	r30, 0x0e	; 14
    7bcc:	ee 0f       	add	r30, r30
    7bce:	ff 1f       	adc	r31, r31
    7bd0:	ee 0f       	add	r30, r30
    7bd2:	ff 1f       	adc	r31, r31
    7bd4:	8a e6       	ldi	r24, 0x6A	; 106
    7bd6:	90 e0       	ldi	r25, 0x00	; 0
    7bd8:	8c 0f       	add	r24, r28
    7bda:	9d 1f       	adc	r25, r29
    7bdc:	e8 0f       	add	r30, r24
    7bde:	f9 1f       	adc	r31, r25
    7be0:	60 81       	ld	r22, Z
    7be2:	71 81       	ldd	r23, Z+1	; 0x01
    7be4:	82 81       	ldd	r24, Z+2	; 0x02
    7be6:	93 81       	ldd	r25, Z+3	; 0x03
    7be8:	22 e0       	ldi	r18, 0x02	; 2
    7bea:	42 e0       	ldi	r20, 0x02	; 2
    7bec:	0e 94 c7 5e 	call	0xbd8e	; 0xbd8e <dtostrf>
				//serialEnviar(string);
				Serial.println(string);
    7bf0:	b6 01       	movw	r22, r12
    7bf2:	80 ec       	ldi	r24, 0xC0	; 192
    7bf4:	90 e1       	ldi	r25, 0x10	; 16
    7bf6:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				Serial1.print(string);
    7bfa:	b6 01       	movw	r22, r12
    7bfc:	86 ed       	ldi	r24, 0xD6	; 214
    7bfe:	94 e1       	ldi	r25, 0x14	; 20
    7c00:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				x++;
    7c04:	80 91 03 14 	lds	r24, 0x1403	; 0x801403 <_ZZN8red_fang10getComplexE8leiturasiE1x>
    7c08:	90 91 04 14 	lds	r25, 0x1404	; 0x801404 <_ZZN8red_fang10getComplexE8leiturasiE1x+0x1>
    7c0c:	01 96       	adiw	r24, 0x01	; 1
    7c0e:	90 93 04 14 	sts	0x1404, r25	; 0x801404 <_ZZN8red_fang10getComplexE8leiturasiE1x+0x1>
    7c12:	80 93 03 14 	sts	0x1403, r24	; 0x801403 <_ZZN8red_fang10getComplexE8leiturasiE1x>
    7c16:	97 cf       	rjmp	.-210    	; 0x7b46 <_ZN8red_fang10getComplexE8leiturasi+0x2c8>
				return false;
			}
			else
			{
				x=0;
    7c18:	10 92 04 14 	sts	0x1404, r1	; 0x801404 <_ZZN8red_fang10getComplexE8leiturasiE1x+0x1>
    7c1c:	10 92 03 14 	sts	0x1403, r1	; 0x801403 <_ZZN8red_fang10getComplexE8leiturasiE1x>
    7c20:	06 c0       	rjmp	.+12     	; 0x7c2e <_ZN8red_fang10getComplexE8leiturasi+0x3b0>
			}
			break;
		}*/
		
		default:{
			Serial.println("SUCESSO.");
    7c22:	63 e2       	ldi	r22, 0x23	; 35
    7c24:	7c e0       	ldi	r23, 0x0C	; 12
    7c26:	80 ec       	ldi	r24, 0xC0	; 192
    7c28:	90 e1       	ldi	r25, 0x10	; 16
    7c2a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
			return true;
    7c2e:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
}
    7c30:	c6 5a       	subi	r28, 0xA6	; 166
    7c32:	df 4f       	sbci	r29, 0xFF	; 255
    7c34:	0f b6       	in	r0, 0x3f	; 63
    7c36:	f8 94       	cli
    7c38:	de bf       	out	0x3e, r29	; 62
    7c3a:	0f be       	out	0x3f, r0	; 63
    7c3c:	cd bf       	out	0x3d, r28	; 61
    7c3e:	df 91       	pop	r29
    7c40:	cf 91       	pop	r28
    7c42:	1f 91       	pop	r17
    7c44:	0f 91       	pop	r16
    7c46:	ff 90       	pop	r15
    7c48:	ef 90       	pop	r14
    7c4a:	df 90       	pop	r13
    7c4c:	cf 90       	pop	r12
    7c4e:	bf 90       	pop	r11
    7c50:	af 90       	pop	r10
    7c52:	9f 90       	pop	r9
    7c54:	8f 90       	pop	r8
    7c56:	08 95       	ret

00007c58 <_ZN8red_fang3getEib>:
bool red_fang::get(int n, bool complex)
{
    7c58:	ef 92       	push	r14
    7c5a:	ff 92       	push	r15
    7c5c:	0f 93       	push	r16
    7c5e:	1f 93       	push	r17
    7c60:	cf 93       	push	r28
    7c62:	df 93       	push	r29
    7c64:	ec 01       	movw	r28, r24
    7c66:	8b 01       	movw	r16, r22
    7c68:	f4 2e       	mov	r15, r20
    static int inf = 0;
    static leitura lt;
    if(n==0){
    7c6a:	67 2b       	or	r22, r23
    7c6c:	09 f0       	breq	.+2      	; 0x7c70 <_ZN8red_fang3getEib+0x18>
    7c6e:	c2 c0       	rjmp	.+388    	; 0x7df4 <_ZN8red_fang3getEib+0x19c>
		static int z=0;
		EEPROM.get(1+(sizeof(leitura)*(z)), lt);
    7c70:	20 91 01 14 	lds	r18, 0x1401	; 0x801401 <_ZZN8red_fang3getEibE1z>
    7c74:	30 91 02 14 	lds	r19, 0x1402	; 0x801402 <_ZZN8red_fang3getEibE1z+0x1>
    7c78:	4e e6       	ldi	r20, 0x6E	; 110
    7c7a:	42 9f       	mul	r20, r18
    7c7c:	c0 01       	movw	r24, r0
    7c7e:	43 9f       	mul	r20, r19
    7c80:	90 0d       	add	r25, r0
    7c82:	11 24       	eor	r1, r1
    7c84:	63 e9       	ldi	r22, 0x93	; 147
    7c86:	73 e1       	ldi	r23, 0x13	; 19
    7c88:	01 96       	adiw	r24, 0x01	; 1
    7c8a:	f6 da       	rcall	.-2580   	; 0x7278 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.4>
				{
					inf=0;
					z++;
					Serial.print("Z=");
					Serial.println(z);
					EEPROM.get(1+(sizeof(leitura)*(z)), lt);
    7c8c:	8e e6       	ldi	r24, 0x6E	; 110
    7c8e:	e8 2e       	mov	r14, r24
						delay(20);
					}
				}
				else if(inf==3)
				{
					inf++;
    7c90:	04 e0       	ldi	r16, 0x04	; 4
    static int inf = 0;
    static leitura lt;
    if(n==0){
		static int z=0;
		EEPROM.get(1+(sizeof(leitura)*(z)), lt);
		while(z<EEPROM.read(0)-1)
    7c92:	10 e0       	ldi	r17, 0x00	; 0
    7c94:	ed da       	rcall	.-2598   	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    7c96:	90 e0       	ldi	r25, 0x00	; 0
    7c98:	01 97       	sbiw	r24, 0x01	; 1
    7c9a:	20 91 01 14 	lds	r18, 0x1401	; 0x801401 <_ZZN8red_fang3getEibE1z>
    7c9e:	30 91 02 14 	lds	r19, 0x1402	; 0x801402 <_ZZN8red_fang3getEibE1z+0x1>
    7ca2:	28 17       	cp	r18, r24
    7ca4:	39 07       	cpc	r19, r25
    7ca6:	0c f0       	brlt	.+2      	; 0x7caa <_ZN8red_fang3getEib+0x52>
    7ca8:	a0 c0       	rjmp	.+320    	; 0x7dea <_ZN8red_fang3getEib+0x192>
    7caa:	90 91 92 13 	lds	r25, 0x1392	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7cae:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <_ZZN8red_fang3getEibE3inf>
		{
			if(!complex)
    7cb2:	f1 10       	cpse	r15, r1
    7cb4:	2c c0       	rjmp	.+88     	; 0x7d0e <_ZN8red_fang3getEib+0xb6>
			{
				if(!serialLeitura(lt, inf)){
    7cb6:	9f 93       	push	r25
    7cb8:	8f 93       	push	r24
    7cba:	2d b7       	in	r18, 0x3d	; 61
    7cbc:	3e b7       	in	r19, 0x3e	; 62
    7cbe:	2e 56       	subi	r18, 0x6E	; 110
    7cc0:	31 09       	sbc	r19, r1
    7cc2:	0f b6       	in	r0, 0x3f	; 63
    7cc4:	f8 94       	cli
    7cc6:	3e bf       	out	0x3e, r19	; 62
    7cc8:	0f be       	out	0x3f, r0	; 63
    7cca:	2d bf       	out	0x3d, r18	; 61
    7ccc:	ad b7       	in	r26, 0x3d	; 61
    7cce:	be b7       	in	r27, 0x3e	; 62
    7cd0:	11 96       	adiw	r26, 0x01	; 1
    7cd2:	8e e6       	ldi	r24, 0x6E	; 110
    7cd4:	e3 e9       	ldi	r30, 0x93	; 147
    7cd6:	f3 e1       	ldi	r31, 0x13	; 19
    7cd8:	01 90       	ld	r0, Z+
    7cda:	0d 92       	st	X+, r0
    7cdc:	8a 95       	dec	r24
    7cde:	e1 f7       	brne	.-8      	; 0x7cd8 <_ZN8red_fang3getEib+0x80>
    7ce0:	ce 01       	movw	r24, r28
    7ce2:	4a dc       	rcall	.-1900   	; 0x7578 <_ZN8red_fang13serialLeituraE8leiturasi>
    7ce4:	2d b7       	in	r18, 0x3d	; 61
    7ce6:	3e b7       	in	r19, 0x3e	; 62
    7ce8:	20 59       	subi	r18, 0x90	; 144
    7cea:	3f 4f       	sbci	r19, 0xFF	; 255
    7cec:	0f b6       	in	r0, 0x3f	; 63
    7cee:	f8 94       	cli
    7cf0:	3e bf       	out	0x3e, r19	; 62
    7cf2:	0f be       	out	0x3f, r0	; 63
    7cf4:	2d bf       	out	0x3d, r18	; 61
    7cf6:	81 11       	cpse	r24, r1
    7cf8:	47 c0       	rjmp	.+142    	; 0x7d88 <_ZN8red_fang3getEib+0x130>
					inf++;
    7cfa:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <_ZZN8red_fang3getEibE3inf>
    7cfe:	90 91 92 13 	lds	r25, 0x1392	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7d02:	01 96       	adiw	r24, 0x01	; 1
    7d04:	90 93 92 13 	sts	0x1392, r25	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7d08:	80 93 91 13 	sts	0x1391, r24	; 0x801391 <_ZZN8red_fang3getEibE3inf>
    7d0c:	30 c0       	rjmp	.+96     	; 0x7d6e <_ZN8red_fang3getEib+0x116>
					delay(200);
				}
			}
			else
			{
				if(!getComplex(lt, inf))
    7d0e:	9f 93       	push	r25
    7d10:	8f 93       	push	r24
    7d12:	8d b7       	in	r24, 0x3d	; 61
    7d14:	9e b7       	in	r25, 0x3e	; 62
    7d16:	8e 56       	subi	r24, 0x6E	; 110
    7d18:	91 09       	sbc	r25, r1
    7d1a:	0f b6       	in	r0, 0x3f	; 63
    7d1c:	f8 94       	cli
    7d1e:	9e bf       	out	0x3e, r25	; 62
    7d20:	0f be       	out	0x3f, r0	; 63
    7d22:	8d bf       	out	0x3d, r24	; 61
    7d24:	ad b7       	in	r26, 0x3d	; 61
    7d26:	be b7       	in	r27, 0x3e	; 62
    7d28:	11 96       	adiw	r26, 0x01	; 1
    7d2a:	8e e6       	ldi	r24, 0x6E	; 110
    7d2c:	e3 e9       	ldi	r30, 0x93	; 147
    7d2e:	f3 e1       	ldi	r31, 0x13	; 19
    7d30:	01 90       	ld	r0, Z+
    7d32:	0d 92       	st	X+, r0
    7d34:	8a 95       	dec	r24
    7d36:	e1 f7       	brne	.-8      	; 0x7d30 <_ZN8red_fang3getEib+0xd8>
    7d38:	ce 01       	movw	r24, r28
    7d3a:	a1 dd       	rcall	.-1214   	; 0x787e <_ZN8red_fang10getComplexE8leiturasi>
    7d3c:	2d b7       	in	r18, 0x3d	; 61
    7d3e:	3e b7       	in	r19, 0x3e	; 62
    7d40:	20 59       	subi	r18, 0x90	; 144
    7d42:	3f 4f       	sbci	r19, 0xFF	; 255
    7d44:	0f b6       	in	r0, 0x3f	; 63
    7d46:	f8 94       	cli
    7d48:	3e bf       	out	0x3e, r19	; 62
    7d4a:	0f be       	out	0x3f, r0	; 63
    7d4c:	2d bf       	out	0x3d, r18	; 61
    7d4e:	20 91 91 13 	lds	r18, 0x1391	; 0x801391 <_ZZN8red_fang3getEibE3inf>
    7d52:	30 91 92 13 	lds	r19, 0x1392	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7d56:	81 11       	cpse	r24, r1
    7d58:	0f c0       	rjmp	.+30     	; 0x7d78 <_ZN8red_fang3getEib+0x120>
				{
					if(inf!=3)
    7d5a:	23 30       	cpi	r18, 0x03	; 3
    7d5c:	31 05       	cpc	r19, r1
    7d5e:	09 f4       	brne	.+2      	; 0x7d62 <_ZN8red_fang3getEib+0x10a>
    7d60:	99 cf       	rjmp	.-206    	; 0x7c94 <_ZN8red_fang3getEib+0x3c>
					{
						inf++;
    7d62:	2f 5f       	subi	r18, 0xFF	; 255
    7d64:	3f 4f       	sbci	r19, 0xFF	; 255
    7d66:	30 93 92 13 	sts	0x1392, r19	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7d6a:	20 93 91 13 	sts	0x1391, r18	; 0x801391 <_ZZN8red_fang3getEibE3inf>
						delay(20);
    7d6e:	64 e1       	ldi	r22, 0x14	; 20
    7d70:	70 e0       	ldi	r23, 0x00	; 0
    7d72:	80 e0       	ldi	r24, 0x00	; 0
    7d74:	90 e0       	ldi	r25, 0x00	; 0
    7d76:	36 c0       	rjmp	.+108    	; 0x7de4 <_ZN8red_fang3getEib+0x18c>
					}
				}
				else if(inf==3)
    7d78:	23 30       	cpi	r18, 0x03	; 3
    7d7a:	31 05       	cpc	r19, r1
    7d7c:	29 f4       	brne	.+10     	; 0x7d88 <_ZN8red_fang3getEib+0x130>
				{
					inf++;
    7d7e:	10 93 92 13 	sts	0x1392, r17	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7d82:	00 93 91 13 	sts	0x1391, r16	; 0x801391 <_ZZN8red_fang3getEibE3inf>
    7d86:	86 cf       	rjmp	.-244    	; 0x7c94 <_ZN8red_fang3getEib+0x3c>
				}
				else
				{
					inf=0;
    7d88:	10 92 92 13 	sts	0x1392, r1	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7d8c:	10 92 91 13 	sts	0x1391, r1	; 0x801391 <_ZZN8red_fang3getEibE3inf>
					z++;
    7d90:	80 91 01 14 	lds	r24, 0x1401	; 0x801401 <_ZZN8red_fang3getEibE1z>
    7d94:	90 91 02 14 	lds	r25, 0x1402	; 0x801402 <_ZZN8red_fang3getEibE1z+0x1>
    7d98:	01 96       	adiw	r24, 0x01	; 1
    7d9a:	90 93 02 14 	sts	0x1402, r25	; 0x801402 <_ZZN8red_fang3getEibE1z+0x1>
    7d9e:	80 93 01 14 	sts	0x1401, r24	; 0x801401 <_ZZN8red_fang3getEibE1z>
					Serial.print("Z=");
    7da2:	6c e2       	ldi	r22, 0x2C	; 44
    7da4:	7c e0       	ldi	r23, 0x0C	; 12
    7da6:	80 ec       	ldi	r24, 0xC0	; 192
    7da8:	90 e1       	ldi	r25, 0x10	; 16
    7daa:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
					Serial.println(z);
    7dae:	60 91 01 14 	lds	r22, 0x1401	; 0x801401 <_ZZN8red_fang3getEibE1z>
    7db2:	70 91 02 14 	lds	r23, 0x1402	; 0x801402 <_ZZN8red_fang3getEibE1z+0x1>
    7db6:	4a e0       	ldi	r20, 0x0A	; 10
    7db8:	50 e0       	ldi	r21, 0x00	; 0
    7dba:	80 ec       	ldi	r24, 0xC0	; 192
    7dbc:	90 e1       	ldi	r25, 0x10	; 16
    7dbe:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
					EEPROM.get(1+(sizeof(leitura)*(z)), lt);
    7dc2:	20 91 01 14 	lds	r18, 0x1401	; 0x801401 <_ZZN8red_fang3getEibE1z>
    7dc6:	30 91 02 14 	lds	r19, 0x1402	; 0x801402 <_ZZN8red_fang3getEibE1z+0x1>
    7dca:	e2 9e       	mul	r14, r18
    7dcc:	c0 01       	movw	r24, r0
    7dce:	e3 9e       	mul	r14, r19
    7dd0:	90 0d       	add	r25, r0
    7dd2:	11 24       	eor	r1, r1
    7dd4:	63 e9       	ldi	r22, 0x93	; 147
    7dd6:	73 e1       	ldi	r23, 0x13	; 19
    7dd8:	01 96       	adiw	r24, 0x01	; 1
    7dda:	4e da       	rcall	.-2916   	; 0x7278 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.4>
					delay(200);
    7ddc:	68 ec       	ldi	r22, 0xC8	; 200
    7dde:	70 e0       	ldi	r23, 0x00	; 0
    7de0:	80 e0       	ldi	r24, 0x00	; 0
    7de2:	90 e0       	ldi	r25, 0x00	; 0
    7de4:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
    7de8:	55 cf       	rjmp	.-342    	; 0x7c94 <_ZN8red_fang3getEib+0x3c>
				}
			}
        }
        z = 0;
    7dea:	10 92 02 14 	sts	0x1402, r1	; 0x801402 <_ZZN8red_fang3getEibE1z+0x1>
    7dee:	10 92 01 14 	sts	0x1401, r1	; 0x801401 <_ZZN8red_fang3getEibE1z>
        _Get=false;
		return true;
    }
    else if(n>EEPROM.read(0))
    7df2:	11 c0       	rjmp	.+34     	; 0x7e16 <_ZN8red_fang3getEib+0x1be>
    7df4:	3d da       	rcall	.-2950   	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    7df6:	90 e0       	ldi	r25, 0x00	; 0
    7df8:	80 17       	cp	r24, r16
    7dfa:	91 07       	cpc	r25, r17
    7dfc:	74 f4       	brge	.+28     	; 0x7e1a <_ZN8red_fang3getEib+0x1c2>
	{
		Serial.println("Index recebido superior ao numero de leituras, retornando ERRO");
    7dfe:	6f e2       	ldi	r22, 0x2F	; 47
    7e00:	7c e0       	ldi	r23, 0x0C	; 12
    7e02:	80 ec       	ldi	r24, 0xC0	; 192
    7e04:	90 e1       	ldi	r25, 0x10	; 16
    7e06:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		Serial1.print("ERR");
    7e0a:	6e e6       	ldi	r22, 0x6E	; 110
    7e0c:	7c e0       	ldi	r23, 0x0C	; 12
    7e0e:	86 ed       	ldi	r24, 0xD6	; 214
    7e10:	94 e1       	ldi	r25, 0x14	; 20
    7e12:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		_Get=false;
    7e16:	18 82       	st	Y, r1
		return true;
    7e18:	82 c0       	rjmp	.+260    	; 0x7f1e <_ZN8red_fang3getEib+0x2c6>
    }
    else 
	{
		EEPROM.get( 1+ (sizeof(leitura)*(n-1) ), lt);
    7e1a:	01 50       	subi	r16, 0x01	; 1
    7e1c:	11 09       	sbc	r17, r1
    7e1e:	2e e6       	ldi	r18, 0x6E	; 110
    7e20:	20 9f       	mul	r18, r16
    7e22:	c0 01       	movw	r24, r0
    7e24:	21 9f       	mul	r18, r17
    7e26:	90 0d       	add	r25, r0
    7e28:	11 24       	eor	r1, r1
    7e2a:	63 e9       	ldi	r22, 0x93	; 147
    7e2c:	73 e1       	ldi	r23, 0x13	; 19
    7e2e:	01 96       	adiw	r24, 0x01	; 1
    7e30:	23 da       	rcall	.-3002   	; 0x7278 <_ZN11EEPROMClass3getI8leiturasEERT_iS3_.isra.4>
    7e32:	90 91 92 13 	lds	r25, 0x1392	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7e36:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <_ZZN8red_fang3getEibE3inf>
		if(!complex)
    7e3a:	f1 10       	cpse	r15, r1
    7e3c:	2e c0       	rjmp	.+92     	; 0x7e9a <_ZN8red_fang3getEib+0x242>
		{
			if(!serialLeitura(lt, inf))
    7e3e:	9f 93       	push	r25
    7e40:	8f 93       	push	r24
    7e42:	8d b7       	in	r24, 0x3d	; 61
    7e44:	9e b7       	in	r25, 0x3e	; 62
    7e46:	8e 56       	subi	r24, 0x6E	; 110
    7e48:	91 09       	sbc	r25, r1
    7e4a:	0f b6       	in	r0, 0x3f	; 63
    7e4c:	f8 94       	cli
    7e4e:	9e bf       	out	0x3e, r25	; 62
    7e50:	0f be       	out	0x3f, r0	; 63
    7e52:	8d bf       	out	0x3d, r24	; 61
    7e54:	ad b7       	in	r26, 0x3d	; 61
    7e56:	be b7       	in	r27, 0x3e	; 62
    7e58:	11 96       	adiw	r26, 0x01	; 1
    7e5a:	8e e6       	ldi	r24, 0x6E	; 110
    7e5c:	e3 e9       	ldi	r30, 0x93	; 147
    7e5e:	f3 e1       	ldi	r31, 0x13	; 19
    7e60:	01 90       	ld	r0, Z+
    7e62:	0d 92       	st	X+, r0
    7e64:	8a 95       	dec	r24
    7e66:	e1 f7       	brne	.-8      	; 0x7e60 <_ZN8red_fang3getEib+0x208>
    7e68:	ce 01       	movw	r24, r28
    7e6a:	86 db       	rcall	.-2292   	; 0x7578 <_ZN8red_fang13serialLeituraE8leiturasi>
    7e6c:	2d b7       	in	r18, 0x3d	; 61
    7e6e:	3e b7       	in	r19, 0x3e	; 62
    7e70:	20 59       	subi	r18, 0x90	; 144
    7e72:	3f 4f       	sbci	r19, 0xFF	; 255
    7e74:	0f b6       	in	r0, 0x3f	; 63
    7e76:	f8 94       	cli
    7e78:	3e bf       	out	0x3e, r19	; 62
    7e7a:	0f be       	out	0x3f, r0	; 63
    7e7c:	2d bf       	out	0x3d, r18	; 61
    7e7e:	81 11       	cpse	r24, r1
    7e80:	06 c0       	rjmp	.+12     	; 0x7e8e <_ZN8red_fang3getEib+0x236>
			{
				inf++;
    7e82:	80 91 91 13 	lds	r24, 0x1391	; 0x801391 <_ZZN8red_fang3getEibE3inf>
    7e86:	90 91 92 13 	lds	r25, 0x1392	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7e8a:	01 96       	adiw	r24, 0x01	; 1
    7e8c:	3b c0       	rjmp	.+118    	; 0x7f04 <_ZN8red_fang3getEib+0x2ac>
			}
			else
			{
				_Get = false;
    7e8e:	18 82       	st	Y, r1
				inf=0;
    7e90:	10 92 92 13 	sts	0x1392, r1	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7e94:	10 92 91 13 	sts	0x1391, r1	; 0x801391 <_ZZN8red_fang3getEibE3inf>
				return true;
    7e98:	42 c0       	rjmp	.+132    	; 0x7f1e <_ZN8red_fang3getEib+0x2c6>
			}
		}
		else
		{
			if(!getComplex(lt, inf))
    7e9a:	9f 93       	push	r25
    7e9c:	8f 93       	push	r24
    7e9e:	8d b7       	in	r24, 0x3d	; 61
    7ea0:	9e b7       	in	r25, 0x3e	; 62
    7ea2:	8e 56       	subi	r24, 0x6E	; 110
    7ea4:	91 09       	sbc	r25, r1
    7ea6:	0f b6       	in	r0, 0x3f	; 63
    7ea8:	f8 94       	cli
    7eaa:	9e bf       	out	0x3e, r25	; 62
    7eac:	0f be       	out	0x3f, r0	; 63
    7eae:	8d bf       	out	0x3d, r24	; 61
    7eb0:	ad b7       	in	r26, 0x3d	; 61
    7eb2:	be b7       	in	r27, 0x3e	; 62
    7eb4:	11 96       	adiw	r26, 0x01	; 1
    7eb6:	8e e6       	ldi	r24, 0x6E	; 110
    7eb8:	e3 e9       	ldi	r30, 0x93	; 147
    7eba:	f3 e1       	ldi	r31, 0x13	; 19
    7ebc:	01 90       	ld	r0, Z+
    7ebe:	0d 92       	st	X+, r0
    7ec0:	8a 95       	dec	r24
    7ec2:	e1 f7       	brne	.-8      	; 0x7ebc <_ZN8red_fang3getEib+0x264>
    7ec4:	ce 01       	movw	r24, r28
    7ec6:	db dc       	rcall	.-1610   	; 0x787e <_ZN8red_fang10getComplexE8leiturasi>
    7ec8:	2d b7       	in	r18, 0x3d	; 61
    7eca:	3e b7       	in	r19, 0x3e	; 62
    7ecc:	20 59       	subi	r18, 0x90	; 144
    7ece:	3f 4f       	sbci	r19, 0xFF	; 255
    7ed0:	0f b6       	in	r0, 0x3f	; 63
    7ed2:	f8 94       	cli
    7ed4:	3e bf       	out	0x3e, r19	; 62
    7ed6:	0f be       	out	0x3f, r0	; 63
    7ed8:	2d bf       	out	0x3d, r18	; 61
    7eda:	20 91 91 13 	lds	r18, 0x1391	; 0x801391 <_ZZN8red_fang3getEibE3inf>
    7ede:	30 91 92 13 	lds	r19, 0x1392	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7ee2:	81 11       	cpse	r24, r1
    7ee4:	0a c0       	rjmp	.+20     	; 0x7efa <_ZN8red_fang3getEib+0x2a2>
			{
				if(inf!=3)
    7ee6:	23 30       	cpi	r18, 0x03	; 3
    7ee8:	31 05       	cpc	r19, r1
    7eea:	c1 f0       	breq	.+48     	; 0x7f1c <_ZN8red_fang3getEib+0x2c4>
				{
					inf++;
    7eec:	2f 5f       	subi	r18, 0xFF	; 255
    7eee:	3f 4f       	sbci	r19, 0xFF	; 255
    7ef0:	30 93 92 13 	sts	0x1392, r19	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7ef4:	20 93 91 13 	sts	0x1391, r18	; 0x801391 <_ZZN8red_fang3getEibE3inf>
    7ef8:	11 c0       	rjmp	.+34     	; 0x7f1c <_ZN8red_fang3getEib+0x2c4>
				}
			}
			else if(inf==3)
    7efa:	23 30       	cpi	r18, 0x03	; 3
    7efc:	31 05       	cpc	r19, r1
    7efe:	39 f4       	brne	.+14     	; 0x7f0e <_ZN8red_fang3getEib+0x2b6>
			{
				inf++;
    7f00:	84 e0       	ldi	r24, 0x04	; 4
    7f02:	90 e0       	ldi	r25, 0x00	; 0
    7f04:	90 93 92 13 	sts	0x1392, r25	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7f08:	80 93 91 13 	sts	0x1391, r24	; 0x801391 <_ZZN8red_fang3getEibE3inf>
    7f0c:	07 c0       	rjmp	.+14     	; 0x7f1c <_ZN8red_fang3getEib+0x2c4>
			}
			else
			{
				_Get = false;
    7f0e:	18 82       	st	Y, r1
				inf=0;
    7f10:	10 92 92 13 	sts	0x1392, r1	; 0x801392 <_ZZN8red_fang3getEibE3inf+0x1>
    7f14:	10 92 91 13 	sts	0x1391, r1	; 0x801391 <_ZZN8red_fang3getEibE3inf>
				_isBeingUsed = false;
    7f18:	1b 82       	std	Y+3, r1	; 0x03
				return true;
    7f1a:	01 c0       	rjmp	.+2      	; 0x7f1e <_ZN8red_fang3getEib+0x2c6>
			inf = 0;
			_Get = false;
			return true;
		}*/
    }
}
    7f1c:	01 c0       	rjmp	.+2      	; 0x7f20 <_ZN8red_fang3getEib+0x2c8>
    7f1e:	81 e0       	ldi	r24, 0x01	; 1
    7f20:	df 91       	pop	r29
    7f22:	cf 91       	pop	r28
    7f24:	1f 91       	pop	r17
    7f26:	0f 91       	pop	r16
    7f28:	ff 90       	pop	r15
    7f2a:	ef 90       	pop	r14
    7f2c:	08 95       	ret

00007f2e <_ZN8red_fang11isBeingUsedEv>:

bool red_fang::isBeingUsed()
{
	return _isBeingUsed;
    7f2e:	fc 01       	movw	r30, r24
    7f30:	83 81       	ldd	r24, Z+3	; 0x03
    7f32:	08 95       	ret

00007f34 <_ZN8red_fang12check_stringEPc>:
		check_string(comStr);
	}
}

void red_fang::check_string(char str[])
{
    7f34:	2f 92       	push	r2
    7f36:	3f 92       	push	r3
    7f38:	4f 92       	push	r4
    7f3a:	5f 92       	push	r5
    7f3c:	6f 92       	push	r6
    7f3e:	7f 92       	push	r7
    7f40:	8f 92       	push	r8
    7f42:	9f 92       	push	r9
    7f44:	af 92       	push	r10
    7f46:	bf 92       	push	r11
    7f48:	cf 92       	push	r12
    7f4a:	df 92       	push	r13
    7f4c:	ef 92       	push	r14
    7f4e:	ff 92       	push	r15
    7f50:	0f 93       	push	r16
    7f52:	1f 93       	push	r17
    7f54:	cf 93       	push	r28
    7f56:	df 93       	push	r29
    7f58:	cd b7       	in	r28, 0x3d	; 61
    7f5a:	de b7       	in	r29, 0x3e	; 62
    7f5c:	a5 97       	sbiw	r28, 0x25	; 37
    7f5e:	0f b6       	in	r0, 0x3f	; 63
    7f60:	f8 94       	cli
    7f62:	de bf       	out	0x3e, r29	; 62
    7f64:	0f be       	out	0x3f, r0	; 63
    7f66:	cd bf       	out	0x3d, r28	; 61
    7f68:	7c 01       	movw	r14, r24
    7f6a:	8b 01       	movw	r16, r22
	_isBeingUsed = true;
    7f6c:	81 e0       	ldi	r24, 0x01	; 1
    7f6e:	f7 01       	movw	r30, r14
    7f70:	83 83       	std	Z+3, r24	; 0x03
	if(strcmp(str, "VER")==0)
    7f72:	62 e7       	ldi	r22, 0x72	; 114
    7f74:	7c e0       	ldi	r23, 0x0C	; 12
    7f76:	c8 01       	movw	r24, r16
    7f78:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    7f7c:	89 2b       	or	r24, r25
    7f7e:	69 f4       	brne	.+26     	; 0x7f9a <_ZN8red_fang12check_stringEPc+0x66>
	{
		serialEnviar(VERSION);
    7f80:	61 ef       	ldi	r22, 0xF1	; 241
    7f82:	76 e0       	ldi	r23, 0x06	; 6
    7f84:	c7 01       	movw	r24, r14
    7f86:	f8 d9       	rcall	.-3088   	; 0x7378 <_ZN8red_fang12serialEnviarEPc>
		Serial.print("versão: ");
    7f88:	67 ee       	ldi	r22, 0xE7	; 231
    7f8a:	76 e0       	ldi	r23, 0x06	; 6
    7f8c:	80 ec       	ldi	r24, 0xC0	; 192
    7f8e:	90 e1       	ldi	r25, 0x10	; 16
    7f90:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.println(VERSION);
    7f94:	61 ef       	ldi	r22, 0xF1	; 241
    7f96:	76 e0       	ldi	r23, 0x06	; 6
    7f98:	38 c0       	rjmp	.+112    	; 0x800a <_ZN8red_fang12check_stringEPc+0xd6>
	}
	else if(strcmp(str, "CHK")==0)
    7f9a:	66 e7       	ldi	r22, 0x76	; 118
    7f9c:	7c e0       	ldi	r23, 0x0C	; 12
    7f9e:	c8 01       	movw	r24, r16
    7fa0:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    7fa4:	89 2b       	or	r24, r25
	{
		int limit = ((EEPROM.length()-3)/sizeof(leitura));
		char num[4];
		if(EEPROM.read(0)<limit)
    7fa6:	89 f4       	brne	.+34     	; 0x7fca <_ZN8red_fang12check_stringEPc+0x96>
    7fa8:	63 d9       	rcall	.-3386   	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    7faa:	90 e0       	ldi	r25, 0x00	; 0
    7fac:	4a e0       	ldi	r20, 0x0A	; 10
    7fae:	be 01       	movw	r22, r28
    7fb0:	6f 5f       	subi	r22, 0xFF	; 255
    7fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    7fb4:	85 32       	cpi	r24, 0x25	; 37
    7fb6:	91 05       	cpc	r25, r1
    7fb8:	14 f0       	brlt	.+4      	; 0x7fbe <_ZN8red_fang12check_stringEPc+0x8a>
    7fba:	85 e2       	ldi	r24, 0x25	; 37
    7fbc:	90 e0       	ldi	r25, 0x00	; 0
    7fbe:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
		}
		else
		{
			itoa ( limit, num, 10);
		}
		serialEnviar(num);
    7fc2:	be 01       	movw	r22, r28
    7fc4:	6f 5f       	subi	r22, 0xFF	; 255
    7fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    7fc8:	a3 c0       	rjmp	.+326    	; 0x8110 <_ZN8red_fang12check_stringEPc+0x1dc>
	}
	else if(strcmp(str, "BAT")==0)		//Se o comando recebido for BAT, retorna o valor da bateria.
    7fca:	6a e7       	ldi	r22, 0x7A	; 122
    7fcc:	7c e0       	ldi	r23, 0x0C	; 12
    7fce:	c8 01       	movw	r24, r16
    7fd0:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    7fd4:	89 2b       	or	r24, r25
    7fd6:	f1 f4       	brne	.+60     	; 0x8014 <_ZN8red_fang12check_stringEPc+0xe0>
	{    
		char bat[4];
		itoa (beryl->getBatteryPct(), bat, 10);
    7fd8:	f7 01       	movw	r30, r14
    7fda:	82 85       	ldd	r24, Z+10	; 0x0a
    7fdc:	93 85       	ldd	r25, Z+11	; 0x0b
    7fde:	0e 94 41 10 	call	0x2082	; 0x2082 <_ZN9red_beryl13getBatteryPctEv>
    7fe2:	4a e0       	ldi	r20, 0x0A	; 10
    7fe4:	be 01       	movw	r22, r28
    7fe6:	6f 5f       	subi	r22, 0xFF	; 255
    7fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    7fea:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
		serialEnviar(bat);
    7fee:	be 01       	movw	r22, r28
    7ff0:	6f 5f       	subi	r22, 0xFF	; 255
    7ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    7ff4:	c7 01       	movw	r24, r14
    7ff6:	c0 d9       	rcall	.-3200   	; 0x7378 <_ZN8red_fang12serialEnviarEPc>
		Serial.print("Bateria em : ");
    7ff8:	6e e7       	ldi	r22, 0x7E	; 126
    7ffa:	7c e0       	ldi	r23, 0x0C	; 12
    7ffc:	80 ec       	ldi	r24, 0xC0	; 192
    7ffe:	90 e1       	ldi	r25, 0x10	; 16
    8000:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
		Serial.println(bat);
    8004:	be 01       	movw	r22, r28
    8006:	6f 5f       	subi	r22, 0xFF	; 255
    8008:	7f 4f       	sbci	r23, 0xFF	; 255
    800a:	80 ec       	ldi	r24, 0xC0	; 192
    800c:	90 e1       	ldi	r25, 0x10	; 16
    800e:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    8012:	b9 c4       	rjmp	.+2418   	; 0x8986 <_ZN8red_fang12check_stringEPc+0xa52>
    }
	else if(strcmp(str, "CLR")==0)
    8014:	6c e8       	ldi	r22, 0x8C	; 140
    8016:	7c e0       	ldi	r23, 0x0C	; 12
    8018:	c8 01       	movw	r24, r16
    801a:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    801e:	89 2b       	or	r24, r25
    8020:	09 f0       	breq	.+2      	; 0x8024 <_ZN8red_fang12check_stringEPc+0xf0>
    8022:	79 c0       	rjmp	.+242    	; 0x8116 <_ZN8red_fang12check_stringEPc+0x1e2>
	{    //Se o comando recebido for CLR, realiza a logica de Fast Clear, limpando o primeiro endereço da EEPROM.
		if(Serial1.available()!=-1 && Serial1.available()!=0)    //checa se recebeu mais alguma coisa por bluetooth.
    8024:	86 ed       	ldi	r24, 0xD6	; 214
    8026:	94 e1       	ldi	r25, 0x14	; 20
    8028:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    802c:	01 96       	adiw	r24, 0x01	; 1
    802e:	09 f4       	brne	.+2      	; 0x8032 <_ZN8red_fang12check_stringEPc+0xfe>
    8030:	c0 c2       	rjmp	.+1408   	; 0x85b2 <_ZN8red_fang12check_stringEPc+0x67e>
    8032:	86 ed       	ldi	r24, 0xD6	; 214
    8034:	94 e1       	ldi	r25, 0x14	; 20
    8036:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    803a:	89 2b       	or	r24, r25
    803c:	09 f4       	brne	.+2      	; 0x8040 <_ZN8red_fang12check_stringEPc+0x10c>
    803e:	b9 c2       	rjmp	.+1394   	; 0x85b2 <_ZN8red_fang12check_stringEPc+0x67e>
    8040:	8e 01       	movw	r16, r28
    8042:	0f 5f       	subi	r16, 0xFF	; 255
    8044:	1f 4f       	sbci	r17, 0xFF	; 255
    8046:	68 01       	movw	r12, r16
		{
			char inStr[30];
			int i=0;
			while(Serial1.available()!=-1 && Serial1.available()!=0)
    8048:	86 ed       	ldi	r24, 0xD6	; 214
    804a:	94 e1       	ldi	r25, 0x14	; 20
    804c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8050:	01 96       	adiw	r24, 0x01	; 1
    8052:	a9 f0       	breq	.+42     	; 0x807e <_ZN8red_fang12check_stringEPc+0x14a>
    8054:	86 ed       	ldi	r24, 0xD6	; 214
    8056:	94 e1       	ldi	r25, 0x14	; 20
    8058:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    805c:	89 2b       	or	r24, r25
    805e:	79 f0       	breq	.+30     	; 0x807e <_ZN8red_fang12check_stringEPc+0x14a>
			{
				inStr[i]=Serial1.read();
    8060:	86 ed       	ldi	r24, 0xD6	; 214
    8062:	94 e1       	ldi	r25, 0x14	; 20
    8064:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    8068:	f8 01       	movw	r30, r16
    806a:	81 93       	st	Z+, r24
    806c:	8f 01       	movw	r16, r30
				Serial.print(inStr[i]);
    806e:	68 2f       	mov	r22, r24
    8070:	80 ec       	ldi	r24, 0xC0	; 192
    8072:	90 e1       	ldi	r25, 0x10	; 16
    8074:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN5Print5printEc>
				i++;
				inStr[i]= '\0';
    8078:	f8 01       	movw	r30, r16
    807a:	10 82       	st	Z, r1
	{    //Se o comando recebido for CLR, realiza a logica de Fast Clear, limpando o primeiro endereço da EEPROM.
		if(Serial1.available()!=-1 && Serial1.available()!=0)    //checa se recebeu mais alguma coisa por bluetooth.
		{
			char inStr[30];
			int i=0;
			while(Serial1.available()!=-1 && Serial1.available()!=0)
    807c:	e5 cf       	rjmp	.-54     	; 0x8048 <_ZN8red_fang12check_stringEPc+0x114>
				inStr[i]=Serial1.read();
				Serial.print(inStr[i]);
				i++;
				inStr[i]= '\0';
			}
			Serial.print("|");
    807e:	69 e1       	ldi	r22, 0x19	; 25
    8080:	7c e0       	ldi	r23, 0x0C	; 12
    8082:	80 ec       	ldi	r24, 0xC0	; 192
    8084:	90 e1       	ldi	r25, 0x10	; 16
    8086:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			Serial.println(inStr);
    808a:	b6 01       	movw	r22, r12
    808c:	80 ec       	ldi	r24, 0xC0	; 192
    808e:	90 e1       	ldi	r25, 0x10	; 16
    8090:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
			char *ptr;
			_num = strtol(inStr, &ptr, 10);
    8094:	4a e0       	ldi	r20, 0x0A	; 10
    8096:	50 e0       	ldi	r21, 0x00	; 0
    8098:	be 01       	movw	r22, r28
    809a:	61 5e       	subi	r22, 0xE1	; 225
    809c:	7f 4f       	sbci	r23, 0xFF	; 255
    809e:	c6 01       	movw	r24, r12
    80a0:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    80a4:	f7 01       	movw	r30, r14
    80a6:	71 87       	std	Z+9, r23	; 0x09
    80a8:	60 87       	std	Z+8, r22	; 0x08
			Serial.print("NUM=");
    80aa:	67 e1       	ldi	r22, 0x17	; 23
    80ac:	7f e0       	ldi	r23, 0x0F	; 15
    80ae:	80 ec       	ldi	r24, 0xC0	; 192
    80b0:	90 e1       	ldi	r25, 0x10	; 16
    80b2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			Serial.println(_num);
    80b6:	f7 01       	movw	r30, r14
    80b8:	60 85       	ldd	r22, Z+8	; 0x08
    80ba:	71 85       	ldd	r23, Z+9	; 0x09
    80bc:	4a e0       	ldi	r20, 0x0A	; 10
    80be:	50 e0       	ldi	r21, 0x00	; 0
    80c0:	80 ec       	ldi	r24, 0xC0	; 192
    80c2:	90 e1       	ldi	r25, 0x10	; 16
    80c4:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
			Serial.print("PTR='");
    80c8:	6c e1       	ldi	r22, 0x1C	; 28
    80ca:	7f e0       	ldi	r23, 0x0F	; 15
    80cc:	80 ec       	ldi	r24, 0xC0	; 192
    80ce:	90 e1       	ldi	r25, 0x10	; 16
    80d0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			Serial.print(ptr);
    80d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    80d6:	78 a1       	ldd	r23, Y+32	; 0x20
    80d8:	80 ec       	ldi	r24, 0xC0	; 192
    80da:	90 e1       	ldi	r25, 0x10	; 16
    80dc:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
			Serial.println("'");
    80e0:	60 e2       	ldi	r22, 0x20	; 32
    80e2:	7f e0       	ldi	r23, 0x0F	; 15
    80e4:	80 ec       	ldi	r24, 0xC0	; 192
    80e6:	90 e1       	ldi	r25, 0x10	; 16
    80e8:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
			if(deletaLeitura(_num-1))
    80ec:	f7 01       	movw	r30, r14
    80ee:	60 85       	ldd	r22, Z+8	; 0x08
    80f0:	71 85       	ldd	r23, Z+9	; 0x09
    80f2:	61 50       	subi	r22, 0x01	; 1
    80f4:	71 09       	sbc	r23, r1
    80f6:	c7 01       	movw	r24, r14
    80f8:	80 d9       	rcall	.-3328   	; 0x73fa <_ZN8red_fang13deletaLeituraEi>
    80fa:	88 23       	and	r24, r24
    80fc:	09 f4       	brne	.+2      	; 0x8100 <_ZN8red_fang12check_stringEPc+0x1cc>
    80fe:	61 c2       	rjmp	.+1218   	; 0x85c2 <_ZN8red_fang12check_stringEPc+0x68e>
			{
				Serial.println((char*)"Concluido.");
    8100:	6a e0       	ldi	r22, 0x0A	; 10
    8102:	78 e0       	ldi	r23, 0x08	; 8
    8104:	80 ec       	ldi	r24, 0xC0	; 192
    8106:	90 e1       	ldi	r25, 0x10	; 16
    8108:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				serialEnviar("OK");
    810c:	65 e1       	ldi	r22, 0x15	; 21
    810e:	78 e0       	ldi	r23, 0x08	; 8
    8110:	c7 01       	movw	r24, r14
    8112:	32 d9       	rcall	.-3484   	; 0x7378 <_ZN8red_fang12serialEnviarEPc>
    8114:	38 c4       	rjmp	.+2160   	; 0x8986 <_ZN8red_fang12check_stringEPc+0xa52>
			EEPROM.write(0,0);
			Serial.println("Limpeza rapida concluida.");
			serialEnviar("OK");
		}
    }
	else if(strcmp(str, "WIP")==0)
    8116:	6b eb       	ldi	r22, 0xBB	; 187
    8118:	7c e0       	ldi	r23, 0x0C	; 12
    811a:	c8 01       	movw	r24, r16
    811c:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    8120:	89 2b       	or	r24, r25
	{    //Se o comando recebido for WIP, realiza a logica de limpar os endereços da EEPROM que estão sendo usados.
		//WIPE MEMORY = LIMPAR OS ENDEREÇOS DA EEPROM RECONHECIDOS PELA POSIÇÃO 0(INDEX).
		if(EEPROM.read(0)>0)
    8122:	e9 f4       	brne	.+58     	; 0x815e <_ZN8red_fang12check_stringEPc+0x22a>
    8124:	a5 d8       	rcall	.-3766   	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    8126:	88 23       	and	r24, r24
    8128:	b9 f0       	breq	.+46     	; 0x8158 <_ZN8red_fang12check_stringEPc+0x224>
    812a:	01 e0       	ldi	r16, 0x01	; 1
		{
			int i=1;
			while(i<1+(EEPROM.read(0)*(sizeof(leitura))))
    812c:	10 e0       	ldi	r17, 0x00	; 0
    812e:	a0 d8       	rcall	.-3776   	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    8130:	fe e6       	ldi	r31, 0x6E	; 110
    8132:	8f 9f       	mul	r24, r31
    8134:	c0 01       	movw	r24, r0
    8136:	11 24       	eor	r1, r1
			{
				EEPROM.write(i,0);
    8138:	01 96       	adiw	r24, 0x01	; 1
	{    //Se o comando recebido for WIP, realiza a logica de limpar os endereços da EEPROM que estão sendo usados.
		//WIPE MEMORY = LIMPAR OS ENDEREÇOS DA EEPROM RECONHECIDOS PELA POSIÇÃO 0(INDEX).
		if(EEPROM.read(0)>0)
		{
			int i=1;
			while(i<1+(EEPROM.read(0)*(sizeof(leitura))))
    813a:	60 e0       	ldi	r22, 0x00	; 0
    813c:	08 17       	cp	r16, r24
    813e:	19 07       	cpc	r17, r25
			{
				EEPROM.write(i,0);
    8140:	28 f4       	brcc	.+10     	; 0x814c <_ZN8red_fang12check_stringEPc+0x218>
    8142:	c8 01       	movw	r24, r16
				i++;
    8144:	93 d8       	rcall	.-3802   	; 0x726c <_ZN11EEPROMClass5writeEih.isra.1>
    8146:	0f 5f       	subi	r16, 0xFF	; 255
	{    //Se o comando recebido for WIP, realiza a logica de limpar os endereços da EEPROM que estão sendo usados.
		//WIPE MEMORY = LIMPAR OS ENDEREÇOS DA EEPROM RECONHECIDOS PELA POSIÇÃO 0(INDEX).
		if(EEPROM.read(0)>0)
		{
			int i=1;
			while(i<1+(EEPROM.read(0)*(sizeof(leitura))))
    8148:	1f 4f       	sbci	r17, 0xFF	; 255
			{
				EEPROM.write(i,0);
				i++;
			}
			EEPROM.write(0,0);
    814a:	f1 cf       	rjmp	.-30     	; 0x812e <_ZN8red_fang12check_stringEPc+0x1fa>
    814c:	80 e0       	ldi	r24, 0x00	; 0
    814e:	90 e0       	ldi	r25, 0x00	; 0
    8150:	8d d8       	rcall	.-3814   	; 0x726c <_ZN11EEPROMClass5writeEih.isra.1>
			Serial.println("Wipe realizado com sucesso");
    8152:	6f eb       	ldi	r22, 0xBF	; 191
    8154:	7c e0       	ldi	r23, 0x0C	; 12
    8156:	d6 cf       	rjmp	.-84     	; 0x8104 <_ZN8red_fang12check_stringEPc+0x1d0>
			serialEnviar("OK");
		}
		else
		{
			Serial.println("Wipe impossivel, historico ja limpo");
    8158:	6a ed       	ldi	r22, 0xDA	; 218
    815a:	7c e0       	ldi	r23, 0x0C	; 12
    815c:	d3 cf       	rjmp	.-90     	; 0x8104 <_ZN8red_fang12check_stringEPc+0x1d0>
			serialEnviar("OK");
		}
    }
	else if(strcmp(str, "TMP")==0)
    815e:	6e ef       	ldi	r22, 0xFE	; 254
    8160:	7c e0       	ldi	r23, 0x0C	; 12
    8162:	c8 01       	movw	r24, r16
    8164:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    8168:	89 2b       	or	r24, r25
    816a:	a9 f4       	brne	.+42     	; 0x8196 <_ZN8red_fang12check_stringEPc+0x262>
	{    //Se o comando recebido for TMP, retorna o valor de temperature na AD.
		Serial.println("Enviando temperatura.");
    816c:	62 e0       	ldi	r22, 0x02	; 2
    816e:	7d e0       	ldi	r23, 0x0D	; 13
    8170:	80 ec       	ldi	r24, 0xC0	; 192
    8172:	90 e1       	ldi	r25, 0x10	; 16
    8174:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		double temperature = beryl->crystal.temperatura();
    8178:	f7 01       	movw	r30, r14
    817a:	82 85       	ldd	r24, Z+10	; 0x0a
    817c:	93 85       	ldd	r25, Z+11	; 0x0b
    817e:	82 54       	subi	r24, 0x42	; 66
    8180:	9f 4f       	sbci	r25, 0xFF	; 255
    8182:	5d d8       	rcall	.-3910   	; 0x723e <_ZN11red_crystal11temperaturaEv>
		char tempChar[30];
		dtostrf(temperature, 6, 2, tempChar);
    8184:	8e 01       	movw	r16, r28
    8186:	0f 5f       	subi	r16, 0xFF	; 255
    8188:	1f 4f       	sbci	r17, 0xFF	; 255
    818a:	22 e0       	ldi	r18, 0x02	; 2
    818c:	46 e0       	ldi	r20, 0x06	; 6
    818e:	0e 94 c7 5e 	call	0xbd8e	; 0xbd8e <dtostrf>
		serialEnviar(tempChar);      
    8192:	b8 01       	movw	r22, r16
    8194:	bd cf       	rjmp	.-134    	; 0x8110 <_ZN8red_fang12check_stringEPc+0x1dc>
    }
	else if(strcmp(str, "CLK")==0)
    8196:	68 e1       	ldi	r22, 0x18	; 24
    8198:	7d e0       	ldi	r23, 0x0D	; 13
    819a:	c8 01       	movw	r24, r16
    819c:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    81a0:	89 2b       	or	r24, r25
    81a2:	09 f0       	breq	.+2      	; 0x81a6 <_ZN8red_fang12check_stringEPc+0x272>
    81a4:	a5 c1       	rjmp	.+842    	; 0x84f0 <_ZN8red_fang12check_stringEPc+0x5bc>
	{    //Se o comando recebido for CLK, realiza a logica de relogio.
		delay(10);
    81a6:	6a e0       	ldi	r22, 0x0A	; 10
    81a8:	70 e0       	ldi	r23, 0x00	; 0
    81aa:	80 e0       	ldi	r24, 0x00	; 0
    81ac:	90 e0       	ldi	r25, 0x00	; 0
    81ae:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
		char inStr[30];
		if(Serial1.available()!=-1 && Serial1.available()!=0)
    81b2:	86 ed       	ldi	r24, 0xD6	; 214
    81b4:	94 e1       	ldi	r25, 0x14	; 20
    81b6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    81ba:	01 96       	adiw	r24, 0x01	; 1
    81bc:	09 f4       	brne	.+2      	; 0x81c0 <_ZN8red_fang12check_stringEPc+0x28c>
    81be:	0c c2       	rjmp	.+1048   	; 0x85d8 <_ZN8red_fang12check_stringEPc+0x6a4>
    81c0:	86 ed       	ldi	r24, 0xD6	; 214
    81c2:	94 e1       	ldi	r25, 0x14	; 20
    81c4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    81c8:	89 2b       	or	r24, r25
    81ca:	09 f4       	brne	.+2      	; 0x81ce <_ZN8red_fang12check_stringEPc+0x29a>
    81cc:	05 c2       	rjmp	.+1034   	; 0x85d8 <_ZN8red_fang12check_stringEPc+0x6a4>
		{//checa se recebeu mais alguma coisa por bluetooth,.
			int dia,mes,ano,hora,minuto,segundo;                //inicializa as variaveis tmeporarias para receber os valores de dat e hora
			while(Serial1.available()<12)
    81ce:	86 ed       	ldi	r24, 0xD6	; 214
    81d0:	94 e1       	ldi	r25, 0x14	; 20
    81d2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    81d6:	0c 97       	sbiw	r24, 0x0c	; 12
    81d8:	f4 f4       	brge	.+60     	; 0x8216 <_ZN8red_fang12check_stringEPc+0x2e2>
			{                      //enquanto o buffer não estiver com todos os caracteres prontos, fazer delay.
				Serial.print("Aguardando o buffer receber todos os caracteres antes de avançar. ");
    81da:	6c e1       	ldi	r22, 0x1C	; 28
    81dc:	7d e0       	ldi	r23, 0x0D	; 13
    81de:	80 ec       	ldi	r24, 0xC0	; 192
    81e0:	90 e1       	ldi	r25, 0x10	; 16
    81e2:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				Serial.print(Serial1.available());
    81e6:	86 ed       	ldi	r24, 0xD6	; 214
    81e8:	94 e1       	ldi	r25, 0x14	; 20
    81ea:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    81ee:	4a e0       	ldi	r20, 0x0A	; 10
    81f0:	50 e0       	ldi	r21, 0x00	; 0
    81f2:	bc 01       	movw	r22, r24
    81f4:	80 ec       	ldi	r24, 0xC0	; 192
    81f6:	90 e1       	ldi	r25, 0x10	; 16
    81f8:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
				Serial.println(" Recebidos.");
    81fc:	60 e6       	ldi	r22, 0x60	; 96
    81fe:	7d e0       	ldi	r23, 0x0D	; 13
    8200:	80 ec       	ldi	r24, 0xC0	; 192
    8202:	90 e1       	ldi	r25, 0x10	; 16
    8204:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				delay(10);
    8208:	6a e0       	ldi	r22, 0x0A	; 10
    820a:	70 e0       	ldi	r23, 0x00	; 0
    820c:	80 e0       	ldi	r24, 0x00	; 0
    820e:	90 e0       	ldi	r25, 0x00	; 0
    8210:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
		delay(10);
		char inStr[30];
		if(Serial1.available()!=-1 && Serial1.available()!=0)
		{//checa se recebeu mais alguma coisa por bluetooth,.
			int dia,mes,ano,hora,minuto,segundo;                //inicializa as variaveis tmeporarias para receber os valores de dat e hora
			while(Serial1.available()<12)
    8214:	dc cf       	rjmp	.-72     	; 0x81ce <_ZN8red_fang12check_stringEPc+0x29a>
				Serial.println(" Recebidos.");
				delay(10);
			}
			int n=0;    //inicializa um i temporario.
			char *ptr;
			Serial.println("Atualizando Hora e Data.");
    8216:	6c e6       	ldi	r22, 0x6C	; 108
    8218:	7d e0       	ldi	r23, 0x0D	; 13
    821a:	80 ec       	ldi	r24, 0xC0	; 192
    821c:	90 e1       	ldi	r25, 0x10	; 16
    821e:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				Serial.print("Aguardando o buffer receber todos os caracteres antes de avançar. ");
				Serial.print(Serial1.available());
				Serial.println(" Recebidos.");
				delay(10);
			}
			int n=0;    //inicializa um i temporario.
    8222:	00 e0       	ldi	r16, 0x00	; 0
    8224:	10 e0       	ldi	r17, 0x00	; 0
			char *ptr;
			Serial.println("Atualizando Hora e Data.");
			while(n<12)
			{                                        //enquanto n for menor que 12.
				delay(1);
    8226:	61 e0       	ldi	r22, 0x01	; 1
    8228:	70 e0       	ldi	r23, 0x00	; 0
    822a:	80 e0       	ldi	r24, 0x00	; 0
    822c:	90 e0       	ldi	r25, 0x00	; 0
    822e:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
				if(n<2)
				{    //primeira dupla de valores: DIA
					inStr[n]=Serial1.read();
    8232:	86 ed       	ldi	r24, 0xD6	; 214
    8234:	94 e1       	ldi	r25, 0x14	; 20
			char *ptr;
			Serial.println("Atualizando Hora e Data.");
			while(n<12)
			{                                        //enquanto n for menor que 12.
				delay(1);
				if(n<2)
    8236:	02 30       	cpi	r16, 0x02	; 2
    8238:	11 05       	cpc	r17, r1
    823a:	2c f4       	brge	.+10     	; 0x8246 <_ZN8red_fang12check_stringEPc+0x312>
				{    //primeira dupla de valores: DIA
					inStr[n]=Serial1.read();
    823c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    8240:	e1 e0       	ldi	r30, 0x01	; 1
    8242:	f0 e0       	ldi	r31, 0x00	; 0
    8244:	24 c0       	rjmp	.+72     	; 0x828e <_ZN8red_fang12check_stringEPc+0x35a>
				}
				else if(n<4)
    8246:	04 30       	cpi	r16, 0x04	; 4
    8248:	11 05       	cpc	r17, r1
    824a:	2c f4       	brge	.+10     	; 0x8256 <_ZN8red_fang12check_stringEPc+0x322>
				{   //segunda dupla de valores: MES
					inStr[n-2]=Serial1.read();
    824c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    8250:	ef ef       	ldi	r30, 0xFF	; 255
    8252:	ff ef       	ldi	r31, 0xFF	; 255
    8254:	1c c0       	rjmp	.+56     	; 0x828e <_ZN8red_fang12check_stringEPc+0x35a>
				}
				else if(n<6)
    8256:	06 30       	cpi	r16, 0x06	; 6
    8258:	11 05       	cpc	r17, r1
    825a:	2c f4       	brge	.+10     	; 0x8266 <_ZN8red_fang12check_stringEPc+0x332>
				{   //terceira dupla de valores: ANO
					inStr[n-4]=Serial1.read();
    825c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    8260:	ed ef       	ldi	r30, 0xFD	; 253
    8262:	ff ef       	ldi	r31, 0xFF	; 255
    8264:	14 c0       	rjmp	.+40     	; 0x828e <_ZN8red_fang12check_stringEPc+0x35a>
				}
				else if(n<8)
    8266:	08 30       	cpi	r16, 0x08	; 8
    8268:	11 05       	cpc	r17, r1
    826a:	2c f4       	brge	.+10     	; 0x8276 <_ZN8red_fang12check_stringEPc+0x342>
				{   //quarta dupla de valores: HORA
					inStr[n-6]=Serial1.read();
    826c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    8270:	eb ef       	ldi	r30, 0xFB	; 251
    8272:	ff ef       	ldi	r31, 0xFF	; 255
    8274:	0c c0       	rjmp	.+24     	; 0x828e <_ZN8red_fang12check_stringEPc+0x35a>
				}
				else if(n<10)
    8276:	0a 30       	cpi	r16, 0x0A	; 10
    8278:	11 05       	cpc	r17, r1
    827a:	2c f4       	brge	.+10     	; 0x8286 <_ZN8red_fang12check_stringEPc+0x352>
				{    //quinta dupla de valores: MINUTO
					inStr[n-8]=Serial1.read();
    827c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    8280:	e9 ef       	ldi	r30, 0xF9	; 249
    8282:	ff ef       	ldi	r31, 0xFF	; 255
    8284:	04 c0       	rjmp	.+8      	; 0x828e <_ZN8red_fang12check_stringEPc+0x35a>
				}
				else if(n<12)
				{    //sexta dupla de valores: SEGUNDO
					inStr[n-10]=Serial1.read();
    8286:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    828a:	e7 ef       	ldi	r30, 0xF7	; 247
    828c:	ff ef       	ldi	r31, 0xFF	; 255
    828e:	ec 0f       	add	r30, r28
    8290:	fd 1f       	adc	r31, r29
    8292:	e0 0f       	add	r30, r16
    8294:	f1 1f       	adc	r31, r17
    8296:	80 83       	st	Z, r24
				}

          //VERIFICAR O CODIGO, VER SE TODOS OS 'i' FORAM MUDADOS PARA 'n', DAR UMA OLHADA NO CODIGO DE 'inStr' para ver se esta funcionando corretamente.
          
				n++;    //incrementa i;
    8298:	0f 5f       	subi	r16, 0xFF	; 255
    829a:	1f 4f       	sbci	r17, 0xFF	; 255
				inStr[2]='\0';  //finalizador de string na terceira posição
    829c:	1b 82       	std	Y+3, r1	; 0x03
          
				if(n==2)
    829e:	02 30       	cpi	r16, 0x02	; 2
    82a0:	11 05       	cpc	r17, r1
    82a2:	d1 f4       	brne	.+52     	; 0x82d8 <_ZN8red_fang12check_stringEPc+0x3a4>
				{   //primeiro valor: DIA
					delay(1);
    82a4:	61 e0       	ldi	r22, 0x01	; 1
    82a6:	70 e0       	ldi	r23, 0x00	; 0
    82a8:	80 e0       	ldi	r24, 0x00	; 0
    82aa:	90 e0       	ldi	r25, 0x00	; 0
    82ac:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
					Serial.print(inStr);
    82b0:	be 01       	movw	r22, r28
    82b2:	6f 5f       	subi	r22, 0xFF	; 255
    82b4:	7f 4f       	sbci	r23, 0xFF	; 255
    82b6:	80 ec       	ldi	r24, 0xC0	; 192
    82b8:	90 e1       	ldi	r25, 0x10	; 16
    82ba:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
					dia = strtol(inStr, &ptr, 10);
    82be:	4a e0       	ldi	r20, 0x0A	; 10
    82c0:	50 e0       	ldi	r21, 0x00	; 0
    82c2:	be 01       	movw	r22, r28
    82c4:	61 5e       	subi	r22, 0xE1	; 225
    82c6:	7f 4f       	sbci	r23, 0xFF	; 255
    82c8:	ce 01       	movw	r24, r28
    82ca:	01 96       	adiw	r24, 0x01	; 1
    82cc:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    82d0:	3b 01       	movw	r6, r22
					* cria uma função testarDia que recebe os valores de diae mes e retorne se são validos...
					* talvez seja melhor criar uma função testarData, [bool testarData(int dia, int mes, int ano, int hora, int minuto, int segundo)]
					* retorna false se invalido, true se valido.
					*/
             
					Serial.println(" - dia atualizado.");
    82d2:	65 e8       	ldi	r22, 0x85	; 133
    82d4:	7d e0       	ldi	r23, 0x0D	; 13
    82d6:	1c c0       	rjmp	.+56     	; 0x8310 <_ZN8red_fang12check_stringEPc+0x3dc>
				}
				if(n==4)
    82d8:	04 30       	cpi	r16, 0x04	; 4
    82da:	11 05       	cpc	r17, r1
    82dc:	f1 f4       	brne	.+60     	; 0x831a <_ZN8red_fang12check_stringEPc+0x3e6>
				{   //segundo valor: MES
					delay(1);
    82de:	61 e0       	ldi	r22, 0x01	; 1
    82e0:	70 e0       	ldi	r23, 0x00	; 0
    82e2:	80 e0       	ldi	r24, 0x00	; 0
    82e4:	90 e0       	ldi	r25, 0x00	; 0
    82e6:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
					Serial.print(inStr);
    82ea:	be 01       	movw	r22, r28
    82ec:	6f 5f       	subi	r22, 0xFF	; 255
    82ee:	7f 4f       	sbci	r23, 0xFF	; 255
    82f0:	80 ec       	ldi	r24, 0xC0	; 192
    82f2:	90 e1       	ldi	r25, 0x10	; 16
    82f4:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
					mes = strtol(inStr, &ptr, 10);
    82f8:	4a e0       	ldi	r20, 0x0A	; 10
    82fa:	50 e0       	ldi	r21, 0x00	; 0
    82fc:	be 01       	movw	r22, r28
    82fe:	61 5e       	subi	r22, 0xE1	; 225
    8300:	7f 4f       	sbci	r23, 0xFF	; 255
    8302:	ce 01       	movw	r24, r28
    8304:	01 96       	adiw	r24, 0x01	; 1
    8306:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    830a:	6b 01       	movw	r12, r22
					//time.setMonth(mes);   //alterar MES no RTC
					Serial.println(" - mes atualizado.");
    830c:	68 e9       	ldi	r22, 0x98	; 152
    830e:	7d e0       	ldi	r23, 0x0D	; 13
    8310:	80 ec       	ldi	r24, 0xC0	; 192
    8312:	90 e1       	ldi	r25, 0x10	; 16
    8314:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    8318:	5c c0       	rjmp	.+184    	; 0x83d2 <_ZN8red_fang12check_stringEPc+0x49e>
				}
				if(n==6)
    831a:	06 30       	cpi	r16, 0x06	; 6
    831c:	11 05       	cpc	r17, r1
    831e:	d9 f4       	brne	.+54     	; 0x8356 <_ZN8red_fang12check_stringEPc+0x422>
				{   //terceiro valor: ANO
					delay(1);
    8320:	61 e0       	ldi	r22, 0x01	; 1
    8322:	70 e0       	ldi	r23, 0x00	; 0
    8324:	80 e0       	ldi	r24, 0x00	; 0
    8326:	90 e0       	ldi	r25, 0x00	; 0
    8328:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
					Serial.print(inStr);
    832c:	be 01       	movw	r22, r28
    832e:	6f 5f       	subi	r22, 0xFF	; 255
    8330:	7f 4f       	sbci	r23, 0xFF	; 255
    8332:	80 ec       	ldi	r24, 0xC0	; 192
    8334:	90 e1       	ldi	r25, 0x10	; 16
    8336:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
					ano = strtol(inStr, &ptr, 10);
    833a:	4a e0       	ldi	r20, 0x0A	; 10
    833c:	50 e0       	ldi	r21, 0x00	; 0
    833e:	be 01       	movw	r22, r28
    8340:	61 5e       	subi	r22, 0xE1	; 225
    8342:	7f 4f       	sbci	r23, 0xFF	; 255
    8344:	ce 01       	movw	r24, r28
    8346:	01 96       	adiw	r24, 0x01	; 1
    8348:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    834c:	7d a3       	std	Y+37, r23	; 0x25
    834e:	6c a3       	std	Y+36, r22	; 0x24
					//time.setYear(ano);    //alterar ANO no RTC
					Serial.println(" - ano atualizado.");
    8350:	6b ea       	ldi	r22, 0xAB	; 171
    8352:	7d e0       	ldi	r23, 0x0D	; 13
    8354:	39 c0       	rjmp	.+114    	; 0x83c8 <_ZN8red_fang12check_stringEPc+0x494>
				}
				if(n==8)
    8356:	08 30       	cpi	r16, 0x08	; 8
    8358:	11 05       	cpc	r17, r1
    835a:	d1 f4       	brne	.+52     	; 0x8390 <_ZN8red_fang12check_stringEPc+0x45c>
				{   //quarto valor: HORA
					delay(1);
    835c:	61 e0       	ldi	r22, 0x01	; 1
    835e:	70 e0       	ldi	r23, 0x00	; 0
    8360:	80 e0       	ldi	r24, 0x00	; 0
    8362:	90 e0       	ldi	r25, 0x00	; 0
    8364:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
					Serial.print(inStr);
    8368:	be 01       	movw	r22, r28
    836a:	6f 5f       	subi	r22, 0xFF	; 255
    836c:	7f 4f       	sbci	r23, 0xFF	; 255
    836e:	80 ec       	ldi	r24, 0xC0	; 192
    8370:	90 e1       	ldi	r25, 0x10	; 16
    8372:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
					hora = strtol(inStr, &ptr, 10);
    8376:	4a e0       	ldi	r20, 0x0A	; 10
    8378:	50 e0       	ldi	r21, 0x00	; 0
    837a:	be 01       	movw	r22, r28
    837c:	61 5e       	subi	r22, 0xE1	; 225
    837e:	7f 4f       	sbci	r23, 0xFF	; 255
    8380:	ce 01       	movw	r24, r28
    8382:	01 96       	adiw	r24, 0x01	; 1
    8384:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    8388:	5b 01       	movw	r10, r22
					//time.setHour(hora);   //alterar HORA no RTC
					Serial.println(" - hora atualizada.");
    838a:	6e eb       	ldi	r22, 0xBE	; 190
    838c:	7d e0       	ldi	r23, 0x0D	; 13
    838e:	1c c0       	rjmp	.+56     	; 0x83c8 <_ZN8red_fang12check_stringEPc+0x494>
				}
				if(n==10)
    8390:	0a 30       	cpi	r16, 0x0A	; 10
    8392:	11 05       	cpc	r17, r1
    8394:	f1 f4       	brne	.+60     	; 0x83d2 <_ZN8red_fang12check_stringEPc+0x49e>
				{  //quinto valor: MINUTO
					delay(1);
    8396:	61 e0       	ldi	r22, 0x01	; 1
    8398:	70 e0       	ldi	r23, 0x00	; 0
    839a:	80 e0       	ldi	r24, 0x00	; 0
    839c:	90 e0       	ldi	r25, 0x00	; 0
    839e:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
					Serial.print(inStr);
    83a2:	be 01       	movw	r22, r28
    83a4:	6f 5f       	subi	r22, 0xFF	; 255
    83a6:	7f 4f       	sbci	r23, 0xFF	; 255
    83a8:	80 ec       	ldi	r24, 0xC0	; 192
    83aa:	90 e1       	ldi	r25, 0x10	; 16
    83ac:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
					minuto = strtol(inStr, &ptr, 10);
    83b0:	4a e0       	ldi	r20, 0x0A	; 10
    83b2:	50 e0       	ldi	r21, 0x00	; 0
    83b4:	be 01       	movw	r22, r28
    83b6:	61 5e       	subi	r22, 0xE1	; 225
    83b8:	7f 4f       	sbci	r23, 0xFF	; 255
    83ba:	ce 01       	movw	r24, r28
    83bc:	01 96       	adiw	r24, 0x01	; 1
    83be:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    83c2:	4b 01       	movw	r8, r22
					//time.setMinute(minuto);   //alterar MINUTO no RTC
					Serial.println(" - minuto atualizado.");
    83c4:	62 ed       	ldi	r22, 0xD2	; 210
    83c6:	7d e0       	ldi	r23, 0x0D	; 13
    83c8:	80 ec       	ldi	r24, 0xC0	; 192
    83ca:	90 e1       	ldi	r25, 0x10	; 16
    83cc:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    83d0:	2a cf       	rjmp	.-428    	; 0x8226 <_ZN8red_fang12check_stringEPc+0x2f2>
				}
				if(n==12)
    83d2:	0c 30       	cpi	r16, 0x0C	; 12
    83d4:	11 05       	cpc	r17, r1
    83d6:	09 f0       	breq	.+2      	; 0x83da <_ZN8red_fang12check_stringEPc+0x4a6>
    83d8:	26 cf       	rjmp	.-436    	; 0x8226 <_ZN8red_fang12check_stringEPc+0x2f2>
				{  //sexto valor: SEGUNDO
					delay(1);
    83da:	61 e0       	ldi	r22, 0x01	; 1
    83dc:	70 e0       	ldi	r23, 0x00	; 0
    83de:	80 e0       	ldi	r24, 0x00	; 0
    83e0:	90 e0       	ldi	r25, 0x00	; 0
    83e2:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
					Serial.print(inStr);
    83e6:	be 01       	movw	r22, r28
    83e8:	6f 5f       	subi	r22, 0xFF	; 255
    83ea:	7f 4f       	sbci	r23, 0xFF	; 255
    83ec:	80 ec       	ldi	r24, 0xC0	; 192
    83ee:	90 e1       	ldi	r25, 0x10	; 16
    83f0:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
					segundo = strtol(inStr, &ptr, 10);
    83f4:	4a e0       	ldi	r20, 0x0A	; 10
    83f6:	50 e0       	ldi	r21, 0x00	; 0
    83f8:	be 01       	movw	r22, r28
    83fa:	61 5e       	subi	r22, 0xE1	; 225
    83fc:	7f 4f       	sbci	r23, 0xFF	; 255
    83fe:	ce 01       	movw	r24, r28
    8400:	01 96       	adiw	r24, 0x01	; 1
    8402:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    8406:	1b 01       	movw	r2, r22
    8408:	2c 01       	movw	r4, r24
					//time.setSecond(segundo);    //alterar SEGUNDO no RTC
					Serial.println(" - segundo atualizado");
    840a:	68 ee       	ldi	r22, 0xE8	; 232
    840c:	7d e0       	ldi	r23, 0x0D	; 13
    840e:	80 ec       	ldi	r24, 0xC0	; 192
    8410:	90 e1       	ldi	r25, 0x10	; 16
    8412:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				}
			}
			if( beryl->clock.testa_segundo(segundo) &&
    8416:	f7 01       	movw	r30, r14
    8418:	82 85       	ldd	r24, Z+10	; 0x0a
    841a:	93 85       	ldd	r25, Z+11	; 0x0b
    841c:	b1 01       	movw	r22, r2
    841e:	8f 54       	subi	r24, 0x4F	; 79
    8420:	9f 4f       	sbci	r25, 0xFF	; 255
    8422:	32 d6       	rcall	.+3172   	; 0x9088 <_ZN10red_quartz13testa_segundoEi>
				beryl->clock.testa_minuto(minuto) &&
				beryl->clock.testa_hora(hora) &&
				beryl->clock.testa_dia(dia, mes) &&
				beryl->clock.testa_mes(mes) &&
    8424:	88 23       	and	r24, r24
    8426:	09 f4       	brne	.+2      	; 0x842a <_ZN8red_fang12check_stringEPc+0x4f6>
    8428:	ab c1       	rjmp	.+854    	; 0x8780 <_ZN8red_fang12check_stringEPc+0x84c>
					//time.setSecond(segundo);    //alterar SEGUNDO no RTC
					Serial.println(" - segundo atualizado");
				}
			}
			if( beryl->clock.testa_segundo(segundo) &&
				beryl->clock.testa_minuto(minuto) &&
    842a:	f7 01       	movw	r30, r14
    842c:	82 85       	ldd	r24, Z+10	; 0x0a
    842e:	93 85       	ldd	r25, Z+11	; 0x0b
    8430:	b4 01       	movw	r22, r8
    8432:	8f 54       	subi	r24, 0x4F	; 79
    8434:	9f 4f       	sbci	r25, 0xFF	; 255
    8436:	2e d6       	rcall	.+3164   	; 0x9094 <_ZN10red_quartz12testa_minutoEi>
					segundo = strtol(inStr, &ptr, 10);
					//time.setSecond(segundo);    //alterar SEGUNDO no RTC
					Serial.println(" - segundo atualizado");
				}
			}
			if( beryl->clock.testa_segundo(segundo) &&
    8438:	88 23       	and	r24, r24
    843a:	09 f4       	brne	.+2      	; 0x843e <_ZN8red_fang12check_stringEPc+0x50a>
				beryl->clock.testa_minuto(minuto) &&
				beryl->clock.testa_hora(hora) &&
    843c:	a1 c1       	rjmp	.+834    	; 0x8780 <_ZN8red_fang12check_stringEPc+0x84c>
    843e:	f7 01       	movw	r30, r14
    8440:	82 85       	ldd	r24, Z+10	; 0x0a
    8442:	93 85       	ldd	r25, Z+11	; 0x0b
    8444:	b5 01       	movw	r22, r10
    8446:	8f 54       	subi	r24, 0x4F	; 79
    8448:	9f 4f       	sbci	r25, 0xFF	; 255
    844a:	2a d6       	rcall	.+3156   	; 0x90a0 <_ZN10red_quartz10testa_horaEi>
					//time.setSecond(segundo);    //alterar SEGUNDO no RTC
					Serial.println(" - segundo atualizado");
				}
			}
			if( beryl->clock.testa_segundo(segundo) &&
				beryl->clock.testa_minuto(minuto) &&
    844c:	88 23       	and	r24, r24
    844e:	09 f4       	brne	.+2      	; 0x8452 <_ZN8red_fang12check_stringEPc+0x51e>
				beryl->clock.testa_hora(hora) &&
				beryl->clock.testa_dia(dia, mes) &&
    8450:	97 c1       	rjmp	.+814    	; 0x8780 <_ZN8red_fang12check_stringEPc+0x84c>
    8452:	f7 01       	movw	r30, r14
    8454:	82 85       	ldd	r24, Z+10	; 0x0a
    8456:	93 85       	ldd	r25, Z+11	; 0x0b
    8458:	a6 01       	movw	r20, r12
    845a:	b3 01       	movw	r22, r6
    845c:	8f 54       	subi	r24, 0x4F	; 79
    845e:	9f 4f       	sbci	r25, 0xFF	; 255
    8460:	25 d6       	rcall	.+3146   	; 0x90ac <_ZN10red_quartz9testa_diaEii>
					Serial.println(" - segundo atualizado");
				}
			}
			if( beryl->clock.testa_segundo(segundo) &&
				beryl->clock.testa_minuto(minuto) &&
				beryl->clock.testa_hora(hora) &&
    8462:	88 23       	and	r24, r24
    8464:	09 f4       	brne	.+2      	; 0x8468 <_ZN8red_fang12check_stringEPc+0x534>
				beryl->clock.testa_dia(dia, mes) &&
				beryl->clock.testa_mes(mes) &&
    8466:	8c c1       	rjmp	.+792    	; 0x8780 <_ZN8red_fang12check_stringEPc+0x84c>
    8468:	f7 01       	movw	r30, r14
    846a:	82 85       	ldd	r24, Z+10	; 0x0a
    846c:	93 85       	ldd	r25, Z+11	; 0x0b
    846e:	b6 01       	movw	r22, r12
    8470:	8f 54       	subi	r24, 0x4F	; 79
    8472:	9f 4f       	sbci	r25, 0xFF	; 255
    8474:	48 d6       	rcall	.+3216   	; 0x9106 <_ZN10red_quartz9testa_mesEi>
				}
			}
			if( beryl->clock.testa_segundo(segundo) &&
				beryl->clock.testa_minuto(minuto) &&
				beryl->clock.testa_hora(hora) &&
				beryl->clock.testa_dia(dia, mes) &&
    8476:	88 23       	and	r24, r24
    8478:	09 f4       	brne	.+2      	; 0x847c <_ZN8red_fang12check_stringEPc+0x548>
				beryl->clock.testa_mes(mes) &&
				beryl->clock.testa_ano(ano) )
    847a:	82 c1       	rjmp	.+772    	; 0x8780 <_ZN8red_fang12check_stringEPc+0x84c>
    847c:	f7 01       	movw	r30, r14
    847e:	82 85       	ldd	r24, Z+10	; 0x0a
    8480:	93 85       	ldd	r25, Z+11	; 0x0b
    8482:	6c a1       	ldd	r22, Y+36	; 0x24
    8484:	7d a1       	ldd	r23, Y+37	; 0x25
    8486:	8f 54       	subi	r24, 0x4F	; 79
    8488:	9f 4f       	sbci	r25, 0xFF	; 255
			}
			if( beryl->clock.testa_segundo(segundo) &&
				beryl->clock.testa_minuto(minuto) &&
				beryl->clock.testa_hora(hora) &&
				beryl->clock.testa_dia(dia, mes) &&
				beryl->clock.testa_mes(mes) &&
    848a:	45 d6       	rcall	.+3210   	; 0x9116 <_ZN10red_quartz9testa_anoEi>
    848c:	88 23       	and	r24, r24
    848e:	09 f4       	brne	.+2      	; 0x8492 <_ZN8red_fang12check_stringEPc+0x55e>
				beryl->clock.testa_ano(ano) )
			{
				beryl->clock.set_segundo(segundo);
    8490:	77 c1       	rjmp	.+750    	; 0x8780 <_ZN8red_fang12check_stringEPc+0x84c>
    8492:	f7 01       	movw	r30, r14
    8494:	82 85       	ldd	r24, Z+10	; 0x0a
    8496:	93 85       	ldd	r25, Z+11	; 0x0b
    8498:	b1 01       	movw	r22, r2
    849a:	8f 54       	subi	r24, 0x4F	; 79
    849c:	9f 4f       	sbci	r25, 0xFF	; 255
				beryl->clock.set_minuto(minuto);
    849e:	c0 d5       	rcall	.+2944   	; 0x9020 <_ZN10red_quartz11set_segundoEi>
    84a0:	f7 01       	movw	r30, r14
    84a2:	82 85       	ldd	r24, Z+10	; 0x0a
    84a4:	93 85       	ldd	r25, Z+11	; 0x0b
    84a6:	b4 01       	movw	r22, r8
    84a8:	8f 54       	subi	r24, 0x4F	; 79
    84aa:	9f 4f       	sbci	r25, 0xFF	; 255
				beryl->clock.set_hora(hora);
    84ac:	c3 d5       	rcall	.+2950   	; 0x9034 <_ZN10red_quartz10set_minutoEi>
    84ae:	f7 01       	movw	r30, r14
    84b0:	82 85       	ldd	r24, Z+10	; 0x0a
    84b2:	93 85       	ldd	r25, Z+11	; 0x0b
    84b4:	b5 01       	movw	r22, r10
    84b6:	8f 54       	subi	r24, 0x4F	; 79
    84b8:	9f 4f       	sbci	r25, 0xFF	; 255
				beryl->clock.set_dia(dia, mes);
    84ba:	c6 d5       	rcall	.+2956   	; 0x9048 <_ZN10red_quartz8set_horaEi>
    84bc:	f7 01       	movw	r30, r14
    84be:	82 85       	ldd	r24, Z+10	; 0x0a
    84c0:	93 85       	ldd	r25, Z+11	; 0x0b
    84c2:	a6 01       	movw	r20, r12
    84c4:	b3 01       	movw	r22, r6
    84c6:	8f 54       	subi	r24, 0x4F	; 79
    84c8:	9f 4f       	sbci	r25, 0xFF	; 255
				beryl->clock.set_mes(mes);
    84ca:	08 d6       	rcall	.+3088   	; 0x90dc <_ZN10red_quartz7set_diaEii>
    84cc:	f7 01       	movw	r30, r14
    84ce:	82 85       	ldd	r24, Z+10	; 0x0a
    84d0:	93 85       	ldd	r25, Z+11	; 0x0b
    84d2:	b6 01       	movw	r22, r12
    84d4:	8f 54       	subi	r24, 0x4F	; 79
    84d6:	9f 4f       	sbci	r25, 0xFF	; 255
    84d8:	c1 d5       	rcall	.+2946   	; 0x905c <_ZN10red_quartz7set_mesEi>
				beryl->clock.set_ano(ano);
    84da:	f7 01       	movw	r30, r14
    84dc:	82 85       	ldd	r24, Z+10	; 0x0a
    84de:	93 85       	ldd	r25, Z+11	; 0x0b
    84e0:	6c a1       	ldd	r22, Y+36	; 0x24
    84e2:	7d a1       	ldd	r23, Y+37	; 0x25
    84e4:	8f 54       	subi	r24, 0x4F	; 79
    84e6:	9f 4f       	sbci	r25, 0xFF	; 255
    84e8:	c6 d5       	rcall	.+2956   	; 0x9076 <_ZN10red_quartz7set_anoEi>
    84ea:	62 e2       	ldi	r22, 0x22	; 34
					
				Serial.println("Data e Hora Atualizados");
    84ec:	7f e0       	ldi	r23, 0x0F	; 15
    84ee:	0a ce       	rjmp	.-1004   	; 0x8104 <_ZN8red_fang12check_stringEPc+0x1d0>
    84f0:	64 e1       	ldi	r22, 0x14	; 20
			strcat(clk, filler);                                //adiciona o conteudo de filler(minute) ao final da string.
			serialEnviar(clk);                                  //envia a string construido a função serialEnviar() para ser enviada ao bluetooth.
			Serial.println("Data e Hora enviados.");            //envia confirmação ao serial monitor(debug).
		}
    }
	else if(strcmp(str, "GET")==0 || strcmp(str, "GTX")==0)
    84f2:	7e e0       	ldi	r23, 0x0E	; 14
    84f4:	c8 01       	movw	r24, r16
    84f6:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    84fa:	89 2b       	or	r24, r25
    84fc:	39 f0       	breq	.+14     	; 0x850c <_ZN8red_fang12check_stringEPc+0x5d8>
    84fe:	68 e1       	ldi	r22, 0x18	; 24
    8500:	7e e0       	ldi	r23, 0x0E	; 14
    8502:	c8 01       	movw	r24, r16
    8504:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    8508:	89 2b       	or	r24, r25
    850a:	a9 f4       	brne	.+42     	; 0x8536 <_ZN8red_fang12check_stringEPc+0x602>
    850c:	6a e0       	ldi	r22, 0x0A	; 10
	{    //Se o comando recebido for GET, realiza logica para 'pegar' e retornar uma leitura salva.
		delay(10);
    850e:	70 e0       	ldi	r23, 0x00	; 0
    8510:	80 e0       	ldi	r24, 0x00	; 0
    8512:	90 e0       	ldi	r25, 0x00	; 0
    8514:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
    8518:	86 ed       	ldi	r24, 0xD6	; 214
		char inStr[30];
		while(Serial1.available()!=-1 && Serial1.available()!=0){
    851a:	94 e1       	ldi	r25, 0x14	; 20
    851c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8520:	01 96       	adiw	r24, 0x01	; 1
    8522:	09 f4       	brne	.+2      	; 0x8526 <_ZN8red_fang12check_stringEPc+0x5f2>
    8524:	5e c1       	rjmp	.+700    	; 0x87e2 <_ZN8red_fang12check_stringEPc+0x8ae>
    8526:	86 ed       	ldi	r24, 0xD6	; 214
    8528:	94 e1       	ldi	r25, 0x14	; 20
    852a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    852e:	89 2b       	or	r24, r25
    8530:	09 f0       	breq	.+2      	; 0x8534 <_ZN8red_fang12check_stringEPc+0x600>
    8532:	2f c1       	rjmp	.+606    	; 0x8792 <_ZN8red_fang12check_stringEPc+0x85e>
    8534:	56 c1       	rjmp	.+684    	; 0x87e2 <_ZN8red_fang12check_stringEPc+0x8ae>
    8536:	6c e1       	ldi	r22, 0x1C	; 28
		else
		{
			_complex=true;
		}
    }
	else if(strcmp(str, "REQ")==0)
    8538:	7e e0       	ldi	r23, 0x0E	; 14
    853a:	c8 01       	movw	r24, r16
    853c:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    8540:	89 2b       	or	r24, r25
    8542:	a9 f4       	brne	.+42     	; 0x856e <_ZN8red_fang12check_stringEPc+0x63a>
    8544:	6a e0       	ldi	r22, 0x0A	; 10
	{    //Se o comando recebido for REQ, realiza a logica de realizar uma nova leitura com a frequencia indicada.

		//SE A FREQUENCIA REQUISITA FOR INVALIDA(ABAIXO DE 1K OU ACIMA DE 100K) DEVOLVER UM ERRO/AVISO/ETC... A fazer
		delay(10);
    8546:	70 e0       	ldi	r23, 0x00	; 0
    8548:	80 e0       	ldi	r24, 0x00	; 0
    854a:	90 e0       	ldi	r25, 0x00	; 0
    854c:	0e 94 bb 09 	call	0x1376	; 0x1376 <delay>
    8550:	86 ed       	ldi	r24, 0xD6	; 214
		char inStr[30];
		while(Serial1.available()!=-1 && Serial1.available()!=0)
    8552:	94 e1       	ldi	r25, 0x14	; 20
    8554:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8558:	01 96       	adiw	r24, 0x01	; 1
    855a:	09 f4       	brne	.+2      	; 0x855e <_ZN8red_fang12check_stringEPc+0x62a>
    855c:	b4 c1       	rjmp	.+872    	; 0x88c6 <_ZN8red_fang12check_stringEPc+0x992>
    855e:	86 ed       	ldi	r24, 0xD6	; 214
    8560:	94 e1       	ldi	r25, 0x14	; 20
    8562:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8566:	89 2b       	or	r24, r25
    8568:	09 f0       	breq	.+2      	; 0x856c <_ZN8red_fang12check_stringEPc+0x638>
    856a:	86 c1       	rjmp	.+780    	; 0x8878 <_ZN8red_fang12check_stringEPc+0x944>
    856c:	ac c1       	rjmp	.+856    	; 0x88c6 <_ZN8red_fang12check_stringEPc+0x992>
    856e:	6e eb       	ldi	r22, 0xBE	; 190
			_isBeingUsed = false;
		}
    }
	else
	{
		Serial.println("Algo inesperado foi recebido, limpando o serial. Enviando ERRO");
    8570:	7e e0       	ldi	r23, 0x0E	; 14
    8572:	80 ec       	ldi	r24, 0xC0	; 192
    8574:	90 e1       	ldi	r25, 0x10	; 16
    8576:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    857a:	6e e6       	ldi	r22, 0x6E	; 110
		Serial1.print("ERR");
    857c:	7c e0       	ldi	r23, 0x0C	; 12
    857e:	86 ed       	ldi	r24, 0xD6	; 214
    8580:	94 e1       	ldi	r25, 0x14	; 20
    8582:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    8586:	f7 01       	movw	r30, r14
		_isBeingUsed = false;
    8588:	13 82       	std	Z+3, r1	; 0x03
    858a:	00 e0       	ldi	r16, 0x00	; 0
		for (int i=0; i<10; i++){
    858c:	10 e0       	ldi	r17, 0x00	; 0
    858e:	86 ed       	ldi	r24, 0xD6	; 214
			Serial1.read();
    8590:	94 e1       	ldi	r25, 0x14	; 20
    8592:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    8596:	86 ed       	ldi	r24, 0xD6	; 214
			if(Serial1.available()==0){
    8598:	94 e1       	ldi	r25, 0x14	; 20
    859a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    859e:	89 2b       	or	r24, r25
    85a0:	11 f4       	brne	.+4      	; 0x85a6 <_ZN8red_fang12check_stringEPc+0x672>
    85a2:	0a e0       	ldi	r16, 0x0A	; 10
				i=10;
    85a4:	10 e0       	ldi	r17, 0x00	; 0
    85a6:	0f 5f       	subi	r16, 0xFF	; 255
	else
	{
		Serial.println("Algo inesperado foi recebido, limpando o serial. Enviando ERRO");
		Serial1.print("ERR");
		_isBeingUsed = false;
		for (int i=0; i<10; i++){
    85a8:	1f 4f       	sbci	r17, 0xFF	; 255
    85aa:	0a 30       	cpi	r16, 0x0A	; 10
    85ac:	11 05       	cpc	r17, r1
    85ae:	7c f3       	brlt	.-34     	; 0x858e <_ZN8red_fang12check_stringEPc+0x65a>
    85b0:	ea c1       	rjmp	.+980    	; 0x8986 <_ZN8red_fang12check_stringEPc+0xa52>
    85b2:	60 e0       	ldi	r22, 0x00	; 0
			}
		}
		else
		{
			//FAST CLEAR = APENAS MARCAR A POSIÇÃO 0 DA EEPROM COMO 0.
			EEPROM.write(0,0);
    85b4:	80 e0       	ldi	r24, 0x00	; 0
    85b6:	90 e0       	ldi	r25, 0x00	; 0
    85b8:	0e 94 36 39 	call	0x726c	; 0x726c <_ZN11EEPROMClass5writeEih.isra.1>
    85bc:	6d ef       	ldi	r22, 0xFD	; 253
			Serial.println("Limpeza rapida concluida.");
    85be:	7e e0       	ldi	r23, 0x0E	; 14
    85c0:	a1 cd       	rjmp	.-1214   	; 0x8104 <_ZN8red_fang12check_stringEPc+0x1d0>
				Serial.println((char*)"Concluido.");
				serialEnviar("OK");
			}
			else
			{
				Serial.println("ERRO, não foi possivel deletar a leitura.");
    85c2:	60 e9       	ldi	r22, 0x90	; 144
    85c4:	7c e0       	ldi	r23, 0x0C	; 12
    85c6:	80 ec       	ldi	r24, 0xC0	; 192
    85c8:	90 e1       	ldi	r25, 0x10	; 16
    85ca:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				Serial.print("ERR");
    85ce:	6e e6       	ldi	r22, 0x6E	; 110
    85d0:	7c e0       	ldi	r23, 0x0C	; 12
    85d2:	80 ec       	ldi	r24, 0xC0	; 192
    85d4:	90 e1       	ldi	r25, 0x10	; 16
    85d6:	d8 c0       	rjmp	.+432    	; 0x8788 <_ZN8red_fang12check_stringEPc+0x854>
			}
		}
		else
		{                                                 //se não receber mais nada depois de CLK.
			char clk[30], filler[5];                            //inicializa os arrays clk para montar o array com as informações de hora e data, e filler para ajudar a construir clk
			itoa(beryl->clock.dia(), filler, 10);                   //filler recebe o valor traduzido de date.
    85d8:	f7 01       	movw	r30, r14
    85da:	82 85       	ldd	r24, Z+10	; 0x0a
    85dc:	93 85       	ldd	r25, Z+11	; 0x0b
    85de:	8f 54       	subi	r24, 0x4F	; 79
    85e0:	9f 4f       	sbci	r25, 0xFF	; 255
    85e2:	ee d3       	rcall	.+2012   	; 0x8dc0 <_ZN10red_quartz3diaEv>
    85e4:	4a e0       	ldi	r20, 0x0A	; 10
    85e6:	be 01       	movw	r22, r28
    85e8:	61 5e       	subi	r22, 0xE1	; 225
    85ea:	7f 4f       	sbci	r23, 0xFF	; 255
    85ec:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			if(beryl->clock.dia()<10)
    85f0:	f7 01       	movw	r30, r14
    85f2:	82 85       	ldd	r24, Z+10	; 0x0a
    85f4:	93 85       	ldd	r25, Z+11	; 0x0b
    85f6:	8f 54       	subi	r24, 0x4F	; 79
    85f8:	9f 4f       	sbci	r25, 0xFF	; 255
    85fa:	e2 d3       	rcall	.+1988   	; 0x8dc0 <_ZN10red_quartz3diaEv>
    85fc:	0a 97       	sbiw	r24, 0x0a	; 10
    85fe:	74 f4       	brge	.+28     	; 0x861c <_ZN8red_fang12check_stringEPc+0x6e8>
    8600:	65 ef       	ldi	r22, 0xF5	; 245
			{                              //se o valor de date for inferior a 10, clk recebe 0 e depois o valor de date.
				strcpy (clk, "0");                                //clk recebe [0].
    8602:	76 e0       	ldi	r23, 0x06	; 6
    8604:	ce 01       	movw	r24, r28
    8606:	01 96       	adiw	r24, 0x01	; 1
    8608:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
    860c:	be 01       	movw	r22, r28
				strcat( clk, filler );                            //adiciona o conteudo de filler(date) ao final da string.
    860e:	61 5e       	subi	r22, 0xE1	; 225
    8610:	7f 4f       	sbci	r23, 0xFF	; 255
    8612:	ce 01       	movw	r24, r28
    8614:	01 96       	adiw	r24, 0x01	; 1
    8616:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    861a:	07 c0       	rjmp	.+14     	; 0x862a <_ZN8red_fang12check_stringEPc+0x6f6>
			}
			else
			{                                               //se o valor de date for maior que 10, apenas recebe o valor de date.
				strcpy (clk, filler );                            //recebe o valor da string(date).
    861c:	be 01       	movw	r22, r28
    861e:	61 5e       	subi	r22, 0xE1	; 225
    8620:	7f 4f       	sbci	r23, 0xFF	; 255
    8622:	ce 01       	movw	r24, r28
    8624:	01 96       	adiw	r24, 0x01	; 1
    8626:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			}
			strcat (clk, "/");                                  //adiciona o separador de data '/' ao final da string.
    862a:	64 ea       	ldi	r22, 0xA4	; 164
    862c:	75 e0       	ldi	r23, 0x05	; 5
    862e:	ce 01       	movw	r24, r28
    8630:	01 96       	adiw	r24, 0x01	; 1
    8632:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			itoa(beryl->clock.mes(), filler, 10);           //filler recebe o valor traduzido de month.
    8636:	f7 01       	movw	r30, r14
    8638:	82 85       	ldd	r24, Z+10	; 0x0a
    863a:	93 85       	ldd	r25, Z+11	; 0x0b
    863c:	8f 54       	subi	r24, 0x4F	; 79
    863e:	9f 4f       	sbci	r25, 0xFF	; 255
    8640:	c3 d3       	rcall	.+1926   	; 0x8dc8 <_ZN10red_quartz3mesEv>
    8642:	4a e0       	ldi	r20, 0x0A	; 10
    8644:	be 01       	movw	r22, r28
    8646:	61 5e       	subi	r22, 0xE1	; 225
    8648:	7f 4f       	sbci	r23, 0xFF	; 255
    864a:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			if(beryl->clock.mes()<10)
    864e:	f7 01       	movw	r30, r14
    8650:	82 85       	ldd	r24, Z+10	; 0x0a
    8652:	93 85       	ldd	r25, Z+11	; 0x0b
    8654:	8f 54       	subi	r24, 0x4F	; 79
    8656:	9f 4f       	sbci	r25, 0xFF	; 255
    8658:	b7 d3       	rcall	.+1902   	; 0x8dc8 <_ZN10red_quartz3mesEv>
    865a:	0a 97       	sbiw	r24, 0x0a	; 10
    865c:	34 f4       	brge	.+12     	; 0x866a <_ZN8red_fang12check_stringEPc+0x736>
    865e:	65 ef       	ldi	r22, 0xF5	; 245
			{                      //se o valor de month for inferior a 10, '0' é adicionado ao final da string.
				strcat( clk, "0");                                //adiciona o valor '0' ao final da string.
    8660:	76 e0       	ldi	r23, 0x06	; 6
    8662:	ce 01       	movw	r24, r28
    8664:	01 96       	adiw	r24, 0x01	; 1
    8666:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			}
			strcat(clk, filler);                                //adiciona o conteudo de filler(month) ao final da string.
    866a:	be 01       	movw	r22, r28
    866c:	61 5e       	subi	r22, 0xE1	; 225
    866e:	7f 4f       	sbci	r23, 0xFF	; 255
    8670:	ce 01       	movw	r24, r28
    8672:	01 96       	adiw	r24, 0x01	; 1
    8674:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			strcat(clk, "/");                                   //adiciona o separador de data '/' ao final da string.
    8678:	64 ea       	ldi	r22, 0xA4	; 164
    867a:	75 e0       	ldi	r23, 0x05	; 5
    867c:	ce 01       	movw	r24, r28
    867e:	01 96       	adiw	r24, 0x01	; 1
    8680:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			itoa(beryl->clock.ano(), filler, 10);                   //filler recebe o valor traduzido de year.
    8684:	f7 01       	movw	r30, r14
    8686:	82 85       	ldd	r24, Z+10	; 0x0a
    8688:	93 85       	ldd	r25, Z+11	; 0x0b
    868a:	8f 54       	subi	r24, 0x4F	; 79
    868c:	9f 4f       	sbci	r25, 0xFF	; 255
    868e:	a0 d3       	rcall	.+1856   	; 0x8dd0 <_ZN10red_quartz3anoEv>
    8690:	4a e0       	ldi	r20, 0x0A	; 10
    8692:	be 01       	movw	r22, r28
    8694:	61 5e       	subi	r22, 0xE1	; 225
    8696:	7f 4f       	sbci	r23, 0xFF	; 255
    8698:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			if(beryl->clock.ano()<10)
    869c:	f7 01       	movw	r30, r14
    869e:	82 85       	ldd	r24, Z+10	; 0x0a
    86a0:	93 85       	ldd	r25, Z+11	; 0x0b
    86a2:	8f 54       	subi	r24, 0x4F	; 79
    86a4:	9f 4f       	sbci	r25, 0xFF	; 255
    86a6:	94 d3       	rcall	.+1832   	; 0x8dd0 <_ZN10red_quartz3anoEv>
    86a8:	0a 97       	sbiw	r24, 0x0a	; 10
    86aa:	34 f4       	brge	.+12     	; 0x86b8 <_ZN8red_fang12check_stringEPc+0x784>
    86ac:	65 ef       	ldi	r22, 0xF5	; 245
			{                              //se o valor de year for inferior a 10, '0' é adicionado ao final da string.
				strcat (clk, "0");                                //adiciona o valor '0' ao final da string.
    86ae:	76 e0       	ldi	r23, 0x06	; 6
    86b0:	ce 01       	movw	r24, r28
    86b2:	01 96       	adiw	r24, 0x01	; 1
    86b4:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			}
			strcat(clk, filler);                                //adiciona o conteudo de filler(year) ao final da string.
    86b8:	be 01       	movw	r22, r28
    86ba:	61 5e       	subi	r22, 0xE1	; 225
    86bc:	7f 4f       	sbci	r23, 0xFF	; 255
    86be:	ce 01       	movw	r24, r28
    86c0:	01 96       	adiw	r24, 0x01	; 1
    86c2:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			strcat(clk, " ");                                   //adiciona um espaço de separação entre data e hora ao final da string.
    86c6:	6f eb       	ldi	r22, 0xBF	; 191
    86c8:	74 e0       	ldi	r23, 0x04	; 4
    86ca:	ce 01       	movw	r24, r28
    86cc:	01 96       	adiw	r24, 0x01	; 1
    86ce:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			itoa(beryl->clock.hora(), filler, 10);                //filler recebe o valor traduzido de hour.
    86d2:	f7 01       	movw	r30, r14
    86d4:	82 85       	ldd	r24, Z+10	; 0x0a
    86d6:	93 85       	ldd	r25, Z+11	; 0x0b
    86d8:	8f 54       	subi	r24, 0x4F	; 79
    86da:	9f 4f       	sbci	r25, 0xFF	; 255
    86dc:	6d d3       	rcall	.+1754   	; 0x8db8 <_ZN10red_quartz4horaEv>
    86de:	4a e0       	ldi	r20, 0x0A	; 10
    86e0:	be 01       	movw	r22, r28
    86e2:	61 5e       	subi	r22, 0xE1	; 225
    86e4:	7f 4f       	sbci	r23, 0xFF	; 255
    86e6:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			if(beryl->clock.hora()<10)
    86ea:	f7 01       	movw	r30, r14
    86ec:	82 85       	ldd	r24, Z+10	; 0x0a
    86ee:	93 85       	ldd	r25, Z+11	; 0x0b
    86f0:	8f 54       	subi	r24, 0x4F	; 79
    86f2:	9f 4f       	sbci	r25, 0xFF	; 255
    86f4:	61 d3       	rcall	.+1730   	; 0x8db8 <_ZN10red_quartz4horaEv>
    86f6:	0a 97       	sbiw	r24, 0x0a	; 10
    86f8:	34 f4       	brge	.+12     	; 0x8706 <_ZN8red_fang12check_stringEPc+0x7d2>
			{                       //se o valor de hour for inferior a 10, '0' é adicionado ao final da string.
				strcat (clk, "0");                                //adiciona o valor '0' ao final da string.
    86fa:	65 ef       	ldi	r22, 0xF5	; 245
    86fc:	76 e0       	ldi	r23, 0x06	; 6
    86fe:	ce 01       	movw	r24, r28
    8700:	01 96       	adiw	r24, 0x01	; 1
    8702:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			}
			strcat(clk, filler);                                //adiciona o conteudo de filler(hour) ao final da string.
    8706:	be 01       	movw	r22, r28
    8708:	61 5e       	subi	r22, 0xE1	; 225
    870a:	7f 4f       	sbci	r23, 0xFF	; 255
    870c:	ce 01       	movw	r24, r28
    870e:	01 96       	adiw	r24, 0x01	; 1
    8710:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			strcat(clk, ":");                                   //adiciona o separador de hora ':' ao final da string.
    8714:	69 e2       	ldi	r22, 0x29	; 41
    8716:	78 e0       	ldi	r23, 0x08	; 8
    8718:	ce 01       	movw	r24, r28
    871a:	01 96       	adiw	r24, 0x01	; 1
    871c:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
			itoa(beryl->clock.minuto(), filler, 10);                     //filler recebe o valor traduzido de minute.
    8720:	f7 01       	movw	r30, r14
    8722:	82 85       	ldd	r24, Z+10	; 0x0a
    8724:	93 85       	ldd	r25, Z+11	; 0x0b
    8726:	8f 54       	subi	r24, 0x4F	; 79
    8728:	9f 4f       	sbci	r25, 0xFF	; 255
    872a:	42 d3       	rcall	.+1668   	; 0x8db0 <_ZN10red_quartz6minutoEv>
    872c:	4a e0       	ldi	r20, 0x0A	; 10
    872e:	be 01       	movw	r22, r28
    8730:	61 5e       	subi	r22, 0xE1	; 225
    8732:	7f 4f       	sbci	r23, 0xFF	; 255
    8734:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
			if(beryl->clock.minuto()<10)
    8738:	f7 01       	movw	r30, r14
    873a:	82 85       	ldd	r24, Z+10	; 0x0a
    873c:	93 85       	ldd	r25, Z+11	; 0x0b
    873e:	8f 54       	subi	r24, 0x4F	; 79
    8740:	9f 4f       	sbci	r25, 0xFF	; 255
    8742:	36 d3       	rcall	.+1644   	; 0x8db0 <_ZN10red_quartz6minutoEv>
    8744:	0a 97       	sbiw	r24, 0x0a	; 10
    8746:	34 f4       	brge	.+12     	; 0x8754 <_ZN8red_fang12check_stringEPc+0x820>
    8748:	65 ef       	ldi	r22, 0xF5	; 245
			{                            //se o valor de minute for inferior a 10, '0' é adicionado ao final da string.
				strcat (clk, "0");                                //adiciona o valor '0' ao final da string.
    874a:	76 e0       	ldi	r23, 0x06	; 6
    874c:	ce 01       	movw	r24, r28
    874e:	01 96       	adiw	r24, 0x01	; 1
    8750:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8754:	be 01       	movw	r22, r28
			}
			strcat(clk, filler);                                //adiciona o conteudo de filler(minute) ao final da string.
    8756:	61 5e       	subi	r22, 0xE1	; 225
    8758:	7f 4f       	sbci	r23, 0xFF	; 255
    875a:	ce 01       	movw	r24, r28
    875c:	01 96       	adiw	r24, 0x01	; 1
    875e:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8762:	be 01       	movw	r22, r28
			serialEnviar(clk);                                  //envia a string construido a função serialEnviar() para ser enviada ao bluetooth.
    8764:	6f 5f       	subi	r22, 0xFF	; 255
    8766:	7f 4f       	sbci	r23, 0xFF	; 255
    8768:	c7 01       	movw	r24, r14
    876a:	0e 94 bc 39 	call	0x7378	; 0x7378 <_ZN8red_fang12serialEnviarEPc>
    876e:	6e ef       	ldi	r22, 0xFE	; 254
			Serial.println("Data e Hora enviados.");            //envia confirmação ao serial monitor(debug).
    8770:	7d e0       	ldi	r23, 0x0D	; 13
    8772:	4b cc       	rjmp	.-1898   	; 0x800a <_ZN8red_fang12check_stringEPc+0xd6>
    8774:	6c e4       	ldi	r22, 0x4C	; 76
				Serial.println("Configuração da AD concluida com sucesso.");
				_Req = true;
			}
			else
			{
				Serial.println("Configuração da AD falhou.");
    8776:	7e e0       	ldi	r23, 0x0E	; 14
    8778:	80 ec       	ldi	r24, 0xC0	; 192
    877a:	90 e1       	ldi	r25, 0x10	; 16
    877c:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    8780:	6e e6       	ldi	r22, 0x6E	; 110
				Serial.println("Data e Hora Atualizados");
				serialEnviar("OK");
			}
			else
			{                                               //se o valor recebido for invalido.
				Serial1.print("ERR");                             //retorna um erro.
    8782:	7c e0       	ldi	r23, 0x0C	; 12
    8784:	86 ed       	ldi	r24, 0xD6	; 214
    8786:	94 e1       	ldi	r25, 0x14	; 20
    8788:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    878c:	f7 01       	movw	r30, r14
				_isBeingUsed = false;
    878e:	13 82       	std	Z+3, r1	; 0x03
    8790:	fa c0       	rjmp	.+500    	; 0x8986 <_ZN8red_fang12check_stringEPc+0xa52>
    8792:	86 ed       	ldi	r24, 0xD6	; 214
	else if(strcmp(str, "GET")==0 || strcmp(str, "GTX")==0)
	{    //Se o comando recebido for GET, realiza logica para 'pegar' e retornar uma leitura salva.
		delay(10);
		char inStr[30];
		while(Serial1.available()!=-1 && Serial1.available()!=0){
			if(Serial1.available()>=1){
    8794:	94 e1       	ldi	r25, 0x14	; 20
    8796:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    879a:	18 16       	cp	r1, r24
    879c:	19 06       	cpc	r1, r25
    879e:	0c f0       	brlt	.+2      	; 0x87a2 <_ZN8red_fang12check_stringEPc+0x86e>
    87a0:	bb ce       	rjmp	.-650    	; 0x8518 <_ZN8red_fang12check_stringEPc+0x5e4>
    87a2:	ce 01       	movw	r24, r28
    87a4:	01 96       	adiw	r24, 0x01	; 1
    87a6:	6c 01       	movw	r12, r24
    87a8:	86 ed       	ldi	r24, 0xD6	; 214
				int i=0;
				while(Serial1.available()!=-1 && Serial1.available()!=0){
    87aa:	94 e1       	ldi	r25, 0x14	; 20
    87ac:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    87b0:	01 96       	adiw	r24, 0x01	; 1
    87b2:	09 f4       	brne	.+2      	; 0x87b6 <_ZN8red_fang12check_stringEPc+0x882>
    87b4:	b1 ce       	rjmp	.-670    	; 0x8518 <_ZN8red_fang12check_stringEPc+0x5e4>
    87b6:	86 ed       	ldi	r24, 0xD6	; 214
    87b8:	94 e1       	ldi	r25, 0x14	; 20
    87ba:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    87be:	89 2b       	or	r24, r25
    87c0:	09 f4       	brne	.+2      	; 0x87c4 <_ZN8red_fang12check_stringEPc+0x890>
    87c2:	aa ce       	rjmp	.-684    	; 0x8518 <_ZN8red_fang12check_stringEPc+0x5e4>
    87c4:	86 ed       	ldi	r24, 0xD6	; 214
					inStr[i]=Serial1.read();
    87c6:	94 e1       	ldi	r25, 0x14	; 20
    87c8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    87cc:	f6 01       	movw	r30, r12
    87ce:	81 93       	st	Z+, r24
    87d0:	6f 01       	movw	r12, r30
    87d2:	68 2f       	mov	r22, r24
					Serial.print(inStr[i]);
    87d4:	80 ec       	ldi	r24, 0xC0	; 192
    87d6:	90 e1       	ldi	r25, 0x10	; 16
    87d8:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN5Print5printEc>
    87dc:	f6 01       	movw	r30, r12
					i++;
					inStr[i]= '\0';
    87de:	10 82       	st	Z, r1
    87e0:	e3 cf       	rjmp	.-58     	; 0x87a8 <_ZN8red_fang12check_stringEPc+0x874>
		delay(10);
		char inStr[30];
		while(Serial1.available()!=-1 && Serial1.available()!=0){
			if(Serial1.available()>=1){
				int i=0;
				while(Serial1.available()!=-1 && Serial1.available()!=0){
    87e2:	69 e1       	ldi	r22, 0x19	; 25
					i++;
					inStr[i]= '\0';
				}
			}
		}
		Serial.print("|");
    87e4:	7c e0       	ldi	r23, 0x0C	; 12
    87e6:	80 ec       	ldi	r24, 0xC0	; 192
    87e8:	90 e1       	ldi	r25, 0x10	; 16
    87ea:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    87ee:	be 01       	movw	r22, r28
		Serial.println(inStr);
    87f0:	6f 5f       	subi	r22, 0xFF	; 255
    87f2:	7f 4f       	sbci	r23, 0xFF	; 255
    87f4:	80 ec       	ldi	r24, 0xC0	; 192
    87f6:	90 e1       	ldi	r25, 0x10	; 16
    87f8:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    87fc:	4a e0       	ldi	r20, 0x0A	; 10
		char *ptr;
		_num = strtol(inStr, &ptr, 10);
    87fe:	50 e0       	ldi	r21, 0x00	; 0
    8800:	be 01       	movw	r22, r28
    8802:	61 5e       	subi	r22, 0xE1	; 225
    8804:	7f 4f       	sbci	r23, 0xFF	; 255
    8806:	ce 01       	movw	r24, r28
    8808:	01 96       	adiw	r24, 0x01	; 1
    880a:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    880e:	f7 01       	movw	r30, r14
    8810:	71 87       	std	Z+9, r23	; 0x09
    8812:	60 87       	std	Z+8, r22	; 0x08
    8814:	6a e3       	ldi	r22, 0x3A	; 58
		Serial.print("INDEX=");
    8816:	7f e0       	ldi	r23, 0x0F	; 15
    8818:	80 ec       	ldi	r24, 0xC0	; 192
    881a:	90 e1       	ldi	r25, 0x10	; 16
    881c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    8820:	f7 01       	movw	r30, r14
		Serial.println(_num);
    8822:	60 85       	ldd	r22, Z+8	; 0x08
    8824:	71 85       	ldd	r23, Z+9	; 0x09
    8826:	4a e0       	ldi	r20, 0x0A	; 10
    8828:	50 e0       	ldi	r21, 0x00	; 0
    882a:	80 ec       	ldi	r24, 0xC0	; 192
    882c:	90 e1       	ldi	r25, 0x10	; 16
    882e:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
    8832:	6c e1       	ldi	r22, 0x1C	; 28
		Serial.print("PTR='");
    8834:	7f e0       	ldi	r23, 0x0F	; 15
    8836:	80 ec       	ldi	r24, 0xC0	; 192
    8838:	90 e1       	ldi	r25, 0x10	; 16
    883a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    883e:	6f 8d       	ldd	r22, Y+31	; 0x1f
		Serial.print(ptr);
    8840:	78 a1       	ldd	r23, Y+32	; 0x20
    8842:	80 ec       	ldi	r24, 0xC0	; 192
    8844:	90 e1       	ldi	r25, 0x10	; 16
    8846:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    884a:	60 e2       	ldi	r22, 0x20	; 32
		Serial.println("'");
    884c:	7f e0       	ldi	r23, 0x0F	; 15
    884e:	80 ec       	ldi	r24, 0xC0	; 192
    8850:	90 e1       	ldi	r25, 0x10	; 16
    8852:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    8856:	dd 24       	eor	r13, r13
		_Get=true;
    8858:	d3 94       	inc	r13
    885a:	f7 01       	movw	r30, r14
    885c:	d0 82       	st	Z, r13
    885e:	68 e1       	ldi	r22, 0x18	; 24
		if(!strcmp(str, "GTX")==0)
    8860:	7e e0       	ldi	r23, 0x0E	; 14
    8862:	c8 01       	movw	r24, r16
    8864:	0e 94 49 61 	call	0xc292	; 0xc292 <strcmp>
    8868:	89 2b       	or	r24, r25
    886a:	19 f0       	breq	.+6      	; 0x8872 <_ZN8red_fang12check_stringEPc+0x93e>
    886c:	f7 01       	movw	r30, r14
		{
			_complex=false;
    886e:	12 82       	std	Z+2, r1	; 0x02
    8870:	8a c0       	rjmp	.+276    	; 0x8986 <_ZN8red_fang12check_stringEPc+0xa52>
    8872:	f7 01       	movw	r30, r14
		}
		else
		{
			_complex=true;
    8874:	d2 82       	std	Z+2, r13	; 0x02
    8876:	87 c0       	rjmp	.+270    	; 0x8986 <_ZN8red_fang12check_stringEPc+0xa52>
		}
    8878:	86 ed       	ldi	r24, 0xD6	; 214
		//SE A FREQUENCIA REQUISITA FOR INVALIDA(ABAIXO DE 1K OU ACIMA DE 100K) DEVOLVER UM ERRO/AVISO/ETC... A fazer
		delay(10);
		char inStr[30];
		while(Serial1.available()!=-1 && Serial1.available()!=0)
		{
			if(Serial1.available()>=4)
    887a:	94 e1       	ldi	r25, 0x14	; 20
    887c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8880:	04 97       	sbiw	r24, 0x04	; 4
    8882:	0c f4       	brge	.+2      	; 0x8886 <_ZN8red_fang12check_stringEPc+0x952>
    8884:	65 ce       	rjmp	.-822    	; 0x8550 <_ZN8red_fang12check_stringEPc+0x61c>
    8886:	8e 01       	movw	r16, r28
    8888:	0f 5f       	subi	r16, 0xFF	; 255
    888a:	1f 4f       	sbci	r17, 0xFF	; 255
    888c:	86 ed       	ldi	r24, 0xD6	; 214
			{
				int i=0;
				while(Serial1.available()!=-1 && Serial1.available()!=0)
    888e:	94 e1       	ldi	r25, 0x14	; 20
    8890:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8894:	01 96       	adiw	r24, 0x01	; 1
    8896:	09 f4       	brne	.+2      	; 0x889a <_ZN8red_fang12check_stringEPc+0x966>
    8898:	5b ce       	rjmp	.-842    	; 0x8550 <_ZN8red_fang12check_stringEPc+0x61c>
    889a:	86 ed       	ldi	r24, 0xD6	; 214
    889c:	94 e1       	ldi	r25, 0x14	; 20
    889e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    88a2:	89 2b       	or	r24, r25
    88a4:	09 f4       	brne	.+2      	; 0x88a8 <_ZN8red_fang12check_stringEPc+0x974>
    88a6:	54 ce       	rjmp	.-856    	; 0x8550 <_ZN8red_fang12check_stringEPc+0x61c>
    88a8:	86 ed       	ldi	r24, 0xD6	; 214
				{
					inStr[i]=Serial1.read();
    88aa:	94 e1       	ldi	r25, 0x14	; 20
    88ac:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    88b0:	f8 01       	movw	r30, r16
    88b2:	81 93       	st	Z+, r24
    88b4:	8f 01       	movw	r16, r30
    88b6:	68 2f       	mov	r22, r24
					Serial.print(inStr[i]);
    88b8:	80 ec       	ldi	r24, 0xC0	; 192
    88ba:	90 e1       	ldi	r25, 0x10	; 16
    88bc:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN5Print5printEc>
    88c0:	f8 01       	movw	r30, r16
					i++;
					inStr[i]= '\0';
    88c2:	10 82       	st	Z, r1
    88c4:	e3 cf       	rjmp	.-58     	; 0x888c <_ZN8red_fang12check_stringEPc+0x958>
		while(Serial1.available()!=-1 && Serial1.available()!=0)
		{
			if(Serial1.available()>=4)
			{
				int i=0;
				while(Serial1.available()!=-1 && Serial1.available()!=0)
    88c6:	69 e1       	ldi	r22, 0x19	; 25
					i++;
					inStr[i]= '\0';
				}
			}
		}
		Serial.print("|");
    88c8:	7c e0       	ldi	r23, 0x0C	; 12
    88ca:	80 ec       	ldi	r24, 0xC0	; 192
    88cc:	90 e1       	ldi	r25, 0x10	; 16
    88ce:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    88d2:	be 01       	movw	r22, r28
		Serial.println(inStr);
    88d4:	6f 5f       	subi	r22, 0xFF	; 255
    88d6:	7f 4f       	sbci	r23, 0xFF	; 255
    88d8:	80 ec       	ldi	r24, 0xC0	; 192
    88da:	90 e1       	ldi	r25, 0x10	; 16
    88dc:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    88e0:	4a e0       	ldi	r20, 0x0A	; 10
		char *ptr;
		long frq = strtol(inStr, &ptr, 10);
    88e2:	50 e0       	ldi	r21, 0x00	; 0
    88e4:	be 01       	movw	r22, r28
    88e6:	61 5e       	subi	r22, 0xE1	; 225
    88e8:	7f 4f       	sbci	r23, 0xFF	; 255
    88ea:	ce 01       	movw	r24, r28
    88ec:	01 96       	adiw	r24, 0x01	; 1
    88ee:	0e 94 07 60 	call	0xc00e	; 0xc00e <strtol>
    88f2:	4b 01       	movw	r8, r22
    88f4:	5c 01       	movw	r10, r24
    88f6:	6a e3       	ldi	r22, 0x3A	; 58
		Serial.print("INDEX=");
    88f8:	7f e0       	ldi	r23, 0x0F	; 15
    88fa:	80 ec       	ldi	r24, 0xC0	; 192
    88fc:	90 e1       	ldi	r25, 0x10	; 16
    88fe:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    8902:	2a e0       	ldi	r18, 0x0A	; 10
		Serial.println(frq);
    8904:	30 e0       	ldi	r19, 0x00	; 0
    8906:	b5 01       	movw	r22, r10
    8908:	a4 01       	movw	r20, r8
    890a:	80 ec       	ldi	r24, 0xC0	; 192
    890c:	90 e1       	ldi	r25, 0x10	; 16
    890e:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN5Print7printlnEli>
    8912:	6c e1       	ldi	r22, 0x1C	; 28
		Serial.print("PTR='");
    8914:	7f e0       	ldi	r23, 0x0F	; 15
    8916:	80 ec       	ldi	r24, 0xC0	; 192
    8918:	90 e1       	ldi	r25, 0x10	; 16
    891a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    891e:	6f 8d       	ldd	r22, Y+31	; 0x1f
		Serial.print(ptr);
    8920:	78 a1       	ldd	r23, Y+32	; 0x20
    8922:	80 ec       	ldi	r24, 0xC0	; 192
    8924:	90 e1       	ldi	r25, 0x10	; 16
    8926:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    892a:	60 e2       	ldi	r22, 0x20	; 32
		Serial.println("'");
    892c:	7f e0       	ldi	r23, 0x0F	; 15
    892e:	80 ec       	ldi	r24, 0xC0	; 192
    8930:	90 e1       	ldi	r25, 0x10	; 16
    8932:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    8936:	d5 01       	movw	r26, r10
		
		if(frq>=1000 && frq <=100000)
    8938:	c4 01       	movw	r24, r8
    893a:	88 5e       	subi	r24, 0xE8	; 232
    893c:	93 40       	sbci	r25, 0x03	; 3
    893e:	a1 09       	sbc	r26, r1
    8940:	b1 09       	sbc	r27, r1
    8942:	89 3b       	cpi	r24, 0xB9	; 185
    8944:	92 48       	sbci	r25, 0x82	; 130
    8946:	a1 40       	sbci	r26, 0x01	; 1
    8948:	b1 05       	cpc	r27, r1
    894a:	b0 f4       	brcc	.+44     	; 0x8978 <_ZN8red_fang12check_stringEPc+0xa44>
    894c:	f7 01       	movw	r30, r14
		{
			if(beryl->crystal.configurar(frq))
    894e:	82 85       	ldd	r24, Z+10	; 0x0a
    8950:	93 85       	ldd	r25, Z+11	; 0x0b
    8952:	b5 01       	movw	r22, r10
    8954:	a4 01       	movw	r20, r8
    8956:	82 54       	subi	r24, 0x42	; 66
    8958:	9f 4f       	sbci	r25, 0xFF	; 255
    895a:	0e 94 6e 34 	call	0x68dc	; 0x68dc <_ZN11red_crystal10configurarEl>
    895e:	88 23       	and	r24, r24
    8960:	09 f4       	brne	.+2      	; 0x8964 <_ZN8red_fang12check_stringEPc+0xa30>
    8962:	08 cf       	rjmp	.-496    	; 0x8774 <_ZN8red_fang12check_stringEPc+0x840>
    8964:	60 e2       	ldi	r22, 0x20	; 32
			{
				Serial.println("Configuração da AD concluida com sucesso.");
    8966:	7e e0       	ldi	r23, 0x0E	; 14
    8968:	80 ec       	ldi	r24, 0xC0	; 192
    896a:	90 e1       	ldi	r25, 0x10	; 16
    896c:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    8970:	81 e0       	ldi	r24, 0x01	; 1
				_Req = true;
    8972:	f7 01       	movw	r30, r14
    8974:	81 83       	std	Z+1, r24	; 0x01
    8976:	07 c0       	rjmp	.+14     	; 0x8986 <_ZN8red_fang12check_stringEPc+0xa52>
    8978:	69 e6       	ldi	r22, 0x69	; 105
				Serial1.print("ERR");
			}*/
		}
		else
		{
			Serial.print("Valor de frequencia requerido não esta dentro dos limites validos, retornando ERRO.");
    897a:	7e e0       	ldi	r23, 0x0E	; 14
    897c:	80 ec       	ldi	r24, 0xC0	; 192
    897e:	90 e1       	ldi	r25, 0x10	; 16
    8980:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    8984:	fd ce       	rjmp	.-518    	; 0x8780 <_ZN8red_fang12check_stringEPc+0x84c>
    8986:	a5 96       	adiw	r28, 0x25	; 37
			if(Serial1.available()==0){
				i=10;
			}
		}
	}
}
    8988:	0f b6       	in	r0, 0x3f	; 63
    898a:	f8 94       	cli
    898c:	de bf       	out	0x3e, r29	; 62
    898e:	0f be       	out	0x3f, r0	; 63
    8990:	cd bf       	out	0x3d, r28	; 61
    8992:	df 91       	pop	r29
    8994:	cf 91       	pop	r28
    8996:	1f 91       	pop	r17
    8998:	0f 91       	pop	r16
    899a:	ff 90       	pop	r15
    899c:	ef 90       	pop	r14
    899e:	df 90       	pop	r13
    89a0:	cf 90       	pop	r12
    89a2:	bf 90       	pop	r11
    89a4:	af 90       	pop	r10
    89a6:	9f 90       	pop	r9
    89a8:	8f 90       	pop	r8
    89aa:	7f 90       	pop	r7
    89ac:	6f 90       	pop	r6
    89ae:	5f 90       	pop	r5
    89b0:	4f 90       	pop	r4
    89b2:	3f 90       	pop	r3
    89b4:	2f 90       	pop	r2
    89b6:	08 95       	ret

000089b8 <_ZN8red_fang10ler_serialEv>:
    89b8:	af 92       	push	r10
	Serial1.begin(9600);
	Serial.end();
}

void red_fang::ler_serial()
{	
    89ba:	bf 92       	push	r11
    89bc:	cf 92       	push	r12
    89be:	df 92       	push	r13
    89c0:	ef 92       	push	r14
    89c2:	ff 92       	push	r15
    89c4:	0f 93       	push	r16
    89c6:	1f 93       	push	r17
    89c8:	cf 93       	push	r28
    89ca:	df 93       	push	r29
    89cc:	00 d0       	rcall	.+0      	; 0x89ce <_ZN8red_fang10ler_serialEv+0x16>
    89ce:	1f 92       	push	r1
    89d0:	cd b7       	in	r28, 0x3d	; 61
    89d2:	de b7       	in	r29, 0x3e	; 62
    89d4:	8c 01       	movw	r16, r24
	if(_Get)
    89d6:	fc 01       	movw	r30, r24
    89d8:	80 81       	ld	r24, Z
    89da:	88 23       	and	r24, r24
    89dc:	31 f0       	breq	.+12     	; 0x89ea <_ZN8red_fang10ler_serialEv+0x32>
	{
		get(_num, _complex);
    89de:	60 85       	ldd	r22, Z+8	; 0x08
    89e0:	71 85       	ldd	r23, Z+9	; 0x09
    89e2:	42 81       	ldd	r20, Z+2	; 0x02
    89e4:	c8 01       	movw	r24, r16
    89e6:	38 d9       	rcall	.-3472   	; 0x7c58 <_ZN8red_fang3getEib>
    89e8:	7e c1       	rjmp	.+764    	; 0x8ce6 <_ZN8red_fang10ler_serialEv+0x32e>
	}
	else if(_Req)
    89ea:	f8 01       	movw	r30, r16
    89ec:	81 81       	ldd	r24, Z+1	; 0x01
    89ee:	88 23       	and	r24, r24
    89f0:	09 f4       	brne	.+2      	; 0x89f4 <_ZN8red_fang10ler_serialEv+0x3c>
    89f2:	15 c1       	rjmp	.+554    	; 0x8c1e <_ZN8red_fang10ler_serialEv+0x266>
	{
		static bool done = false;
		static leitura lt;
		static int limit = ((EEPROM.length()-3)/sizeof(leitura));
    89f4:	80 91 78 14 	lds	r24, 0x1478	; 0x801478 <_ZGVZN8red_fang10ler_serialEvE5limit>
    89f8:	81 11       	cpse	r24, r1
    89fa:	09 c0       	rjmp	.+18     	; 0x8a0e <_ZN8red_fang10ler_serialEv+0x56>
    89fc:	85 e2       	ldi	r24, 0x25	; 37
    89fe:	90 e0       	ldi	r25, 0x00	; 0
    8a00:	90 93 77 14 	sts	0x1477, r25	; 0x801477 <_ZZN8red_fang10ler_serialEvE5limit+0x1>
    8a04:	80 93 76 14 	sts	0x1476, r24	; 0x801476 <_ZZN8red_fang10ler_serialEvE5limit>
    8a08:	81 e0       	ldi	r24, 0x01	; 1
    8a0a:	80 93 78 14 	sts	0x1478, r24	; 0x801478 <_ZGVZN8red_fang10ler_serialEvE5limit>
		Serial.println("before reading");
    8a0e:	61 e4       	ldi	r22, 0x41	; 65
    8a10:	7f e0       	ldi	r23, 0x0F	; 15
    8a12:	80 ec       	ldi	r24, 0xC0	; 192
    8a14:	90 e1       	ldi	r25, 0x10	; 16
    8a16:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		
		if(!done)
    8a1a:	80 91 75 14 	lds	r24, 0x1475	; 0x801475 <_ZZN8red_fang10ler_serialEvE4done>
    8a1e:	81 11       	cpse	r24, r1
    8a20:	c7 c0       	rjmp	.+398    	; 0x8bb0 <_ZN8red_fang10ler_serialEv+0x1f8>
		{
			Serial.println("Começar leitura");
    8a22:	60 e5       	ldi	r22, 0x50	; 80
    8a24:	7f e0       	ldi	r23, 0x0F	; 15
    8a26:	80 ec       	ldi	r24, 0xC0	; 192
    8a28:	90 e1       	ldi	r25, 0x10	; 16
    8a2a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
			if(!beryl->crystal.lerAD(beryl->getPoint(), lt))
    8a2e:	f8 01       	movw	r30, r16
    8a30:	82 85       	ldd	r24, Z+10	; 0x0a
    8a32:	93 85       	ldd	r25, Z+11	; 0x0b
    8a34:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <_ZN9red_beryl8getPointEv>
    8a38:	f8 01       	movw	r30, r16
    8a3a:	22 85       	ldd	r18, Z+10	; 0x0a
    8a3c:	33 85       	ldd	r19, Z+11	; 0x0b
    8a3e:	47 e0       	ldi	r20, 0x07	; 7
    8a40:	54 e1       	ldi	r21, 0x14	; 20
    8a42:	bc 01       	movw	r22, r24
    8a44:	c9 01       	movw	r24, r18
    8a46:	82 54       	subi	r24, 0x42	; 66
    8a48:	9f 4f       	sbci	r25, 0xFF	; 255
    8a4a:	0e 94 7a 35 	call	0x6af4	; 0x6af4 <_ZN11red_crystal5lerADEiR8leituras>
    8a4e:	81 11       	cpse	r24, r1
    8a50:	0f c0       	rjmp	.+30     	; 0x8a70 <_ZN8red_fang10ler_serialEv+0xb8>
			{
				Serial.println("Falha na leitura");
    8a52:	61 e6       	ldi	r22, 0x61	; 97
    8a54:	7f e0       	ldi	r23, 0x0F	; 15
    8a56:	80 ec       	ldi	r24, 0xC0	; 192
    8a58:	90 e1       	ldi	r25, 0x10	; 16
    8a5a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				_Req = false;
    8a5e:	f8 01       	movw	r30, r16
    8a60:	11 82       	std	Z+1, r1	; 0x01
				Serial1.print("ERR");
    8a62:	6e e6       	ldi	r22, 0x6E	; 110
    8a64:	7c e0       	ldi	r23, 0x0C	; 12
    8a66:	86 ed       	ldi	r24, 0xD6	; 214
    8a68:	94 e1       	ldi	r25, 0x14	; 20
    8a6a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
				return;
    8a6e:	3b c1       	rjmp	.+630    	; 0x8ce6 <_ZN8red_fang10ler_serialEv+0x32e>
			} 
			else
			{
				lt.hora = beryl->clock.hora();
    8a70:	f8 01       	movw	r30, r16
    8a72:	82 85       	ldd	r24, Z+10	; 0x0a
    8a74:	93 85       	ldd	r25, Z+11	; 0x0b
    8a76:	8f 54       	subi	r24, 0x4F	; 79
    8a78:	9f 4f       	sbci	r25, 0xFF	; 255
    8a7a:	9e d1       	rcall	.+828    	; 0x8db8 <_ZN10red_quartz4horaEv>
    8a7c:	90 93 6c 14 	sts	0x146C, r25	; 0x80146c <_ZZN8red_fang10ler_serialEvE2lt+0x65>
    8a80:	80 93 6b 14 	sts	0x146B, r24	; 0x80146b <_ZZN8red_fang10ler_serialEvE2lt+0x64>
				lt.minuto = beryl->clock.minuto();
    8a84:	f8 01       	movw	r30, r16
    8a86:	82 85       	ldd	r24, Z+10	; 0x0a
    8a88:	93 85       	ldd	r25, Z+11	; 0x0b
    8a8a:	8f 54       	subi	r24, 0x4F	; 79
    8a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    8a8e:	90 d1       	rcall	.+800    	; 0x8db0 <_ZN10red_quartz6minutoEv>
    8a90:	90 93 6e 14 	sts	0x146E, r25	; 0x80146e <_ZZN8red_fang10ler_serialEvE2lt+0x67>
    8a94:	80 93 6d 14 	sts	0x146D, r24	; 0x80146d <_ZZN8red_fang10ler_serialEvE2lt+0x66>
				lt.dia = beryl->clock.dia();
    8a98:	f8 01       	movw	r30, r16
    8a9a:	82 85       	ldd	r24, Z+10	; 0x0a
    8a9c:	93 85       	ldd	r25, Z+11	; 0x0b
    8a9e:	8f 54       	subi	r24, 0x4F	; 79
    8aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    8aa2:	8e d1       	rcall	.+796    	; 0x8dc0 <_ZN10red_quartz3diaEv>
    8aa4:	90 93 70 14 	sts	0x1470, r25	; 0x801470 <_ZZN8red_fang10ler_serialEvE2lt+0x69>
    8aa8:	80 93 6f 14 	sts	0x146F, r24	; 0x80146f <_ZZN8red_fang10ler_serialEvE2lt+0x68>
				lt.mes = beryl->clock.mes();
    8aac:	f8 01       	movw	r30, r16
    8aae:	82 85       	ldd	r24, Z+10	; 0x0a
    8ab0:	93 85       	ldd	r25, Z+11	; 0x0b
    8ab2:	8f 54       	subi	r24, 0x4F	; 79
    8ab4:	9f 4f       	sbci	r25, 0xFF	; 255
    8ab6:	88 d1       	rcall	.+784    	; 0x8dc8 <_ZN10red_quartz3mesEv>
    8ab8:	90 93 72 14 	sts	0x1472, r25	; 0x801472 <_ZZN8red_fang10ler_serialEvE2lt+0x6b>
    8abc:	80 93 71 14 	sts	0x1471, r24	; 0x801471 <_ZZN8red_fang10ler_serialEvE2lt+0x6a>
				lt.ano = beryl->clock.ano();
    8ac0:	f8 01       	movw	r30, r16
    8ac2:	82 85       	ldd	r24, Z+10	; 0x0a
    8ac4:	93 85       	ldd	r25, Z+11	; 0x0b
    8ac6:	8f 54       	subi	r24, 0x4F	; 79
    8ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    8aca:	82 d1       	rcall	.+772    	; 0x8dd0 <_ZN10red_quartz3anoEv>
    8acc:	90 93 74 14 	sts	0x1474, r25	; 0x801474 <_ZZN8red_fang10ler_serialEvE2lt+0x6d>
    8ad0:	80 93 73 14 	sts	0x1473, r24	; 0x801473 <_ZZN8red_fang10ler_serialEvE2lt+0x6c>
							
				Serial.println("Leitura concluida.");
    8ad4:	62 e7       	ldi	r22, 0x72	; 114
    8ad6:	7f e0       	ldi	r23, 0x0F	; 15
    8ad8:	80 ec       	ldi	r24, 0xC0	; 192
    8ada:	90 e1       	ldi	r25, 0x10	; 16
    8adc:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
				
				if(EEPROM.read(0)>=limit)												// Se o numero de leitura for superior ao limite de memoria.
    8ae0:	0e 94 38 39 	call	0x7270	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    8ae4:	08 2f       	mov	r16, r24
    8ae6:	10 e0       	ldi	r17, 0x00	; 0
    8ae8:	20 91 76 14 	lds	r18, 0x1476	; 0x801476 <_ZZN8red_fang10ler_serialEvE5limit>
    8aec:	30 91 77 14 	lds	r19, 0x1477	; 0x801477 <_ZZN8red_fang10ler_serialEvE5limit+0x1>
    8af0:	02 17       	cp	r16, r18
    8af2:	13 07       	cpc	r17, r19
    8af4:	b4 f1       	brlt	.+108    	; 0x8b62 <_ZN8red_fang10ler_serialEv+0x1aa>
				{
					int tempPos=EEPROM.read(0)-limit;									// Cria uma variavel temporaria que recebe o valor de posição.
    8af6:	02 1b       	sub	r16, r18
    8af8:	13 0b       	sbc	r17, r19
					if(tempPos>=limit)
    8afa:	02 17       	cp	r16, r18
    8afc:	13 07       	cpc	r17, r19
    8afe:	14 f0       	brlt	.+4      	; 0x8b04 <_ZN8red_fang10ler_serialEv+0x14c>
					{
						tempPos-=limit;
    8b00:	02 1b       	sub	r16, r18
    8b02:	13 0b       	sbc	r17, r19
					}
					EEPROM.put((tempPos*sizeof(leitura))+1, lt);
    8b04:	2e e6       	ldi	r18, 0x6E	; 110
    8b06:	20 9f       	mul	r18, r16
    8b08:	c0 01       	movw	r24, r0
    8b0a:	21 9f       	mul	r18, r17
    8b0c:	90 0d       	add	r25, r0
    8b0e:	11 24       	eor	r1, r1
    8b10:	67 e0       	ldi	r22, 0x07	; 7
    8b12:	74 e1       	ldi	r23, 0x14	; 20
    8b14:	01 96       	adiw	r24, 0x01	; 1
    8b16:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.3>
					Serial.print("Sobreescreveu na posição ");
    8b1a:	6d e8       	ldi	r22, 0x8D	; 141
    8b1c:	78 e0       	ldi	r23, 0x08	; 8
    8b1e:	80 ec       	ldi	r24, 0xC0	; 192
    8b20:	90 e1       	ldi	r25, 0x10	; 16
    8b22:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
					Serial.print(tempPos+1);
    8b26:	b8 01       	movw	r22, r16
    8b28:	6f 5f       	subi	r22, 0xFF	; 255
    8b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b2c:	4a e0       	ldi	r20, 0x0A	; 10
    8b2e:	50 e0       	ldi	r21, 0x00	; 0
    8b30:	80 ec       	ldi	r24, 0xC0	; 192
    8b32:	90 e1       	ldi	r25, 0x10	; 16
    8b34:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
					Serial.println(".");
    8b38:	62 e0       	ldi	r22, 0x02	; 2
    8b3a:	77 e0       	ldi	r23, 0x07	; 7
    8b3c:	80 ec       	ldi	r24, 0xC0	; 192
    8b3e:	90 e1       	ldi	r25, 0x10	; 16
    8b40:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
					if(EEPROM.read(0)>=limit*2)
    8b44:	0e 94 38 39 	call	0x7270	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    8b48:	60 91 76 14 	lds	r22, 0x1476	; 0x801476 <_ZZN8red_fang10ler_serialEvE5limit>
    8b4c:	70 91 77 14 	lds	r23, 0x1477	; 0x801477 <_ZZN8red_fang10ler_serialEvE5limit+0x1>
    8b50:	48 2f       	mov	r20, r24
    8b52:	50 e0       	ldi	r21, 0x00	; 0
    8b54:	9b 01       	movw	r18, r22
    8b56:	22 0f       	add	r18, r18
    8b58:	33 1f       	adc	r19, r19
    8b5a:	42 17       	cp	r20, r18
    8b5c:	53 07       	cpc	r21, r19
    8b5e:	f4 f0       	brlt	.+60     	; 0x8b9c <_ZN8red_fang10ler_serialEv+0x1e4>
    8b60:	1f c0       	rjmp	.+62     	; 0x8ba0 <_ZN8red_fang10ler_serialEv+0x1e8>
					else
						EEPROM.write(0, EEPROM.read(0)+1);
				}
				else
				{
					EEPROM.put( ( ( EEPROM.read(0)*sizeof(leitura) )+1)  , lt);  		//salva a nova leitura na EEPROM.
    8b62:	fe e6       	ldi	r31, 0x6E	; 110
    8b64:	8f 9f       	mul	r24, r31
    8b66:	c0 01       	movw	r24, r0
    8b68:	11 24       	eor	r1, r1
    8b6a:	67 e0       	ldi	r22, 0x07	; 7
    8b6c:	74 e1       	ldi	r23, 0x14	; 20
    8b6e:	01 96       	adiw	r24, 0x01	; 1
    8b70:	0e 94 62 39 	call	0x72c4	; 0x72c4 <_ZN11EEPROMClass3putI8leiturasEERKT_iS4_.isra.3>
					Serial.println("Salvo na EEPROM ");
    8b74:	69 ea       	ldi	r22, 0xA9	; 169
    8b76:	78 e0       	ldi	r23, 0x08	; 8
    8b78:	80 ec       	ldi	r24, 0xC0	; 192
    8b7a:	90 e1       	ldi	r25, 0x10	; 16
    8b7c:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
					Serial.print(EEPROM.read(0)+1);
    8b80:	0e 94 38 39 	call	0x7270	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    8b84:	68 2f       	mov	r22, r24
    8b86:	70 e0       	ldi	r23, 0x00	; 0
    8b88:	6f 5f       	subi	r22, 0xFF	; 255
    8b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    8b8c:	4a e0       	ldi	r20, 0x0A	; 10
    8b8e:	50 e0       	ldi	r21, 0x00	; 0
    8b90:	80 ec       	ldi	r24, 0xC0	; 192
    8b92:	90 e1       	ldi	r25, 0x10	; 16
    8b94:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
					EEPROM.write(0 , ( EEPROM.read(0)+1 ));    							//o valor da posição '0' recebe 'i'.
    8b98:	0e 94 38 39 	call	0x7270	; 0x7270 <_ZN11EEPROMClass4readEi.isra.0.constprop.5>
    8b9c:	61 e0       	ldi	r22, 0x01	; 1
    8b9e:	68 0f       	add	r22, r24
    8ba0:	80 e0       	ldi	r24, 0x00	; 0
    8ba2:	90 e0       	ldi	r25, 0x00	; 0
    8ba4:	0e 94 36 39 	call	0x726c	; 0x726c <_ZN11EEPROMClass5writeEih.isra.1>
				}
				done=true;
    8ba8:	81 e0       	ldi	r24, 0x01	; 1
    8baa:	80 93 75 14 	sts	0x1475, r24	; 0x801475 <_ZZN8red_fang10ler_serialEvE4done>
    8bae:	9b c0       	rjmp	.+310    	; 0x8ce6 <_ZN8red_fang10ler_serialEv+0x32e>
				inf=0;
				_Req = false;
				done = false;
			}*/
			static int inf=0;
			if(!serialLeitura(lt, inf))
    8bb0:	80 91 06 14 	lds	r24, 0x1406	; 0x801406 <_ZZN8red_fang10ler_serialEvE3inf+0x1>
    8bb4:	8f 93       	push	r24
    8bb6:	80 91 05 14 	lds	r24, 0x1405	; 0x801405 <_ZZN8red_fang10ler_serialEvE3inf>
    8bba:	8f 93       	push	r24
    8bbc:	2d b7       	in	r18, 0x3d	; 61
    8bbe:	3e b7       	in	r19, 0x3e	; 62
    8bc0:	2e 56       	subi	r18, 0x6E	; 110
    8bc2:	31 09       	sbc	r19, r1
    8bc4:	0f b6       	in	r0, 0x3f	; 63
    8bc6:	f8 94       	cli
    8bc8:	3e bf       	out	0x3e, r19	; 62
    8bca:	0f be       	out	0x3f, r0	; 63
    8bcc:	2d bf       	out	0x3d, r18	; 61
    8bce:	ad b7       	in	r26, 0x3d	; 61
    8bd0:	be b7       	in	r27, 0x3e	; 62
    8bd2:	11 96       	adiw	r26, 0x01	; 1
    8bd4:	8e e6       	ldi	r24, 0x6E	; 110
    8bd6:	e7 e0       	ldi	r30, 0x07	; 7
    8bd8:	f4 e1       	ldi	r31, 0x14	; 20
    8bda:	01 90       	ld	r0, Z+
    8bdc:	0d 92       	st	X+, r0
    8bde:	8a 95       	dec	r24
    8be0:	e1 f7       	brne	.-8      	; 0x8bda <_ZN8red_fang10ler_serialEv+0x222>
    8be2:	c8 01       	movw	r24, r16
    8be4:	0e 94 bc 3a 	call	0x7578	; 0x7578 <_ZN8red_fang13serialLeituraE8leiturasi>
    8be8:	0f b6       	in	r0, 0x3f	; 63
    8bea:	f8 94       	cli
    8bec:	de bf       	out	0x3e, r29	; 62
    8bee:	0f be       	out	0x3f, r0	; 63
    8bf0:	cd bf       	out	0x3d, r28	; 61
    8bf2:	81 11       	cpse	r24, r1
    8bf4:	0a c0       	rjmp	.+20     	; 0x8c0a <_ZN8red_fang10ler_serialEv+0x252>
			{
				inf++;
    8bf6:	80 91 05 14 	lds	r24, 0x1405	; 0x801405 <_ZZN8red_fang10ler_serialEvE3inf>
    8bfa:	90 91 06 14 	lds	r25, 0x1406	; 0x801406 <_ZZN8red_fang10ler_serialEvE3inf+0x1>
    8bfe:	01 96       	adiw	r24, 0x01	; 1
    8c00:	90 93 06 14 	sts	0x1406, r25	; 0x801406 <_ZZN8red_fang10ler_serialEvE3inf+0x1>
    8c04:	80 93 05 14 	sts	0x1405, r24	; 0x801405 <_ZZN8red_fang10ler_serialEvE3inf>
    8c08:	6e c0       	rjmp	.+220    	; 0x8ce6 <_ZN8red_fang10ler_serialEv+0x32e>
			}
			else
			{
				inf=0;
    8c0a:	10 92 06 14 	sts	0x1406, r1	; 0x801406 <_ZZN8red_fang10ler_serialEvE3inf+0x1>
    8c0e:	10 92 05 14 	sts	0x1405, r1	; 0x801405 <_ZZN8red_fang10ler_serialEvE3inf>
				_Req = false;
    8c12:	f8 01       	movw	r30, r16
    8c14:	11 82       	std	Z+1, r1	; 0x01
				done = false;
    8c16:	10 92 75 14 	sts	0x1475, r1	; 0x801475 <_ZZN8red_fang10ler_serialEvE4done>
				_isBeingUsed = false;
    8c1a:	13 82       	std	Z+3, r1	; 0x03
    8c1c:	64 c0       	rjmp	.+200    	; 0x8ce6 <_ZN8red_fang10ler_serialEv+0x32e>
			}
		}
	}
	else if(Serial1.available()!=-1 && Serial1.available()!=  0 && Serial1.available()>=3)		//Se tiver algo na serial1.
    8c1e:	86 ed       	ldi	r24, 0xD6	; 214
    8c20:	94 e1       	ldi	r25, 0x14	; 20
    8c22:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8c26:	01 96       	adiw	r24, 0x01	; 1
    8c28:	09 f4       	brne	.+2      	; 0x8c2c <_ZN8red_fang10ler_serialEv+0x274>
    8c2a:	5d c0       	rjmp	.+186    	; 0x8ce6 <_ZN8red_fang10ler_serialEv+0x32e>
    8c2c:	86 ed       	ldi	r24, 0xD6	; 214
    8c2e:	94 e1       	ldi	r25, 0x14	; 20
    8c30:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8c34:	89 2b       	or	r24, r25
    8c36:	09 f4       	brne	.+2      	; 0x8c3a <_ZN8red_fang10ler_serialEv+0x282>
    8c38:	56 c0       	rjmp	.+172    	; 0x8ce6 <_ZN8red_fang10ler_serialEv+0x32e>
    8c3a:	86 ed       	ldi	r24, 0xD6	; 214
    8c3c:	94 e1       	ldi	r25, 0x14	; 20
    8c3e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8c42:	03 97       	sbiw	r24, 0x03	; 3
    8c44:	0c f4       	brge	.+2      	; 0x8c48 <_ZN8red_fang10ler_serialEv+0x290>
    8c46:	4f c0       	rjmp	.+158    	; 0x8ce6 <_ZN8red_fang10ler_serialEv+0x32e>
	{
		char comStr[4];
		int i=0;
		Serial.print("Serial1 enviou algo: "); Serial.print(Serial1.available()); Serial.println(" caracteres.");
    8c48:	65 e8       	ldi	r22, 0x85	; 133
    8c4a:	7f e0       	ldi	r23, 0x0F	; 15
    8c4c:	80 ec       	ldi	r24, 0xC0	; 192
    8c4e:	90 e1       	ldi	r25, 0x10	; 16
    8c50:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    8c54:	86 ed       	ldi	r24, 0xD6	; 214
    8c56:	94 e1       	ldi	r25, 0x14	; 20
    8c58:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8c5c:	4a e0       	ldi	r20, 0x0A	; 10
    8c5e:	50 e0       	ldi	r21, 0x00	; 0
    8c60:	bc 01       	movw	r22, r24
    8c62:	80 ec       	ldi	r24, 0xC0	; 192
    8c64:	90 e1       	ldi	r25, 0x10	; 16
    8c66:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
    8c6a:	6b e9       	ldi	r22, 0x9B	; 155
    8c6c:	7f e0       	ldi	r23, 0x0F	; 15
    8c6e:	80 ec       	ldi	r24, 0xC0	; 192
    8c70:	90 e1       	ldi	r25, 0x10	; 16
    8c72:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    8c76:	ce 01       	movw	r24, r28
    8c78:	01 96       	adiw	r24, 0x01	; 1
    8c7a:	7c 01       	movw	r14, r24
		}
	}
	else if(Serial1.available()!=-1 && Serial1.available()!=  0 && Serial1.available()>=3)		//Se tiver algo na serial1.
	{
		char comStr[4];
		int i=0;
    8c7c:	c1 2c       	mov	r12, r1
    8c7e:	d1 2c       	mov	r13, r1
    8c80:	5c 01       	movw	r10, r24
		Serial.print("Serial1 enviou algo: "); Serial.print(Serial1.available()); Serial.println(" caracteres.");
		while(Serial1.available()>0 && i<3 )
    8c82:	86 ed       	ldi	r24, 0xD6	; 214
    8c84:	94 e1       	ldi	r25, 0x14	; 20
    8c86:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    8c8a:	18 16       	cp	r1, r24
    8c8c:	19 06       	cpc	r1, r25
    8c8e:	ec f4       	brge	.+58     	; 0x8cca <_ZN8red_fang10ler_serialEv+0x312>
    8c90:	23 e0       	ldi	r18, 0x03	; 3
    8c92:	c2 16       	cp	r12, r18
    8c94:	d1 04       	cpc	r13, r1
    8c96:	c9 f0       	breq	.+50     	; 0x8cca <_ZN8red_fang10ler_serialEv+0x312>
		{
			Serial.print(i);
    8c98:	4a e0       	ldi	r20, 0x0A	; 10
    8c9a:	50 e0       	ldi	r21, 0x00	; 0
    8c9c:	b6 01       	movw	r22, r12
    8c9e:	80 ec       	ldi	r24, 0xC0	; 192
    8ca0:	90 e1       	ldi	r25, 0x10	; 16
    8ca2:	0e 94 33 08 	call	0x1066	; 0x1066 <_ZN5Print5printEii>
			comStr[i]=Serial1.read();
    8ca6:	86 ed       	ldi	r24, 0xD6	; 214
    8ca8:	94 e1       	ldi	r25, 0x14	; 20
    8caa:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14HardwareSerial4readEv>
    8cae:	f7 01       	movw	r30, r14
    8cb0:	81 93       	st	Z+, r24
    8cb2:	7f 01       	movw	r14, r30
			Serial.print(comStr[i]);
    8cb4:	68 2f       	mov	r22, r24
    8cb6:	80 ec       	ldi	r24, 0xC0	; 192
    8cb8:	90 e1       	ldi	r25, 0x10	; 16
    8cba:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN5Print5printEc>
			i++;
    8cbe:	ff ef       	ldi	r31, 0xFF	; 255
    8cc0:	cf 1a       	sub	r12, r31
    8cc2:	df 0a       	sbc	r13, r31
			comStr[i]= '\0';
    8cc4:	f7 01       	movw	r30, r14
    8cc6:	10 82       	st	Z, r1
	else if(Serial1.available()!=-1 && Serial1.available()!=  0 && Serial1.available()>=3)		//Se tiver algo na serial1.
	{
		char comStr[4];
		int i=0;
		Serial.print("Serial1 enviou algo: "); Serial.print(Serial1.available()); Serial.println(" caracteres.");
		while(Serial1.available()>0 && i<3 )
    8cc8:	dc cf       	rjmp	.-72     	; 0x8c82 <_ZN8red_fang10ler_serialEv+0x2ca>
			comStr[i]=Serial1.read();
			Serial.print(comStr[i]);
			i++;
			comStr[i]= '\0';
		}
		Serial.println("");
    8cca:	6e e5       	ldi	r22, 0x5E	; 94
    8ccc:	74 e0       	ldi	r23, 0x04	; 4
    8cce:	80 ec       	ldi	r24, 0xC0	; 192
    8cd0:	90 e1       	ldi	r25, 0x10	; 16
    8cd2:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		Serial.println(comStr);
    8cd6:	b5 01       	movw	r22, r10
    8cd8:	80 ec       	ldi	r24, 0xC0	; 192
    8cda:	90 e1       	ldi	r25, 0x10	; 16
    8cdc:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
		check_string(comStr);
    8ce0:	b5 01       	movw	r22, r10
    8ce2:	c8 01       	movw	r24, r16
    8ce4:	27 d9       	rcall	.-3506   	; 0x7f34 <_ZN8red_fang12check_stringEPc>
	}
}
    8ce6:	0f 90       	pop	r0
    8ce8:	0f 90       	pop	r0
    8cea:	0f 90       	pop	r0
    8cec:	0f 90       	pop	r0
    8cee:	df 91       	pop	r29
    8cf0:	cf 91       	pop	r28
    8cf2:	1f 91       	pop	r17
    8cf4:	0f 91       	pop	r16
    8cf6:	ff 90       	pop	r15
    8cf8:	ef 90       	pop	r14
    8cfa:	df 90       	pop	r13
    8cfc:	cf 90       	pop	r12
    8cfe:	bf 90       	pop	r11
    8d00:	af 90       	pop	r10
    8d02:	08 95       	ret

00008d04 <_ZN10red_quartzC1Ev>:
	_ano 		= time.getYear();
}
int red_quartz::segundo()
{
	return _segundo;
}
    8d04:	0c 96       	adiw	r24, 0x0c	; 12
    8d06:	0e 94 53 56 	call	0xaca6	; 0xaca6 <_ZN6DS3231C1Ev>
    8d0a:	68 ea       	ldi	r22, 0xA8	; 168
    8d0c:	7f e0       	ldi	r23, 0x0F	; 15
    8d0e:	80 ec       	ldi	r24, 0xC0	; 192
    8d10:	90 e1       	ldi	r25, 0x10	; 16
    8d12:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_ZN5Print7printlnEPKc>

00008d16 <_ZN10red_quartz4initEv>:
    8d16:	ef 92       	push	r14
    8d18:	ff 92       	push	r15
    8d1a:	0f 93       	push	r16
    8d1c:	1f 93       	push	r17
    8d1e:	cf 93       	push	r28
    8d20:	df 93       	push	r29
    8d22:	1f 92       	push	r1
    8d24:	cd b7       	in	r28, 0x3d	; 61
    8d26:	de b7       	in	r29, 0x3e	; 62
    8d28:	8c 01       	movw	r16, r24
    8d2a:	60 ed       	ldi	r22, 0xD0	; 208
    8d2c:	7f e0       	ldi	r23, 0x0F	; 15
    8d2e:	80 ec       	ldi	r24, 0xC0	; 192
    8d30:	90 e1       	ldi	r25, 0x10	; 16
    8d32:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    8d36:	78 01       	movw	r14, r16
    8d38:	8c e0       	ldi	r24, 0x0C	; 12
    8d3a:	e8 0e       	add	r14, r24
    8d3c:	f1 1c       	adc	r15, r1
    8d3e:	c7 01       	movw	r24, r14
    8d40:	0e 94 54 56 	call	0xaca8	; 0xaca8 <_ZN6DS32319getSecondEv>
    8d44:	90 e0       	ldi	r25, 0x00	; 0
    8d46:	f8 01       	movw	r30, r16
    8d48:	91 83       	std	Z+1, r25	; 0x01
    8d4a:	80 83       	st	Z, r24
    8d4c:	c7 01       	movw	r24, r14
    8d4e:	0e 94 78 56 	call	0xacf0	; 0xacf0 <_ZN6DS32319getMinuteEv>
    8d52:	90 e0       	ldi	r25, 0x00	; 0
    8d54:	f8 01       	movw	r30, r16
    8d56:	93 83       	std	Z+3, r25	; 0x03
    8d58:	82 83       	std	Z+2, r24	; 0x02
    8d5a:	ae 01       	movw	r20, r28
    8d5c:	4f 5f       	subi	r20, 0xFF	; 255
    8d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    8d60:	ba 01       	movw	r22, r20
    8d62:	c7 01       	movw	r24, r14
    8d64:	0e 94 9c 56 	call	0xad38	; 0xad38 <_ZN6DS32317getHourERbS0_>
    8d68:	90 e0       	ldi	r25, 0x00	; 0
    8d6a:	f8 01       	movw	r30, r16
    8d6c:	95 83       	std	Z+5, r25	; 0x05
    8d6e:	84 83       	std	Z+4, r24	; 0x04
    8d70:	c7 01       	movw	r24, r14
    8d72:	0e 94 e5 56 	call	0xadca	; 0xadca <_ZN6DS32317getDateEv>
    8d76:	90 e0       	ldi	r25, 0x00	; 0
    8d78:	f8 01       	movw	r30, r16
    8d7a:	97 83       	std	Z+7, r25	; 0x07
    8d7c:	86 83       	std	Z+6, r24	; 0x06
    8d7e:	be 01       	movw	r22, r28
    8d80:	6f 5f       	subi	r22, 0xFF	; 255
    8d82:	7f 4f       	sbci	r23, 0xFF	; 255
    8d84:	c7 01       	movw	r24, r14
    8d86:	0e 94 09 57 	call	0xae12	; 0xae12 <_ZN6DS32318getMonthERb>
    8d8a:	90 e0       	ldi	r25, 0x00	; 0
    8d8c:	f8 01       	movw	r30, r16
    8d8e:	91 87       	std	Z+9, r25	; 0x09
    8d90:	80 87       	std	Z+8, r24	; 0x08
    8d92:	c7 01       	movw	r24, r14
    8d94:	0e 94 3a 57 	call	0xae74	; 0xae74 <_ZN6DS32317getYearEv>
    8d98:	90 e0       	ldi	r25, 0x00	; 0
    8d9a:	f8 01       	movw	r30, r16
    8d9c:	93 87       	std	Z+11, r25	; 0x0b
    8d9e:	82 87       	std	Z+10, r24	; 0x0a
    8da0:	0f 90       	pop	r0
    8da2:	df 91       	pop	r29
    8da4:	cf 91       	pop	r28
    8da6:	1f 91       	pop	r17
    8da8:	0f 91       	pop	r16
    8daa:	ff 90       	pop	r15
    8dac:	ef 90       	pop	r14
    8dae:	08 95       	ret

00008db0 <_ZN10red_quartz6minutoEv>:
int red_quartz::minuto()
{
	return _minuto;
}
    8db0:	fc 01       	movw	r30, r24
    8db2:	82 81       	ldd	r24, Z+2	; 0x02
    8db4:	93 81       	ldd	r25, Z+3	; 0x03
    8db6:	08 95       	ret

00008db8 <_ZN10red_quartz4horaEv>:
int red_quartz::hora()
{
	return _hora;
}
    8db8:	fc 01       	movw	r30, r24
    8dba:	84 81       	ldd	r24, Z+4	; 0x04
    8dbc:	95 81       	ldd	r25, Z+5	; 0x05
    8dbe:	08 95       	ret

00008dc0 <_ZN10red_quartz3diaEv>:
int red_quartz::dia()
{
	return _dia;
}
    8dc0:	fc 01       	movw	r30, r24
    8dc2:	86 81       	ldd	r24, Z+6	; 0x06
    8dc4:	97 81       	ldd	r25, Z+7	; 0x07
    8dc6:	08 95       	ret

00008dc8 <_ZN10red_quartz3mesEv>:
int red_quartz::mes()
{
	return _mes;
}
    8dc8:	fc 01       	movw	r30, r24
    8dca:	80 85       	ldd	r24, Z+8	; 0x08
    8dcc:	91 85       	ldd	r25, Z+9	; 0x09
    8dce:	08 95       	ret

00008dd0 <_ZN10red_quartz3anoEv>:
int red_quartz::ano()
{
	return _ano;
}
    8dd0:	fc 01       	movw	r30, r24
    8dd2:	82 85       	ldd	r24, Z+10	; 0x0a
    8dd4:	93 85       	ldd	r25, Z+11	; 0x0b
    8dd6:	08 95       	ret

00008dd8 <_ZN10red_quartz9data_horaEb>:
char* red_quartz::data_hora(bool completo)					//recebe um bool que define se retorna apenas hora ou hora e data
{
    8dd8:	ef 92       	push	r14
    8dda:	ff 92       	push	r15
    8ddc:	0f 93       	push	r16
    8dde:	1f 93       	push	r17
    8de0:	cf 93       	push	r28
    8de2:	df 93       	push	r29
    8de4:	cd b7       	in	r28, 0x3d	; 61
    8de6:	de b7       	in	r29, 0x3e	; 62
    8de8:	64 97       	sbiw	r28, 0x14	; 20
    8dea:	0f b6       	in	r0, 0x3f	; 63
    8dec:	f8 94       	cli
    8dee:	de bf       	out	0x3e, r29	; 62
    8df0:	0f be       	out	0x3f, r0	; 63
    8df2:	cd bf       	out	0x3d, r28	; 61
    8df4:	7c 01       	movw	r14, r24
	if(completo){											//se o bool [completo] for true, retorna data e hora,[00/00/00-00:00]14 caracteres+finalizador=15 caracteres.
    8df6:	66 23       	and	r22, r22
    8df8:	09 f4       	brne	.+2      	; 0x8dfc <_ZN10red_quartz9data_horaEb+0x24>
    8dfa:	7a c0       	rjmp	.+244    	; 0x8ef0 <_ZN10red_quartz9data_horaEb+0x118>
		char *tempStr = (char*)malloc(sizeof(char) * 15);			//inicializa e aloca memoria para o array de char tempStr que será retornado.
    8dfc:	8f e0       	ldi	r24, 0x0F	; 15
    8dfe:	90 e0       	ldi	r25, 0x00	; 0
    8e00:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <malloc>
    8e04:	8c 01       	movw	r16, r24
    8e06:	4a e0       	ldi	r20, 0x0A	; 10
    8e08:	be 01       	movw	r22, r28
    8e0a:	6f 5f       	subi	r22, 0xFF	; 255
    8e0c:	7f 4f       	sbci	r23, 0xFF	; 255
    8e0e:	f7 01       	movw	r30, r14
    8e10:	86 81       	ldd	r24, Z+6	; 0x06
    8e12:	97 81       	ldd	r25, Z+7	; 0x07
    8e14:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
		char filler[20];									//inicializa filler para construir a string.
		itoa(_dia, filler, 10);								//traduz o valor int de _dia para filler.
		if(_dia<10){										//se _dia for menor que 10.
    8e18:	f7 01       	movw	r30, r14
    8e1a:	86 81       	ldd	r24, Z+6	; 0x06
    8e1c:	97 81       	ldd	r25, Z+7	; 0x07
    8e1e:	0a 97       	sbiw	r24, 0x0a	; 10
    8e20:	64 f4       	brge	.+24     	; 0x8e3a <_ZN10red_quartz9data_horaEb+0x62>
			strcpy(tempStr, "0");							//string recebe zero.
    8e22:	65 ef       	ldi	r22, 0xF5	; 245
    8e24:	76 e0       	ldi	r23, 0x06	; 6
    8e26:	c8 01       	movw	r24, r16
    8e28:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			strcat(tempStr, filler);						//valor de filler[dia] adicionado ao final da string.
    8e2c:	be 01       	movw	r22, r28
    8e2e:	6f 5f       	subi	r22, 0xFF	; 255
    8e30:	7f 4f       	sbci	r23, 0xFF	; 255
    8e32:	c8 01       	movw	r24, r16
    8e34:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8e38:	06 c0       	rjmp	.+12     	; 0x8e46 <_ZN10red_quartz9data_horaEb+0x6e>
		}
		else{												//se _dia for pelo menos 10.
			strcpy(tempStr, filler);						//string recebe filler[dia]
    8e3a:	be 01       	movw	r22, r28
    8e3c:	6f 5f       	subi	r22, 0xFF	; 255
    8e3e:	7f 4f       	sbci	r23, 0xFF	; 255
    8e40:	c8 01       	movw	r24, r16
    8e42:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
		}
		strcat(tempStr, "/");								//adiciona separador de data ao final da string.
    8e46:	64 ea       	ldi	r22, 0xA4	; 164
    8e48:	75 e0       	ldi	r23, 0x05	; 5
    8e4a:	c8 01       	movw	r24, r16
    8e4c:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8e50:	4a e0       	ldi	r20, 0x0A	; 10
    8e52:	be 01       	movw	r22, r28
    8e54:	6f 5f       	subi	r22, 0xFF	; 255
    8e56:	7f 4f       	sbci	r23, 0xFF	; 255
    8e58:	f7 01       	movw	r30, r14
    8e5a:	80 85       	ldd	r24, Z+8	; 0x08
    8e5c:	91 85       	ldd	r25, Z+9	; 0x09
    8e5e:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
		
		itoa(_mes, filler, 10);								//traduz o valor int de _mes para filler.
		if(_mes<10){										//se _mes for menor que 10.
    8e62:	f7 01       	movw	r30, r14
    8e64:	80 85       	ldd	r24, Z+8	; 0x08
    8e66:	91 85       	ldd	r25, Z+9	; 0x09
    8e68:	0a 97       	sbiw	r24, 0x0a	; 10
    8e6a:	2c f4       	brge	.+10     	; 0x8e76 <_ZN10red_quartz9data_horaEb+0x9e>
			strcat(tempStr, "0");							//zero é adicionado ao fim da string.
    8e6c:	65 ef       	ldi	r22, 0xF5	; 245
    8e6e:	76 e0       	ldi	r23, 0x06	; 6
    8e70:	c8 01       	movw	r24, r16
    8e72:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
		}
		strcat(tempStr, filler);							//valor de filler[mes] adicionado ao final da string.
    8e76:	be 01       	movw	r22, r28
    8e78:	6f 5f       	subi	r22, 0xFF	; 255
    8e7a:	7f 4f       	sbci	r23, 0xFF	; 255
    8e7c:	c8 01       	movw	r24, r16
    8e7e:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
		strcat(tempStr, "/");								//adiciona separador de data ao final da string.
    8e82:	64 ea       	ldi	r22, 0xA4	; 164
    8e84:	75 e0       	ldi	r23, 0x05	; 5
    8e86:	c8 01       	movw	r24, r16
    8e88:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8e8c:	4a e0       	ldi	r20, 0x0A	; 10
    8e8e:	be 01       	movw	r22, r28
    8e90:	6f 5f       	subi	r22, 0xFF	; 255
    8e92:	7f 4f       	sbci	r23, 0xFF	; 255
    8e94:	f7 01       	movw	r30, r14
    8e96:	82 85       	ldd	r24, Z+10	; 0x0a
    8e98:	93 85       	ldd	r25, Z+11	; 0x0b
    8e9a:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
		
		itoa(_ano, filler, 10);								//traduz o valor int de _ano para filler.
		if(_ano<10){										//se o _ano for menor que 10.
    8e9e:	f7 01       	movw	r30, r14
    8ea0:	82 85       	ldd	r24, Z+10	; 0x0a
    8ea2:	93 85       	ldd	r25, Z+11	; 0x0b
    8ea4:	0a 97       	sbiw	r24, 0x0a	; 10
    8ea6:	2c f4       	brge	.+10     	; 0x8eb2 <_ZN10red_quartz9data_horaEb+0xda>
			strcat(tempStr, "0");							//zero é adicionado ao fim da string.
    8ea8:	65 ef       	ldi	r22, 0xF5	; 245
    8eaa:	76 e0       	ldi	r23, 0x06	; 6
    8eac:	c8 01       	movw	r24, r16
    8eae:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
		}
		strcat(tempStr, filler);							//valor de filler[ano] adicionado ao final da string.
    8eb2:	be 01       	movw	r22, r28
    8eb4:	6f 5f       	subi	r22, 0xFF	; 255
    8eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    8eb8:	c8 01       	movw	r24, r16
    8eba:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
		strcat(tempStr, " ");								//adiciona um espaço vazio como separador.
    8ebe:	6f eb       	ldi	r22, 0xBF	; 191
    8ec0:	74 e0       	ldi	r23, 0x04	; 4
    8ec2:	c8 01       	movw	r24, r16
    8ec4:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8ec8:	4a e0       	ldi	r20, 0x0A	; 10
    8eca:	be 01       	movw	r22, r28
    8ecc:	6f 5f       	subi	r22, 0xFF	; 255
    8ece:	7f 4f       	sbci	r23, 0xFF	; 255
    8ed0:	f7 01       	movw	r30, r14
    8ed2:	84 81       	ldd	r24, Z+4	; 0x04
    8ed4:	95 81       	ldd	r25, Z+5	; 0x05
    8ed6:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
		
		itoa(_hora, filler, 10);							//traduz o valor int de _hora para filler.
		if(_hora<10){										//se _hora for menor que 10.
    8eda:	f7 01       	movw	r30, r14
    8edc:	84 81       	ldd	r24, Z+4	; 0x04
    8ede:	95 81       	ldd	r25, Z+5	; 0x05
    8ee0:	0a 97       	sbiw	r24, 0x0a	; 10
    8ee2:	f4 f4       	brge	.+60     	; 0x8f20 <_ZN10red_quartz9data_horaEb+0x148>
			strcat(tempStr, "0");							//string recebe zero.
    8ee4:	65 ef       	ldi	r22, 0xF5	; 245
    8ee6:	76 e0       	ldi	r23, 0x06	; 6
    8ee8:	c8 01       	movw	r24, r16
    8eea:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8eee:	18 c0       	rjmp	.+48     	; 0x8f20 <_ZN10red_quartz9data_horaEb+0x148>
		strcat(tempStr, filler);							//valor de filler[minuto] adicionado ao final da string.
		
		return tempStr;										//RETORNA STRING.
	}
	else{													//se o bool [completo] for false, retorna apenas hora [00:00]5 caracteres+finalizador=6.
		char *tempStr = (char*)malloc(sizeof(char) * 6);			//inicializa e aloca memoria para o array de char tempStr que será retornado.
    8ef0:	86 e0       	ldi	r24, 0x06	; 6
    8ef2:	90 e0       	ldi	r25, 0x00	; 0
    8ef4:	0e 94 e6 5e 	call	0xbdcc	; 0xbdcc <malloc>
    8ef8:	8c 01       	movw	r16, r24
    8efa:	4a e0       	ldi	r20, 0x0A	; 10
    8efc:	be 01       	movw	r22, r28
    8efe:	6f 5f       	subi	r22, 0xFF	; 255
    8f00:	7f 4f       	sbci	r23, 0xFF	; 255
    8f02:	f7 01       	movw	r30, r14
    8f04:	84 81       	ldd	r24, Z+4	; 0x04
    8f06:	95 81       	ldd	r25, Z+5	; 0x05
    8f08:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
		char filler[20];									//inicializa filler para construir a string.
		itoa(_hora, filler, 10);							//traduz o valor int de _hora para filler.
		if(_hora<10){										//se _hora for menor que 10.
    8f0c:	f7 01       	movw	r30, r14
    8f0e:	84 81       	ldd	r24, Z+4	; 0x04
    8f10:	95 81       	ldd	r25, Z+5	; 0x05
    8f12:	0a 97       	sbiw	r24, 0x0a	; 10
    8f14:	64 f4       	brge	.+24     	; 0x8f2e <_ZN10red_quartz9data_horaEb+0x156>
			strcpy(tempStr, "0");							//string recebe zero.
    8f16:	65 ef       	ldi	r22, 0xF5	; 245
    8f18:	76 e0       	ldi	r23, 0x06	; 6
    8f1a:	c8 01       	movw	r24, r16
    8f1c:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
			strcat(tempStr, filler);						//valor de filler[hora] adicionado ao final da string.
    8f20:	be 01       	movw	r22, r28
    8f22:	6f 5f       	subi	r22, 0xFF	; 255
    8f24:	7f 4f       	sbci	r23, 0xFF	; 255
    8f26:	c8 01       	movw	r24, r16
    8f28:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8f2c:	06 c0       	rjmp	.+12     	; 0x8f3a <_ZN10red_quartz9data_horaEb+0x162>
		}
		else{												//se _hora for pelo menos 10.
			strcpy(tempStr, filler);						//string recebe filler[hora]
    8f2e:	be 01       	movw	r22, r28
    8f30:	6f 5f       	subi	r22, 0xFF	; 255
    8f32:	7f 4f       	sbci	r23, 0xFF	; 255
    8f34:	c8 01       	movw	r24, r16
    8f36:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <strcpy>
		}
		strcat(tempStr, ":");								//adiciona separador de hora ao final da string.
    8f3a:	69 e2       	ldi	r22, 0x29	; 41
    8f3c:	78 e0       	ldi	r23, 0x08	; 8
    8f3e:	c8 01       	movw	r24, r16
    8f40:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
    8f44:	4a e0       	ldi	r20, 0x0A	; 10
    8f46:	be 01       	movw	r22, r28
    8f48:	6f 5f       	subi	r22, 0xFF	; 255
    8f4a:	7f 4f       	sbci	r23, 0xFF	; 255
    8f4c:	f7 01       	movw	r30, r14
    8f4e:	82 81       	ldd	r24, Z+2	; 0x02
    8f50:	93 81       	ldd	r25, Z+3	; 0x03
    8f52:	0e 94 59 61 	call	0xc2b2	; 0xc2b2 <__itoa_ncheck>
		
		itoa(_minuto, filler, 10);							//traduz o valor int de _minuto para filler.
		if(_minuto<10){										//se _minuto for menor que 10.
    8f56:	f7 01       	movw	r30, r14
    8f58:	82 81       	ldd	r24, Z+2	; 0x02
    8f5a:	93 81       	ldd	r25, Z+3	; 0x03
    8f5c:	0a 97       	sbiw	r24, 0x0a	; 10
    8f5e:	2c f4       	brge	.+10     	; 0x8f6a <_ZN10red_quartz9data_horaEb+0x192>
			strcat(tempStr, "0");							//zero é adicionado ao fim da string.
    8f60:	65 ef       	ldi	r22, 0xF5	; 245
    8f62:	76 e0       	ldi	r23, 0x06	; 6
    8f64:	c8 01       	movw	r24, r16
    8f66:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
		}
		strcat(tempStr, filler);							//valor de filler[minuto] adicionado ao final da string.
    8f6a:	be 01       	movw	r22, r28
    8f6c:	6f 5f       	subi	r22, 0xFF	; 255
    8f6e:	7f 4f       	sbci	r23, 0xFF	; 255
    8f70:	c8 01       	movw	r24, r16
    8f72:	0e 94 3e 61 	call	0xc27c	; 0xc27c <strcat>
		
		return tempStr;										//RETORNA STRING.
    8f76:	c8 01       	movw	r24, r16
	}
}
    8f78:	64 96       	adiw	r28, 0x14	; 20
    8f7a:	0f b6       	in	r0, 0x3f	; 63
    8f7c:	f8 94       	cli
    8f7e:	de bf       	out	0x3e, r29	; 62
    8f80:	0f be       	out	0x3f, r0	; 63
    8f82:	cd bf       	out	0x3d, r28	; 61
    8f84:	df 91       	pop	r29
    8f86:	cf 91       	pop	r28
    8f88:	1f 91       	pop	r17
    8f8a:	0f 91       	pop	r16
    8f8c:	ff 90       	pop	r15
    8f8e:	ef 90       	pop	r14
    8f90:	08 95       	ret

00008f92 <_ZN10red_quartz9checkTimeEv>:
	
void red_quartz::checkTime()
{
    8f92:	ef 92       	push	r14
    8f94:	ff 92       	push	r15
    8f96:	0f 93       	push	r16
    8f98:	1f 93       	push	r17
    8f9a:	cf 93       	push	r28
    8f9c:	df 93       	push	r29
    8f9e:	1f 92       	push	r1
    8fa0:	cd b7       	in	r28, 0x3d	; 61
    8fa2:	de b7       	in	r29, 0x3e	; 62
    8fa4:	8c 01       	movw	r16, r24
	bool dummy;
	_segundo 	= time.getSecond();
    8fa6:	7c 01       	movw	r14, r24
    8fa8:	8c e0       	ldi	r24, 0x0C	; 12
    8faa:	e8 0e       	add	r14, r24
    8fac:	f1 1c       	adc	r15, r1
    8fae:	c7 01       	movw	r24, r14
    8fb0:	0e 94 54 56 	call	0xaca8	; 0xaca8 <_ZN6DS32319getSecondEv>
    8fb4:	90 e0       	ldi	r25, 0x00	; 0
    8fb6:	f8 01       	movw	r30, r16
    8fb8:	91 83       	std	Z+1, r25	; 0x01
    8fba:	80 83       	st	Z, r24
	_minuto 	= time.getMinute();
    8fbc:	c7 01       	movw	r24, r14
    8fbe:	0e 94 78 56 	call	0xacf0	; 0xacf0 <_ZN6DS32319getMinuteEv>
    8fc2:	90 e0       	ldi	r25, 0x00	; 0
    8fc4:	f8 01       	movw	r30, r16
    8fc6:	93 83       	std	Z+3, r25	; 0x03
    8fc8:	82 83       	std	Z+2, r24	; 0x02
	_hora 		= time.getHour(dummy, dummy);
    8fca:	ae 01       	movw	r20, r28
    8fcc:	4f 5f       	subi	r20, 0xFF	; 255
    8fce:	5f 4f       	sbci	r21, 0xFF	; 255
    8fd0:	ba 01       	movw	r22, r20
    8fd2:	c7 01       	movw	r24, r14
    8fd4:	0e 94 9c 56 	call	0xad38	; 0xad38 <_ZN6DS32317getHourERbS0_>
    8fd8:	90 e0       	ldi	r25, 0x00	; 0
    8fda:	f8 01       	movw	r30, r16
    8fdc:	95 83       	std	Z+5, r25	; 0x05
    8fde:	84 83       	std	Z+4, r24	; 0x04
	_dia 		= time.getDate();
    8fe0:	c7 01       	movw	r24, r14
    8fe2:	0e 94 e5 56 	call	0xadca	; 0xadca <_ZN6DS32317getDateEv>
    8fe6:	90 e0       	ldi	r25, 0x00	; 0
    8fe8:	f8 01       	movw	r30, r16
    8fea:	97 83       	std	Z+7, r25	; 0x07
    8fec:	86 83       	std	Z+6, r24	; 0x06
	_mes 		= time.getMonth(dummy);
    8fee:	be 01       	movw	r22, r28
    8ff0:	6f 5f       	subi	r22, 0xFF	; 255
    8ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ff4:	c7 01       	movw	r24, r14
    8ff6:	0e 94 09 57 	call	0xae12	; 0xae12 <_ZN6DS32318getMonthERb>
    8ffa:	90 e0       	ldi	r25, 0x00	; 0
    8ffc:	f8 01       	movw	r30, r16
    8ffe:	91 87       	std	Z+9, r25	; 0x09
    9000:	80 87       	std	Z+8, r24	; 0x08
	_ano 		= time.getYear();
    9002:	c7 01       	movw	r24, r14
    9004:	0e 94 3a 57 	call	0xae74	; 0xae74 <_ZN6DS32317getYearEv>
    9008:	90 e0       	ldi	r25, 0x00	; 0
    900a:	f8 01       	movw	r30, r16
    900c:	93 87       	std	Z+11, r25	; 0x0b
    900e:	82 87       	std	Z+10, r24	; 0x0a
}
    9010:	0f 90       	pop	r0
    9012:	df 91       	pop	r29
    9014:	cf 91       	pop	r28
    9016:	1f 91       	pop	r17
    9018:	0f 91       	pop	r16
    901a:	ff 90       	pop	r15
    901c:	ef 90       	pop	r14
    901e:	08 95       	ret

00009020 <_ZN10red_quartz11set_segundoEi>:
	}
}	
		
bool red_quartz::testa_segundo(int s)		//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
	if(s>=0 && s<60){						//0-59
    9020:	6c 33       	cpi	r22, 0x3C	; 60
    9022:	71 05       	cpc	r23, r1
    9024:	10 f0       	brcs	.+4      	; 0x902a <_ZN10red_quartz11set_segundoEi+0xa>
	if(testa_segundo(s)){
		time.setSecond(s);
		return true;
	}
	else{
		return false;
    9026:	80 e0       	ldi	r24, 0x00	; 0
    9028:	08 95       	ret
	_ano 		= time.getYear();
}
bool red_quartz::set_segundo(int s)
{
	if(testa_segundo(s)){
		time.setSecond(s);
    902a:	0c 96       	adiw	r24, 0x0c	; 12
    902c:	0e 94 6c 58 	call	0xb0d8	; 0xb0d8 <_ZN6DS32319setSecondEh>
		return true;
    9030:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return false;
	}
}
    9032:	08 95       	ret

00009034 <_ZN10red_quartz10set_minutoEi>:
		return false;
	}
}
bool red_quartz::testa_minuto(int min)		//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
	if(min>=0 && min<60){					//0-59
    9034:	6c 33       	cpi	r22, 0x3C	; 60
    9036:	71 05       	cpc	r23, r1
    9038:	10 f0       	brcs	.+4      	; 0x903e <_ZN10red_quartz10set_minutoEi+0xa>
	if(testa_minuto(m)){
		time.setMinute(m);
		return true;
	}
	else{
		return false;
    903a:	80 e0       	ldi	r24, 0x00	; 0
    903c:	08 95       	ret
	}
}
bool red_quartz::set_minuto(int m)
{
	if(testa_minuto(m)){
		time.setMinute(m);
    903e:	0c 96       	adiw	r24, 0x0c	; 12
    9040:	0e 94 82 57 	call	0xaf04	; 0xaf04 <_ZN6DS32319setMinuteEh>
		return true;
    9044:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return false;
	}
}
    9046:	08 95       	ret

00009048 <_ZN10red_quartz8set_horaEi>:
		return false;
	}
}
bool red_quartz::testa_hora(int hr)			//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
	if(hr>=0 && hr<24){						//0-23
    9048:	68 31       	cpi	r22, 0x18	; 24
    904a:	71 05       	cpc	r23, r1
    904c:	10 f0       	brcs	.+4      	; 0x9052 <_ZN10red_quartz8set_horaEi+0xa>
	if(testa_hora(h)){
		time.setHour(h);
		return true;
	}
	else{
		return false;
    904e:	80 e0       	ldi	r24, 0x00	; 0
    9050:	08 95       	ret
	}
}
bool red_quartz::set_hora(int h)
{
	if(testa_hora(h)){
		time.setHour(h);
    9052:	0c 96       	adiw	r24, 0x0c	; 12
    9054:	0e 94 a0 57 	call	0xaf40	; 0xaf40 <_ZN6DS32317setHourEh>
		return true;
    9058:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return false;
	}
}
    905a:	08 95       	ret

0000905c <_ZN10red_quartz7set_mesEi>:
	}
	return false;
}
bool red_quartz::testa_mes(int mn)			//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
	if(mn>0 && mn <=12){					//1-12
    905c:	9b 01       	movw	r18, r22
    905e:	21 50       	subi	r18, 0x01	; 1
    9060:	31 09       	sbc	r19, r1
    9062:	2c 30       	cpi	r18, 0x0C	; 12
    9064:	31 05       	cpc	r19, r1
    9066:	10 f0       	brcs	.+4      	; 0x906c <_ZN10red_quartz7set_mesEi+0x10>
	if(testa_mes(m)){
		time.setMonth(m);
		return true;
	}
	else{
		return false;
    9068:	80 e0       	ldi	r24, 0x00	; 0
    906a:	08 95       	ret
	}
}
bool red_quartz::set_mes(int m)
{
	if(testa_mes(m)){
		time.setMonth(m);
    906c:	0c 96       	adiw	r24, 0x0c	; 12
    906e:	0e 94 11 58 	call	0xb022	; 0xb022 <_ZN6DS32318setMonthEh>
		return true;
    9072:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return false;
	}
}
    9074:	08 95       	ret

00009076 <_ZN10red_quartz7set_anoEi>:
		return false;
	}
}
bool red_quartz::testa_ano(int a)			//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
	if(a>=0){								//0-...
    9076:	77 ff       	sbrs	r23, 7
    9078:	02 c0       	rjmp	.+4      	; 0x907e <_ZN10red_quartz7set_anoEi+0x8>
	if(testa_ano(a)){
		time.setYear(a);
		return true;
	}
	else{
		return false;
    907a:	80 e0       	ldi	r24, 0x00	; 0
    907c:	08 95       	ret
	}
}
bool red_quartz::set_ano(int a)
{
	if(testa_ano(a)){
		time.setYear(a);
    907e:	0c 96       	adiw	r24, 0x0c	; 12
    9080:	0e 94 2f 58 	call	0xb05e	; 0xb05e <_ZN6DS32317setYearEh>
		return true;
    9084:	81 e0       	ldi	r24, 0x01	; 1
	}
	else{
		return false;
	}
}	
    9086:	08 95       	ret

00009088 <_ZN10red_quartz13testa_segundoEi>:
    9088:	81 e0       	ldi	r24, 0x01	; 1
    908a:	6c 33       	cpi	r22, 0x3C	; 60
    908c:	71 05       	cpc	r23, r1
    908e:	08 f0       	brcs	.+2      	; 0x9092 <_ZN10red_quartz13testa_segundoEi+0xa>
    9090:	80 e0       	ldi	r24, 0x00	; 0
    9092:	08 95       	ret

00009094 <_ZN10red_quartz12testa_minutoEi>:
	else{
		return false;
	}
}
bool red_quartz::testa_minuto(int min)		//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
    9094:	81 e0       	ldi	r24, 0x01	; 1
    9096:	6c 33       	cpi	r22, 0x3C	; 60
    9098:	71 05       	cpc	r23, r1
    909a:	08 f0       	brcs	.+2      	; 0x909e <_ZN10red_quartz12testa_minutoEi+0xa>
    909c:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	}
	else{
		return false;
	}
}
    909e:	08 95       	ret

000090a0 <_ZN10red_quartz10testa_horaEi>:
bool red_quartz::testa_hora(int hr)			//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
    90a0:	81 e0       	ldi	r24, 0x01	; 1
    90a2:	68 31       	cpi	r22, 0x18	; 24
    90a4:	71 05       	cpc	r23, r1
    90a6:	08 f0       	brcs	.+2      	; 0x90aa <_ZN10red_quartz10testa_horaEi+0xa>
    90a8:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	}
	else{
		return false;
	}
}
    90aa:	08 95       	ret

000090ac <_ZN10red_quartz9testa_diaEii>:
bool red_quartz::testa_dia(int d, int mn)	//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
	if(d>0){
    90ac:	16 16       	cp	r1, r22
    90ae:	17 06       	cpc	r1, r23
    90b0:	8c f4       	brge	.+34     	; 0x90d4 <_ZN10red_quartz9testa_diaEii+0x28>
		if(d<=28){							//1-28
    90b2:	6d 31       	cpi	r22, 0x1D	; 29
    90b4:	71 05       	cpc	r23, r1
    90b6:	84 f0       	brlt	.+32     	; 0x90d8 <_ZN10red_quartz9testa_diaEii+0x2c>
			return true;
		}
		else{
			if(mn==2){
    90b8:	42 30       	cpi	r20, 0x02	; 2
    90ba:	51 05       	cpc	r21, r1
    90bc:	59 f0       	breq	.+22     	; 0x90d4 <_ZN10red_quartz9testa_diaEii+0x28>
				return false;
			}
			else{
				if(d<=30){					//29-30
    90be:	6f 31       	cpi	r22, 0x1F	; 31
    90c0:	71 05       	cpc	r23, r1
    90c2:	54 f0       	brlt	.+20     	; 0x90d8 <_ZN10red_quartz9testa_diaEii+0x2c>
					return true;
				}
				else{						//dia 31
					if(mn<8){				//antes de agosto
    90c4:	48 30       	cpi	r20, 0x08	; 8
    90c6:	51 05       	cpc	r21, r1
    90c8:	14 f0       	brlt	.+4      	; 0x90ce <_ZN10red_quartz9testa_diaEii+0x22>
						if(mn%2!=0){		//meses impares.
							return true;
						}
					}
					else{					//agosto e depois
						if(mn%2==0){		//meses pares.
    90ca:	81 e0       	ldi	r24, 0x01	; 1
    90cc:	48 27       	eor	r20, r24
    90ce:	84 2f       	mov	r24, r20
    90d0:	81 70       	andi	r24, 0x01	; 1
    90d2:	08 95       	ret
					}
				}
			}
		}
	}
	return false;
    90d4:	80 e0       	ldi	r24, 0x00	; 0
    90d6:	08 95       	ret
}
bool red_quartz::testa_dia(int d, int mn)	//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
	if(d>0){
		if(d<=28){							//1-28
			return true;
    90d8:	81 e0       	ldi	r24, 0x01	; 1
				}
			}
		}
	}
	return false;
}
    90da:	08 95       	ret

000090dc <_ZN10red_quartz7set_diaEii>:
	else{
		return false;
	}
}
bool red_quartz::set_dia(int d, int m)
{
    90dc:	0f 93       	push	r16
    90de:	1f 93       	push	r17
    90e0:	cf 93       	push	r28
    90e2:	df 93       	push	r29
    90e4:	8c 01       	movw	r16, r24
    90e6:	d6 2f       	mov	r29, r22
	if(testa_dia(d, m)){
    90e8:	e1 df       	rcall	.-62     	; 0x90ac <_ZN10red_quartz9testa_diaEii>
    90ea:	c8 2f       	mov	r28, r24
    90ec:	88 23       	and	r24, r24
    90ee:	29 f0       	breq	.+10     	; 0x90fa <_ZN10red_quartz7set_diaEii+0x1e>
		time.setDate(d);
    90f0:	6d 2f       	mov	r22, r29
    90f2:	c8 01       	movw	r24, r16
    90f4:	0c 96       	adiw	r24, 0x0c	; 12
    90f6:	0e 94 f3 57 	call	0xafe6	; 0xafe6 <_ZN6DS32317setDateEh>
		return true;
	}
	else{
		return false;
	}
}
    90fa:	8c 2f       	mov	r24, r28
    90fc:	df 91       	pop	r29
    90fe:	cf 91       	pop	r28
    9100:	1f 91       	pop	r17
    9102:	0f 91       	pop	r16
    9104:	08 95       	ret

00009106 <_ZN10red_quartz9testa_mesEi>:
		}
	}
	return false;
}
bool red_quartz::testa_mes(int mn)			//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
    9106:	61 50       	subi	r22, 0x01	; 1
    9108:	71 09       	sbc	r23, r1
    910a:	81 e0       	ldi	r24, 0x01	; 1
    910c:	6c 30       	cpi	r22, 0x0C	; 12
    910e:	71 05       	cpc	r23, r1
    9110:	08 f0       	brcs	.+2      	; 0x9114 <_ZN10red_quartz9testa_mesEi+0xe>
    9112:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	}
	else{
		return false;
	}
}
    9114:	08 95       	ret

00009116 <_ZN10red_quartz9testa_anoEi>:
bool red_quartz::testa_ano(int a)			//testa se o valor recebido é valido, retorna TRUE se sim, FALSE se não.
{
    9116:	87 2f       	mov	r24, r23
    9118:	80 95       	com	r24
		return true;
	}
	else{
		return false;
	}
    911a:	88 1f       	adc	r24, r24
    911c:	88 27       	eor	r24, r24
    911e:	88 1f       	adc	r24, r24
    9120:	08 95       	ret

00009122 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    9122:	cf 93       	push	r28
  uint8_t sreg = SREG;
    9124:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    9126:	f8 94       	cli
  if (!initialized) {
    9128:	80 91 83 14 	lds	r24, 0x1483	; 0x801483 <_ZN8SPIClass11initializedE>
    912c:	81 11       	cpse	r24, r1
    912e:	23 c0       	rjmp	.+70     	; 0x9176 <_ZN8SPIClass5beginEv+0x54>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    9130:	e7 e2       	ldi	r30, 0x27	; 39
    9132:	f3 e0       	ldi	r31, 0x03	; 3
    9134:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    9136:	e1 ee       	ldi	r30, 0xE1	; 225
    9138:	f2 e0       	ldi	r31, 0x02	; 2
    913a:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    913c:	e8 2f       	mov	r30, r24
    913e:	f0 e0       	ldi	r31, 0x00	; 0
    9140:	ee 0f       	add	r30, r30
    9142:	ff 1f       	adc	r31, r31
    9144:	e4 59       	subi	r30, 0x94	; 148
    9146:	fc 4f       	sbci	r31, 0xFC	; 252
    9148:	a5 91       	lpm	r26, Z+
    914a:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    914c:	ec 91       	ld	r30, X
    914e:	e9 23       	and	r30, r25
    9150:	19 f4       	brne	.+6      	; 0x9158 <_ZN8SPIClass5beginEv+0x36>
      digitalWrite(SS, HIGH);
    9152:	61 e0       	ldi	r22, 0x01	; 1
    9154:	85 e3       	ldi	r24, 0x35	; 53
    9156:	94 d2       	rcall	.+1320   	; 0x9680 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    9158:	61 e0       	ldi	r22, 0x01	; 1
    915a:	85 e3       	ldi	r24, 0x35	; 53
    915c:	55 d2       	rcall	.+1194   	; 0x9608 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    915e:	8c b5       	in	r24, 0x2c	; 44
    9160:	80 61       	ori	r24, 0x10	; 16
    9162:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    9164:	8c b5       	in	r24, 0x2c	; 44
    9166:	80 64       	ori	r24, 0x40	; 64
    9168:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    916a:	61 e0       	ldi	r22, 0x01	; 1
    916c:	84 e3       	ldi	r24, 0x34	; 52
    916e:	4c d2       	rcall	.+1176   	; 0x9608 <pinMode>
    pinMode(MOSI, OUTPUT);
    9170:	61 e0       	ldi	r22, 0x01	; 1
    9172:	83 e3       	ldi	r24, 0x33	; 51
    9174:	49 d2       	rcall	.+1170   	; 0x9608 <pinMode>
    9176:	80 91 83 14 	lds	r24, 0x1483	; 0x801483 <_ZN8SPIClass11initializedE>
  }
  initialized++; // reference count
    917a:	8f 5f       	subi	r24, 0xFF	; 255
    917c:	80 93 83 14 	sts	0x1483, r24	; 0x801483 <_ZN8SPIClass11initializedE>
    9180:	cf bf       	out	0x3f, r28	; 63
  SREG = sreg;
    9182:	cf 91       	pop	r28
}
    9184:	08 95       	ret

00009186 <_ZN7TwoWire9availableEv>:
    9186:	80 91 b4 14 	lds	r24, 0x14B4	; 0x8014b4 <_ZN7TwoWire14rxBufferLengthE>
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    918a:	90 e0       	ldi	r25, 0x00	; 0
    918c:	20 91 b5 14 	lds	r18, 0x14B5	; 0x8014b5 <_ZN7TwoWire13rxBufferIndexE>
    9190:	82 1b       	sub	r24, r18
    9192:	91 09       	sbc	r25, r1
    9194:	08 95       	ret

00009196 <_ZN7TwoWire4readEv>:
    9196:	90 91 b5 14 	lds	r25, 0x14B5	; 0x8014b5 <_ZN7TwoWire13rxBufferIndexE>
    919a:	80 91 b4 14 	lds	r24, 0x14B4	; 0x8014b4 <_ZN7TwoWire14rxBufferLengthE>
    919e:	98 17       	cp	r25, r24
    91a0:	50 f4       	brcc	.+20     	; 0x91b6 <_ZN7TwoWire4readEv+0x20>
    91a2:	e9 2f       	mov	r30, r25
    91a4:	f0 e0       	ldi	r31, 0x00	; 0
    91a6:	ea 54       	subi	r30, 0x4A	; 74
    91a8:	fb 4e       	sbci	r31, 0xEB	; 235
    91aa:	20 81       	ld	r18, Z
    91ac:	30 e0       	ldi	r19, 0x00	; 0
    91ae:	9f 5f       	subi	r25, 0xFF	; 255
    91b0:	90 93 b5 14 	sts	0x14B5, r25	; 0x8014b5 <_ZN7TwoWire13rxBufferIndexE>
    91b4:	02 c0       	rjmp	.+4      	; 0x91ba <_ZN7TwoWire4readEv+0x24>
    91b6:	2f ef       	ldi	r18, 0xFF	; 255
    91b8:	3f ef       	ldi	r19, 0xFF	; 255
    91ba:	c9 01       	movw	r24, r18
    91bc:	08 95       	ret

000091be <_ZN7TwoWire4peekEv>:
    91be:	e0 91 b5 14 	lds	r30, 0x14B5	; 0x8014b5 <_ZN7TwoWire13rxBufferIndexE>
    91c2:	80 91 b4 14 	lds	r24, 0x14B4	; 0x8014b4 <_ZN7TwoWire14rxBufferLengthE>
    91c6:	e8 17       	cp	r30, r24
    91c8:	30 f4       	brcc	.+12     	; 0x91d6 <_ZN7TwoWire4peekEv+0x18>
    91ca:	f0 e0       	ldi	r31, 0x00	; 0
    91cc:	ea 54       	subi	r30, 0x4A	; 74
    91ce:	fb 4e       	sbci	r31, 0xEB	; 235
    91d0:	80 81       	ld	r24, Z
    91d2:	90 e0       	ldi	r25, 0x00	; 0
    91d4:	08 95       	ret
    91d6:	8f ef       	ldi	r24, 0xFF	; 255
    91d8:	9f ef       	ldi	r25, 0xFF	; 255
    91da:	08 95       	ret

000091dc <_ZN7TwoWire5flushEv>:
    91dc:	08 95       	ret

000091de <_ZN7TwoWire5writeEPKhj>:
    91de:	cf 92       	push	r12
    91e0:	df 92       	push	r13
    91e2:	ef 92       	push	r14
    91e4:	ff 92       	push	r15
    91e6:	0f 93       	push	r16
    91e8:	1f 93       	push	r17
    91ea:	cf 93       	push	r28
    91ec:	df 93       	push	r29
    91ee:	7c 01       	movw	r14, r24
    91f0:	cb 01       	movw	r24, r22
    91f2:	8a 01       	movw	r16, r20
    91f4:	20 91 90 14 	lds	r18, 0x1490	; 0x801490 <_ZN7TwoWire12transmittingE>
    91f8:	22 23       	and	r18, r18
    91fa:	89 f0       	breq	.+34     	; 0x921e <_ZN7TwoWire5writeEPKhj+0x40>
    91fc:	eb 01       	movw	r28, r22
    91fe:	6b 01       	movw	r12, r22
    9200:	c4 0e       	add	r12, r20
    9202:	d5 1e       	adc	r13, r21
    9204:	cc 15       	cp	r28, r12
    9206:	dd 05       	cpc	r29, r13
    9208:	69 f0       	breq	.+26     	; 0x9224 <_ZN7TwoWire5writeEPKhj+0x46>
    920a:	69 91       	ld	r22, Y+
    920c:	d7 01       	movw	r26, r14
    920e:	ed 91       	ld	r30, X+
    9210:	fc 91       	ld	r31, X
    9212:	01 90       	ld	r0, Z+
    9214:	f0 81       	ld	r31, Z
    9216:	e0 2d       	mov	r30, r0
    9218:	c7 01       	movw	r24, r14
    921a:	19 95       	eicall
    921c:	f3 cf       	rjmp	.-26     	; 0x9204 <_ZN7TwoWire5writeEPKhj+0x26>
    921e:	64 2f       	mov	r22, r20
    9220:	0e 94 66 59 	call	0xb2cc	; 0xb2cc <twi_transmit>
    9224:	c8 01       	movw	r24, r16
    9226:	df 91       	pop	r29
    9228:	cf 91       	pop	r28
    922a:	1f 91       	pop	r17
    922c:	0f 91       	pop	r16
    922e:	ff 90       	pop	r15
    9230:	ef 90       	pop	r14
    9232:	df 90       	pop	r13
    9234:	cf 90       	pop	r12
    9236:	08 95       	ret

00009238 <_ZN7TwoWire5writeEh>:
    9238:	cf 93       	push	r28
    923a:	df 93       	push	r29
    923c:	1f 92       	push	r1
    923e:	cd b7       	in	r28, 0x3d	; 61
    9240:	de b7       	in	r29, 0x3e	; 62
    9242:	69 83       	std	Y+1, r22	; 0x01
    9244:	20 91 90 14 	lds	r18, 0x1490	; 0x801490 <_ZN7TwoWire12transmittingE>
    9248:	22 23       	and	r18, r18
    924a:	d1 f0       	breq	.+52     	; 0x9280 <_ZN7TwoWire5writeEh+0x48>
    924c:	20 91 91 14 	lds	r18, 0x1491	; 0x801491 <_ZN7TwoWire14txBufferLengthE>
    9250:	20 32       	cpi	r18, 0x20	; 32
    9252:	40 f0       	brcs	.+16     	; 0x9264 <_ZN7TwoWire5writeEh+0x2c>
    9254:	21 e0       	ldi	r18, 0x01	; 1
    9256:	30 e0       	ldi	r19, 0x00	; 0
    9258:	fc 01       	movw	r30, r24
    925a:	33 83       	std	Z+3, r19	; 0x03
    925c:	22 83       	std	Z+2, r18	; 0x02
    925e:	80 e0       	ldi	r24, 0x00	; 0
    9260:	90 e0       	ldi	r25, 0x00	; 0
    9262:	15 c0       	rjmp	.+42     	; 0x928e <_ZN7TwoWire5writeEh+0x56>
    9264:	80 91 92 14 	lds	r24, 0x1492	; 0x801492 <_ZN7TwoWire13txBufferIndexE>
    9268:	e8 2f       	mov	r30, r24
    926a:	f0 e0       	ldi	r31, 0x00	; 0
    926c:	ed 56       	subi	r30, 0x6D	; 109
    926e:	fb 4e       	sbci	r31, 0xEB	; 235
    9270:	99 81       	ldd	r25, Y+1	; 0x01
    9272:	90 83       	st	Z, r25
    9274:	8f 5f       	subi	r24, 0xFF	; 255
    9276:	80 93 92 14 	sts	0x1492, r24	; 0x801492 <_ZN7TwoWire13txBufferIndexE>
    927a:	80 93 91 14 	sts	0x1491, r24	; 0x801491 <_ZN7TwoWire14txBufferLengthE>
    927e:	05 c0       	rjmp	.+10     	; 0x928a <_ZN7TwoWire5writeEh+0x52>
    9280:	61 e0       	ldi	r22, 0x01	; 1
    9282:	ce 01       	movw	r24, r28
    9284:	01 96       	adiw	r24, 0x01	; 1
    9286:	0e 94 66 59 	call	0xb2cc	; 0xb2cc <twi_transmit>
    928a:	81 e0       	ldi	r24, 0x01	; 1
    928c:	90 e0       	ldi	r25, 0x00	; 0
    928e:	0f 90       	pop	r0
    9290:	df 91       	pop	r29
    9292:	cf 91       	pop	r28
    9294:	08 95       	ret

00009296 <_ZN7TwoWireC1Ev>:
    9296:	fc 01       	movw	r30, r24
    9298:	13 82       	std	Z+3, r1	; 0x03
    929a:	12 82       	std	Z+2, r1	; 0x02
    929c:	88 ee       	ldi	r24, 0xE8	; 232
    929e:	93 e0       	ldi	r25, 0x03	; 3
    92a0:	a0 e0       	ldi	r26, 0x00	; 0
    92a2:	b0 e0       	ldi	r27, 0x00	; 0
    92a4:	84 83       	std	Z+4, r24	; 0x04
    92a6:	95 83       	std	Z+5, r25	; 0x05
    92a8:	a6 83       	std	Z+6, r26	; 0x06
    92aa:	b7 83       	std	Z+7, r27	; 0x07
    92ac:	8d ef       	ldi	r24, 0xFD	; 253
    92ae:	9f e0       	ldi	r25, 0x0F	; 15
    92b0:	91 83       	std	Z+1, r25	; 0x01
    92b2:	80 83       	st	Z, r24
    92b4:	08 95       	ret

000092b6 <_ZN7TwoWire5beginEv>:
    92b6:	10 92 b5 14 	sts	0x14B5, r1	; 0x8014b5 <_ZN7TwoWire13rxBufferIndexE>
    92ba:	10 92 b4 14 	sts	0x14B4, r1	; 0x8014b4 <_ZN7TwoWire14rxBufferLengthE>
    92be:	10 92 92 14 	sts	0x1492, r1	; 0x801492 <_ZN7TwoWire13txBufferIndexE>
    92c2:	10 92 91 14 	sts	0x1491, r1	; 0x801491 <_ZN7TwoWire14txBufferLengthE>
    92c6:	0c 94 97 58 	jmp	0xb12e	; 0xb12e <twi_init>

000092ca <_ZN7TwoWire8setClockEm>:
    92ca:	cb 01       	movw	r24, r22
    92cc:	ba 01       	movw	r22, r20
    92ce:	0c 94 b5 58 	jmp	0xb16a	; 0xb16a <twi_setFrequency>

000092d2 <_ZN7TwoWire17beginTransmissionEh>:
    92d2:	81 e0       	ldi	r24, 0x01	; 1
    92d4:	80 93 90 14 	sts	0x1490, r24	; 0x801490 <_ZN7TwoWire12transmittingE>
    92d8:	60 93 b3 14 	sts	0x14B3, r22	; 0x8014b3 <_ZN7TwoWire9txAddressE>
    92dc:	10 92 92 14 	sts	0x1492, r1	; 0x801492 <_ZN7TwoWire13txBufferIndexE>
    92e0:	10 92 91 14 	sts	0x1491, r1	; 0x801491 <_ZN7TwoWire14txBufferLengthE>
    92e4:	08 95       	ret

000092e6 <_ZN7TwoWire17beginTransmissionEi>:
    92e6:	f5 cf       	rjmp	.-22     	; 0x92d2 <_ZN7TwoWire17beginTransmissionEh>

000092e8 <_ZN7TwoWire15endTransmissionEh>:
    92e8:	0f 93       	push	r16
    92ea:	06 2f       	mov	r16, r22
    92ec:	21 e0       	ldi	r18, 0x01	; 1
    92ee:	40 91 91 14 	lds	r20, 0x1491	; 0x801491 <_ZN7TwoWire14txBufferLengthE>
    92f2:	63 e9       	ldi	r22, 0x93	; 147
    92f4:	74 e1       	ldi	r23, 0x14	; 20
    92f6:	80 91 b3 14 	lds	r24, 0x14B3	; 0x8014b3 <_ZN7TwoWire9txAddressE>
    92fa:	0e 94 10 59 	call	0xb220	; 0xb220 <twi_writeTo>
    92fe:	10 92 92 14 	sts	0x1492, r1	; 0x801492 <_ZN7TwoWire13txBufferIndexE>
    9302:	10 92 91 14 	sts	0x1491, r1	; 0x801491 <_ZN7TwoWire14txBufferLengthE>
    9306:	10 92 90 14 	sts	0x1490, r1	; 0x801490 <_ZN7TwoWire12transmittingE>
    930a:	0f 91       	pop	r16
    930c:	08 95       	ret

0000930e <_ZN7TwoWire11requestFromEhhmhh>:
    930e:	4f 92       	push	r4
    9310:	5f 92       	push	r5
    9312:	6f 92       	push	r6
    9314:	7f 92       	push	r7
    9316:	af 92       	push	r10
    9318:	bf 92       	push	r11
    931a:	cf 92       	push	r12
    931c:	ef 92       	push	r14
    931e:	ff 92       	push	r15
    9320:	0f 93       	push	r16
    9322:	1f 93       	push	r17
    9324:	cf 93       	push	r28
    9326:	df 93       	push	r29
    9328:	5c 01       	movw	r10, r24
    932a:	f6 2e       	mov	r15, r22
    932c:	d4 2f       	mov	r29, r20
    932e:	28 01       	movw	r4, r16
    9330:	39 01       	movw	r6, r18
    9332:	ee 20       	and	r14, r14
    9334:	11 f1       	breq	.+68     	; 0x937a <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    9336:	cd df       	rcall	.-102    	; 0x92d2 <_ZN7TwoWire17beginTransmissionEh>
    9338:	ce 2d       	mov	r28, r14
    933a:	c4 30       	cpi	r28, 0x04	; 4
    933c:	08 f0       	brcs	.+2      	; 0x9340 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    933e:	c3 e0       	ldi	r28, 0x03	; 3
    9340:	c1 50       	subi	r28, 0x01	; 1
    9342:	c0 f0       	brcs	.+48     	; 0x9374 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    9344:	28 e0       	ldi	r18, 0x08	; 8
    9346:	c2 9f       	mul	r28, r18
    9348:	c0 01       	movw	r24, r0
    934a:	11 24       	eor	r1, r1
    934c:	a3 01       	movw	r20, r6
    934e:	92 01       	movw	r18, r4
    9350:	04 c0       	rjmp	.+8      	; 0x935a <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    9352:	56 95       	lsr	r21
    9354:	47 95       	ror	r20
    9356:	37 95       	ror	r19
    9358:	27 95       	ror	r18
    935a:	8a 95       	dec	r24
    935c:	d2 f7       	brpl	.-12     	; 0x9352 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    935e:	ca 01       	movw	r24, r20
    9360:	b9 01       	movw	r22, r18
    9362:	d5 01       	movw	r26, r10
    9364:	ed 91       	ld	r30, X+
    9366:	fc 91       	ld	r31, X
    9368:	01 90       	ld	r0, Z+
    936a:	f0 81       	ld	r31, Z
    936c:	e0 2d       	mov	r30, r0
    936e:	c5 01       	movw	r24, r10
    9370:	19 95       	eicall
    9372:	e6 cf       	rjmp	.-52     	; 0x9340 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    9374:	60 e0       	ldi	r22, 0x00	; 0
    9376:	c5 01       	movw	r24, r10
    9378:	b7 df       	rcall	.-146    	; 0x92e8 <_ZN7TwoWire15endTransmissionEh>
    937a:	4d 2f       	mov	r20, r29
    937c:	d1 32       	cpi	r29, 0x21	; 33
    937e:	08 f0       	brcs	.+2      	; 0x9382 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    9380:	40 e2       	ldi	r20, 0x20	; 32
    9382:	2c 2d       	mov	r18, r12
    9384:	66 eb       	ldi	r22, 0xB6	; 182
    9386:	74 e1       	ldi	r23, 0x14	; 20
    9388:	8f 2d       	mov	r24, r15
    938a:	0e 94 c8 58 	call	0xb190	; 0xb190 <twi_readFrom>
    938e:	10 92 b5 14 	sts	0x14B5, r1	; 0x8014b5 <_ZN7TwoWire13rxBufferIndexE>
    9392:	80 93 b4 14 	sts	0x14B4, r24	; 0x8014b4 <_ZN7TwoWire14rxBufferLengthE>
    9396:	df 91       	pop	r29
    9398:	cf 91       	pop	r28
    939a:	1f 91       	pop	r17
    939c:	0f 91       	pop	r16
    939e:	ff 90       	pop	r15
    93a0:	ef 90       	pop	r14
    93a2:	cf 90       	pop	r12
    93a4:	bf 90       	pop	r11
    93a6:	af 90       	pop	r10
    93a8:	7f 90       	pop	r7
    93aa:	6f 90       	pop	r6
    93ac:	5f 90       	pop	r5
    93ae:	4f 90       	pop	r4
    93b0:	08 95       	ret

000093b2 <_ZN7TwoWire11requestFromEhhh>:
    93b2:	cf 92       	push	r12
    93b4:	ef 92       	push	r14
    93b6:	0f 93       	push	r16
    93b8:	1f 93       	push	r17
    93ba:	c2 2e       	mov	r12, r18
    93bc:	e1 2c       	mov	r14, r1
    93be:	00 e0       	ldi	r16, 0x00	; 0
    93c0:	10 e0       	ldi	r17, 0x00	; 0
    93c2:	98 01       	movw	r18, r16
    93c4:	a4 df       	rcall	.-184    	; 0x930e <_ZN7TwoWire11requestFromEhhmhh>
    93c6:	1f 91       	pop	r17
    93c8:	0f 91       	pop	r16
    93ca:	ef 90       	pop	r14
    93cc:	cf 90       	pop	r12
    93ce:	08 95       	ret

000093d0 <_ZN7TwoWire11requestFromEii>:
    93d0:	21 e0       	ldi	r18, 0x01	; 1
    93d2:	ef cf       	rjmp	.-34     	; 0x93b2 <_ZN7TwoWire11requestFromEhhh>

000093d4 <_ZN7TwoWire15endTransmissionEv>:
    93d4:	61 e0       	ldi	r22, 0x01	; 1
    93d6:	88 cf       	rjmp	.-240    	; 0x92e8 <_ZN7TwoWire15endTransmissionEh>

000093d8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    93d8:	84 e8       	ldi	r24, 0x84	; 132
    93da:	94 e1       	ldi	r25, 0x14	; 20
    93dc:	5c cf       	rjmp	.-328    	; 0x9296 <_ZN7TwoWireC1Ev>

000093de <__cxa_pure_virtual>:
    93de:	0e 94 32 61 	call	0xc264	; 0xc264 <abort>

000093e2 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    93e2:	1f 92       	push	r1
    93e4:	0f 92       	push	r0
    93e6:	0f b6       	in	r0, 0x3f	; 63
    93e8:	0f 92       	push	r0
    93ea:	11 24       	eor	r1, r1
    93ec:	0b b6       	in	r0, 0x3b	; 59
    93ee:	0f 92       	push	r0
    93f0:	2f 93       	push	r18
    93f2:	8f 93       	push	r24
    93f4:	9f 93       	push	r25
    93f6:	ef 93       	push	r30
    93f8:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    93fa:	e0 91 e6 14 	lds	r30, 0x14E6	; 0x8014e6 <Serial1+0x10>
    93fe:	f0 91 e7 14 	lds	r31, 0x14E7	; 0x8014e7 <Serial1+0x11>
    9402:	80 81       	ld	r24, Z
    9404:	e0 91 ec 14 	lds	r30, 0x14EC	; 0x8014ec <Serial1+0x16>
    9408:	f0 91 ed 14 	lds	r31, 0x14ED	; 0x8014ed <Serial1+0x17>
    940c:	82 fd       	sbrc	r24, 2
    940e:	12 c0       	rjmp	.+36     	; 0x9434 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    9410:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    9412:	80 91 ef 14 	lds	r24, 0x14EF	; 0x8014ef <Serial1+0x19>
    9416:	8f 5f       	subi	r24, 0xFF	; 255
    9418:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    941a:	20 91 f0 14 	lds	r18, 0x14F0	; 0x8014f0 <Serial1+0x1a>
    941e:	82 17       	cp	r24, r18
    9420:	51 f0       	breq	.+20     	; 0x9436 <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    9422:	e0 91 ef 14 	lds	r30, 0x14EF	; 0x8014ef <Serial1+0x19>
    9426:	f0 e0       	ldi	r31, 0x00	; 0
    9428:	ea 52       	subi	r30, 0x2A	; 42
    942a:	fb 4e       	sbci	r31, 0xEB	; 235
    942c:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    942e:	80 93 ef 14 	sts	0x14EF, r24	; 0x8014ef <Serial1+0x19>
    9432:	01 c0       	rjmp	.+2      	; 0x9436 <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    9434:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    9436:	ff 91       	pop	r31
    9438:	ef 91       	pop	r30
    943a:	9f 91       	pop	r25
    943c:	8f 91       	pop	r24
    943e:	2f 91       	pop	r18
    9440:	0f 90       	pop	r0
    9442:	0b be       	out	0x3b, r0	; 59
    9444:	0f 90       	pop	r0
    9446:	0f be       	out	0x3f, r0	; 63
    9448:	0f 90       	pop	r0
    944a:	1f 90       	pop	r1
    944c:	18 95       	reti

0000944e <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    944e:	1f 92       	push	r1
    9450:	0f 92       	push	r0
    9452:	0f b6       	in	r0, 0x3f	; 63
    9454:	0f 92       	push	r0
    9456:	11 24       	eor	r1, r1
    9458:	0b b6       	in	r0, 0x3b	; 59
    945a:	0f 92       	push	r0
    945c:	2f 93       	push	r18
    945e:	3f 93       	push	r19
    9460:	4f 93       	push	r20
    9462:	5f 93       	push	r21
    9464:	6f 93       	push	r22
    9466:	7f 93       	push	r23
    9468:	8f 93       	push	r24
    946a:	9f 93       	push	r25
    946c:	af 93       	push	r26
    946e:	bf 93       	push	r27
    9470:	ef 93       	push	r30
    9472:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    9474:	86 ed       	ldi	r24, 0xD6	; 214
    9476:	94 e1       	ldi	r25, 0x14	; 20
    9478:	0e 94 5c 05 	call	0xab8	; 0xab8 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    947c:	ff 91       	pop	r31
    947e:	ef 91       	pop	r30
    9480:	bf 91       	pop	r27
    9482:	af 91       	pop	r26
    9484:	9f 91       	pop	r25
    9486:	8f 91       	pop	r24
    9488:	7f 91       	pop	r23
    948a:	6f 91       	pop	r22
    948c:	5f 91       	pop	r21
    948e:	4f 91       	pop	r20
    9490:	3f 91       	pop	r19
    9492:	2f 91       	pop	r18
    9494:	0f 90       	pop	r0
    9496:	0b be       	out	0x3b, r0	; 59
    9498:	0f 90       	pop	r0
    949a:	0f be       	out	0x3f, r0	; 63
    949c:	0f 90       	pop	r0
    949e:	1f 90       	pop	r1
    94a0:	18 95       	reti

000094a2 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    94a2:	86 ed       	ldi	r24, 0xD6	; 214
    94a4:	94 e1       	ldi	r25, 0x14	; 20
    94a6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <_ZN14HardwareSerial9availableEv>
    94aa:	21 e0       	ldi	r18, 0x01	; 1
    94ac:	89 2b       	or	r24, r25
    94ae:	09 f4       	brne	.+2      	; 0x94b2 <_Z17Serial1_availablev+0x10>
    94b0:	20 e0       	ldi	r18, 0x00	; 0
}
    94b2:	82 2f       	mov	r24, r18
    94b4:	08 95       	ret

000094b6 <_GLOBAL__sub_I___vector_36>:
    94b6:	e6 ed       	ldi	r30, 0xD6	; 214
    94b8:	f4 e1       	ldi	r31, 0x14	; 20
    94ba:	13 82       	std	Z+3, r1	; 0x03
    94bc:	12 82       	std	Z+2, r1	; 0x02
    94be:	88 ee       	ldi	r24, 0xE8	; 232
    94c0:	93 e0       	ldi	r25, 0x03	; 3
    94c2:	a0 e0       	ldi	r26, 0x00	; 0
    94c4:	b0 e0       	ldi	r27, 0x00	; 0
    94c6:	84 83       	std	Z+4, r24	; 0x04
    94c8:	95 83       	std	Z+5, r25	; 0x05
    94ca:	a6 83       	std	Z+6, r26	; 0x06
    94cc:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    94ce:	8e e4       	ldi	r24, 0x4E	; 78
    94d0:	94 e0       	ldi	r25, 0x04	; 4
    94d2:	91 83       	std	Z+1, r25	; 0x01
    94d4:	80 83       	st	Z, r24
    94d6:	8d ec       	ldi	r24, 0xCD	; 205
    94d8:	90 e0       	ldi	r25, 0x00	; 0
    94da:	95 87       	std	Z+13, r25	; 0x0d
    94dc:	84 87       	std	Z+12, r24	; 0x0c
    94de:	8c ec       	ldi	r24, 0xCC	; 204
    94e0:	90 e0       	ldi	r25, 0x00	; 0
    94e2:	97 87       	std	Z+15, r25	; 0x0f
    94e4:	86 87       	std	Z+14, r24	; 0x0e
    94e6:	88 ec       	ldi	r24, 0xC8	; 200
    94e8:	90 e0       	ldi	r25, 0x00	; 0
    94ea:	91 8b       	std	Z+17, r25	; 0x11
    94ec:	80 8b       	std	Z+16, r24	; 0x10
    94ee:	89 ec       	ldi	r24, 0xC9	; 201
    94f0:	90 e0       	ldi	r25, 0x00	; 0
    94f2:	93 8b       	std	Z+19, r25	; 0x13
    94f4:	82 8b       	std	Z+18, r24	; 0x12
    94f6:	8a ec       	ldi	r24, 0xCA	; 202
    94f8:	90 e0       	ldi	r25, 0x00	; 0
    94fa:	95 8b       	std	Z+21, r25	; 0x15
    94fc:	84 8b       	std	Z+20, r24	; 0x14
    94fe:	8e ec       	ldi	r24, 0xCE	; 206
    9500:	90 e0       	ldi	r25, 0x00	; 0
    9502:	97 8b       	std	Z+23, r25	; 0x17
    9504:	86 8b       	std	Z+22, r24	; 0x16
    9506:	11 8e       	std	Z+25, r1	; 0x19
    9508:	12 8e       	std	Z+26, r1	; 0x1a
    950a:	13 8e       	std	Z+27, r1	; 0x1b
    950c:	14 8e       	std	Z+28, r1	; 0x1c
    950e:	08 95       	ret

00009510 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    9510:	08 95       	ret

00009512 <analogRead>:
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#endif
	pin = analogPinToChannel(pin);
#elif defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
    9512:	86 33       	cpi	r24, 0x36	; 54
    9514:	08 f0       	brcs	.+2      	; 0x9518 <analogRead+0x6>
    9516:	86 53       	subi	r24, 0x36	; 54
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    9518:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
    951c:	28 2f       	mov	r18, r24
    951e:	28 70       	andi	r18, 0x08	; 8
    9520:	97 7f       	andi	r25, 0xF7	; 247
    9522:	92 2b       	or	r25, r18
    9524:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    9528:	20 91 30 04 	lds	r18, 0x0430	; 0x800430 <analog_reference>
    952c:	90 e4       	ldi	r25, 0x40	; 64
    952e:	29 9f       	mul	r18, r25
    9530:	90 01       	movw	r18, r0
    9532:	11 24       	eor	r1, r1
    9534:	87 70       	andi	r24, 0x07	; 7
    9536:	82 2b       	or	r24, r18
    9538:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    953c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    9540:	80 64       	ori	r24, 0x40	; 64
    9542:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    9546:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
    954a:	86 fd       	sbrc	r24, 6
    954c:	fc cf       	rjmp	.-8      	; 0x9546 <analogRead+0x34>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    954e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x700078>
	high = ADCH;
    9552:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    9556:	90 e0       	ldi	r25, 0x00	; 0
}
    9558:	92 2b       	or	r25, r18
    955a:	08 95       	ret

0000955c <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    955c:	90 e0       	ldi	r25, 0x00	; 0
    955e:	fc 01       	movw	r30, r24
    9560:	31 97       	sbiw	r30, 0x01	; 1
    9562:	e2 31       	cpi	r30, 0x12	; 18
    9564:	f1 05       	cpc	r31, r1
    9566:	08 f0       	brcs	.+2      	; 0x956a <turnOffPWM+0xe>
    9568:	4e c0       	rjmp	.+156    	; 0x9606 <turnOffPWM+0xaa>
    956a:	88 27       	eor	r24, r24
    956c:	ee 58       	subi	r30, 0x8E	; 142
    956e:	ff 4f       	sbci	r31, 0xFF	; 255
    9570:	8f 4f       	sbci	r24, 0xFF	; 255
    9572:	0c 94 92 5e 	jmp	0xbd24	; 0xbd24 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    9576:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    957a:	8f 77       	andi	r24, 0x7F	; 127
    957c:	03 c0       	rjmp	.+6      	; 0x9584 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    957e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    9582:	8f 7d       	andi	r24, 0xDF	; 223
    9584:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    9588:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    958a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    958e:	87 7f       	andi	r24, 0xF7	; 247
    9590:	f9 cf       	rjmp	.-14     	; 0x9584 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    9592:	84 b5       	in	r24, 0x24	; 36
    9594:	8f 77       	andi	r24, 0x7F	; 127
    9596:	02 c0       	rjmp	.+4      	; 0x959c <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    9598:	84 b5       	in	r24, 0x24	; 36
    959a:	8f 7d       	andi	r24, 0xDF	; 223
    959c:	84 bd       	out	0x24, r24	; 36
    959e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    95a0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    95a4:	8f 77       	andi	r24, 0x7F	; 127
    95a6:	03 c0       	rjmp	.+6      	; 0x95ae <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    95a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    95ac:	8f 7d       	andi	r24, 0xDF	; 223
    95ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    95b2:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    95b4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    95b8:	8f 77       	andi	r24, 0x7F	; 127
    95ba:	07 c0       	rjmp	.+14     	; 0x95ca <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    95bc:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    95c0:	8f 7d       	andi	r24, 0xDF	; 223
    95c2:	03 c0       	rjmp	.+6      	; 0x95ca <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    95c4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    95c8:	87 7f       	andi	r24, 0xF7	; 247
    95ca:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    95ce:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    95d0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    95d4:	8f 77       	andi	r24, 0x7F	; 127
    95d6:	07 c0       	rjmp	.+14     	; 0x95e6 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    95d8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    95dc:	8f 7d       	andi	r24, 0xDF	; 223
    95de:	03 c0       	rjmp	.+6      	; 0x95e6 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    95e0:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    95e4:	87 7f       	andi	r24, 0xF7	; 247
    95e6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    95ea:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    95ec:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    95f0:	8f 77       	andi	r24, 0x7F	; 127
    95f2:	07 c0       	rjmp	.+14     	; 0x9602 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    95f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    95f8:	8f 7d       	andi	r24, 0xDF	; 223
    95fa:	03 c0       	rjmp	.+6      	; 0x9602 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    95fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    9600:	87 7f       	andi	r24, 0xF7	; 247
    9602:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    9606:	08 95       	ret

00009608 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    9608:	cf 93       	push	r28
    960a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    960c:	90 e0       	ldi	r25, 0x00	; 0
    960e:	fc 01       	movw	r30, r24
    9610:	e4 55       	subi	r30, 0x54	; 84
    9612:	fd 4f       	sbci	r31, 0xFD	; 253
    9614:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    9616:	fc 01       	movw	r30, r24
    9618:	ee 50       	subi	r30, 0x0E	; 14
    961a:	fd 4f       	sbci	r31, 0xFD	; 253
    961c:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    961e:	88 23       	and	r24, r24
    9620:	61 f1       	breq	.+88     	; 0x967a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    9622:	90 e0       	ldi	r25, 0x00	; 0
    9624:	88 0f       	add	r24, r24
    9626:	99 1f       	adc	r25, r25
    9628:	fc 01       	movw	r30, r24
    962a:	e4 59       	subi	r30, 0x94	; 148
    962c:	fc 4f       	sbci	r31, 0xFC	; 252
    962e:	c5 91       	lpm	r28, Z+
    9630:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    9632:	fc 01       	movw	r30, r24
    9634:	ee 5a       	subi	r30, 0xAE	; 174
    9636:	fc 4f       	sbci	r31, 0xFC	; 252
    9638:	a5 91       	lpm	r26, Z+
    963a:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    963c:	61 11       	cpse	r22, r1
    963e:	09 c0       	rjmp	.+18     	; 0x9652 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    9640:	9f b7       	in	r25, 0x3f	; 63
                cli();
    9642:	f8 94       	cli
		*reg &= ~bit;
    9644:	88 81       	ld	r24, Y
    9646:	20 95       	com	r18
    9648:	82 23       	and	r24, r18
    964a:	88 83       	st	Y, r24
		*out &= ~bit;
    964c:	ec 91       	ld	r30, X
    964e:	2e 23       	and	r18, r30
    9650:	0b c0       	rjmp	.+22     	; 0x9668 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    9652:	62 30       	cpi	r22, 0x02	; 2
    9654:	61 f4       	brne	.+24     	; 0x966e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    9656:	9f b7       	in	r25, 0x3f	; 63
                cli();
    9658:	f8 94       	cli
		*reg &= ~bit;
    965a:	88 81       	ld	r24, Y
    965c:	32 2f       	mov	r19, r18
    965e:	30 95       	com	r19
    9660:	83 23       	and	r24, r19
    9662:	88 83       	st	Y, r24
		*out |= bit;
    9664:	ec 91       	ld	r30, X
    9666:	2e 2b       	or	r18, r30
    9668:	2c 93       	st	X, r18
		SREG = oldSREG;
    966a:	9f bf       	out	0x3f, r25	; 63
    966c:	06 c0       	rjmp	.+12     	; 0x967a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    966e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    9670:	f8 94       	cli
		*reg |= bit;
    9672:	e8 81       	ld	r30, Y
    9674:	2e 2b       	or	r18, r30
    9676:	28 83       	st	Y, r18
		SREG = oldSREG;
    9678:	8f bf       	out	0x3f, r24	; 63
	}
}
    967a:	df 91       	pop	r29
    967c:	cf 91       	pop	r28
    967e:	08 95       	ret

00009680 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    9680:	1f 93       	push	r17
    9682:	cf 93       	push	r28
    9684:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    9686:	28 2f       	mov	r18, r24
    9688:	30 e0       	ldi	r19, 0x00	; 0
    968a:	f9 01       	movw	r30, r18
    968c:	ea 59       	subi	r30, 0x9A	; 154
    968e:	fd 4f       	sbci	r31, 0xFD	; 253
    9690:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    9692:	f9 01       	movw	r30, r18
    9694:	e4 55       	subi	r30, 0x54	; 84
    9696:	fd 4f       	sbci	r31, 0xFD	; 253
    9698:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    969a:	f9 01       	movw	r30, r18
    969c:	ee 50       	subi	r30, 0x0E	; 14
    969e:	fd 4f       	sbci	r31, 0xFD	; 253
    96a0:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    96a2:	cc 23       	and	r28, r28
    96a4:	b9 f0       	breq	.+46     	; 0x96d4 <digitalWrite+0x54>
    96a6:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    96a8:	81 11       	cpse	r24, r1
    96aa:	58 df       	rcall	.-336    	; 0x955c <turnOffPWM>

	out = portOutputRegister(port);
    96ac:	ec 2f       	mov	r30, r28
    96ae:	f0 e0       	ldi	r31, 0x00	; 0
    96b0:	ee 0f       	add	r30, r30
    96b2:	ff 1f       	adc	r31, r31
    96b4:	ee 5a       	subi	r30, 0xAE	; 174
    96b6:	fc 4f       	sbci	r31, 0xFC	; 252
    96b8:	a5 91       	lpm	r26, Z+
    96ba:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    96bc:	9f b7       	in	r25, 0x3f	; 63
	cli();
    96be:	f8 94       	cli

	if (val == LOW) {
    96c0:	11 11       	cpse	r17, r1
    96c2:	04 c0       	rjmp	.+8      	; 0x96cc <digitalWrite+0x4c>
		*out &= ~bit;
    96c4:	8c 91       	ld	r24, X
    96c6:	d0 95       	com	r29
    96c8:	d8 23       	and	r29, r24
    96ca:	02 c0       	rjmp	.+4      	; 0x96d0 <digitalWrite+0x50>
	} else {
		*out |= bit;
    96cc:	ec 91       	ld	r30, X
    96ce:	de 2b       	or	r29, r30
    96d0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    96d2:	9f bf       	out	0x3f, r25	; 63
}
    96d4:	df 91       	pop	r29
    96d6:	cf 91       	pop	r28
    96d8:	1f 91       	pop	r17
    96da:	08 95       	ret

000096dc <digitalRead>:

int digitalRead(uint8_t pin)
{
    96dc:	cf 93       	push	r28
    96de:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    96e0:	28 2f       	mov	r18, r24
    96e2:	30 e0       	ldi	r19, 0x00	; 0
    96e4:	f9 01       	movw	r30, r18
    96e6:	ea 59       	subi	r30, 0x9A	; 154
    96e8:	fd 4f       	sbci	r31, 0xFD	; 253
    96ea:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    96ec:	f9 01       	movw	r30, r18
    96ee:	e4 55       	subi	r30, 0x54	; 84
    96f0:	fd 4f       	sbci	r31, 0xFD	; 253
    96f2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    96f4:	f9 01       	movw	r30, r18
    96f6:	ee 50       	subi	r30, 0x0E	; 14
    96f8:	fd 4f       	sbci	r31, 0xFD	; 253
    96fa:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    96fc:	cc 23       	and	r28, r28
    96fe:	89 f0       	breq	.+34     	; 0x9722 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    9700:	81 11       	cpse	r24, r1
    9702:	2c df       	rcall	.-424    	; 0x955c <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    9704:	ec 2f       	mov	r30, r28
    9706:	f0 e0       	ldi	r31, 0x00	; 0
    9708:	ee 0f       	add	r30, r30
    970a:	ff 1f       	adc	r31, r31
    970c:	e8 5c       	subi	r30, 0xC8	; 200
    970e:	fc 4f       	sbci	r31, 0xFC	; 252
    9710:	a5 91       	lpm	r26, Z+
    9712:	b4 91       	lpm	r27, Z
    9714:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    9716:	ed 23       	and	r30, r29
    9718:	81 e0       	ldi	r24, 0x01	; 1
    971a:	90 e0       	ldi	r25, 0x00	; 0
    971c:	21 f4       	brne	.+8      	; 0x9726 <digitalRead+0x4a>
    971e:	80 e0       	ldi	r24, 0x00	; 0
    9720:	02 c0       	rjmp	.+4      	; 0x9726 <digitalRead+0x4a>
    9722:	80 e0       	ldi	r24, 0x00	; 0
    9724:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    9726:	df 91       	pop	r29
    9728:	cf 91       	pop	r28
    972a:	08 95       	ret

0000972c <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    972c:	4f 92       	push	r4
    972e:	5f 92       	push	r5
    9730:	6f 92       	push	r6
    9732:	7f 92       	push	r7
    9734:	af 92       	push	r10
    9736:	bf 92       	push	r11
    9738:	cf 92       	push	r12
    973a:	df 92       	push	r13
    973c:	ef 92       	push	r14
    973e:	ff 92       	push	r15
    9740:	0f 93       	push	r16
    9742:	1f 93       	push	r17
    9744:	cf 93       	push	r28
    9746:	df 93       	push	r29
    9748:	cd b7       	in	r28, 0x3d	; 61
    974a:	de b7       	in	r29, 0x3e	; 62
    974c:	29 01       	movw	r4, r18
    974e:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    9750:	9b 01       	movw	r18, r22
    9752:	ac 01       	movw	r20, r24
    9754:	24 19       	sub	r18, r4
    9756:	35 09       	sbc	r19, r5
    9758:	46 09       	sbc	r20, r6
    975a:	57 09       	sbc	r21, r7
    975c:	8a 89       	ldd	r24, Y+18	; 0x12
    975e:	9b 89       	ldd	r25, Y+19	; 0x13
    9760:	ac 89       	ldd	r26, Y+20	; 0x14
    9762:	bd 89       	ldd	r27, Y+21	; 0x15
    9764:	bc 01       	movw	r22, r24
    9766:	cd 01       	movw	r24, r26
    9768:	6a 19       	sub	r22, r10
    976a:	7b 09       	sbc	r23, r11
    976c:	8c 09       	sbc	r24, r12
    976e:	9d 09       	sbc	r25, r13
    9770:	0e 94 26 5e 	call	0xbc4c	; 0xbc4c <__mulsi3>
    9774:	a8 01       	movw	r20, r16
    9776:	97 01       	movw	r18, r14
    9778:	24 19       	sub	r18, r4
    977a:	35 09       	sbc	r19, r5
    977c:	46 09       	sbc	r20, r6
    977e:	57 09       	sbc	r21, r7
    9780:	0e 94 76 5e 	call	0xbcec	; 0xbcec <__divmodsi4>
    9784:	ca 01       	movw	r24, r20
    9786:	b9 01       	movw	r22, r18
    9788:	6a 0d       	add	r22, r10
    978a:	7b 1d       	adc	r23, r11
    978c:	8c 1d       	adc	r24, r12
    978e:	9d 1d       	adc	r25, r13
}
    9790:	df 91       	pop	r29
    9792:	cf 91       	pop	r28
    9794:	1f 91       	pop	r17
    9796:	0f 91       	pop	r16
    9798:	ff 90       	pop	r15
    979a:	ef 90       	pop	r14
    979c:	df 90       	pop	r13
    979e:	cf 90       	pop	r12
    97a0:	bf 90       	pop	r11
    97a2:	af 90       	pop	r10
    97a4:	7f 90       	pop	r7
    97a6:	6f 90       	pop	r6
    97a8:	5f 90       	pop	r5
    97aa:	4f 90       	pop	r4
    97ac:	08 95       	ret

000097ae <_ZN12Adafruit_GFX9writeLineEiiiij>:
    }
    if(maxy >= miny) {
        *y1 = miny;
        *h  = maxy - miny + 1;
    }
}
    97ae:	2f 92       	push	r2
    97b0:	3f 92       	push	r3
    97b2:	4f 92       	push	r4
    97b4:	5f 92       	push	r5
    97b6:	6f 92       	push	r6
    97b8:	7f 92       	push	r7
    97ba:	8f 92       	push	r8
    97bc:	9f 92       	push	r9
    97be:	af 92       	push	r10
    97c0:	bf 92       	push	r11
    97c2:	cf 92       	push	r12
    97c4:	df 92       	push	r13
    97c6:	ef 92       	push	r14
    97c8:	ff 92       	push	r15
    97ca:	0f 93       	push	r16
    97cc:	1f 93       	push	r17
    97ce:	cf 93       	push	r28
    97d0:	df 93       	push	r29
    97d2:	00 d0       	rcall	.+0      	; 0x97d4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    97d4:	00 d0       	rcall	.+0      	; 0x97d6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    97d6:	cd b7       	in	r28, 0x3d	; 61
    97d8:	de b7       	in	r29, 0x3e	; 62
    97da:	2c 01       	movw	r4, r24
    97dc:	7e 83       	std	Y+6, r23	; 0x06
    97de:	6d 83       	std	Y+5, r22	; 0x05
    97e0:	6a 01       	movw	r12, r20
    97e2:	59 01       	movw	r10, r18
    97e4:	c8 01       	movw	r24, r16
    97e6:	fc 82       	std	Y+4, r15	; 0x04
    97e8:	eb 82       	std	Y+3, r14	; 0x03
    97ea:	48 01       	movw	r8, r16
    97ec:	84 1a       	sub	r8, r20
    97ee:	95 0a       	sbc	r9, r21
    97f0:	97 fe       	sbrs	r9, 7
    97f2:	03 c0       	rjmp	.+6      	; 0x97fa <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    97f4:	91 94       	neg	r9
    97f6:	81 94       	neg	r8
    97f8:	91 08       	sbc	r9, r1
    97fa:	35 01       	movw	r6, r10
    97fc:	2d 81       	ldd	r18, Y+5	; 0x05
    97fe:	3e 81       	ldd	r19, Y+6	; 0x06
    9800:	62 1a       	sub	r6, r18
    9802:	73 0a       	sbc	r7, r19
    9804:	77 fe       	sbrs	r7, 7
    9806:	03 c0       	rjmp	.+6      	; 0x980e <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    9808:	71 94       	neg	r7
    980a:	61 94       	neg	r6
    980c:	71 08       	sbc	r7, r1
    980e:	68 14       	cp	r6, r8
    9810:	79 04       	cpc	r7, r9
    9812:	5c f4       	brge	.+22     	; 0x982a <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    9814:	3a 2d       	mov	r19, r10
    9816:	2b 2d       	mov	r18, r11
    9818:	5c 01       	movw	r10, r24
    981a:	83 2f       	mov	r24, r19
    981c:	92 2f       	mov	r25, r18
    981e:	3d 81       	ldd	r19, Y+5	; 0x05
    9820:	2e 81       	ldd	r18, Y+6	; 0x06
    9822:	de 82       	std	Y+6, r13	; 0x06
    9824:	cd 82       	std	Y+5, r12	; 0x05
    9826:	c3 2e       	mov	r12, r19
    9828:	d2 2e       	mov	r13, r18
    982a:	ad 81       	ldd	r26, Y+5	; 0x05
    982c:	be 81       	ldd	r27, Y+6	; 0x06
    982e:	aa 16       	cp	r10, r26
    9830:	bb 06       	cpc	r11, r27
    9832:	5c f4       	brge	.+22     	; 0x984a <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    9834:	3c 2d       	mov	r19, r12
    9836:	2d 2d       	mov	r18, r13
    9838:	6c 01       	movw	r12, r24
    983a:	83 2f       	mov	r24, r19
    983c:	92 2f       	mov	r25, r18
    983e:	3d 81       	ldd	r19, Y+5	; 0x05
    9840:	2e 81       	ldd	r18, Y+6	; 0x06
    9842:	be 82       	std	Y+6, r11	; 0x06
    9844:	ad 82       	std	Y+5, r10	; 0x05
    9846:	a3 2e       	mov	r10, r19
    9848:	b2 2e       	mov	r11, r18
    984a:	85 01       	movw	r16, r10
    984c:	2d 81       	ldd	r18, Y+5	; 0x05
    984e:	3e 81       	ldd	r19, Y+6	; 0x06
    9850:	02 1b       	sub	r16, r18
    9852:	13 0b       	sbc	r17, r19
    9854:	1c 01       	movw	r2, r24
    9856:	2c 18       	sub	r2, r12
    9858:	3d 08       	sbc	r3, r13
    985a:	37 fe       	sbrs	r3, 7
    985c:	03 c0       	rjmp	.+6      	; 0x9864 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    985e:	31 94       	neg	r3
    9860:	21 94       	neg	r2
    9862:	31 08       	sbc	r3, r1
    9864:	78 01       	movw	r14, r16
    9866:	17 ff       	sbrs	r17, 7
    9868:	03 c0       	rjmp	.+6      	; 0x9870 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    986a:	3f ef       	ldi	r19, 0xFF	; 255
    986c:	e3 1a       	sub	r14, r19
    986e:	f3 0a       	sbc	r15, r19
    9870:	f5 94       	asr	r15
    9872:	e7 94       	ror	r14
    9874:	c8 16       	cp	r12, r24
    9876:	d9 06       	cpc	r13, r25
    9878:	2c f0       	brlt	.+10     	; 0x9884 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    987a:	8f ef       	ldi	r24, 0xFF	; 255
    987c:	9f ef       	ldi	r25, 0xFF	; 255
    987e:	9a 83       	std	Y+2, r25	; 0x02
    9880:	89 83       	std	Y+1, r24	; 0x01
    9882:	04 c0       	rjmp	.+8      	; 0x988c <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    9884:	a1 e0       	ldi	r26, 0x01	; 1
    9886:	b0 e0       	ldi	r27, 0x00	; 0
    9888:	ba 83       	std	Y+2, r27	; 0x02
    988a:	a9 83       	std	Y+1, r26	; 0x01
    988c:	2d 81       	ldd	r18, Y+5	; 0x05
    988e:	3e 81       	ldd	r19, Y+6	; 0x06
    9890:	a2 16       	cp	r10, r18
    9892:	b3 06       	cpc	r11, r19
    9894:	24 f1       	brlt	.+72     	; 0x98de <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    9896:	d2 01       	movw	r26, r4
    9898:	ed 91       	ld	r30, X+
    989a:	fc 91       	ld	r31, X
    989c:	04 84       	ldd	r0, Z+12	; 0x0c
    989e:	f5 85       	ldd	r31, Z+13	; 0x0d
    98a0:	e0 2d       	mov	r30, r0
    98a2:	2b 81       	ldd	r18, Y+3	; 0x03
    98a4:	3c 81       	ldd	r19, Y+4	; 0x04
    98a6:	68 14       	cp	r6, r8
    98a8:	79 04       	cpc	r7, r9
    98aa:	24 f4       	brge	.+8      	; 0x98b4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    98ac:	4d 81       	ldd	r20, Y+5	; 0x05
    98ae:	5e 81       	ldd	r21, Y+6	; 0x06
    98b0:	b6 01       	movw	r22, r12
    98b2:	03 c0       	rjmp	.+6      	; 0x98ba <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    98b4:	a6 01       	movw	r20, r12
    98b6:	6d 81       	ldd	r22, Y+5	; 0x05
    98b8:	7e 81       	ldd	r23, Y+6	; 0x06
    98ba:	c2 01       	movw	r24, r4
    98bc:	19 95       	eicall
    98be:	e2 18       	sub	r14, r2
    98c0:	f3 08       	sbc	r15, r3
    98c2:	f7 fe       	sbrs	r15, 7
    98c4:	06 c0       	rjmp	.+12     	; 0x98d2 <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    98c6:	29 81       	ldd	r18, Y+1	; 0x01
    98c8:	3a 81       	ldd	r19, Y+2	; 0x02
    98ca:	c2 0e       	add	r12, r18
    98cc:	d3 1e       	adc	r13, r19
    98ce:	e0 0e       	add	r14, r16
    98d0:	f1 1e       	adc	r15, r17
    98d2:	8d 81       	ldd	r24, Y+5	; 0x05
    98d4:	9e 81       	ldd	r25, Y+6	; 0x06
    98d6:	01 96       	adiw	r24, 0x01	; 1
    98d8:	9e 83       	std	Y+6, r25	; 0x06
    98da:	8d 83       	std	Y+5, r24	; 0x05
    98dc:	d7 cf       	rjmp	.-82     	; 0x988c <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    98de:	26 96       	adiw	r28, 0x06	; 6
    98e0:	0f b6       	in	r0, 0x3f	; 63
    98e2:	f8 94       	cli
    98e4:	de bf       	out	0x3e, r29	; 62
    98e6:	0f be       	out	0x3f, r0	; 63
    98e8:	cd bf       	out	0x3d, r28	; 61
    98ea:	df 91       	pop	r29
    98ec:	cf 91       	pop	r28
    98ee:	1f 91       	pop	r17
    98f0:	0f 91       	pop	r16
    98f2:	ff 90       	pop	r15
    98f4:	ef 90       	pop	r14
    98f6:	df 90       	pop	r13
    98f8:	cf 90       	pop	r12
    98fa:	bf 90       	pop	r11
    98fc:	af 90       	pop	r10
    98fe:	9f 90       	pop	r9
    9900:	8f 90       	pop	r8
    9902:	7f 90       	pop	r7
    9904:	6f 90       	pop	r6
    9906:	5f 90       	pop	r5
    9908:	4f 90       	pop	r4
    990a:	3f 90       	pop	r3
    990c:	2f 90       	pop	r2
    990e:	08 95       	ret

00009910 <_ZN12Adafruit_GFX10writePixelEiij>:
    9910:	dc 01       	movw	r26, r24
    9912:	ed 91       	ld	r30, X+
    9914:	fc 91       	ld	r31, X
    9916:	00 84       	ldd	r0, Z+8	; 0x08
    9918:	f1 85       	ldd	r31, Z+9	; 0x09
    991a:	e0 2d       	mov	r30, r0
    991c:	19 94       	eijmp

0000991e <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    991e:	0f 93       	push	r16
    9920:	1f 93       	push	r17
    9922:	dc 01       	movw	r26, r24
    9924:	ed 91       	ld	r30, X+
    9926:	fc 91       	ld	r31, X
    9928:	04 8c       	ldd	r0, Z+28	; 0x1c
    992a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    992c:	e0 2d       	mov	r30, r0
    992e:	19 95       	eicall
    9930:	1f 91       	pop	r17
    9932:	0f 91       	pop	r16
    9934:	08 95       	ret

00009936 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    9936:	0f 93       	push	r16
    9938:	1f 93       	push	r17
    993a:	dc 01       	movw	r26, r24
    993c:	ed 91       	ld	r30, X+
    993e:	fc 91       	ld	r31, X
    9940:	06 8c       	ldd	r0, Z+30	; 0x1e
    9942:	f7 8d       	ldd	r31, Z+31	; 0x1f
    9944:	e0 2d       	mov	r30, r0
    9946:	19 95       	eicall
    9948:	1f 91       	pop	r17
    994a:	0f 91       	pop	r16
    994c:	08 95       	ret

0000994e <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    994e:	ef 92       	push	r14
    9950:	ff 92       	push	r15
    9952:	0f 93       	push	r16
    9954:	1f 93       	push	r17
    9956:	dc 01       	movw	r26, r24
    9958:	ed 91       	ld	r30, X+
    995a:	fc 91       	ld	r31, X
    995c:	00 a0       	ldd	r0, Z+32	; 0x20
    995e:	f1 a1       	ldd	r31, Z+33	; 0x21
    9960:	e0 2d       	mov	r30, r0
    9962:	19 95       	eicall
    9964:	1f 91       	pop	r17
    9966:	0f 91       	pop	r16
    9968:	ff 90       	pop	r15
    996a:	ef 90       	pop	r14
    996c:	08 95       	ret

0000996e <_ZN12Adafruit_GFX10startWriteEv>:
    996e:	08 95       	ret

00009970 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    9970:	8f 92       	push	r8
    9972:	9f 92       	push	r9
    9974:	af 92       	push	r10
    9976:	bf 92       	push	r11
    9978:	cf 92       	push	r12
    997a:	df 92       	push	r13
    997c:	ef 92       	push	r14
    997e:	ff 92       	push	r15
    9980:	0f 93       	push	r16
    9982:	1f 93       	push	r17
    9984:	cf 93       	push	r28
    9986:	df 93       	push	r29
    9988:	ec 01       	movw	r28, r24
    998a:	5b 01       	movw	r10, r22
    998c:	4a 01       	movw	r8, r20
    998e:	69 01       	movw	r12, r18
    9990:	78 01       	movw	r14, r16
    9992:	e8 81       	ld	r30, Y
    9994:	f9 81       	ldd	r31, Y+1	; 0x01
    9996:	02 84       	ldd	r0, Z+10	; 0x0a
    9998:	f3 85       	ldd	r31, Z+11	; 0x0b
    999a:	e0 2d       	mov	r30, r0
    999c:	19 95       	eicall
    999e:	c8 0c       	add	r12, r8
    99a0:	d9 1c       	adc	r13, r9
    99a2:	86 01       	movw	r16, r12
    99a4:	01 50       	subi	r16, 0x01	; 1
    99a6:	11 09       	sbc	r17, r1
    99a8:	e8 81       	ld	r30, Y
    99aa:	f9 81       	ldd	r31, Y+1	; 0x01
    99ac:	04 88       	ldd	r0, Z+20	; 0x14
    99ae:	f5 89       	ldd	r31, Z+21	; 0x15
    99b0:	e0 2d       	mov	r30, r0
    99b2:	95 01       	movw	r18, r10
    99b4:	a4 01       	movw	r20, r8
    99b6:	b5 01       	movw	r22, r10
    99b8:	ce 01       	movw	r24, r28
    99ba:	19 95       	eicall
    99bc:	e8 81       	ld	r30, Y
    99be:	f9 81       	ldd	r31, Y+1	; 0x01
    99c0:	06 88       	ldd	r0, Z+22	; 0x16
    99c2:	f7 89       	ldd	r31, Z+23	; 0x17
    99c4:	e0 2d       	mov	r30, r0
    99c6:	ce 01       	movw	r24, r28
    99c8:	df 91       	pop	r29
    99ca:	cf 91       	pop	r28
    99cc:	1f 91       	pop	r17
    99ce:	0f 91       	pop	r16
    99d0:	ff 90       	pop	r15
    99d2:	ef 90       	pop	r14
    99d4:	df 90       	pop	r13
    99d6:	cf 90       	pop	r12
    99d8:	bf 90       	pop	r11
    99da:	af 90       	pop	r10
    99dc:	9f 90       	pop	r9
    99de:	8f 90       	pop	r8
    99e0:	19 94       	eijmp

000099e2 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    99e2:	8f 92       	push	r8
    99e4:	9f 92       	push	r9
    99e6:	af 92       	push	r10
    99e8:	bf 92       	push	r11
    99ea:	cf 92       	push	r12
    99ec:	df 92       	push	r13
    99ee:	ef 92       	push	r14
    99f0:	ff 92       	push	r15
    99f2:	0f 93       	push	r16
    99f4:	1f 93       	push	r17
    99f6:	cf 93       	push	r28
    99f8:	df 93       	push	r29
    99fa:	ec 01       	movw	r28, r24
    99fc:	5b 01       	movw	r10, r22
    99fe:	4a 01       	movw	r8, r20
    9a00:	69 01       	movw	r12, r18
    9a02:	e8 81       	ld	r30, Y
    9a04:	f9 81       	ldd	r31, Y+1	; 0x01
    9a06:	02 84       	ldd	r0, Z+10	; 0x0a
    9a08:	f3 85       	ldd	r31, Z+11	; 0x0b
    9a0a:	e0 2d       	mov	r30, r0
    9a0c:	19 95       	eicall
    9a0e:	95 01       	movw	r18, r10
    9a10:	2c 0d       	add	r18, r12
    9a12:	3d 1d       	adc	r19, r13
    9a14:	21 50       	subi	r18, 0x01	; 1
    9a16:	31 09       	sbc	r19, r1
    9a18:	e8 81       	ld	r30, Y
    9a1a:	f9 81       	ldd	r31, Y+1	; 0x01
    9a1c:	04 88       	ldd	r0, Z+20	; 0x14
    9a1e:	f5 89       	ldd	r31, Z+21	; 0x15
    9a20:	e0 2d       	mov	r30, r0
    9a22:	78 01       	movw	r14, r16
    9a24:	84 01       	movw	r16, r8
    9a26:	a4 01       	movw	r20, r8
    9a28:	b5 01       	movw	r22, r10
    9a2a:	ce 01       	movw	r24, r28
    9a2c:	19 95       	eicall
    9a2e:	e8 81       	ld	r30, Y
    9a30:	f9 81       	ldd	r31, Y+1	; 0x01
    9a32:	06 88       	ldd	r0, Z+22	; 0x16
    9a34:	f7 89       	ldd	r31, Z+23	; 0x17
    9a36:	e0 2d       	mov	r30, r0
    9a38:	ce 01       	movw	r24, r28
    9a3a:	df 91       	pop	r29
    9a3c:	cf 91       	pop	r28
    9a3e:	1f 91       	pop	r17
    9a40:	0f 91       	pop	r16
    9a42:	ff 90       	pop	r15
    9a44:	ef 90       	pop	r14
    9a46:	df 90       	pop	r13
    9a48:	cf 90       	pop	r12
    9a4a:	bf 90       	pop	r11
    9a4c:	af 90       	pop	r10
    9a4e:	9f 90       	pop	r9
    9a50:	8f 90       	pop	r8
    9a52:	19 94       	eijmp

00009a54 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    9a54:	4f 92       	push	r4
    9a56:	5f 92       	push	r5
    9a58:	6f 92       	push	r6
    9a5a:	7f 92       	push	r7
    9a5c:	8f 92       	push	r8
    9a5e:	9f 92       	push	r9
    9a60:	af 92       	push	r10
    9a62:	bf 92       	push	r11
    9a64:	cf 92       	push	r12
    9a66:	df 92       	push	r13
    9a68:	ef 92       	push	r14
    9a6a:	ff 92       	push	r15
    9a6c:	0f 93       	push	r16
    9a6e:	1f 93       	push	r17
    9a70:	cf 93       	push	r28
    9a72:	df 93       	push	r29
    9a74:	6c 01       	movw	r12, r24
    9a76:	2b 01       	movw	r4, r22
    9a78:	5a 01       	movw	r10, r20
    9a7a:	39 01       	movw	r6, r18
    9a7c:	48 01       	movw	r8, r16
    9a7e:	dc 01       	movw	r26, r24
    9a80:	ed 91       	ld	r30, X+
    9a82:	fc 91       	ld	r31, X
    9a84:	02 84       	ldd	r0, Z+10	; 0x0a
    9a86:	f3 85       	ldd	r31, Z+11	; 0x0b
    9a88:	e0 2d       	mov	r30, r0
    9a8a:	19 95       	eicall
    9a8c:	e2 01       	movw	r28, r4
    9a8e:	64 0c       	add	r6, r4
    9a90:	75 1c       	adc	r7, r5
    9a92:	d6 01       	movw	r26, r12
    9a94:	ed 91       	ld	r30, X+
    9a96:	fc 91       	ld	r31, X
    9a98:	c6 15       	cp	r28, r6
    9a9a:	d7 05       	cpc	r29, r7
    9a9c:	5c f4       	brge	.+22     	; 0x9ab4 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    9a9e:	00 88       	ldd	r0, Z+16	; 0x10
    9aa0:	f1 89       	ldd	r31, Z+17	; 0x11
    9aa2:	e0 2d       	mov	r30, r0
    9aa4:	87 01       	movw	r16, r14
    9aa6:	94 01       	movw	r18, r8
    9aa8:	a5 01       	movw	r20, r10
    9aaa:	be 01       	movw	r22, r28
    9aac:	c6 01       	movw	r24, r12
    9aae:	19 95       	eicall
    9ab0:	21 96       	adiw	r28, 0x01	; 1
    9ab2:	ef cf       	rjmp	.-34     	; 0x9a92 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    9ab4:	06 88       	ldd	r0, Z+22	; 0x16
    9ab6:	f7 89       	ldd	r31, Z+23	; 0x17
    9ab8:	e0 2d       	mov	r30, r0
    9aba:	c6 01       	movw	r24, r12
    9abc:	df 91       	pop	r29
    9abe:	cf 91       	pop	r28
    9ac0:	1f 91       	pop	r17
    9ac2:	0f 91       	pop	r16
    9ac4:	ff 90       	pop	r15
    9ac6:	ef 90       	pop	r14
    9ac8:	df 90       	pop	r13
    9aca:	cf 90       	pop	r12
    9acc:	bf 90       	pop	r11
    9ace:	af 90       	pop	r10
    9ad0:	9f 90       	pop	r9
    9ad2:	8f 90       	pop	r8
    9ad4:	7f 90       	pop	r7
    9ad6:	6f 90       	pop	r6
    9ad8:	5f 90       	pop	r5
    9ada:	4f 90       	pop	r4
    9adc:	19 94       	eijmp

00009ade <_ZN12Adafruit_GFX10fillScreenEj>:
    9ade:	ef 92       	push	r14
    9ae0:	ff 92       	push	r15
    9ae2:	0f 93       	push	r16
    9ae4:	1f 93       	push	r17
    9ae6:	dc 01       	movw	r26, r24
    9ae8:	1a 96       	adiw	r26, 0x0a	; 10
    9aea:	0d 91       	ld	r16, X+
    9aec:	1c 91       	ld	r17, X
    9aee:	1b 97       	sbiw	r26, 0x0b	; 11
    9af0:	18 96       	adiw	r26, 0x08	; 8
    9af2:	2d 91       	ld	r18, X+
    9af4:	3c 91       	ld	r19, X
    9af6:	19 97       	sbiw	r26, 0x09	; 9
    9af8:	ed 91       	ld	r30, X+
    9afa:	fc 91       	ld	r31, X
    9afc:	00 a0       	ldd	r0, Z+32	; 0x20
    9afe:	f1 a1       	ldd	r31, Z+33	; 0x21
    9b00:	e0 2d       	mov	r30, r0
    9b02:	7b 01       	movw	r14, r22
    9b04:	40 e0       	ldi	r20, 0x00	; 0
    9b06:	50 e0       	ldi	r21, 0x00	; 0
    9b08:	60 e0       	ldi	r22, 0x00	; 0
    9b0a:	70 e0       	ldi	r23, 0x00	; 0
    9b0c:	19 95       	eicall
    9b0e:	1f 91       	pop	r17
    9b10:	0f 91       	pop	r16
    9b12:	ff 90       	pop	r15
    9b14:	ef 90       	pop	r14
    9b16:	08 95       	ret

00009b18 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    9b18:	8f 92       	push	r8
    9b1a:	9f 92       	push	r9
    9b1c:	af 92       	push	r10
    9b1e:	bf 92       	push	r11
    9b20:	cf 92       	push	r12
    9b22:	df 92       	push	r13
    9b24:	ef 92       	push	r14
    9b26:	ff 92       	push	r15
    9b28:	0f 93       	push	r16
    9b2a:	1f 93       	push	r17
    9b2c:	cf 93       	push	r28
    9b2e:	df 93       	push	r29
    9b30:	4c 01       	movw	r8, r24
    9b32:	6b 01       	movw	r12, r22
    9b34:	5a 01       	movw	r10, r20
    9b36:	e9 01       	movw	r28, r18
    9b38:	dc 01       	movw	r26, r24
    9b3a:	ed 91       	ld	r30, X+
    9b3c:	fc 91       	ld	r31, X
    9b3e:	62 17       	cp	r22, r18
    9b40:	73 07       	cpc	r23, r19
    9b42:	81 f4       	brne	.+32     	; 0x9b64 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    9b44:	04 17       	cp	r16, r20
    9b46:	15 07       	cpc	r17, r21
    9b48:	24 f4       	brge	.+8      	; 0x9b52 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    9b4a:	8b 2d       	mov	r24, r11
    9b4c:	58 01       	movw	r10, r16
    9b4e:	04 2f       	mov	r16, r20
    9b50:	18 2f       	mov	r17, r24
    9b52:	0a 19       	sub	r16, r10
    9b54:	1b 09       	sbc	r17, r11
    9b56:	98 01       	movw	r18, r16
    9b58:	2f 5f       	subi	r18, 0xFF	; 255
    9b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    9b5c:	04 8c       	ldd	r0, Z+28	; 0x1c
    9b5e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    9b60:	e0 2d       	mov	r30, r0
    9b62:	12 c0       	rjmp	.+36     	; 0x9b88 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    9b64:	40 17       	cp	r20, r16
    9b66:	51 07       	cpc	r21, r17
    9b68:	09 f5       	brne	.+66     	; 0x9bac <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    9b6a:	26 17       	cp	r18, r22
    9b6c:	37 07       	cpc	r19, r23
    9b6e:	24 f4       	brge	.+8      	; 0x9b78 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    9b70:	8d 2d       	mov	r24, r13
    9b72:	69 01       	movw	r12, r18
    9b74:	c6 2f       	mov	r28, r22
    9b76:	d8 2f       	mov	r29, r24
    9b78:	9e 01       	movw	r18, r28
    9b7a:	2c 19       	sub	r18, r12
    9b7c:	3d 09       	sbc	r19, r13
    9b7e:	2f 5f       	subi	r18, 0xFF	; 255
    9b80:	3f 4f       	sbci	r19, 0xFF	; 255
    9b82:	06 8c       	ldd	r0, Z+30	; 0x1e
    9b84:	f7 8d       	ldd	r31, Z+31	; 0x1f
    9b86:	e0 2d       	mov	r30, r0
    9b88:	87 01       	movw	r16, r14
    9b8a:	a5 01       	movw	r20, r10
    9b8c:	b6 01       	movw	r22, r12
    9b8e:	c4 01       	movw	r24, r8
    9b90:	19 95       	eicall
    9b92:	df 91       	pop	r29
    9b94:	cf 91       	pop	r28
    9b96:	1f 91       	pop	r17
    9b98:	0f 91       	pop	r16
    9b9a:	ff 90       	pop	r15
    9b9c:	ef 90       	pop	r14
    9b9e:	df 90       	pop	r13
    9ba0:	cf 90       	pop	r12
    9ba2:	bf 90       	pop	r11
    9ba4:	af 90       	pop	r10
    9ba6:	9f 90       	pop	r9
    9ba8:	8f 90       	pop	r8
    9baa:	08 95       	ret
    9bac:	02 84       	ldd	r0, Z+10	; 0x0a
    9bae:	f3 85       	ldd	r31, Z+11	; 0x0b
    9bb0:	e0 2d       	mov	r30, r0
    9bb2:	19 95       	eicall
    9bb4:	d4 01       	movw	r26, r8
    9bb6:	ed 91       	ld	r30, X+
    9bb8:	fc 91       	ld	r31, X
    9bba:	04 88       	ldd	r0, Z+20	; 0x14
    9bbc:	f5 89       	ldd	r31, Z+21	; 0x15
    9bbe:	e0 2d       	mov	r30, r0
    9bc0:	9e 01       	movw	r18, r28
    9bc2:	a5 01       	movw	r20, r10
    9bc4:	b6 01       	movw	r22, r12
    9bc6:	c4 01       	movw	r24, r8
    9bc8:	19 95       	eicall
    9bca:	d4 01       	movw	r26, r8
    9bcc:	ed 91       	ld	r30, X+
    9bce:	fc 91       	ld	r31, X
    9bd0:	06 88       	ldd	r0, Z+22	; 0x16
    9bd2:	f7 89       	ldd	r31, Z+23	; 0x17
    9bd4:	e0 2d       	mov	r30, r0
    9bd6:	c4 01       	movw	r24, r8
    9bd8:	df 91       	pop	r29
    9bda:	cf 91       	pop	r28
    9bdc:	1f 91       	pop	r17
    9bde:	0f 91       	pop	r16
    9be0:	ff 90       	pop	r15
    9be2:	ef 90       	pop	r14
    9be4:	df 90       	pop	r13
    9be6:	cf 90       	pop	r12
    9be8:	bf 90       	pop	r11
    9bea:	af 90       	pop	r10
    9bec:	9f 90       	pop	r9
    9bee:	8f 90       	pop	r8
    9bf0:	19 94       	eijmp

00009bf2 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    9bf2:	6f 92       	push	r6
    9bf4:	7f 92       	push	r7
    9bf6:	8f 92       	push	r8
    9bf8:	9f 92       	push	r9
    9bfa:	af 92       	push	r10
    9bfc:	bf 92       	push	r11
    9bfe:	cf 92       	push	r12
    9c00:	df 92       	push	r13
    9c02:	ef 92       	push	r14
    9c04:	ff 92       	push	r15
    9c06:	0f 93       	push	r16
    9c08:	1f 93       	push	r17
    9c0a:	cf 93       	push	r28
    9c0c:	df 93       	push	r29
    9c0e:	ec 01       	movw	r28, r24
    9c10:	4b 01       	movw	r8, r22
    9c12:	5a 01       	movw	r10, r20
    9c14:	69 01       	movw	r12, r18
    9c16:	38 01       	movw	r6, r16
    9c18:	e8 81       	ld	r30, Y
    9c1a:	f9 81       	ldd	r31, Y+1	; 0x01
    9c1c:	02 84       	ldd	r0, Z+10	; 0x0a
    9c1e:	f3 85       	ldd	r31, Z+11	; 0x0b
    9c20:	e0 2d       	mov	r30, r0
    9c22:	19 95       	eicall
    9c24:	e8 81       	ld	r30, Y
    9c26:	f9 81       	ldd	r31, Y+1	; 0x01
    9c28:	02 88       	ldd	r0, Z+18	; 0x12
    9c2a:	f3 89       	ldd	r31, Z+19	; 0x13
    9c2c:	e0 2d       	mov	r30, r0
    9c2e:	87 01       	movw	r16, r14
    9c30:	96 01       	movw	r18, r12
    9c32:	a5 01       	movw	r20, r10
    9c34:	b4 01       	movw	r22, r8
    9c36:	ce 01       	movw	r24, r28
    9c38:	19 95       	eicall
    9c3a:	a5 01       	movw	r20, r10
    9c3c:	46 0d       	add	r20, r6
    9c3e:	57 1d       	adc	r21, r7
    9c40:	41 50       	subi	r20, 0x01	; 1
    9c42:	51 09       	sbc	r21, r1
    9c44:	e8 81       	ld	r30, Y
    9c46:	f9 81       	ldd	r31, Y+1	; 0x01
    9c48:	02 88       	ldd	r0, Z+18	; 0x12
    9c4a:	f3 89       	ldd	r31, Z+19	; 0x13
    9c4c:	e0 2d       	mov	r30, r0
    9c4e:	96 01       	movw	r18, r12
    9c50:	b4 01       	movw	r22, r8
    9c52:	ce 01       	movw	r24, r28
    9c54:	19 95       	eicall
    9c56:	e8 81       	ld	r30, Y
    9c58:	f9 81       	ldd	r31, Y+1	; 0x01
    9c5a:	00 88       	ldd	r0, Z+16	; 0x10
    9c5c:	f1 89       	ldd	r31, Z+17	; 0x11
    9c5e:	e0 2d       	mov	r30, r0
    9c60:	93 01       	movw	r18, r6
    9c62:	a5 01       	movw	r20, r10
    9c64:	b4 01       	movw	r22, r8
    9c66:	ce 01       	movw	r24, r28
    9c68:	19 95       	eicall
    9c6a:	c8 0c       	add	r12, r8
    9c6c:	d9 1c       	adc	r13, r9
    9c6e:	b6 01       	movw	r22, r12
    9c70:	61 50       	subi	r22, 0x01	; 1
    9c72:	71 09       	sbc	r23, r1
    9c74:	e8 81       	ld	r30, Y
    9c76:	f9 81       	ldd	r31, Y+1	; 0x01
    9c78:	00 88       	ldd	r0, Z+16	; 0x10
    9c7a:	f1 89       	ldd	r31, Z+17	; 0x11
    9c7c:	e0 2d       	mov	r30, r0
    9c7e:	93 01       	movw	r18, r6
    9c80:	a5 01       	movw	r20, r10
    9c82:	ce 01       	movw	r24, r28
    9c84:	19 95       	eicall
    9c86:	e8 81       	ld	r30, Y
    9c88:	f9 81       	ldd	r31, Y+1	; 0x01
    9c8a:	06 88       	ldd	r0, Z+22	; 0x16
    9c8c:	f7 89       	ldd	r31, Z+23	; 0x17
    9c8e:	e0 2d       	mov	r30, r0
    9c90:	ce 01       	movw	r24, r28
    9c92:	df 91       	pop	r29
    9c94:	cf 91       	pop	r28
    9c96:	1f 91       	pop	r17
    9c98:	0f 91       	pop	r16
    9c9a:	ff 90       	pop	r15
    9c9c:	ef 90       	pop	r14
    9c9e:	df 90       	pop	r13
    9ca0:	cf 90       	pop	r12
    9ca2:	bf 90       	pop	r11
    9ca4:	af 90       	pop	r10
    9ca6:	9f 90       	pop	r9
    9ca8:	8f 90       	pop	r8
    9caa:	7f 90       	pop	r7
    9cac:	6f 90       	pop	r6
    9cae:	19 94       	eijmp

00009cb0 <_ZN12Adafruit_GFX13invertDisplayEb>:
    9cb0:	08 95       	ret

00009cb2 <_ZN12Adafruit_GFX11setRotationEh>:
    9cb2:	fc 01       	movw	r30, r24
    9cb4:	63 70       	andi	r22, 0x03	; 3
    9cb6:	65 8b       	std	Z+21, r22	; 0x15
    9cb8:	84 81       	ldd	r24, Z+4	; 0x04
    9cba:	95 81       	ldd	r25, Z+5	; 0x05
    9cbc:	26 81       	ldd	r18, Z+6	; 0x06
    9cbe:	37 81       	ldd	r19, Z+7	; 0x07
    9cc0:	61 30       	cpi	r22, 0x01	; 1
    9cc2:	39 f0       	breq	.+14     	; 0x9cd2 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    9cc4:	63 30       	cpi	r22, 0x03	; 3
    9cc6:	29 f0       	breq	.+10     	; 0x9cd2 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    9cc8:	91 87       	std	Z+9, r25	; 0x09
    9cca:	80 87       	std	Z+8, r24	; 0x08
    9ccc:	33 87       	std	Z+11, r19	; 0x0b
    9cce:	22 87       	std	Z+10, r18	; 0x0a
    9cd0:	08 95       	ret
    9cd2:	31 87       	std	Z+9, r19	; 0x09
    9cd4:	20 87       	std	Z+8, r18	; 0x08
    9cd6:	93 87       	std	Z+11, r25	; 0x0b
    9cd8:	82 87       	std	Z+10, r24	; 0x0a
    9cda:	08 95       	ret

00009cdc <_ZN12Adafruit_GFXC1Eii>:
    9cdc:	fc 01       	movw	r30, r24
    9cde:	13 82       	std	Z+3, r1	; 0x03
    9ce0:	12 82       	std	Z+2, r1	; 0x02
    9ce2:	8f e0       	ldi	r24, 0x0F	; 15
    9ce4:	90 e1       	ldi	r25, 0x10	; 16
    9ce6:	91 83       	std	Z+1, r25	; 0x01
    9ce8:	80 83       	st	Z, r24
    9cea:	75 83       	std	Z+5, r23	; 0x05
    9cec:	64 83       	std	Z+4, r22	; 0x04
    9cee:	57 83       	std	Z+7, r21	; 0x07
    9cf0:	46 83       	std	Z+6, r20	; 0x06
    9cf2:	71 87       	std	Z+9, r23	; 0x09
    9cf4:	60 87       	std	Z+8, r22	; 0x08
    9cf6:	53 87       	std	Z+11, r21	; 0x0b
    9cf8:	42 87       	std	Z+10, r20	; 0x0a
    9cfa:	15 8a       	std	Z+21, r1	; 0x15
    9cfc:	15 86       	std	Z+13, r1	; 0x0d
    9cfe:	14 86       	std	Z+12, r1	; 0x0c
    9d00:	17 86       	std	Z+15, r1	; 0x0f
    9d02:	16 86       	std	Z+14, r1	; 0x0e
    9d04:	81 e0       	ldi	r24, 0x01	; 1
    9d06:	84 8b       	std	Z+20, r24	; 0x14
    9d08:	2f ef       	ldi	r18, 0xFF	; 255
    9d0a:	3f ef       	ldi	r19, 0xFF	; 255
    9d0c:	33 8b       	std	Z+19, r19	; 0x13
    9d0e:	22 8b       	std	Z+18, r18	; 0x12
    9d10:	31 8b       	std	Z+17, r19	; 0x11
    9d12:	20 8b       	std	Z+16, r18	; 0x10
    9d14:	86 8b       	std	Z+22, r24	; 0x16
    9d16:	17 8a       	std	Z+23, r1	; 0x17
    9d18:	11 8e       	std	Z+25, r1	; 0x19
    9d1a:	10 8e       	std	Z+24, r1	; 0x18
    9d1c:	08 95       	ret

00009d1e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    9d1e:	3f 92       	push	r3
    9d20:	4f 92       	push	r4
    9d22:	5f 92       	push	r5
    9d24:	6f 92       	push	r6
    9d26:	7f 92       	push	r7
    9d28:	8f 92       	push	r8
    9d2a:	9f 92       	push	r9
    9d2c:	af 92       	push	r10
    9d2e:	bf 92       	push	r11
    9d30:	cf 92       	push	r12
    9d32:	df 92       	push	r13
    9d34:	ef 92       	push	r14
    9d36:	ff 92       	push	r15
    9d38:	0f 93       	push	r16
    9d3a:	1f 93       	push	r17
    9d3c:	cf 93       	push	r28
    9d3e:	df 93       	push	r29
    9d40:	cd b7       	in	r28, 0x3d	; 61
    9d42:	de b7       	in	r29, 0x3e	; 62
    9d44:	2a 97       	sbiw	r28, 0x0a	; 10
    9d46:	0f b6       	in	r0, 0x3f	; 63
    9d48:	f8 94       	cli
    9d4a:	de bf       	out	0x3e, r29	; 62
    9d4c:	0f be       	out	0x3f, r0	; 63
    9d4e:	cd bf       	out	0x3d, r28	; 61
    9d50:	5c 01       	movw	r10, r24
    9d52:	7e 83       	std	Y+6, r23	; 0x06
    9d54:	6d 83       	std	Y+5, r22	; 0x05
    9d56:	58 87       	std	Y+8, r21	; 0x08
    9d58:	4f 83       	std	Y+7, r20	; 0x07
    9d5a:	29 01       	movw	r4, r18
    9d5c:	37 01       	movw	r6, r14
    9d5e:	dc 01       	movw	r26, r24
    9d60:	ed 91       	ld	r30, X+
    9d62:	fc 91       	ld	r31, X
    9d64:	02 84       	ldd	r0, Z+10	; 0x0a
    9d66:	f3 85       	ldd	r31, Z+11	; 0x0b
    9d68:	e0 2d       	mov	r30, r0
    9d6a:	19 95       	eicall
    9d6c:	c8 01       	movw	r24, r16
    9d6e:	07 96       	adiw	r24, 0x07	; 7
    9d70:	97 fd       	sbrc	r25, 7
    9d72:	07 96       	adiw	r24, 0x07	; 7
    9d74:	9c 01       	movw	r18, r24
    9d76:	93 e0       	ldi	r25, 0x03	; 3
    9d78:	35 95       	asr	r19
    9d7a:	27 95       	ror	r18
    9d7c:	9a 95       	dec	r25
    9d7e:	e1 f7       	brne	.-8      	; 0x9d78 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    9d80:	3a 83       	std	Y+2, r19	; 0x02
    9d82:	29 83       	std	Y+1, r18	; 0x01
    9d84:	81 2c       	mov	r8, r1
    9d86:	91 2c       	mov	r9, r1
    9d88:	e1 2c       	mov	r14, r1
    9d8a:	f1 2c       	mov	r15, r1
    9d8c:	31 2c       	mov	r3, r1
    9d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    9d90:	98 85       	ldd	r25, Y+8	; 0x08
    9d92:	8e 0d       	add	r24, r14
    9d94:	9f 1d       	adc	r25, r15
    9d96:	9c 83       	std	Y+4, r25	; 0x04
    9d98:	8b 83       	std	Y+3, r24	; 0x03
    9d9a:	e6 14       	cp	r14, r6
    9d9c:	f7 04       	cpc	r15, r7
    9d9e:	0c f0       	brlt	.+2      	; 0x9da2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    9da0:	3d c0       	rjmp	.+122    	; 0x9e1c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    9da2:	1a 86       	std	Y+10, r1	; 0x0a
    9da4:	19 86       	std	Y+9, r1	; 0x09
    9da6:	a9 85       	ldd	r26, Y+9	; 0x09
    9da8:	ba 85       	ldd	r27, Y+10	; 0x0a
    9daa:	a0 17       	cp	r26, r16
    9dac:	b1 07       	cpc	r27, r17
    9dae:	74 f5       	brge	.+92     	; 0x9e0c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    9db0:	cd 01       	movw	r24, r26
    9db2:	87 70       	andi	r24, 0x07	; 7
    9db4:	99 27       	eor	r25, r25
    9db6:	89 2b       	or	r24, r25
    9db8:	11 f0       	breq	.+4      	; 0x9dbe <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    9dba:	33 0c       	add	r3, r3
    9dbc:	0e c0       	rjmp	.+28     	; 0x9dda <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    9dbe:	e9 85       	ldd	r30, Y+9	; 0x09
    9dc0:	fa 85       	ldd	r31, Y+10	; 0x0a
    9dc2:	f7 fd       	sbrc	r31, 7
    9dc4:	37 96       	adiw	r30, 0x07	; 7
    9dc6:	83 e0       	ldi	r24, 0x03	; 3
    9dc8:	f5 95       	asr	r31
    9dca:	e7 95       	ror	r30
    9dcc:	8a 95       	dec	r24
    9dce:	e1 f7       	brne	.-8      	; 0x9dc8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    9dd0:	e8 0d       	add	r30, r8
    9dd2:	f9 1d       	adc	r31, r9
    9dd4:	e4 0d       	add	r30, r4
    9dd6:	f5 1d       	adc	r31, r5
    9dd8:	34 90       	lpm	r3, Z
    9dda:	37 fe       	sbrs	r3, 7
    9ddc:	11 c0       	rjmp	.+34     	; 0x9e00 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    9dde:	d5 01       	movw	r26, r10
    9de0:	ed 91       	ld	r30, X+
    9de2:	fc 91       	ld	r31, X
    9de4:	04 84       	ldd	r0, Z+12	; 0x0c
    9de6:	f5 85       	ldd	r31, Z+13	; 0x0d
    9de8:	e0 2d       	mov	r30, r0
    9dea:	96 01       	movw	r18, r12
    9dec:	4b 81       	ldd	r20, Y+3	; 0x03
    9dee:	5c 81       	ldd	r21, Y+4	; 0x04
    9df0:	6d 81       	ldd	r22, Y+5	; 0x05
    9df2:	7e 81       	ldd	r23, Y+6	; 0x06
    9df4:	89 85       	ldd	r24, Y+9	; 0x09
    9df6:	9a 85       	ldd	r25, Y+10	; 0x0a
    9df8:	68 0f       	add	r22, r24
    9dfa:	79 1f       	adc	r23, r25
    9dfc:	c5 01       	movw	r24, r10
    9dfe:	19 95       	eicall
    9e00:	a9 85       	ldd	r26, Y+9	; 0x09
    9e02:	ba 85       	ldd	r27, Y+10	; 0x0a
    9e04:	11 96       	adiw	r26, 0x01	; 1
    9e06:	ba 87       	std	Y+10, r27	; 0x0a
    9e08:	a9 87       	std	Y+9, r26	; 0x09
    9e0a:	cd cf       	rjmp	.-102    	; 0x9da6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    9e0c:	bf ef       	ldi	r27, 0xFF	; 255
    9e0e:	eb 1a       	sub	r14, r27
    9e10:	fb 0a       	sbc	r15, r27
    9e12:	29 81       	ldd	r18, Y+1	; 0x01
    9e14:	3a 81       	ldd	r19, Y+2	; 0x02
    9e16:	82 0e       	add	r8, r18
    9e18:	93 1e       	adc	r9, r19
    9e1a:	b9 cf       	rjmp	.-142    	; 0x9d8e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    9e1c:	d5 01       	movw	r26, r10
    9e1e:	ed 91       	ld	r30, X+
    9e20:	fc 91       	ld	r31, X
    9e22:	06 88       	ldd	r0, Z+22	; 0x16
    9e24:	f7 89       	ldd	r31, Z+23	; 0x17
    9e26:	e0 2d       	mov	r30, r0
    9e28:	c5 01       	movw	r24, r10
    9e2a:	2a 96       	adiw	r28, 0x0a	; 10
    9e2c:	0f b6       	in	r0, 0x3f	; 63
    9e2e:	f8 94       	cli
    9e30:	de bf       	out	0x3e, r29	; 62
    9e32:	0f be       	out	0x3f, r0	; 63
    9e34:	cd bf       	out	0x3d, r28	; 61
    9e36:	df 91       	pop	r29
    9e38:	cf 91       	pop	r28
    9e3a:	1f 91       	pop	r17
    9e3c:	0f 91       	pop	r16
    9e3e:	ff 90       	pop	r15
    9e40:	ef 90       	pop	r14
    9e42:	df 90       	pop	r13
    9e44:	cf 90       	pop	r12
    9e46:	bf 90       	pop	r11
    9e48:	af 90       	pop	r10
    9e4a:	9f 90       	pop	r9
    9e4c:	8f 90       	pop	r8
    9e4e:	7f 90       	pop	r7
    9e50:	6f 90       	pop	r6
    9e52:	5f 90       	pop	r5
    9e54:	4f 90       	pop	r4
    9e56:	3f 90       	pop	r3
    9e58:	19 94       	eijmp

00009e5a <_ZN12Adafruit_GFX8drawCharEiihjjh>:
    9e5a:	2f 92       	push	r2
    9e5c:	3f 92       	push	r3
    9e5e:	4f 92       	push	r4
    9e60:	5f 92       	push	r5
    9e62:	6f 92       	push	r6
    9e64:	7f 92       	push	r7
    9e66:	8f 92       	push	r8
    9e68:	9f 92       	push	r9
    9e6a:	af 92       	push	r10
    9e6c:	bf 92       	push	r11
    9e6e:	cf 92       	push	r12
    9e70:	df 92       	push	r13
    9e72:	ef 92       	push	r14
    9e74:	ff 92       	push	r15
    9e76:	0f 93       	push	r16
    9e78:	1f 93       	push	r17
    9e7a:	cf 93       	push	r28
    9e7c:	df 93       	push	r29
    9e7e:	cd b7       	in	r28, 0x3d	; 61
    9e80:	de b7       	in	r29, 0x3e	; 62
    9e82:	6b 97       	sbiw	r28, 0x1b	; 27
    9e84:	0f b6       	in	r0, 0x3f	; 63
    9e86:	f8 94       	cli
    9e88:	de bf       	out	0x3e, r29	; 62
    9e8a:	0f be       	out	0x3f, r0	; 63
    9e8c:	cd bf       	out	0x3d, r28	; 61
    9e8e:	9b 8f       	std	Y+27, r25	; 0x1b
    9e90:	8a 8f       	std	Y+26, r24	; 0x1a
    9e92:	5b 01       	movw	r10, r22
    9e94:	1a 01       	movw	r2, r20
    9e96:	d2 2e       	mov	r13, r18
    9e98:	1f 83       	std	Y+7, r17	; 0x07
    9e9a:	0e 83       	std	Y+6, r16	; 0x06
    9e9c:	37 01       	movw	r6, r14
    9e9e:	c9 82       	std	Y+1, r12	; 0x01
    9ea0:	dc 01       	movw	r26, r24
    9ea2:	58 96       	adiw	r26, 0x18	; 24
    9ea4:	2d 91       	ld	r18, X+
    9ea6:	3c 91       	ld	r19, X
    9ea8:	59 97       	sbiw	r26, 0x19	; 25
    9eaa:	21 15       	cp	r18, r1
    9eac:	31 05       	cpc	r19, r1
    9eae:	09 f0       	breq	.+2      	; 0x9eb2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x58>
    9eb0:	e6 c0       	rjmp	.+460    	; 0xa07e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x224>
    9eb2:	18 96       	adiw	r26, 0x08	; 8
    9eb4:	8d 91       	ld	r24, X+
    9eb6:	9c 91       	ld	r25, X
    9eb8:	19 97       	sbiw	r26, 0x09	; 9
    9eba:	68 17       	cp	r22, r24
    9ebc:	79 07       	cpc	r23, r25
    9ebe:	0c f0       	brlt	.+2      	; 0x9ec2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x68>
    9ec0:	cd c1       	rjmp	.+922    	; 0xa25c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    9ec2:	1a 96       	adiw	r26, 0x0a	; 10
    9ec4:	8d 91       	ld	r24, X+
    9ec6:	9c 91       	ld	r25, X
    9ec8:	1b 97       	sbiw	r26, 0x0b	; 11
    9eca:	48 17       	cp	r20, r24
    9ecc:	59 07       	cpc	r21, r25
    9ece:	0c f0       	brlt	.+2      	; 0x9ed2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x78>
    9ed0:	c5 c1       	rjmp	.+906    	; 0xa25c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    9ed2:	8c 2c       	mov	r8, r12
    9ed4:	91 2c       	mov	r9, r1
    9ed6:	fb 01       	movw	r30, r22
    9ed8:	26 e0       	ldi	r18, 0x06	; 6
    9eda:	c2 9e       	mul	r12, r18
    9edc:	e0 0d       	add	r30, r0
    9ede:	f1 1d       	adc	r31, r1
    9ee0:	11 24       	eor	r1, r1
    9ee2:	fb 87       	std	Y+11, r31	; 0x0b
    9ee4:	ea 87       	std	Y+10, r30	; 0x0a
    9ee6:	1e 16       	cp	r1, r30
    9ee8:	1f 06       	cpc	r1, r31
    9eea:	0c f0       	brlt	.+2      	; 0x9eee <_ZN12Adafruit_GFX8drawCharEiihjjh+0x94>
    9eec:	b7 c1       	rjmp	.+878    	; 0xa25c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    9eee:	a4 01       	movw	r20, r8
    9ef0:	83 e0       	ldi	r24, 0x03	; 3
    9ef2:	44 0f       	add	r20, r20
    9ef4:	55 1f       	adc	r21, r21
    9ef6:	8a 95       	dec	r24
    9ef8:	e1 f7       	brne	.-8      	; 0x9ef2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x98>
    9efa:	5d 87       	std	Y+13, r21	; 0x0d
    9efc:	4c 87       	std	Y+12, r20	; 0x0c
    9efe:	ca 01       	movw	r24, r20
    9f00:	82 0d       	add	r24, r2
    9f02:	93 1d       	adc	r25, r3
    9f04:	18 16       	cp	r1, r24
    9f06:	19 06       	cpc	r1, r25
    9f08:	0c f0       	brlt	.+2      	; 0x9f0c <_ZN12Adafruit_GFX8drawCharEiihjjh+0xb2>
    9f0a:	a8 c1       	rjmp	.+848    	; 0xa25c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x402>
    9f0c:	57 96       	adiw	r26, 0x17	; 23
    9f0e:	8c 91       	ld	r24, X
    9f10:	81 11       	cpse	r24, r1
    9f12:	04 c0       	rjmp	.+8      	; 0x9f1c <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    9f14:	5f ea       	ldi	r21, 0xAF	; 175
    9f16:	5d 15       	cp	r21, r13
    9f18:	08 f4       	brcc	.+2      	; 0x9f1c <_ZN12Adafruit_GFX8drawCharEiihjjh+0xc2>
    9f1a:	d3 94       	inc	r13
    9f1c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9f1e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    9f20:	ed 91       	ld	r30, X+
    9f22:	fc 91       	ld	r31, X
    9f24:	11 97       	sbiw	r26, 0x01	; 1
    9f26:	02 84       	ldd	r0, Z+10	; 0x0a
    9f28:	f3 85       	ldd	r31, Z+11	; 0x0b
    9f2a:	e0 2d       	mov	r30, r0
    9f2c:	cd 01       	movw	r24, r26
    9f2e:	19 95       	eicall
    9f30:	b5 e0       	ldi	r27, 0x05	; 5
    9f32:	db 9e       	mul	r13, r27
    9f34:	c0 01       	movw	r24, r0
    9f36:	11 24       	eor	r1, r1
    9f38:	f5 01       	movw	r30, r10
    9f3a:	35 96       	adiw	r30, 0x05	; 5
    9f3c:	ff 87       	std	Y+15, r31	; 0x0f
    9f3e:	ee 87       	std	Y+14, r30	; 0x0e
    9f40:	25 01       	movw	r4, r10
    9f42:	bb 82       	std	Y+3, r11	; 0x03
    9f44:	aa 82       	std	Y+2, r10	; 0x02
    9f46:	9c 01       	movw	r18, r24
    9f48:	2a 19       	sub	r18, r10
    9f4a:	3b 09       	sbc	r19, r11
    9f4c:	39 8b       	std	Y+17, r19	; 0x11
    9f4e:	28 8b       	std	Y+16, r18	; 0x10
    9f50:	a1 01       	movw	r20, r2
    9f52:	48 5f       	subi	r20, 0xF8	; 248
    9f54:	5f 4f       	sbci	r21, 0xFF	; 255
    9f56:	5b 8b       	std	Y+19, r21	; 0x13
    9f58:	4a 8b       	std	Y+18, r20	; 0x12
    9f5a:	e8 89       	ldd	r30, Y+16	; 0x10
    9f5c:	f9 89       	ldd	r31, Y+17	; 0x11
    9f5e:	e4 0d       	add	r30, r4
    9f60:	f5 1d       	adc	r31, r5
    9f62:	ea 57       	subi	r30, 0x7A	; 122
    9f64:	fc 4f       	sbci	r31, 0xFC	; 252
    9f66:	54 91       	lpm	r21, Z
    9f68:	58 87       	std	Y+8, r21	; 0x08
    9f6a:	3d 82       	std	Y+5, r3	; 0x05
    9f6c:	2c 82       	std	Y+4, r2	; 0x04
    9f6e:	61 01       	movw	r12, r2
    9f70:	88 85       	ldd	r24, Y+8	; 0x08
    9f72:	80 ff       	sbrs	r24, 0
    9f74:	13 c0       	rjmp	.+38     	; 0x9f9c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x142>
    9f76:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9f78:	bb 8d       	ldd	r27, Y+27	; 0x1b
    9f7a:	ed 91       	ld	r30, X+
    9f7c:	fc 91       	ld	r31, X
    9f7e:	b9 81       	ldd	r27, Y+1	; 0x01
    9f80:	b1 30       	cpi	r27, 0x01	; 1
    9f82:	31 f4       	brne	.+12     	; 0x9f90 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x136>
    9f84:	04 84       	ldd	r0, Z+12	; 0x0c
    9f86:	f5 85       	ldd	r31, Z+13	; 0x0d
    9f88:	e0 2d       	mov	r30, r0
    9f8a:	2e 81       	ldd	r18, Y+6	; 0x06
    9f8c:	3f 81       	ldd	r19, Y+7	; 0x07
    9f8e:	16 c0       	rjmp	.+44     	; 0x9fbc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x162>
    9f90:	06 84       	ldd	r0, Z+14	; 0x0e
    9f92:	f7 85       	ldd	r31, Z+15	; 0x0f
    9f94:	e0 2d       	mov	r30, r0
    9f96:	ee 80       	ldd	r14, Y+6	; 0x06
    9f98:	ff 80       	ldd	r15, Y+7	; 0x07
    9f9a:	1a c0       	rjmp	.+52     	; 0x9fd0 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x176>
    9f9c:	ee 81       	ldd	r30, Y+6	; 0x06
    9f9e:	ff 81       	ldd	r31, Y+7	; 0x07
    9fa0:	e6 15       	cp	r30, r6
    9fa2:	f7 05       	cpc	r31, r7
    9fa4:	f1 f0       	breq	.+60     	; 0x9fe2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    9fa6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    9fa8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    9faa:	ed 91       	ld	r30, X+
    9fac:	fc 91       	ld	r31, X
    9fae:	b9 81       	ldd	r27, Y+1	; 0x01
    9fb0:	b1 30       	cpi	r27, 0x01	; 1
    9fb2:	51 f4       	brne	.+20     	; 0x9fc8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x16e>
    9fb4:	04 84       	ldd	r0, Z+12	; 0x0c
    9fb6:	f5 85       	ldd	r31, Z+13	; 0x0d
    9fb8:	e0 2d       	mov	r30, r0
    9fba:	93 01       	movw	r18, r6
    9fbc:	a6 01       	movw	r20, r12
    9fbe:	b2 01       	movw	r22, r4
    9fc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9fc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    9fc4:	19 95       	eicall
    9fc6:	0d c0       	rjmp	.+26     	; 0x9fe2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x188>
    9fc8:	06 84       	ldd	r0, Z+14	; 0x0e
    9fca:	f7 85       	ldd	r31, Z+15	; 0x0f
    9fcc:	e0 2d       	mov	r30, r0
    9fce:	73 01       	movw	r14, r6
    9fd0:	84 01       	movw	r16, r8
    9fd2:	94 01       	movw	r18, r8
    9fd4:	4c 81       	ldd	r20, Y+4	; 0x04
    9fd6:	5d 81       	ldd	r21, Y+5	; 0x05
    9fd8:	6a 81       	ldd	r22, Y+2	; 0x02
    9fda:	7b 81       	ldd	r23, Y+3	; 0x03
    9fdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9fde:	9b 8d       	ldd	r25, Y+27	; 0x1b
    9fe0:	19 95       	eicall
    9fe2:	e8 85       	ldd	r30, Y+8	; 0x08
    9fe4:	e6 95       	lsr	r30
    9fe6:	e8 87       	std	Y+8, r30	; 0x08
    9fe8:	2c 81       	ldd	r18, Y+4	; 0x04
    9fea:	3d 81       	ldd	r19, Y+5	; 0x05
    9fec:	28 0d       	add	r18, r8
    9fee:	39 1d       	adc	r19, r9
    9ff0:	3d 83       	std	Y+5, r19	; 0x05
    9ff2:	2c 83       	std	Y+4, r18	; 0x04
    9ff4:	3f ef       	ldi	r19, 0xFF	; 255
    9ff6:	c3 1a       	sub	r12, r19
    9ff8:	d3 0a       	sbc	r13, r19
    9ffa:	4a 89       	ldd	r20, Y+18	; 0x12
    9ffc:	5b 89       	ldd	r21, Y+19	; 0x13
    9ffe:	c4 16       	cp	r12, r20
    a000:	d5 06       	cpc	r13, r21
    a002:	09 f0       	breq	.+2      	; 0xa006 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ac>
    a004:	b5 cf       	rjmp	.-150    	; 0x9f70 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x116>
    a006:	8a 81       	ldd	r24, Y+2	; 0x02
    a008:	9b 81       	ldd	r25, Y+3	; 0x03
    a00a:	88 0d       	add	r24, r8
    a00c:	99 1d       	adc	r25, r9
    a00e:	9b 83       	std	Y+3, r25	; 0x03
    a010:	8a 83       	std	Y+2, r24	; 0x02
    a012:	9f ef       	ldi	r25, 0xFF	; 255
    a014:	49 1a       	sub	r4, r25
    a016:	59 0a       	sbc	r5, r25
    a018:	ae 85       	ldd	r26, Y+14	; 0x0e
    a01a:	bf 85       	ldd	r27, Y+15	; 0x0f
    a01c:	4a 16       	cp	r4, r26
    a01e:	5b 06       	cpc	r5, r27
    a020:	09 f0       	breq	.+2      	; 0xa024 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1ca>
    a022:	9b cf       	rjmp	.-202    	; 0x9f5a <_ZN12Adafruit_GFX8drawCharEiihjjh+0x100>
    a024:	ee 81       	ldd	r30, Y+6	; 0x06
    a026:	ff 81       	ldd	r31, Y+7	; 0x07
    a028:	e6 15       	cp	r30, r6
    a02a:	f7 05       	cpc	r31, r7
    a02c:	09 f4       	brne	.+2      	; 0xa030 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x1d6>
    a02e:	f4 c0       	rjmp	.+488    	; 0xa218 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    a030:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a032:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a034:	a0 81       	ld	r26, Z
    a036:	b1 81       	ldd	r27, Z+1	; 0x01
    a038:	f9 81       	ldd	r31, Y+1	; 0x01
    a03a:	f1 30       	cpi	r31, 0x01	; 1
    a03c:	79 f4       	brne	.+30     	; 0xa05c <_ZN12Adafruit_GFX8drawCharEiihjjh+0x202>
    a03e:	b5 01       	movw	r22, r10
    a040:	6b 5f       	subi	r22, 0xFB	; 251
    a042:	7f 4f       	sbci	r23, 0xFF	; 255
    a044:	50 96       	adiw	r26, 0x10	; 16
    a046:	ed 91       	ld	r30, X+
    a048:	fc 91       	ld	r31, X
    a04a:	51 97       	sbiw	r26, 0x11	; 17
    a04c:	83 01       	movw	r16, r6
    a04e:	28 e0       	ldi	r18, 0x08	; 8
    a050:	30 e0       	ldi	r19, 0x00	; 0
    a052:	a1 01       	movw	r20, r2
    a054:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a056:	9b 8d       	ldd	r25, Y+27	; 0x1b
    a058:	19 95       	eicall
    a05a:	de c0       	rjmp	.+444    	; 0xa218 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    a05c:	6a 85       	ldd	r22, Y+10	; 0x0a
    a05e:	7b 85       	ldd	r23, Y+11	; 0x0b
    a060:	68 19       	sub	r22, r8
    a062:	79 09       	sbc	r23, r9
    a064:	1e 96       	adiw	r26, 0x0e	; 14
    a066:	ed 91       	ld	r30, X+
    a068:	fc 91       	ld	r31, X
    a06a:	1f 97       	sbiw	r26, 0x0f	; 15
    a06c:	73 01       	movw	r14, r6
    a06e:	0c 85       	ldd	r16, Y+12	; 0x0c
    a070:	1d 85       	ldd	r17, Y+13	; 0x0d
    a072:	94 01       	movw	r18, r8
    a074:	a1 01       	movw	r20, r2
    a076:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a078:	9b 8d       	ldd	r25, Y+27	; 0x1b
    a07a:	19 95       	eicall
    a07c:	cd c0       	rjmp	.+410    	; 0xa218 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    a07e:	f9 01       	movw	r30, r18
    a080:	34 96       	adiw	r30, 0x04	; 4
    a082:	e4 91       	lpm	r30, Z
    a084:	de 1a       	sub	r13, r30
    a086:	f9 01       	movw	r30, r18
    a088:	32 96       	adiw	r30, 0x02	; 2
    a08a:	85 91       	lpm	r24, Z+
    a08c:	94 91       	lpm	r25, Z
    a08e:	b7 e0       	ldi	r27, 0x07	; 7
    a090:	db 9e       	mul	r13, r27
    a092:	80 0d       	add	r24, r0
    a094:	91 1d       	adc	r25, r1
    a096:	11 24       	eor	r1, r1
    a098:	f9 01       	movw	r30, r18
    a09a:	25 91       	lpm	r18, Z+
    a09c:	34 91       	lpm	r19, Z
    a09e:	3b 8b       	std	Y+19, r19	; 0x13
    a0a0:	2a 8b       	std	Y+18, r18	; 0x12
    a0a2:	fc 01       	movw	r30, r24
    a0a4:	25 91       	lpm	r18, Z+
    a0a6:	34 91       	lpm	r19, Z
    a0a8:	29 01       	movw	r4, r18
    a0aa:	fc 01       	movw	r30, r24
    a0ac:	32 96       	adiw	r30, 0x02	; 2
    a0ae:	c4 90       	lpm	r12, Z
    a0b0:	31 96       	adiw	r30, 0x01	; 1
    a0b2:	34 91       	lpm	r19, Z
    a0b4:	3c 87       	std	Y+12, r19	; 0x0c
    a0b6:	32 96       	adiw	r30, 0x02	; 2
    a0b8:	14 91       	lpm	r17, Z
    a0ba:	31 96       	adiw	r30, 0x01	; 1
    a0bc:	d4 90       	lpm	r13, Z
    a0be:	49 81       	ldd	r20, Y+1	; 0x01
    a0c0:	42 30       	cpi	r20, 0x02	; 2
    a0c2:	58 f0       	brcs	.+22     	; 0xa0da <_ZN12Adafruit_GFX8drawCharEiihjjh+0x280>
    a0c4:	61 2e       	mov	r6, r17
    a0c6:	01 2e       	mov	r0, r17
    a0c8:	00 0c       	add	r0, r0
    a0ca:	77 08       	sbc	r7, r7
    a0cc:	8d 2d       	mov	r24, r13
    a0ce:	0d 2c       	mov	r0, r13
    a0d0:	00 0c       	add	r0, r0
    a0d2:	99 0b       	sbc	r25, r25
    a0d4:	99 87       	std	Y+9, r25	; 0x09
    a0d6:	88 87       	std	Y+8, r24	; 0x08
    a0d8:	04 c0       	rjmp	.+8      	; 0xa0e2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x288>
    a0da:	19 86       	std	Y+9, r1	; 0x09
    a0dc:	18 86       	std	Y+8, r1	; 0x08
    a0de:	61 2c       	mov	r6, r1
    a0e0:	71 2c       	mov	r7, r1
    a0e2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a0e4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a0e6:	ed 91       	ld	r30, X+
    a0e8:	fc 91       	ld	r31, X
    a0ea:	11 97       	sbiw	r26, 0x01	; 1
    a0ec:	02 84       	ldd	r0, Z+10	; 0x0a
    a0ee:	f3 85       	ldd	r31, Z+11	; 0x0b
    a0f0:	e0 2d       	mov	r30, r0
    a0f2:	cd 01       	movw	r24, r26
    a0f4:	19 95       	eicall
    a0f6:	b9 81       	ldd	r27, Y+1	; 0x01
    a0f8:	8b 2e       	mov	r8, r27
    a0fa:	91 2c       	mov	r9, r1
    a0fc:	68 9c       	mul	r6, r8
    a0fe:	c0 01       	movw	r24, r0
    a100:	69 9c       	mul	r6, r9
    a102:	90 0d       	add	r25, r0
    a104:	78 9c       	mul	r7, r8
    a106:	90 0d       	add	r25, r0
    a108:	11 24       	eor	r1, r1
    a10a:	fc 01       	movw	r30, r24
    a10c:	ea 0d       	add	r30, r10
    a10e:	fb 1d       	adc	r31, r11
    a110:	f9 8b       	std	Y+17, r31	; 0x11
    a112:	e8 8b       	std	Y+16, r30	; 0x10
    a114:	1a 82       	std	Y+2, r1	; 0x02
    a116:	71 2c       	mov	r7, r1
    a118:	61 2c       	mov	r6, r1
    a11a:	e1 2f       	mov	r30, r17
    a11c:	11 0f       	add	r17, r17
    a11e:	ff 0b       	sbc	r31, r31
    a120:	95 01       	movw	r18, r10
    a122:	2e 0f       	add	r18, r30
    a124:	3f 1f       	adc	r19, r31
    a126:	3b 87       	std	Y+11, r19	; 0x0b
    a128:	2a 87       	std	Y+10, r18	; 0x0a
    a12a:	ac 0c       	add	r10, r12
    a12c:	b1 1c       	adc	r11, r1
    a12e:	a5 01       	movw	r20, r10
    a130:	4e 0f       	add	r20, r30
    a132:	5f 1f       	adc	r21, r31
    a134:	5f 8b       	std	Y+23, r21	; 0x17
    a136:	4e 8b       	std	Y+22, r20	; 0x16
    a138:	c1 01       	movw	r24, r2
    a13a:	8d 0d       	add	r24, r13
    a13c:	91 1d       	adc	r25, r1
    a13e:	d7 fc       	sbrc	r13, 7
    a140:	9a 95       	dec	r25
    a142:	99 8f       	std	Y+25, r25	; 0x19
    a144:	88 8f       	std	Y+24, r24	; 0x18
    a146:	9c 85       	ldd	r25, Y+12	; 0x0c
    a148:	69 16       	cp	r6, r25
    a14a:	08 f0       	brcs	.+2      	; 0xa14e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2f4>
    a14c:	65 c0       	rjmp	.+202    	; 0xa218 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3be>
    a14e:	86 2d       	mov	r24, r6
    a150:	90 e0       	ldi	r25, 0x00	; 0
    a152:	48 85       	ldd	r20, Y+8	; 0x08
    a154:	59 85       	ldd	r21, Y+9	; 0x09
    a156:	48 0f       	add	r20, r24
    a158:	59 1f       	adc	r21, r25
    a15a:	48 9d       	mul	r20, r8
    a15c:	90 01       	movw	r18, r0
    a15e:	49 9d       	mul	r20, r9
    a160:	30 0d       	add	r19, r0
    a162:	58 9d       	mul	r21, r8
    a164:	30 0d       	add	r19, r0
    a166:	11 24       	eor	r1, r1
    a168:	d1 01       	movw	r26, r2
    a16a:	a2 0f       	add	r26, r18
    a16c:	b3 1f       	adc	r27, r19
    a16e:	bf 87       	std	Y+15, r27	; 0x0f
    a170:	ae 87       	std	Y+14, r26	; 0x0e
    a172:	aa 84       	ldd	r10, Y+10	; 0x0a
    a174:	bb 84       	ldd	r11, Y+11	; 0x0b
    a176:	e8 89       	ldd	r30, Y+16	; 0x10
    a178:	f9 89       	ldd	r31, Y+17	; 0x11
    a17a:	fd 83       	std	Y+5, r31	; 0x05
    a17c:	ec 83       	std	Y+4, r30	; 0x04
    a17e:	da 80       	ldd	r13, Y+2	; 0x02
    a180:	fa 85       	ldd	r31, Y+10	; 0x0a
    a182:	df 1a       	sub	r13, r31
    a184:	28 8d       	ldd	r18, Y+24	; 0x18
    a186:	39 8d       	ldd	r19, Y+25	; 0x19
    a188:	28 0f       	add	r18, r24
    a18a:	39 1f       	adc	r19, r25
    a18c:	3d 8b       	std	Y+21, r19	; 0x15
    a18e:	2c 8b       	std	Y+20, r18	; 0x14
    a190:	8d 2d       	mov	r24, r13
    a192:	8a 0d       	add	r24, r10
    a194:	4e 89       	ldd	r20, Y+22	; 0x16
    a196:	5f 89       	ldd	r21, Y+23	; 0x17
    a198:	a4 16       	cp	r10, r20
    a19a:	b5 06       	cpc	r11, r21
    a19c:	c1 f1       	breq	.+112    	; 0xa20e <_ZN12Adafruit_GFX8drawCharEiihjjh+0x3b4>
    a19e:	87 70       	andi	r24, 0x07	; 7
    a1a0:	41 f4       	brne	.+16     	; 0xa1b2 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x358>
    a1a2:	c2 01       	movw	r24, r4
    a1a4:	01 96       	adiw	r24, 0x01	; 1
    a1a6:	ea 89       	ldd	r30, Y+18	; 0x12
    a1a8:	fb 89       	ldd	r31, Y+19	; 0x13
    a1aa:	e4 0d       	add	r30, r4
    a1ac:	f5 1d       	adc	r31, r5
    a1ae:	74 90       	lpm	r7, Z
    a1b0:	2c 01       	movw	r4, r24
    a1b2:	77 fe       	sbrs	r7, 7
    a1b4:	21 c0       	rjmp	.+66     	; 0xa1f8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    a1b6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a1b8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a1ba:	ed 91       	ld	r30, X+
    a1bc:	fc 91       	ld	r31, X
    a1be:	b9 81       	ldd	r27, Y+1	; 0x01
    a1c0:	b1 30       	cpi	r27, 0x01	; 1
    a1c2:	61 f4       	brne	.+24     	; 0xa1dc <_ZN12Adafruit_GFX8drawCharEiihjjh+0x382>
    a1c4:	04 84       	ldd	r0, Z+12	; 0x0c
    a1c6:	f5 85       	ldd	r31, Z+13	; 0x0d
    a1c8:	e0 2d       	mov	r30, r0
    a1ca:	2e 81       	ldd	r18, Y+6	; 0x06
    a1cc:	3f 81       	ldd	r19, Y+7	; 0x07
    a1ce:	4c 89       	ldd	r20, Y+20	; 0x14
    a1d0:	5d 89       	ldd	r21, Y+21	; 0x15
    a1d2:	b5 01       	movw	r22, r10
    a1d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a1d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    a1d8:	19 95       	eicall
    a1da:	0e c0       	rjmp	.+28     	; 0xa1f8 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x39e>
    a1dc:	06 84       	ldd	r0, Z+14	; 0x0e
    a1de:	f7 85       	ldd	r31, Z+15	; 0x0f
    a1e0:	e0 2d       	mov	r30, r0
    a1e2:	ee 80       	ldd	r14, Y+6	; 0x06
    a1e4:	ff 80       	ldd	r15, Y+7	; 0x07
    a1e6:	84 01       	movw	r16, r8
    a1e8:	94 01       	movw	r18, r8
    a1ea:	4e 85       	ldd	r20, Y+14	; 0x0e
    a1ec:	5f 85       	ldd	r21, Y+15	; 0x0f
    a1ee:	6c 81       	ldd	r22, Y+4	; 0x04
    a1f0:	7d 81       	ldd	r23, Y+5	; 0x05
    a1f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a1f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    a1f6:	19 95       	eicall
    a1f8:	77 0c       	add	r7, r7
    a1fa:	ec 81       	ldd	r30, Y+4	; 0x04
    a1fc:	fd 81       	ldd	r31, Y+5	; 0x05
    a1fe:	e8 0d       	add	r30, r8
    a200:	f9 1d       	adc	r31, r9
    a202:	fd 83       	std	Y+5, r31	; 0x05
    a204:	ec 83       	std	Y+4, r30	; 0x04
    a206:	ff ef       	ldi	r31, 0xFF	; 255
    a208:	af 1a       	sub	r10, r31
    a20a:	bf 0a       	sbc	r11, r31
    a20c:	c1 cf       	rjmp	.-126    	; 0xa190 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x336>
    a20e:	2a 81       	ldd	r18, Y+2	; 0x02
    a210:	2c 0d       	add	r18, r12
    a212:	2a 83       	std	Y+2, r18	; 0x02
    a214:	63 94       	inc	r6
    a216:	97 cf       	rjmp	.-210    	; 0xa146 <_ZN12Adafruit_GFX8drawCharEiihjjh+0x2ec>
    a218:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a21a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a21c:	ed 91       	ld	r30, X+
    a21e:	fc 91       	ld	r31, X
    a220:	11 97       	sbiw	r26, 0x01	; 1
    a222:	06 88       	ldd	r0, Z+22	; 0x16
    a224:	f7 89       	ldd	r31, Z+23	; 0x17
    a226:	e0 2d       	mov	r30, r0
    a228:	cd 01       	movw	r24, r26
    a22a:	6b 96       	adiw	r28, 0x1b	; 27
    a22c:	0f b6       	in	r0, 0x3f	; 63
    a22e:	f8 94       	cli
    a230:	de bf       	out	0x3e, r29	; 62
    a232:	0f be       	out	0x3f, r0	; 63
    a234:	cd bf       	out	0x3d, r28	; 61
    a236:	df 91       	pop	r29
    a238:	cf 91       	pop	r28
    a23a:	1f 91       	pop	r17
    a23c:	0f 91       	pop	r16
    a23e:	ff 90       	pop	r15
    a240:	ef 90       	pop	r14
    a242:	df 90       	pop	r13
    a244:	cf 90       	pop	r12
    a246:	bf 90       	pop	r11
    a248:	af 90       	pop	r10
    a24a:	9f 90       	pop	r9
    a24c:	8f 90       	pop	r8
    a24e:	7f 90       	pop	r7
    a250:	6f 90       	pop	r6
    a252:	5f 90       	pop	r5
    a254:	4f 90       	pop	r4
    a256:	3f 90       	pop	r3
    a258:	2f 90       	pop	r2
    a25a:	19 94       	eijmp
    a25c:	6b 96       	adiw	r28, 0x1b	; 27
    a25e:	0f b6       	in	r0, 0x3f	; 63
    a260:	f8 94       	cli
    a262:	de bf       	out	0x3e, r29	; 62
    a264:	0f be       	out	0x3f, r0	; 63
    a266:	cd bf       	out	0x3d, r28	; 61
    a268:	df 91       	pop	r29
    a26a:	cf 91       	pop	r28
    a26c:	1f 91       	pop	r17
    a26e:	0f 91       	pop	r16
    a270:	ff 90       	pop	r15
    a272:	ef 90       	pop	r14
    a274:	df 90       	pop	r13
    a276:	cf 90       	pop	r12
    a278:	bf 90       	pop	r11
    a27a:	af 90       	pop	r10
    a27c:	9f 90       	pop	r9
    a27e:	8f 90       	pop	r8
    a280:	7f 90       	pop	r7
    a282:	6f 90       	pop	r6
    a284:	5f 90       	pop	r5
    a286:	4f 90       	pop	r4
    a288:	3f 90       	pop	r3
    a28a:	2f 90       	pop	r2
    a28c:	08 95       	ret

0000a28e <_ZN12Adafruit_GFX5writeEh>:
    a28e:	af 92       	push	r10
    a290:	bf 92       	push	r11
    a292:	cf 92       	push	r12
    a294:	ef 92       	push	r14
    a296:	ff 92       	push	r15
    a298:	0f 93       	push	r16
    a29a:	1f 93       	push	r17
    a29c:	cf 93       	push	r28
    a29e:	df 93       	push	r29
    a2a0:	ec 01       	movw	r28, r24
    a2a2:	26 2f       	mov	r18, r22
    a2a4:	88 8d       	ldd	r24, Y+24	; 0x18
    a2a6:	99 8d       	ldd	r25, Y+25	; 0x19
    a2a8:	00 97       	sbiw	r24, 0x00	; 0
    a2aa:	09 f0       	breq	.+2      	; 0xa2ae <_ZN12Adafruit_GFX5writeEh+0x20>
    a2ac:	3f c0       	rjmp	.+126    	; 0xa32c <_ZN12Adafruit_GFX5writeEh+0x9e>
    a2ae:	6a 30       	cpi	r22, 0x0A	; 10
    a2b0:	59 f4       	brne	.+22     	; 0xa2c8 <_ZN12Adafruit_GFX5writeEh+0x3a>
    a2b2:	1d 86       	std	Y+13, r1	; 0x0d
    a2b4:	1c 86       	std	Y+12, r1	; 0x0c
    a2b6:	2c 89       	ldd	r18, Y+20	; 0x14
    a2b8:	8e 85       	ldd	r24, Y+14	; 0x0e
    a2ba:	9f 85       	ldd	r25, Y+15	; 0x0f
    a2bc:	38 e0       	ldi	r19, 0x08	; 8
    a2be:	23 9f       	mul	r18, r19
    a2c0:	80 0d       	add	r24, r0
    a2c2:	91 1d       	adc	r25, r1
    a2c4:	11 24       	eor	r1, r1
    a2c6:	40 c0       	rjmp	.+128    	; 0xa348 <_ZN12Adafruit_GFX5writeEh+0xba>
    a2c8:	6d 30       	cpi	r22, 0x0D	; 13
    a2ca:	09 f4       	brne	.+2      	; 0xa2ce <_ZN12Adafruit_GFX5writeEh+0x40>
    a2cc:	a8 c0       	rjmp	.+336    	; 0xa41e <_ZN12Adafruit_GFX5writeEh+0x190>
    a2ce:	8e 89       	ldd	r24, Y+22	; 0x16
    a2d0:	88 23       	and	r24, r24
    a2d2:	c1 f0       	breq	.+48     	; 0xa304 <_ZN12Adafruit_GFX5writeEh+0x76>
    a2d4:	3c 89       	ldd	r19, Y+20	; 0x14
    a2d6:	8c 85       	ldd	r24, Y+12	; 0x0c
    a2d8:	9d 85       	ldd	r25, Y+13	; 0x0d
    a2da:	46 e0       	ldi	r20, 0x06	; 6
    a2dc:	34 9f       	mul	r19, r20
    a2de:	80 0d       	add	r24, r0
    a2e0:	91 1d       	adc	r25, r1
    a2e2:	11 24       	eor	r1, r1
    a2e4:	48 85       	ldd	r20, Y+8	; 0x08
    a2e6:	59 85       	ldd	r21, Y+9	; 0x09
    a2e8:	48 17       	cp	r20, r24
    a2ea:	59 07       	cpc	r21, r25
    a2ec:	5c f4       	brge	.+22     	; 0xa304 <_ZN12Adafruit_GFX5writeEh+0x76>
    a2ee:	1d 86       	std	Y+13, r1	; 0x0d
    a2f0:	1c 86       	std	Y+12, r1	; 0x0c
    a2f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    a2f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    a2f6:	48 e0       	ldi	r20, 0x08	; 8
    a2f8:	34 9f       	mul	r19, r20
    a2fa:	80 0d       	add	r24, r0
    a2fc:	91 1d       	adc	r25, r1
    a2fe:	11 24       	eor	r1, r1
    a300:	9f 87       	std	Y+15, r25	; 0x0f
    a302:	8e 87       	std	Y+14, r24	; 0x0e
    a304:	ea 88       	ldd	r14, Y+18	; 0x12
    a306:	fb 88       	ldd	r15, Y+19	; 0x13
    a308:	08 89       	ldd	r16, Y+16	; 0x10
    a30a:	19 89       	ldd	r17, Y+17	; 0x11
    a30c:	4e 85       	ldd	r20, Y+14	; 0x0e
    a30e:	5f 85       	ldd	r21, Y+15	; 0x0f
    a310:	6c 85       	ldd	r22, Y+12	; 0x0c
    a312:	7d 85       	ldd	r23, Y+13	; 0x0d
    a314:	cc 88       	ldd	r12, Y+20	; 0x14
    a316:	ce 01       	movw	r24, r28
    a318:	a0 dd       	rcall	.-1216   	; 0x9e5a <_ZN12Adafruit_GFX8drawCharEiihjjh>
    a31a:	2c 89       	ldd	r18, Y+20	; 0x14
    a31c:	8c 85       	ldd	r24, Y+12	; 0x0c
    a31e:	9d 85       	ldd	r25, Y+13	; 0x0d
    a320:	36 e0       	ldi	r19, 0x06	; 6
    a322:	23 9f       	mul	r18, r19
    a324:	80 0d       	add	r24, r0
    a326:	91 1d       	adc	r25, r1
    a328:	11 24       	eor	r1, r1
    a32a:	42 c0       	rjmp	.+132    	; 0xa3b0 <_ZN12Adafruit_GFX5writeEh+0x122>
    a32c:	6a 30       	cpi	r22, 0x0A	; 10
    a32e:	79 f4       	brne	.+30     	; 0xa34e <_ZN12Adafruit_GFX5writeEh+0xc0>
    a330:	1d 86       	std	Y+13, r1	; 0x0d
    a332:	1c 86       	std	Y+12, r1	; 0x0c
    a334:	2c 89       	ldd	r18, Y+20	; 0x14
    a336:	fc 01       	movw	r30, r24
    a338:	36 96       	adiw	r30, 0x06	; 6
    a33a:	e4 91       	lpm	r30, Z
    a33c:	8e 85       	ldd	r24, Y+14	; 0x0e
    a33e:	9f 85       	ldd	r25, Y+15	; 0x0f
    a340:	2e 9f       	mul	r18, r30
    a342:	80 0d       	add	r24, r0
    a344:	91 1d       	adc	r25, r1
    a346:	11 24       	eor	r1, r1
    a348:	9f 87       	std	Y+15, r25	; 0x0f
    a34a:	8e 87       	std	Y+14, r24	; 0x0e
    a34c:	68 c0       	rjmp	.+208    	; 0xa41e <_ZN12Adafruit_GFX5writeEh+0x190>
    a34e:	6d 30       	cpi	r22, 0x0D	; 13
    a350:	09 f4       	brne	.+2      	; 0xa354 <_ZN12Adafruit_GFX5writeEh+0xc6>
    a352:	65 c0       	rjmp	.+202    	; 0xa41e <_ZN12Adafruit_GFX5writeEh+0x190>
    a354:	fc 01       	movw	r30, r24
    a356:	34 96       	adiw	r30, 0x04	; 4
    a358:	34 91       	lpm	r19, Z
    a35a:	63 17       	cp	r22, r19
    a35c:	08 f4       	brcc	.+2      	; 0xa360 <_ZN12Adafruit_GFX5writeEh+0xd2>
    a35e:	5f c0       	rjmp	.+190    	; 0xa41e <_ZN12Adafruit_GFX5writeEh+0x190>
    a360:	31 96       	adiw	r30, 0x01	; 1
    a362:	e4 91       	lpm	r30, Z
    a364:	e6 17       	cp	r30, r22
    a366:	08 f4       	brcc	.+2      	; 0xa36a <_ZN12Adafruit_GFX5writeEh+0xdc>
    a368:	5a c0       	rjmp	.+180    	; 0xa41e <_ZN12Adafruit_GFX5writeEh+0x190>
    a36a:	fc 01       	movw	r30, r24
    a36c:	32 96       	adiw	r30, 0x02	; 2
    a36e:	65 91       	lpm	r22, Z+
    a370:	74 91       	lpm	r23, Z
    a372:	42 2f       	mov	r20, r18
    a374:	50 e0       	ldi	r21, 0x00	; 0
    a376:	43 1b       	sub	r20, r19
    a378:	51 09       	sbc	r21, r1
    a37a:	37 e0       	ldi	r19, 0x07	; 7
    a37c:	34 9f       	mul	r19, r20
    a37e:	50 01       	movw	r10, r0
    a380:	35 9f       	mul	r19, r21
    a382:	b0 0c       	add	r11, r0
    a384:	11 24       	eor	r1, r1
    a386:	a6 0e       	add	r10, r22
    a388:	b7 1e       	adc	r11, r23
    a38a:	f5 01       	movw	r30, r10
    a38c:	32 96       	adiw	r30, 0x02	; 2
    a38e:	34 91       	lpm	r19, Z
    a390:	31 96       	adiw	r30, 0x01	; 1
    a392:	e4 91       	lpm	r30, Z
    a394:	33 23       	and	r19, r19
    a396:	11 f0       	breq	.+4      	; 0xa39c <_ZN12Adafruit_GFX5writeEh+0x10e>
    a398:	e1 11       	cpse	r30, r1
    a39a:	0d c0       	rjmp	.+26     	; 0xa3b6 <_ZN12Adafruit_GFX5writeEh+0x128>
    a39c:	f5 01       	movw	r30, r10
    a39e:	34 96       	adiw	r30, 0x04	; 4
    a3a0:	e4 91       	lpm	r30, Z
    a3a2:	2c 89       	ldd	r18, Y+20	; 0x14
    a3a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    a3a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    a3a8:	e2 9f       	mul	r30, r18
    a3aa:	80 0d       	add	r24, r0
    a3ac:	91 1d       	adc	r25, r1
    a3ae:	11 24       	eor	r1, r1
    a3b0:	9d 87       	std	Y+13, r25	; 0x0d
    a3b2:	8c 87       	std	Y+12, r24	; 0x0c
    a3b4:	34 c0       	rjmp	.+104    	; 0xa41e <_ZN12Adafruit_GFX5writeEh+0x190>
    a3b6:	f5 01       	movw	r30, r10
    a3b8:	35 96       	adiw	r30, 0x05	; 5
    a3ba:	44 91       	lpm	r20, Z
    a3bc:	5e 89       	ldd	r21, Y+22	; 0x16
    a3be:	55 23       	and	r21, r21
    a3c0:	11 f1       	breq	.+68     	; 0xa406 <_ZN12Adafruit_GFX5writeEh+0x178>
    a3c2:	6c 89       	ldd	r22, Y+20	; 0x14
    a3c4:	e3 2f       	mov	r30, r19
    a3c6:	f0 e0       	ldi	r31, 0x00	; 0
    a3c8:	e4 0f       	add	r30, r20
    a3ca:	f1 1d       	adc	r31, r1
    a3cc:	47 fd       	sbrc	r20, 7
    a3ce:	fa 95       	dec	r31
    a3d0:	6e 9f       	mul	r22, r30
    a3d2:	d0 01       	movw	r26, r0
    a3d4:	6f 9f       	mul	r22, r31
    a3d6:	b0 0d       	add	r27, r0
    a3d8:	11 24       	eor	r1, r1
    a3da:	4c 85       	ldd	r20, Y+12	; 0x0c
    a3dc:	5d 85       	ldd	r21, Y+13	; 0x0d
    a3de:	4a 0f       	add	r20, r26
    a3e0:	5b 1f       	adc	r21, r27
    a3e2:	e8 85       	ldd	r30, Y+8	; 0x08
    a3e4:	f9 85       	ldd	r31, Y+9	; 0x09
    a3e6:	e4 17       	cp	r30, r20
    a3e8:	f5 07       	cpc	r31, r21
    a3ea:	6c f4       	brge	.+26     	; 0xa406 <_ZN12Adafruit_GFX5writeEh+0x178>
    a3ec:	1d 86       	std	Y+13, r1	; 0x0d
    a3ee:	1c 86       	std	Y+12, r1	; 0x0c
    a3f0:	fc 01       	movw	r30, r24
    a3f2:	36 96       	adiw	r30, 0x06	; 6
    a3f4:	e4 91       	lpm	r30, Z
    a3f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    a3f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    a3fa:	6e 9f       	mul	r22, r30
    a3fc:	80 0d       	add	r24, r0
    a3fe:	91 1d       	adc	r25, r1
    a400:	11 24       	eor	r1, r1
    a402:	9f 87       	std	Y+15, r25	; 0x0f
    a404:	8e 87       	std	Y+14, r24	; 0x0e
    a406:	ea 88       	ldd	r14, Y+18	; 0x12
    a408:	fb 88       	ldd	r15, Y+19	; 0x13
    a40a:	08 89       	ldd	r16, Y+16	; 0x10
    a40c:	19 89       	ldd	r17, Y+17	; 0x11
    a40e:	4e 85       	ldd	r20, Y+14	; 0x0e
    a410:	5f 85       	ldd	r21, Y+15	; 0x0f
    a412:	6c 85       	ldd	r22, Y+12	; 0x0c
    a414:	7d 85       	ldd	r23, Y+13	; 0x0d
    a416:	cc 88       	ldd	r12, Y+20	; 0x14
    a418:	ce 01       	movw	r24, r28
    a41a:	1f dd       	rcall	.-1474   	; 0x9e5a <_ZN12Adafruit_GFX8drawCharEiihjjh>
    a41c:	bf cf       	rjmp	.-130    	; 0xa39c <_ZN12Adafruit_GFX5writeEh+0x10e>
    a41e:	81 e0       	ldi	r24, 0x01	; 1
    a420:	90 e0       	ldi	r25, 0x00	; 0
    a422:	df 91       	pop	r29
    a424:	cf 91       	pop	r28
    a426:	1f 91       	pop	r17
    a428:	0f 91       	pop	r16
    a42a:	ff 90       	pop	r15
    a42c:	ef 90       	pop	r14
    a42e:	cf 90       	pop	r12
    a430:	bf 90       	pop	r11
    a432:	af 90       	pop	r10
    a434:	08 95       	ret

0000a436 <_ZN12Adafruit_GFX9setCursorEii>:
    a436:	fc 01       	movw	r30, r24
    a438:	75 87       	std	Z+13, r23	; 0x0d
    a43a:	64 87       	std	Z+12, r22	; 0x0c
    a43c:	57 87       	std	Z+15, r21	; 0x0f
    a43e:	46 87       	std	Z+14, r20	; 0x0e
    a440:	08 95       	ret

0000a442 <_ZN12Adafruit_GFX11setTextSizeEh>:
    a442:	61 11       	cpse	r22, r1
    a444:	01 c0       	rjmp	.+2      	; 0xa448 <_ZN12Adafruit_GFX11setTextSizeEh+0x6>
    a446:	61 e0       	ldi	r22, 0x01	; 1
    a448:	fc 01       	movw	r30, r24
    a44a:	64 8b       	std	Z+20, r22	; 0x14
    a44c:	08 95       	ret

0000a44e <_ZN12Adafruit_GFX12setTextColorEj>:
    a44e:	fc 01       	movw	r30, r24
    a450:	73 8b       	std	Z+19, r23	; 0x13
    a452:	62 8b       	std	Z+18, r22	; 0x12
    a454:	71 8b       	std	Z+17, r23	; 0x11
    a456:	60 8b       	std	Z+16, r22	; 0x10
    a458:	08 95       	ret

0000a45a <_ZN12Adafruit_GFX12setTextColorEjj>:
    a45a:	fc 01       	movw	r30, r24
    a45c:	71 8b       	std	Z+17, r23	; 0x11
    a45e:	60 8b       	std	Z+16, r22	; 0x10
    a460:	53 8b       	std	Z+19, r21	; 0x13
    a462:	42 8b       	std	Z+18, r20	; 0x12
    a464:	08 95       	ret

0000a466 <_ZNK12Adafruit_GFX11getRotationEv>:
    a466:	fc 01       	movw	r30, r24
    a468:	85 89       	ldd	r24, Z+21	; 0x15
    a46a:	08 95       	ret

0000a46c <_ZNK12Adafruit_GFX5widthEv>:
    @returns    Width in pixels
*/
/**************************************************************************/
int16_t Adafruit_GFX::width(void) const {
    return _width;
}
    a46c:	fc 01       	movw	r30, r24
    a46e:	80 85       	ldd	r24, Z+8	; 0x08
    a470:	91 85       	ldd	r25, Z+9	; 0x09
    a472:	08 95       	ret

0000a474 <_ZNK12Adafruit_GFX6heightEv>:
    @returns    Height in pixels
*/
/**************************************************************************/
int16_t Adafruit_GFX::height(void) const {
    return _height;
}
    a474:	fc 01       	movw	r30, r24
    a476:	82 85       	ldd	r24, Z+10	; 0x0a
    a478:	93 85       	ldd	r25, Z+11	; 0x0b
    a47a:	08 95       	ret

0000a47c <_ZN6AD59338sendByteEhh>:
 *
 * @return The value of the control register. Returns 0xFFFF if can't read it.
 */
int AD5933::readControlRegister() {
    return ((readRegister(CTRL_REG1) << 8) | readRegister(CTRL_REG2)) & 0xFFFF;
}
    a47c:	cf 93       	push	r28
    a47e:	df 93       	push	r29
    a480:	d8 2f       	mov	r29, r24
    a482:	c6 2f       	mov	r28, r22
    a484:	6d e0       	ldi	r22, 0x0D	; 13
    a486:	70 e0       	ldi	r23, 0x00	; 0
    a488:	84 e8       	ldi	r24, 0x84	; 132
    a48a:	94 e1       	ldi	r25, 0x14	; 20
    a48c:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    a490:	6d 2f       	mov	r22, r29
    a492:	84 e8       	ldi	r24, 0x84	; 132
    a494:	94 e1       	ldi	r25, 0x14	; 20
    a496:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    a49a:	6c 2f       	mov	r22, r28
    a49c:	84 e8       	ldi	r24, 0x84	; 132
    a49e:	94 e1       	ldi	r25, 0x14	; 20
    a4a0:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    a4a4:	84 e8       	ldi	r24, 0x84	; 132
    a4a6:	94 e1       	ldi	r25, 0x14	; 20
    a4a8:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    a4ac:	91 e0       	ldi	r25, 0x01	; 1
    a4ae:	81 11       	cpse	r24, r1
    a4b0:	90 e0       	ldi	r25, 0x00	; 0
    a4b2:	89 2f       	mov	r24, r25
    a4b4:	df 91       	pop	r29
    a4b6:	cf 91       	pop	r28
    a4b8:	08 95       	ret

0000a4ba <_ZN6AD593314setClockSourceEh>:
    a4ba:	88 23       	and	r24, r24
    a4bc:	21 f0       	breq	.+8      	; 0xa4c6 <_ZN6AD593314setClockSourceEh+0xc>
    a4be:	88 30       	cpi	r24, 0x08	; 8
    a4c0:	29 f4       	brne	.+10     	; 0xa4cc <_ZN6AD593314setClockSourceEh+0x12>
    a4c2:	68 e0       	ldi	r22, 0x08	; 8
    a4c4:	01 c0       	rjmp	.+2      	; 0xa4c8 <_ZN6AD593314setClockSourceEh+0xe>
    a4c6:	60 e0       	ldi	r22, 0x00	; 0
    a4c8:	81 e8       	ldi	r24, 0x81	; 129
    a4ca:	d8 cf       	rjmp	.-80     	; 0xa47c <_ZN6AD59338sendByteEhh>
    a4cc:	80 e0       	ldi	r24, 0x00	; 0
    a4ce:	08 95       	ret

0000a4d0 <_ZN6AD593317setStartFrequencyEm>:
    a4d0:	cf 92       	push	r12
    a4d2:	df 92       	push	r13
    a4d4:	ef 92       	push	r14
    a4d6:	ff 92       	push	r15
    a4d8:	0e 94 33 5c 	call	0xb866	; 0xb866 <__floatunsisf>
    a4dc:	20 e4       	ldi	r18, 0x40	; 64
    a4de:	3b ef       	ldi	r19, 0xFB	; 251
    a4e0:	4f e7       	ldi	r20, 0x7F	; 127
    a4e2:	5a e4       	ldi	r21, 0x4A	; 74
    a4e4:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    a4e8:	20 e0       	ldi	r18, 0x00	; 0
    a4ea:	30 e0       	ldi	r19, 0x00	; 0
    a4ec:	40 e0       	ldi	r20, 0x00	; 0
    a4ee:	5d e4       	ldi	r21, 0x4D	; 77
    a4f0:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    a4f4:	0e 94 07 5c 	call	0xb80e	; 0xb80e <__fixunssfsi>
    a4f8:	6b 01       	movw	r12, r22
    a4fa:	7c 01       	movw	r14, r24
    a4fc:	c1 14       	cp	r12, r1
    a4fe:	d1 04       	cpc	r13, r1
    a500:	e1 04       	cpc	r14, r1
    a502:	81 e0       	ldi	r24, 0x01	; 1
    a504:	f8 06       	cpc	r15, r24
    a506:	b0 f4       	brcc	.+44     	; 0xa534 <_ZN6AD593317setStartFrequencyEm+0x64>
    a508:	b7 01       	movw	r22, r14
    a50a:	88 27       	eor	r24, r24
    a50c:	99 27       	eor	r25, r25
    a50e:	82 e8       	ldi	r24, 0x82	; 130
    a510:	b5 df       	rcall	.-150    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a512:	88 23       	and	r24, r24
    a514:	79 f0       	breq	.+30     	; 0xa534 <_ZN6AD593317setStartFrequencyEm+0x64>
    a516:	99 27       	eor	r25, r25
    a518:	8f 2d       	mov	r24, r15
    a51a:	7e 2d       	mov	r23, r14
    a51c:	6d 2d       	mov	r22, r13
    a51e:	83 e8       	ldi	r24, 0x83	; 131
    a520:	ad df       	rcall	.-166    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a522:	88 23       	and	r24, r24
    a524:	39 f0       	breq	.+14     	; 0xa534 <_ZN6AD593317setStartFrequencyEm+0x64>
    a526:	6c 2d       	mov	r22, r12
    a528:	84 e8       	ldi	r24, 0x84	; 132
    a52a:	ff 90       	pop	r15
    a52c:	ef 90       	pop	r14
    a52e:	df 90       	pop	r13
    a530:	cf 90       	pop	r12
    a532:	a4 cf       	rjmp	.-184    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a534:	80 e0       	ldi	r24, 0x00	; 0
    a536:	ff 90       	pop	r15
    a538:	ef 90       	pop	r14
    a53a:	df 90       	pop	r13
    a53c:	cf 90       	pop	r12
    a53e:	08 95       	ret

0000a540 <_ZN6AD593321setIncrementFrequencyEm>:
    a540:	cf 92       	push	r12
    a542:	df 92       	push	r13
    a544:	ef 92       	push	r14
    a546:	ff 92       	push	r15
    a548:	0e 94 33 5c 	call	0xb866	; 0xb866 <__floatunsisf>
    a54c:	20 e4       	ldi	r18, 0x40	; 64
    a54e:	3b ef       	ldi	r19, 0xFB	; 251
    a550:	4f e7       	ldi	r20, 0x7F	; 127
    a552:	5a e4       	ldi	r21, 0x4A	; 74
    a554:	0e 94 9a 5b 	call	0xb734	; 0xb734 <__divsf3>
    a558:	20 e0       	ldi	r18, 0x00	; 0
    a55a:	30 e0       	ldi	r19, 0x00	; 0
    a55c:	40 e0       	ldi	r20, 0x00	; 0
    a55e:	5d e4       	ldi	r21, 0x4D	; 77
    a560:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    a564:	0e 94 02 5c 	call	0xb804	; 0xb804 <__fixsfsi>
    a568:	6b 01       	movw	r12, r22
    a56a:	7c 01       	movw	r14, r24
    a56c:	c1 14       	cp	r12, r1
    a56e:	d1 04       	cpc	r13, r1
    a570:	e1 04       	cpc	r14, r1
    a572:	81 e0       	ldi	r24, 0x01	; 1
    a574:	f8 06       	cpc	r15, r24
    a576:	d4 f4       	brge	.+52     	; 0xa5ac <_ZN6AD593321setIncrementFrequencyEm+0x6c>
    a578:	b7 01       	movw	r22, r14
    a57a:	99 27       	eor	r25, r25
    a57c:	77 fd       	sbrc	r23, 7
    a57e:	90 95       	com	r25
    a580:	89 2f       	mov	r24, r25
    a582:	85 e8       	ldi	r24, 0x85	; 133
    a584:	7b df       	rcall	.-266    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a586:	88 23       	and	r24, r24
    a588:	89 f0       	breq	.+34     	; 0xa5ac <_ZN6AD593321setIncrementFrequencyEm+0x6c>
    a58a:	99 27       	eor	r25, r25
    a58c:	f7 fc       	sbrc	r15, 7
    a58e:	9a 95       	dec	r25
    a590:	8f 2d       	mov	r24, r15
    a592:	7e 2d       	mov	r23, r14
    a594:	6d 2d       	mov	r22, r13
    a596:	86 e8       	ldi	r24, 0x86	; 134
    a598:	71 df       	rcall	.-286    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a59a:	88 23       	and	r24, r24
    a59c:	39 f0       	breq	.+14     	; 0xa5ac <_ZN6AD593321setIncrementFrequencyEm+0x6c>
    a59e:	6c 2d       	mov	r22, r12
    a5a0:	87 e8       	ldi	r24, 0x87	; 135
    a5a2:	ff 90       	pop	r15
    a5a4:	ef 90       	pop	r14
    a5a6:	df 90       	pop	r13
    a5a8:	cf 90       	pop	r12
    a5aa:	68 cf       	rjmp	.-304    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a5ac:	80 e0       	ldi	r24, 0x00	; 0
    a5ae:	ff 90       	pop	r15
    a5b0:	ef 90       	pop	r14
    a5b2:	df 90       	pop	r13
    a5b4:	cf 90       	pop	r12
    a5b6:	08 95       	ret

0000a5b8 <_ZN6AD593319setNumberIncrementsEj>:
    a5b8:	cf 93       	push	r28
    a5ba:	df 93       	push	r29
    a5bc:	81 15       	cp	r24, r1
    a5be:	22 e0       	ldi	r18, 0x02	; 2
    a5c0:	92 07       	cpc	r25, r18
    a5c2:	58 f4       	brcc	.+22     	; 0xa5da <_ZN6AD593319setNumberIncrementsEj+0x22>
    a5c4:	ec 01       	movw	r28, r24
    a5c6:	6d 2f       	mov	r22, r29
    a5c8:	88 e8       	ldi	r24, 0x88	; 136
    a5ca:	58 df       	rcall	.-336    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a5cc:	88 23       	and	r24, r24
    a5ce:	29 f0       	breq	.+10     	; 0xa5da <_ZN6AD593319setNumberIncrementsEj+0x22>
    a5d0:	6c 2f       	mov	r22, r28
    a5d2:	89 e8       	ldi	r24, 0x89	; 137
    a5d4:	df 91       	pop	r29
    a5d6:	cf 91       	pop	r28
    a5d8:	51 cf       	rjmp	.-350    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a5da:	80 e0       	ldi	r24, 0x00	; 0
    a5dc:	df 91       	pop	r29
    a5de:	cf 91       	pop	r28
    a5e0:	08 95       	ret

0000a5e2 <_ZN6AD593316setInternalClockEb>:
    a5e2:	88 23       	and	r24, r24
    a5e4:	19 f0       	breq	.+6      	; 0xa5ec <_ZN6AD593316setInternalClockEb+0xa>
    a5e6:	60 e0       	ldi	r22, 0x00	; 0
    a5e8:	81 e8       	ldi	r24, 0x81	; 129
    a5ea:	48 cf       	rjmp	.-368    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a5ec:	88 e0       	ldi	r24, 0x08	; 8
    a5ee:	65 cf       	rjmp	.-310    	; 0xa4ba <_ZN6AD593314setClockSourceEh>

0000a5f0 <_ZN6AD59337getByteEhPh>:
    a5f0:	1f 93       	push	r17
    a5f2:	cf 93       	push	r28
    a5f4:	df 93       	push	r29
    a5f6:	18 2f       	mov	r17, r24
    a5f8:	eb 01       	movw	r28, r22
    a5fa:	6d e0       	ldi	r22, 0x0D	; 13
    a5fc:	70 e0       	ldi	r23, 0x00	; 0
    a5fe:	84 e8       	ldi	r24, 0x84	; 132
    a600:	94 e1       	ldi	r25, 0x14	; 20
    a602:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    a606:	60 eb       	ldi	r22, 0xB0	; 176
    a608:	84 e8       	ldi	r24, 0x84	; 132
    a60a:	94 e1       	ldi	r25, 0x14	; 20
    a60c:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    a610:	61 2f       	mov	r22, r17
    a612:	84 e8       	ldi	r24, 0x84	; 132
    a614:	94 e1       	ldi	r25, 0x14	; 20
    a616:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    a61a:	84 e8       	ldi	r24, 0x84	; 132
    a61c:	94 e1       	ldi	r25, 0x14	; 20
    a61e:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    a622:	88 23       	and	r24, r24
    a624:	29 f0       	breq	.+10     	; 0xa630 <_ZN6AD59337getByteEhPh+0x40>
    a626:	81 e0       	ldi	r24, 0x01	; 1
    a628:	88 83       	st	Y, r24
    a62a:	80 e0       	ldi	r24, 0x00	; 0
    a62c:	90 e0       	ldi	r25, 0x00	; 0
    a62e:	17 c0       	rjmp	.+46     	; 0xa65e <_ZN6AD59337getByteEhPh+0x6e>
    a630:	41 e0       	ldi	r20, 0x01	; 1
    a632:	50 e0       	ldi	r21, 0x00	; 0
    a634:	6d e0       	ldi	r22, 0x0D	; 13
    a636:	70 e0       	ldi	r23, 0x00	; 0
    a638:	84 e8       	ldi	r24, 0x84	; 132
    a63a:	94 e1       	ldi	r25, 0x14	; 20
    a63c:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    a640:	84 e8       	ldi	r24, 0x84	; 132
    a642:	94 e1       	ldi	r25, 0x14	; 20
    a644:	0e 94 c3 48 	call	0x9186	; 0x9186 <_ZN7TwoWire9availableEv>
    a648:	00 97       	sbiw	r24, 0x00	; 0
    a64a:	41 f0       	breq	.+16     	; 0xa65c <_ZN6AD59337getByteEhPh+0x6c>
    a64c:	84 e8       	ldi	r24, 0x84	; 132
    a64e:	94 e1       	ldi	r25, 0x14	; 20
    a650:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    a654:	88 83       	st	Y, r24
    a656:	81 e0       	ldi	r24, 0x01	; 1
    a658:	90 e0       	ldi	r25, 0x00	; 0
    a65a:	01 c0       	rjmp	.+2      	; 0xa65e <_ZN6AD59337getByteEhPh+0x6e>
    a65c:	18 82       	st	Y, r1
    a65e:	df 91       	pop	r29
    a660:	cf 91       	pop	r28
    a662:	1f 91       	pop	r17
    a664:	08 95       	ret

0000a666 <_ZN6AD593314setControlModeEh>:
    a666:	1f 93       	push	r17
    a668:	cf 93       	push	r28
    a66a:	df 93       	push	r29
    a66c:	1f 92       	push	r1
    a66e:	cd b7       	in	r28, 0x3d	; 61
    a670:	de b7       	in	r29, 0x3e	; 62
    a672:	18 2f       	mov	r17, r24
    a674:	be 01       	movw	r22, r28
    a676:	6f 5f       	subi	r22, 0xFF	; 255
    a678:	7f 4f       	sbci	r23, 0xFF	; 255
    a67a:	80 e8       	ldi	r24, 0x80	; 128
    a67c:	b9 df       	rcall	.-142    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
    a67e:	89 2b       	or	r24, r25
    a680:	39 f0       	breq	.+14     	; 0xa690 <_ZN6AD593314setControlModeEh+0x2a>
    a682:	69 81       	ldd	r22, Y+1	; 0x01
    a684:	6f 70       	andi	r22, 0x0F	; 15
    a686:	61 2b       	or	r22, r17
    a688:	69 83       	std	Y+1, r22	; 0x01
    a68a:	80 e8       	ldi	r24, 0x80	; 128
    a68c:	f7 de       	rcall	.-530    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a68e:	01 c0       	rjmp	.+2      	; 0xa692 <_ZN6AD593314setControlModeEh+0x2c>
    a690:	80 e0       	ldi	r24, 0x00	; 0
    a692:	0f 90       	pop	r0
    a694:	df 91       	pop	r29
    a696:	cf 91       	pop	r28
    a698:	1f 91       	pop	r17
    a69a:	08 95       	ret

0000a69c <_ZN6AD593312setPowerModeEh>:
    a69c:	80 3a       	cpi	r24, 0xA0	; 160
    a69e:	39 f0       	breq	.+14     	; 0xa6ae <_ZN6AD593312setPowerModeEh+0x12>
    a6a0:	80 3b       	cpi	r24, 0xB0	; 176
    a6a2:	19 f0       	breq	.+6      	; 0xa6aa <_ZN6AD593312setPowerModeEh+0xe>
    a6a4:	81 11       	cpse	r24, r1
    a6a6:	05 c0       	rjmp	.+10     	; 0xa6b2 <_ZN6AD593312setPowerModeEh+0x16>
    a6a8:	03 c0       	rjmp	.+6      	; 0xa6b0 <_ZN6AD593312setPowerModeEh+0x14>
    a6aa:	80 eb       	ldi	r24, 0xB0	; 176
    a6ac:	01 c0       	rjmp	.+2      	; 0xa6b0 <_ZN6AD593312setPowerModeEh+0x14>
    a6ae:	80 ea       	ldi	r24, 0xA0	; 160
    a6b0:	da cf       	rjmp	.-76     	; 0xa666 <_ZN6AD593314setControlModeEh>
    a6b2:	80 e0       	ldi	r24, 0x00	; 0
    a6b4:	08 95       	ret

0000a6b6 <_ZN6AD59335resetEv>:
    a6b6:	cf 93       	push	r28
    a6b8:	df 93       	push	r29
    a6ba:	1f 92       	push	r1
    a6bc:	cd b7       	in	r28, 0x3d	; 61
    a6be:	de b7       	in	r29, 0x3e	; 62
    a6c0:	be 01       	movw	r22, r28
    a6c2:	6f 5f       	subi	r22, 0xFF	; 255
    a6c4:	7f 4f       	sbci	r23, 0xFF	; 255
    a6c6:	81 e8       	ldi	r24, 0x81	; 129
    a6c8:	93 df       	rcall	.-218    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
    a6ca:	89 2b       	or	r24, r25
    a6cc:	31 f0       	breq	.+12     	; 0xa6da <_ZN6AD59335resetEv+0x24>
    a6ce:	69 81       	ldd	r22, Y+1	; 0x01
    a6d0:	60 61       	ori	r22, 0x10	; 16
    a6d2:	69 83       	std	Y+1, r22	; 0x01
    a6d4:	81 e8       	ldi	r24, 0x81	; 129
    a6d6:	d2 de       	rcall	.-604    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a6d8:	01 c0       	rjmp	.+2      	; 0xa6dc <_ZN6AD59335resetEv+0x26>
    a6da:	80 e0       	ldi	r24, 0x00	; 0
    a6dc:	0f 90       	pop	r0
    a6de:	df 91       	pop	r29
    a6e0:	cf 91       	pop	r28
    a6e2:	08 95       	ret

0000a6e4 <_ZN6AD59338setRangeEh>:
    a6e4:	1f 93       	push	r17
    a6e6:	cf 93       	push	r28
    a6e8:	df 93       	push	r29
    a6ea:	1f 92       	push	r1
    a6ec:	cd b7       	in	r28, 0x3d	; 61
    a6ee:	de b7       	in	r29, 0x3e	; 62
    a6f0:	18 2f       	mov	r17, r24
    a6f2:	be 01       	movw	r22, r28
    a6f4:	6f 5f       	subi	r22, 0xFF	; 255
    a6f6:	7f 4f       	sbci	r23, 0xFF	; 255
    a6f8:	80 e8       	ldi	r24, 0x80	; 128
    a6fa:	7a df       	rcall	.-268    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
    a6fc:	89 2b       	or	r24, r25
    a6fe:	11 f4       	brne	.+4      	; 0xa704 <_ZN6AD59338setRangeEh+0x20>
    a700:	80 e0       	ldi	r24, 0x00	; 0
    a702:	32 c0       	rjmp	.+100    	; 0xa768 <_ZN6AD59338setRangeEh+0x84>
    a704:	89 81       	ldd	r24, Y+1	; 0x01
    a706:	89 7f       	andi	r24, 0xF9	; 249
    a708:	89 83       	std	Y+1, r24	; 0x01
    a70a:	12 30       	cpi	r17, 0x02	; 2
    a70c:	40 f4       	brcc	.+16     	; 0xa71e <_ZN6AD59338setRangeEh+0x3a>
    a70e:	67 e3       	ldi	r22, 0x37	; 55
    a710:	70 e1       	ldi	r23, 0x10	; 16
    a712:	80 ec       	ldi	r24, 0xC0	; 192
    a714:	90 e1       	ldi	r25, 0x10	; 16
    a716:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    a71a:	69 81       	ldd	r22, Y+1	; 0x01
    a71c:	23 c0       	rjmp	.+70     	; 0xa764 <_ZN6AD59338setRangeEh+0x80>
    a71e:	12 30       	cpi	r17, 0x02	; 2
    a720:	49 f4       	brne	.+18     	; 0xa734 <_ZN6AD59338setRangeEh+0x50>
    a722:	6c e4       	ldi	r22, 0x4C	; 76
    a724:	70 e1       	ldi	r23, 0x10	; 16
    a726:	80 ec       	ldi	r24, 0xC0	; 192
    a728:	90 e1       	ldi	r25, 0x10	; 16
    a72a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    a72e:	69 81       	ldd	r22, Y+1	; 0x01
    a730:	62 60       	ori	r22, 0x02	; 2
    a732:	17 c0       	rjmp	.+46     	; 0xa762 <_ZN6AD59338setRangeEh+0x7e>
    a734:	8d ef       	ldi	r24, 0xFD	; 253
    a736:	81 0f       	add	r24, r17
    a738:	82 30       	cpi	r24, 0x02	; 2
    a73a:	48 f4       	brcc	.+18     	; 0xa74e <_ZN6AD59338setRangeEh+0x6a>
    a73c:	61 e6       	ldi	r22, 0x61	; 97
    a73e:	70 e1       	ldi	r23, 0x10	; 16
    a740:	80 ec       	ldi	r24, 0xC0	; 192
    a742:	90 e1       	ldi	r25, 0x10	; 16
    a744:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    a748:	69 81       	ldd	r22, Y+1	; 0x01
    a74a:	64 60       	ori	r22, 0x04	; 4
    a74c:	0a c0       	rjmp	.+20     	; 0xa762 <_ZN6AD59338setRangeEh+0x7e>
    a74e:	16 30       	cpi	r17, 0x06	; 6
    a750:	b9 f6       	brne	.-82     	; 0xa700 <_ZN6AD59338setRangeEh+0x1c>
    a752:	66 e7       	ldi	r22, 0x76	; 118
    a754:	70 e1       	ldi	r23, 0x10	; 16
    a756:	80 ec       	ldi	r24, 0xC0	; 192
    a758:	90 e1       	ldi	r25, 0x10	; 16
    a75a:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
    a75e:	69 81       	ldd	r22, Y+1	; 0x01
    a760:	66 60       	ori	r22, 0x06	; 6
    a762:	69 83       	std	Y+1, r22	; 0x01
    a764:	80 e8       	ldi	r24, 0x80	; 128
    a766:	8a de       	rcall	.-748    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a768:	0f 90       	pop	r0
    a76a:	df 91       	pop	r29
    a76c:	cf 91       	pop	r28
    a76e:	1f 91       	pop	r17
    a770:	08 95       	ret

0000a772 <_ZN6AD593310setPGAGainEh>:
    a772:	1f 93       	push	r17
    a774:	cf 93       	push	r28
    a776:	df 93       	push	r29
    a778:	1f 92       	push	r1
    a77a:	cd b7       	in	r28, 0x3d	; 61
    a77c:	de b7       	in	r29, 0x3e	; 62
    a77e:	18 2f       	mov	r17, r24
    a780:	be 01       	movw	r22, r28
    a782:	6f 5f       	subi	r22, 0xFF	; 255
    a784:	7f 4f       	sbci	r23, 0xFF	; 255
    a786:	80 e8       	ldi	r24, 0x80	; 128
    a788:	33 df       	rcall	.-410    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
    a78a:	89 2b       	or	r24, r25
    a78c:	11 f4       	brne	.+4      	; 0xa792 <_ZN6AD593310setPGAGainEh+0x20>
    a78e:	80 e0       	ldi	r24, 0x00	; 0
    a790:	0e c0       	rjmp	.+28     	; 0xa7ae <_ZN6AD593310setPGAGainEh+0x3c>
    a792:	69 81       	ldd	r22, Y+1	; 0x01
    a794:	6e 7f       	andi	r22, 0xFE	; 254
    a796:	69 83       	std	Y+1, r22	; 0x01
    a798:	11 30       	cpi	r17, 0x01	; 1
    a79a:	19 f4       	brne	.+6      	; 0xa7a2 <_ZN6AD593310setPGAGainEh+0x30>
    a79c:	61 60       	ori	r22, 0x01	; 1
    a79e:	69 83       	std	Y+1, r22	; 0x01
    a7a0:	04 c0       	rjmp	.+8      	; 0xa7aa <_ZN6AD593310setPGAGainEh+0x38>
    a7a2:	11 23       	and	r17, r17
    a7a4:	11 f0       	breq	.+4      	; 0xa7aa <_ZN6AD593310setPGAGainEh+0x38>
    a7a6:	15 30       	cpi	r17, 0x05	; 5
    a7a8:	91 f7       	brne	.-28     	; 0xa78e <_ZN6AD593310setPGAGainEh+0x1c>
    a7aa:	80 e8       	ldi	r24, 0x80	; 128
    a7ac:	67 de       	rcall	.-818    	; 0xa47c <_ZN6AD59338sendByteEhh>
    a7ae:	0f 90       	pop	r0
    a7b0:	df 91       	pop	r29
    a7b2:	cf 91       	pop	r28
    a7b4:	1f 91       	pop	r17
    a7b6:	08 95       	ret

0000a7b8 <_ZN6AD593312readRegisterEh>:
    a7b8:	cf 93       	push	r28
    a7ba:	df 93       	push	r29
    a7bc:	1f 92       	push	r1
    a7be:	cd b7       	in	r28, 0x3d	; 61
    a7c0:	de b7       	in	r29, 0x3e	; 62
    a7c2:	be 01       	movw	r22, r28
    a7c4:	6f 5f       	subi	r22, 0xFF	; 255
    a7c6:	7f 4f       	sbci	r23, 0xFF	; 255
    a7c8:	13 df       	rcall	.-474    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
    a7ca:	89 2b       	or	r24, r25
    a7cc:	11 f0       	breq	.+4      	; 0xa7d2 <_ZN6AD593312readRegisterEh+0x1a>
    a7ce:	89 81       	ldd	r24, Y+1	; 0x01
    a7d0:	01 c0       	rjmp	.+2      	; 0xa7d4 <_ZN6AD593312readRegisterEh+0x1c>
    a7d2:	8f ef       	ldi	r24, 0xFF	; 255
    a7d4:	0f 90       	pop	r0
    a7d6:	df 91       	pop	r29
    a7d8:	cf 91       	pop	r28
    a7da:	08 95       	ret

0000a7dc <_ZN6AD593318readStatusRegisterEv>:
    a7dc:	8f e8       	ldi	r24, 0x8F	; 143
    a7de:	ec cf       	rjmp	.-40     	; 0xa7b8 <_ZN6AD593312readRegisterEh>

0000a7e0 <_ZN6AD593314getTemperatureEv>:
 * Get the temperature reading from the AD5933. Waits until a temperature is
 * ready. Also ensures temperature measurement mode is active.
 *
 * @return The temperature in celcius, or -1 if fail.
 */
double AD5933::getTemperature() {
    a7e0:	cf 93       	push	r28
    a7e2:	df 93       	push	r29
    a7e4:	1f 92       	push	r1
    a7e6:	1f 92       	push	r1
    a7e8:	cd b7       	in	r28, 0x3d	; 61
    a7ea:	de b7       	in	r29, 0x3e	; 62
 * @return Success or failure
 */
bool AD5933::enableTemperature(byte enable) {
    // If enable, set temp measure bits. If disable, reset to no operation.
    if (enable == TEMP_MEASURE) {
        return setControlMode(CTRL_TEMP_MEASURE);
    a7ec:	80 e9       	ldi	r24, 0x90	; 144
    a7ee:	3b df       	rcall	.-394    	; 0xa666 <_ZN6AD593314setControlModeEh>
 *
 * @return The temperature in celcius, or -1 if fail.
 */
double AD5933::getTemperature() {
    // Set temperature mode
    if (enableTemperature(TEMP_MEASURE)) {
    a7f0:	88 23       	and	r24, r24
        // Wait for a valid temperature to be ready
        while((readStatusRegister() & STATUS_TEMP_VALID) != STATUS_TEMP_VALID) ;
    a7f2:	39 f1       	breq	.+78     	; 0xa842 <_ZN6AD593314getTemperatureEv+0x62>
    a7f4:	f3 df       	rcall	.-26     	; 0xa7dc <_ZN6AD593318readStatusRegisterEv>
    a7f6:	80 ff       	sbrs	r24, 0
    a7f8:	fd cf       	rjmp	.-6      	; 0xa7f4 <_ZN6AD593314getTemperatureEv+0x14>

        // Read raw temperature from temperature registers
        byte rawTemp[2];
        if (getByte(TEMP_DATA_1, &rawTemp[0]) &&
    a7fa:	be 01       	movw	r22, r28
    a7fc:	6f 5f       	subi	r22, 0xFF	; 255
    a7fe:	7f 4f       	sbci	r23, 0xFF	; 255
    a800:	82 e9       	ldi	r24, 0x92	; 146
    a802:	f6 de       	rcall	.-532    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
    a804:	89 2b       	or	r24, r25
    a806:	e9 f0       	breq	.+58     	; 0xa842 <_ZN6AD593314getTemperatureEv+0x62>
            getByte(TEMP_DATA_2, &rawTemp[1]))
    a808:	be 01       	movw	r22, r28
    a80a:	6e 5f       	subi	r22, 0xFE	; 254
    a80c:	7f 4f       	sbci	r23, 0xFF	; 255
    a80e:	83 e9       	ldi	r24, 0x93	; 147
    a810:	ef de       	rcall	.-546    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
        // Wait for a valid temperature to be ready
        while((readStatusRegister() & STATUS_TEMP_VALID) != STATUS_TEMP_VALID) ;

        // Read raw temperature from temperature registers
        byte rawTemp[2];
        if (getByte(TEMP_DATA_1, &rawTemp[0]) &&
    a812:	89 2b       	or	r24, r25
    a814:	b1 f0       	breq	.+44     	; 0xa842 <_ZN6AD593314getTemperatureEv+0x62>
            getByte(TEMP_DATA_2, &rawTemp[1]))
        {
            // Combine raw temperature bytes into an interger. The ADC
            // returns a 14-bit 2's C value where the 14th bit is a sign
            // bit. As such, we only need to keep the bottom 13 bits.
            int rawTempVal = (rawTemp[0] << 8 | rawTemp[1]) & 0x1FFF;
    a816:	69 81       	ldd	r22, Y+1	; 0x01
    a818:	7a 81       	ldd	r23, Y+2	; 0x02
    a81a:	76 27       	eor	r23, r22
    a81c:	67 27       	eor	r22, r23
    a81e:	76 27       	eor	r23, r22
    a820:	7f 71       	andi	r23, 0x1F	; 31

            // Convert into celcius using the formula given in the
            // datasheet. There is a different formula depending on the sign
            // bit, which is the 5th bit of the byte in TEMP_DATA_1.
            if ((rawTemp[0] & (1<<5)) == 0) {
    a822:	89 81       	ldd	r24, Y+1	; 0x01
    a824:	85 fd       	sbrc	r24, 5
                return rawTempVal / 32.0;
            } else {
                return (rawTempVal - 16384) / 32.0;
    a826:	70 54       	subi	r23, 0x40	; 64
    a828:	07 2e       	mov	r0, r23
    a82a:	00 0c       	add	r0, r0
    a82c:	88 0b       	sbc	r24, r24
    a82e:	99 0b       	sbc	r25, r25
    a830:	0e 94 35 5c 	call	0xb86a	; 0xb86a <__floatsisf>
    a834:	20 e0       	ldi	r18, 0x00	; 0
    a836:	30 e0       	ldi	r19, 0x00	; 0
    a838:	40 e0       	ldi	r20, 0x00	; 0
    a83a:	5d e3       	ldi	r21, 0x3D	; 61
    a83c:	0e 94 4e 5d 	call	0xba9c	; 0xba9c <__mulsf3>
    a840:	04 c0       	rjmp	.+8      	; 0xa84a <_ZN6AD593314getTemperatureEv+0x6a>
            }
        }
    }
    return -1;
    a842:	60 e0       	ldi	r22, 0x00	; 0
    a844:	70 e0       	ldi	r23, 0x00	; 0
    a846:	80 e8       	ldi	r24, 0x80	; 128
    a848:	9f eb       	ldi	r25, 0xBF	; 191
}
    a84a:	0f 90       	pop	r0
    a84c:	0f 90       	pop	r0
    a84e:	df 91       	pop	r29
    a850:	cf 91       	pop	r28
    a852:	08 95       	ret

0000a854 <_ZN6AD593314getComplexDataEPiS0_>:
 *
 * @param real Pointer to an int that will contain the real component.
 * @param imag Pointer to an int that will contain the imaginary component.
 * @return Success or failure
 */
bool AD5933::getComplexData(int *real, int *imag) {
    a854:	ef 92       	push	r14
    a856:	ff 92       	push	r15
    a858:	0f 93       	push	r16
    a85a:	1f 93       	push	r17
    a85c:	cf 93       	push	r28
    a85e:	df 93       	push	r29
    a860:	00 d0       	rcall	.+0      	; 0xa862 <_ZN6AD593314getComplexDataEPiS0_+0xe>
    a862:	1f 92       	push	r1
    a864:	cd b7       	in	r28, 0x3d	; 61
    a866:	de b7       	in	r29, 0x3e	; 62
    a868:	7c 01       	movw	r14, r24
    a86a:	8b 01       	movw	r16, r22
    // Wait for a measurement to be available
    while ((readStatusRegister() & STATUS_DATA_VALID) != STATUS_DATA_VALID);
    a86c:	b7 df       	rcall	.-146    	; 0xa7dc <_ZN6AD593318readStatusRegisterEv>
    a86e:	81 ff       	sbrs	r24, 1
    a870:	fd cf       	rjmp	.-6      	; 0xa86c <_ZN6AD593314getComplexDataEPiS0_+0x18>

    // Read the four data registers.
    // TODO: Do this faster with a block read
    byte realComp[2];
    byte imagComp[2];
    if (getByte(REAL_DATA_1, &realComp[0]) &&
    a872:	be 01       	movw	r22, r28
    a874:	6d 5f       	subi	r22, 0xFD	; 253
    a876:	7f 4f       	sbci	r23, 0xFF	; 255
    a878:	84 e9       	ldi	r24, 0x94	; 148
    a87a:	ba de       	rcall	.-652    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
        getByte(REAL_DATA_2, &realComp[1]) &&
        getByte(IMAG_DATA_1, &imagComp[0]) &&
    a87c:	89 2b       	or	r24, r25
    a87e:	09 f4       	brne	.+2      	; 0xa882 <_ZN6AD593314getComplexDataEPiS0_+0x2e>
    a880:	43 c0       	rjmp	.+134    	; 0xa908 <_ZN6AD593314getComplexDataEPiS0_+0xb4>
    // Read the four data registers.
    // TODO: Do this faster with a block read
    byte realComp[2];
    byte imagComp[2];
    if (getByte(REAL_DATA_1, &realComp[0]) &&
        getByte(REAL_DATA_2, &realComp[1]) &&
    a882:	be 01       	movw	r22, r28
    a884:	6c 5f       	subi	r22, 0xFC	; 252
    a886:	7f 4f       	sbci	r23, 0xFF	; 255
    a888:	85 e9       	ldi	r24, 0x95	; 149
    a88a:	b2 de       	rcall	.-668    	; 0xa5f0 <_ZN6AD59337getByteEhPh>

    // Read the four data registers.
    // TODO: Do this faster with a block read
    byte realComp[2];
    byte imagComp[2];
    if (getByte(REAL_DATA_1, &realComp[0]) &&
    a88c:	89 2b       	or	r24, r25
    a88e:	e1 f1       	breq	.+120    	; 0xa908 <_ZN6AD593314getComplexDataEPiS0_+0xb4>
        getByte(REAL_DATA_2, &realComp[1]) &&
        getByte(IMAG_DATA_1, &imagComp[0]) &&
    a890:	be 01       	movw	r22, r28
    a892:	6f 5f       	subi	r22, 0xFF	; 255
    a894:	7f 4f       	sbci	r23, 0xFF	; 255
    a896:	86 e9       	ldi	r24, 0x96	; 150
    a898:	ab de       	rcall	.-682    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
    // Read the four data registers.
    // TODO: Do this faster with a block read
    byte realComp[2];
    byte imagComp[2];
    if (getByte(REAL_DATA_1, &realComp[0]) &&
        getByte(REAL_DATA_2, &realComp[1]) &&
    a89a:	89 2b       	or	r24, r25
    a89c:	a9 f1       	breq	.+106    	; 0xa908 <_ZN6AD593314getComplexDataEPiS0_+0xb4>
        getByte(IMAG_DATA_1, &imagComp[0]) &&
        getByte(IMAG_DATA_2, &imagComp[1]))
    a89e:	be 01       	movw	r22, r28
    a8a0:	6e 5f       	subi	r22, 0xFE	; 254
    a8a2:	7f 4f       	sbci	r23, 0xFF	; 255
    a8a4:	87 e9       	ldi	r24, 0x97	; 151
    a8a6:	a4 de       	rcall	.-696    	; 0xa5f0 <_ZN6AD59337getByteEhPh>
    // TODO: Do this faster with a block read
    byte realComp[2];
    byte imagComp[2];
    if (getByte(REAL_DATA_1, &realComp[0]) &&
        getByte(REAL_DATA_2, &realComp[1]) &&
        getByte(IMAG_DATA_1, &imagComp[0]) &&
    a8a8:	89 2b       	or	r24, r25
    a8aa:	71 f1       	breq	.+92     	; 0xa908 <_ZN6AD593314getComplexDataEPiS0_+0xb4>
    a8ac:	6b 81       	ldd	r22, Y+3	; 0x03
    a8ae:	7c 81       	ldd	r23, Y+4	; 0x04
    a8b0:	76 27       	eor	r23, r22
    a8b2:	67 27       	eor	r22, r23
    a8b4:	76 27       	eor	r23, r22
        getByte(IMAG_DATA_2, &imagComp[1]))
    {
        // Combine the two separate bytes into a single 16-bit value and store
        // them at the locations specified.
        *real = (int16_t)(((realComp[0] << 8) | realComp[1]) & 0xFFFF);
    a8b6:	f7 01       	movw	r30, r14
    a8b8:	71 83       	std	Z+1, r23	; 0x01
    a8ba:	60 83       	st	Z, r22
        *imag = (int16_t)(((imagComp[0] << 8) | imagComp[1]) & 0xFFFF);
    a8bc:	89 81       	ldd	r24, Y+1	; 0x01
    a8be:	9a 81       	ldd	r25, Y+2	; 0x02
    a8c0:	98 27       	eor	r25, r24
    a8c2:	89 27       	eor	r24, r25
    a8c4:	98 27       	eor	r25, r24
    a8c6:	f8 01       	movw	r30, r16
    a8c8:	91 83       	std	Z+1, r25	; 0x01
    a8ca:	80 83       	st	Z, r24
	
	Serial.println((realComp[0] << 8 | realComp[1]) & 0xFFFF);
    a8cc:	4a e0       	ldi	r20, 0x0A	; 10
    a8ce:	50 e0       	ldi	r21, 0x00	; 0
    a8d0:	80 ec       	ldi	r24, 0xC0	; 192
    a8d2:	90 e1       	ldi	r25, 0x10	; 16
    a8d4:	0e 94 de 07 	call	0xfbc	; 0xfbc <_ZN5Print7printlnEji>
	//Serial.println((int16_t));
	Serial.println("imag");
    a8d8:	6b e8       	ldi	r22, 0x8B	; 139
    a8da:	70 e1       	ldi	r23, 0x10	; 16
    a8dc:	80 ec       	ldi	r24, 0xC0	; 192
    a8de:	90 e1       	ldi	r25, 0x10	; 16
    a8e0:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN5Print7printlnEPKc>
	Serial.println((int16_t)imagComp[0] << 8);
    a8e4:	79 81       	ldd	r23, Y+1	; 0x01
    a8e6:	4a e0       	ldi	r20, 0x0A	; 10
    a8e8:	50 e0       	ldi	r21, 0x00	; 0
    a8ea:	60 e0       	ldi	r22, 0x00	; 0
    a8ec:	80 ec       	ldi	r24, 0xC0	; 192
    a8ee:	90 e1       	ldi	r25, 0x10	; 16
    a8f0:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
	Serial.println((int16_t)imagComp[1]);
    a8f4:	6a 81       	ldd	r22, Y+2	; 0x02
    a8f6:	70 e0       	ldi	r23, 0x00	; 0
    a8f8:	4a e0       	ldi	r20, 0x0A	; 10
    a8fa:	50 e0       	ldi	r21, 0x00	; 0
    a8fc:	80 ec       	ldi	r24, 0xC0	; 192
    a8fe:	90 e1       	ldi	r25, 0x10	; 16
    a900:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
        return true;
    a904:	81 e0       	ldi	r24, 0x01	; 1
    a906:	09 c0       	rjmp	.+18     	; 0xa91a <_ZN6AD593314getComplexDataEPiS0_+0xc6>
    } else {
        *real = -1;
    a908:	8f ef       	ldi	r24, 0xFF	; 255
    a90a:	9f ef       	ldi	r25, 0xFF	; 255
    a90c:	f7 01       	movw	r30, r14
    a90e:	91 83       	std	Z+1, r25	; 0x01
    a910:	80 83       	st	Z, r24
        *imag = -1;
    a912:	f8 01       	movw	r30, r16
    a914:	91 83       	std	Z+1, r25	; 0x01
    a916:	80 83       	st	Z, r24
        return false;
    a918:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    a91a:	0f 90       	pop	r0
    a91c:	0f 90       	pop	r0
    a91e:	0f 90       	pop	r0
    a920:	0f 90       	pop	r0
    a922:	df 91       	pop	r29
    a924:	cf 91       	pop	r28
    a926:	1f 91       	pop	r17
    a928:	0f 91       	pop	r16
    a92a:	ff 90       	pop	r15
    a92c:	ef 90       	pop	r14
    a92e:	08 95       	ret

0000a930 <_ZN6AD593314frequencySweepEPiS0_i>:
 * @param real An array of appropriate size to hold the real data.
 * @param imag An array of appropriate size to hold the imaginary data.
 * @param n Length of the array (or the number of discrete measurements)
 * @return Success or failure
 */
bool AD5933::frequencySweep(int real[], int imag[], int n) {
    a930:	cf 92       	push	r12
    a932:	df 92       	push	r13
    a934:	ef 92       	push	r14
    a936:	ff 92       	push	r15
    a938:	0f 93       	push	r16
    a93a:	1f 93       	push	r17
    a93c:	cf 93       	push	r28
    a93e:	df 93       	push	r29
    a940:	d8 2f       	mov	r29, r24
    a942:	c9 2f       	mov	r28, r25
    a944:	7b 01       	movw	r14, r22
    a946:	6a 01       	movw	r12, r20
    // Make the appropriate switch. TODO: Does no operation even do anything?
    switch (level) {
        case POWER_ON:
            return setControlMode(CTRL_NO_OPERATION);
        case POWER_STANDBY:
            return setControlMode(CTRL_STANDBY_MODE);
    a948:	80 eb       	ldi	r24, 0xB0	; 176
    a94a:	8d de       	rcall	.-742    	; 0xa666 <_ZN6AD593314setControlModeEh>
bool AD5933::frequencySweep(int real[], int imag[], int n) {
    // Begin by issuing a sequence of commands
    // If the commands aren't taking hold, add a brief delay
    if (!(setPowerMode(POWER_STANDBY) &&         // place in standby
         setControlMode(CTRL_INIT_START_FREQ) && // init start freq
         setControlMode(CTRL_START_FREQ_SWEEP))) // begin frequency sweep
    a94c:	88 23       	and	r24, r24
    a94e:	59 f1       	breq	.+86     	; 0xa9a6 <_ZN6AD593314frequencySweepEPiS0_i+0x76>
 */
bool AD5933::frequencySweep(int real[], int imag[], int n) {
    // Begin by issuing a sequence of commands
    // If the commands aren't taking hold, add a brief delay
    if (!(setPowerMode(POWER_STANDBY) &&         // place in standby
         setControlMode(CTRL_INIT_START_FREQ) && // init start freq
    a950:	80 e1       	ldi	r24, 0x10	; 16
    a952:	89 de       	rcall	.-750    	; 0xa666 <_ZN6AD593314setControlModeEh>
 * @return Success or failure
 */
bool AD5933::frequencySweep(int real[], int imag[], int n) {
    // Begin by issuing a sequence of commands
    // If the commands aren't taking hold, add a brief delay
    if (!(setPowerMode(POWER_STANDBY) &&         // place in standby
    a954:	88 23       	and	r24, r24
         setControlMode(CTRL_INIT_START_FREQ) && // init start freq
         setControlMode(CTRL_START_FREQ_SWEEP))) // begin frequency sweep
    a956:	39 f1       	breq	.+78     	; 0xa9a6 <_ZN6AD593314frequencySweepEPiS0_i+0x76>
    a958:	80 e2       	ldi	r24, 0x20	; 32
    a95a:	85 de       	rcall	.-758    	; 0xa666 <_ZN6AD593314setControlModeEh>
    a95c:	88 23       	and	r24, r24
    a95e:	19 f1       	breq	.+70     	; 0xa9a6 <_ZN6AD593314frequencySweepEPiS0_i+0x76>
    a960:	0d 2f       	mov	r16, r29
    a962:	1c 2f       	mov	r17, r28
    a964:	e7 01       	movw	r28, r14
    a966:	e1 2c       	mov	r14, r1
         }
	//delay(10);
	//Serial.println("realizando sweep");
    // Perform the sweep. Make sure we don't exceed n.
    int i = 0;
    while ((readStatusRegister() & STATUS_SWEEP_DONE) != STATUS_SWEEP_DONE) {
    a968:	f1 2c       	mov	r15, r1
    a96a:	38 df       	rcall	.-400    	; 0xa7dc <_ZN6AD593318readStatusRegisterEv>
    a96c:	82 fd       	sbrc	r24, 2
    a96e:	11 c0       	rjmp	.+34     	; 0xa992 <_ZN6AD593314frequencySweepEPiS0_i+0x62>
        // Make sure we aren't exceeding the bounds of our buffer
		//Serial.print(i);
		//Serial.print(n);
        if (i >= n) {
    a970:	ec 14       	cp	r14, r12
    a972:	fd 04       	cpc	r15, r13
            return false;
        }

        // Get the data for this frequency point and store it in the array
        if (!getComplexData(&real[i], &imag[i])) {
    a974:	c4 f4       	brge	.+48     	; 0xa9a6 <_ZN6AD593314frequencySweepEPiS0_i+0x76>
    a976:	be 01       	movw	r22, r28
    a978:	c8 01       	movw	r24, r16
    a97a:	6c df       	rcall	.-296    	; 0xa854 <_ZN6AD593314getComplexDataEPiS0_>
    a97c:	0e 5f       	subi	r16, 0xFE	; 254
    a97e:	1f 4f       	sbci	r17, 0xFF	; 255
    a980:	22 96       	adiw	r28, 0x02	; 2
    a982:	88 23       	and	r24, r24
		
		//Serial.print("data ");
		//Serial.println(i);

        // Increment the frequency and our index.
        i++;
    a984:	81 f0       	breq	.+32     	; 0xa9a6 <_ZN6AD593314frequencySweepEPiS0_i+0x76>
    a986:	8f ef       	ldi	r24, 0xFF	; 255
    a988:	e8 1a       	sub	r14, r24
        setControlMode(CTRL_INCREMENT_FREQ);
    a98a:	f8 0a       	sbc	r15, r24
    a98c:	80 e3       	ldi	r24, 0x30	; 48
    a98e:	6b de       	rcall	.-810    	; 0xa666 <_ZN6AD593314setControlModeEh>
         }
	//delay(10);
	//Serial.println("realizando sweep");
    // Perform the sweep. Make sure we don't exceed n.
    int i = 0;
    while ((readStatusRegister() & STATUS_SWEEP_DONE) != STATUS_SWEEP_DONE) {
    a990:	ec cf       	rjmp	.-40     	; 0xa96a <_ZN6AD593314frequencySweepEPiS0_i+0x3a>
    // Make the appropriate switch. TODO: Does no operation even do anything?
    switch (level) {
        case POWER_ON:
            return setControlMode(CTRL_NO_OPERATION);
        case POWER_STANDBY:
            return setControlMode(CTRL_STANDBY_MODE);
    a992:	80 eb       	ldi	r24, 0xB0	; 176
    }

	//Serial.println("Completo?");
    // Put into standby
    return setPowerMode(POWER_STANDBY);
}
    a994:	df 91       	pop	r29
    a996:	cf 91       	pop	r28
    a998:	1f 91       	pop	r17
    a99a:	0f 91       	pop	r16
    a99c:	ff 90       	pop	r15
    a99e:	ef 90       	pop	r14
    a9a0:	df 90       	pop	r13
    // Make the appropriate switch. TODO: Does no operation even do anything?
    switch (level) {
        case POWER_ON:
            return setControlMode(CTRL_NO_OPERATION);
        case POWER_STANDBY:
            return setControlMode(CTRL_STANDBY_MODE);
    a9a2:	cf 90       	pop	r12
    a9a4:	60 ce       	rjmp	.-832    	; 0xa666 <_ZN6AD593314setControlModeEh>
    }

	//Serial.println("Completo?");
    // Put into standby
    return setPowerMode(POWER_STANDBY);
}
    a9a6:	80 e0       	ldi	r24, 0x00	; 0
    a9a8:	df 91       	pop	r29
    a9aa:	cf 91       	pop	r28
    a9ac:	1f 91       	pop	r17
    a9ae:	0f 91       	pop	r16
    a9b0:	ff 90       	pop	r15
    a9b2:	ef 90       	pop	r14
    a9b4:	df 90       	pop	r13
    a9b6:	cf 90       	pop	r12
    a9b8:	08 95       	ret

0000a9ba <_ZN6AD59339calibrateEPfPdii>:
 * @param phase An array of appropriate size to hold phase data.
 * @param ref The known reference resistance.
 * @param n Length of the array (or the number of discrete measurements)
 * @return Success or failure
 */
bool AD5933::calibrate(float gain[], double phase[], int ref, int n) {
    a9ba:	2f 92       	push	r2
    a9bc:	3f 92       	push	r3
    a9be:	4f 92       	push	r4
    a9c0:	5f 92       	push	r5
    a9c2:	6f 92       	push	r6
    a9c4:	7f 92       	push	r7
    a9c6:	8f 92       	push	r8
    a9c8:	9f 92       	push	r9
    a9ca:	af 92       	push	r10
    a9cc:	bf 92       	push	r11
    a9ce:	cf 92       	push	r12
    a9d0:	df 92       	push	r13
    a9d2:	ef 92       	push	r14
    a9d4:	ff 92       	push	r15
    a9d6:	0f 93       	push	r16
    a9d8:	1f 93       	push	r17
    a9da:	cf 93       	push	r28
    a9dc:	df 93       	push	r29
    a9de:	cd b7       	in	r28, 0x3d	; 61
    a9e0:	de b7       	in	r29, 0x3e	; 62
    a9e2:	63 97       	sbiw	r28, 0x13	; 19
    a9e4:	0f b6       	in	r0, 0x3f	; 63
    a9e6:	f8 94       	cli
    a9e8:	de bf       	out	0x3e, r29	; 62
    a9ea:	0f be       	out	0x3f, r0	; 63
    a9ec:	cd bf       	out	0x3d, r28	; 61
    a9ee:	5c 01       	movw	r10, r24
    a9f0:	6b 01       	movw	r12, r22
    a9f2:	7a 01       	movw	r14, r20
    a9f4:	89 01       	movw	r16, r18
    // We need arrays to hold the real and imaginary values temporarily
    int *real = new int[n];
    a9f6:	21 38       	cpi	r18, 0x81	; 129
    a9f8:	8f e3       	ldi	r24, 0x3F	; 63
    a9fa:	38 07       	cpc	r19, r24
    a9fc:	20 f4       	brcc	.+8      	; 0xaa06 <_ZN6AD59339calibrateEPfPdii+0x4c>
    a9fe:	c9 01       	movw	r24, r18
    aa00:	88 0f       	add	r24, r24
    aa02:	99 1f       	adc	r25, r25
    aa04:	02 c0       	rjmp	.+4      	; 0xaa0a <_ZN6AD59339calibrateEPfPdii+0x50>
    aa06:	8f ef       	ldi	r24, 0xFF	; 255
    aa08:	9f ef       	ldi	r25, 0xFF	; 255
    aa0a:	0e 94 11 07 	call	0xe22	; 0xe22 <_Znaj>
    aa0e:	9b 8b       	std	Y+19, r25	; 0x13
    aa10:	8a 8b       	std	Y+18, r24	; 0x12
    int *imag = new int[n];
    aa12:	01 38       	cpi	r16, 0x81	; 129
    aa14:	9f e3       	ldi	r25, 0x3F	; 63
    aa16:	19 07       	cpc	r17, r25
    aa18:	20 f4       	brcc	.+8      	; 0xaa22 <_ZN6AD59339calibrateEPfPdii+0x68>
    aa1a:	c8 01       	movw	r24, r16
    aa1c:	88 0f       	add	r24, r24
    aa1e:	99 1f       	adc	r25, r25
    aa20:	02 c0       	rjmp	.+4      	; 0xaa26 <_ZN6AD59339calibrateEPfPdii+0x6c>
    aa22:	8f ef       	ldi	r24, 0xFF	; 255
    aa24:	9f ef       	ldi	r25, 0xFF	; 255
    aa26:	0e 94 11 07 	call	0xe22	; 0xe22 <_Znaj>
    aa2a:	1c 01       	movw	r2, r24

	Serial.print("ref=");
    aa2c:	60 e9       	ldi	r22, 0x90	; 144
    aa2e:	70 e1       	ldi	r23, 0x10	; 16
    aa30:	80 ec       	ldi	r24, 0xC0	; 192
    aa32:	90 e1       	ldi	r25, 0x10	; 16
    aa34:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
	Serial.println(ref);
    aa38:	4a e0       	ldi	r20, 0x0A	; 10
    aa3a:	50 e0       	ldi	r21, 0x00	; 0
    aa3c:	b7 01       	movw	r22, r14
    aa3e:	80 ec       	ldi	r24, 0xC0	; 192
    aa40:	90 e1       	ldi	r25, 0x10	; 16
    aa42:	0e 94 39 08 	call	0x1072	; 0x1072 <_ZN5Print7printlnEii>
	Serial.println((float)(1.0/ref));
    aa46:	b7 01       	movw	r22, r14
    aa48:	ff 0c       	add	r15, r15
    aa4a:	88 0b       	sbc	r24, r24
    aa4c:	99 0b       	sbc	r25, r25
    aa4e:	0d d7       	rcall	.+3610   	; 0xb86a <__floatsisf>
    aa50:	9b 01       	movw	r18, r22
    aa52:	ac 01       	movw	r20, r24
    aa54:	60 e0       	ldi	r22, 0x00	; 0
    aa56:	70 e0       	ldi	r23, 0x00	; 0
    aa58:	80 e8       	ldi	r24, 0x80	; 128
    aa5a:	9f e3       	ldi	r25, 0x3F	; 63
    aa5c:	6b d6       	rcall	.+3286   	; 0xb734 <__divsf3>
    aa5e:	6a 87       	std	Y+10, r22	; 0x0a
    aa60:	7b 87       	std	Y+11, r23	; 0x0b
    aa62:	8c 87       	std	Y+12, r24	; 0x0c
    aa64:	9d 87       	std	Y+13, r25	; 0x0d
    aa66:	22 e0       	ldi	r18, 0x02	; 2
    aa68:	30 e0       	ldi	r19, 0x00	; 0
    aa6a:	ab 01       	movw	r20, r22
    aa6c:	bc 01       	movw	r22, r24
    aa6e:	80 ec       	ldi	r24, 0xC0	; 192
    aa70:	90 e1       	ldi	r25, 0x10	; 16
    aa72:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
	
    // Perform the frequency sweep
    if (!frequencySweep(real, imag, n)) {
    aa76:	a8 01       	movw	r20, r16
    aa78:	b1 01       	movw	r22, r2
    aa7a:	8a 89       	ldd	r24, Y+18	; 0x12
    aa7c:	9b 89       	ldd	r25, Y+19	; 0x13
    aa7e:	58 df       	rcall	.-336    	; 0xa930 <_ZN6AD593314frequencySweepEPiS0_i>
    aa80:	89 87       	std	Y+9, r24	; 0x09
        delete [] real;
    aa82:	ea 89       	ldd	r30, Y+18	; 0x12
    aa84:	fb 89       	ldd	r31, Y+19	; 0x13
	Serial.print("ref=");
	Serial.println(ref);
	Serial.println((float)(1.0/ref));
	
    // Perform the frequency sweep
    if (!frequencySweep(real, imag, n)) {
    aa86:	88 23       	and	r24, r24
    aa88:	09 f4       	brne	.+2      	; 0xaa8c <_ZN6AD59339calibrateEPfPdii+0xd2>
    aa8a:	e1 c0       	rjmp	.+450    	; 0xac4e <_ZN6AD59339calibrateEPfPdii+0x294>
    aa8c:	ff 87       	std	Y+15, r31	; 0x0f
    aa8e:	ee 87       	std	Y+14, r30	; 0x0e
    aa90:	38 86       	std	Y+8, r3	; 0x08
    aa92:	2f 82       	std	Y+7, r2	; 0x07
    aa94:	ab 82       	std	Y+3, r10	; 0x03
    aa96:	bc 82       	std	Y+4, r11	; 0x04
    aa98:	c9 82       	std	Y+1, r12	; 0x01
    aa9a:	da 82       	std	Y+2, r13	; 0x02
    aa9c:	f9 8b       	std	Y+17, r31	; 0x11
    aa9e:	e8 8b       	std	Y+16, r30	; 0x10
    aaa0:	1e 82       	std	Y+6, r1	; 0x06
    aaa2:	1d 82       	std	Y+5, r1	; 0x05
        delete [] imag;
        return false;
    }

    // For each point in the sweep, calculate the gain factor and phase
    for (int i = 0; i < n; i++) {
    aaa4:	8d 81       	ldd	r24, Y+5	; 0x05
    aaa6:	9e 81       	ldd	r25, Y+6	; 0x06
    aaa8:	80 17       	cp	r24, r16
    aaaa:	91 07       	cpc	r25, r17
    aaac:	0c f0       	brlt	.+2      	; 0xaab0 <_ZN6AD59339calibrateEPfPdii+0xf6>
    aaae:	cd c0       	rjmp	.+410    	; 0xac4a <_ZN6AD59339calibrateEPfPdii+0x290>
		
		long tempMag = pow(real[i], 2.0) + pow(imag[i], 2.0);
    aab0:	ee 85       	ldd	r30, Y+14	; 0x0e
    aab2:	ff 85       	ldd	r31, Y+15	; 0x0f
    aab4:	61 91       	ld	r22, Z+
    aab6:	71 91       	ld	r23, Z+
    aab8:	ff 87       	std	Y+15, r31	; 0x0f
    aaba:	ee 87       	std	Y+14, r30	; 0x0e
    aabc:	07 2e       	mov	r0, r23
    aabe:	00 0c       	add	r0, r0
    aac0:	88 0b       	sbc	r24, r24
    aac2:	99 0b       	sbc	r25, r25
    aac4:	d2 d6       	rcall	.+3492   	; 0xb86a <__floatsisf>
    aac6:	6b 01       	movw	r12, r22
    aac8:	7c 01       	movw	r14, r24
    aaca:	ef 81       	ldd	r30, Y+7	; 0x07
    aacc:	f8 85       	ldd	r31, Y+8	; 0x08
    aace:	60 81       	ld	r22, Z
    aad0:	71 81       	ldd	r23, Z+1	; 0x01
    aad2:	07 2e       	mov	r0, r23
    aad4:	00 0c       	add	r0, r0
    aad6:	88 0b       	sbc	r24, r24
    aad8:	99 0b       	sbc	r25, r25
    aada:	c7 d6       	rcall	.+3470   	; 0xb86a <__floatsisf>
    aadc:	9b 01       	movw	r18, r22
    aade:	ac 01       	movw	r20, r24
    aae0:	dd d7       	rcall	.+4026   	; 0xba9c <__mulsf3>
    aae2:	4b 01       	movw	r8, r22
    aae4:	5c 01       	movw	r10, r24
    aae6:	a7 01       	movw	r20, r14
    aae8:	96 01       	movw	r18, r12
    aaea:	c7 01       	movw	r24, r14
    aaec:	b6 01       	movw	r22, r12
    aaee:	d6 d7       	rcall	.+4012   	; 0xba9c <__mulsf3>
    aaf0:	9b 01       	movw	r18, r22
    aaf2:	ac 01       	movw	r20, r24
    aaf4:	c5 01       	movw	r24, r10
    aaf6:	b4 01       	movw	r22, r8
    aaf8:	50 d5       	rcall	.+2720   	; 0xb59a <__addsf3>
    aafa:	84 d6       	rcall	.+3336   	; 0xb804 <__fixsfsi>
    aafc:	2b 01       	movw	r4, r22
		long tempSqr = sqrt(tempMag);
    aafe:	3c 01       	movw	r6, r24
    ab00:	b4 d6       	rcall	.+3432   	; 0xb86a <__floatsisf>
    ab02:	0e 94 bb 5d 	call	0xbb76	; 0xbb76 <sqrt>
    ab06:	7e d6       	rcall	.+3324   	; 0xb804 <__fixsfsi>
    ab08:	4b 01       	movw	r8, r22
    ab0a:	5c 01       	movw	r10, r24
		float tempGain = 1.0/ref/tempSqr;
    ab0c:	ae d6       	rcall	.+3420   	; 0xb86a <__floatsisf>
    ab0e:	9b 01       	movw	r18, r22
    ab10:	ac 01       	movw	r20, r24
    ab12:	6a 85       	ldd	r22, Y+10	; 0x0a
    ab14:	7b 85       	ldd	r23, Y+11	; 0x0b
    ab16:	8c 85       	ldd	r24, Y+12	; 0x0c
    ab18:	9d 85       	ldd	r25, Y+13	; 0x0d
    ab1a:	0c d6       	rcall	.+3096   	; 0xb734 <__divsf3>
    ab1c:	6b 01       	movw	r12, r22
    ab1e:	7c 01       	movw	r14, r24
    ab20:	2a e0       	ldi	r18, 0x0A	; 10
    ab22:	30 e0       	ldi	r19, 0x00	; 0
		
		Serial.print(tempMag);
    ab24:	b3 01       	movw	r22, r6
    ab26:	a2 01       	movw	r20, r4
    ab28:	80 ec       	ldi	r24, 0xC0	; 192
    ab2a:	90 e1       	ldi	r25, 0x10	; 16
    ab2c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN5Print5printEli>
    ab30:	69 e1       	ldi	r22, 0x19	; 25
    ab32:	7c e0       	ldi	r23, 0x0C	; 12
		Serial.print("|");
    ab34:	80 ec       	ldi	r24, 0xC0	; 192
    ab36:	90 e1       	ldi	r25, 0x10	; 16
    ab38:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    ab3c:	2a e0       	ldi	r18, 0x0A	; 10
    ab3e:	30 e0       	ldi	r19, 0x00	; 0
		Serial.print(tempSqr);
    ab40:	b5 01       	movw	r22, r10
    ab42:	a4 01       	movw	r20, r8
    ab44:	80 ec       	ldi	r24, 0xC0	; 192
    ab46:	90 e1       	ldi	r25, 0x10	; 16
    ab48:	0e 94 ee 07 	call	0xfdc	; 0xfdc <_ZN5Print5printEli>
    ab4c:	69 e1       	ldi	r22, 0x19	; 25
    ab4e:	7c e0       	ldi	r23, 0x0C	; 12
		Serial.print("|");
    ab50:	80 ec       	ldi	r24, 0xC0	; 192
    ab52:	90 e1       	ldi	r25, 0x10	; 16
    ab54:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    ab58:	2f e0       	ldi	r18, 0x0F	; 15
    ab5a:	30 e0       	ldi	r19, 0x00	; 0
		Serial.println(tempGain, 15);
    ab5c:	b7 01       	movw	r22, r14
    ab5e:	a6 01       	movw	r20, r12
    ab60:	80 ec       	ldi	r24, 0xC0	; 192
    ab62:	90 e1       	ldi	r25, 0x10	; 16
    ab64:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
    ab68:	eb 81       	ldd	r30, Y+3	; 0x03
    ab6a:	fc 81       	ldd	r31, Y+4	; 0x04
		
        //gain[i] = (float) ((1.0/ref)/(sqrt(pow(real[i], 2) + pow(imag[i], 2))));
		gain[i] = tempGain;
    ab6c:	c0 82       	st	Z, r12
    ab6e:	d1 82       	std	Z+1, r13	; 0x01
    ab70:	e2 82       	std	Z+2, r14	; 0x02
    ab72:	f3 82       	std	Z+3, r15	; 0x03
    ab74:	6a ef       	ldi	r22, 0xFA	; 250
    ab76:	7a e0       	ldi	r23, 0x0A	; 10
		
		Serial.print("G=");
    ab78:	80 ec       	ldi	r24, 0xC0	; 192
    ab7a:	90 e1       	ldi	r25, 0x10	; 16
    ab7c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    ab80:	eb 81       	ldd	r30, Y+3	; 0x03
    ab82:	fc 81       	ldd	r31, Y+4	; 0x04
		Serial.println(gain[i], 15);
    ab84:	41 91       	ld	r20, Z+
    ab86:	51 91       	ld	r21, Z+
    ab88:	61 91       	ld	r22, Z+
    ab8a:	71 91       	ld	r23, Z+
    ab8c:	fc 83       	std	Y+4, r31	; 0x04
    ab8e:	eb 83       	std	Y+3, r30	; 0x03
    ab90:	2f e0       	ldi	r18, 0x0F	; 15
    ab92:	30 e0       	ldi	r19, 0x00	; 0
    ab94:	80 ec       	ldi	r24, 0xC0	; 192
    ab96:	90 e1       	ldi	r25, 0x10	; 16
    ab98:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
    ab9c:	e8 89       	ldd	r30, Y+16	; 0x10
		
		double ph = atan2(imag[i], real[i]);
    ab9e:	f9 89       	ldd	r31, Y+17	; 0x11
    aba0:	61 91       	ld	r22, Z+
    aba2:	71 91       	ld	r23, Z+
    aba4:	f9 8b       	std	Y+17, r31	; 0x11
    aba6:	e8 8b       	std	Y+16, r30	; 0x10
    aba8:	07 2e       	mov	r0, r23
    abaa:	00 0c       	add	r0, r0
    abac:	88 0b       	sbc	r24, r24
    abae:	99 0b       	sbc	r25, r25
    abb0:	5c d6       	rcall	.+3256   	; 0xb86a <__floatsisf>
    abb2:	6b 01       	movw	r12, r22
    abb4:	7c 01       	movw	r14, r24
    abb6:	ef 81       	ldd	r30, Y+7	; 0x07
    abb8:	f8 85       	ldd	r31, Y+8	; 0x08
    abba:	61 91       	ld	r22, Z+
    abbc:	71 91       	ld	r23, Z+
    abbe:	f8 87       	std	Y+8, r31	; 0x08
    abc0:	ef 83       	std	Y+7, r30	; 0x07
    abc2:	07 2e       	mov	r0, r23
    abc4:	00 0c       	add	r0, r0
    abc6:	88 0b       	sbc	r24, r24
    abc8:	99 0b       	sbc	r25, r25
    abca:	4f d6       	rcall	.+3230   	; 0xb86a <__floatsisf>
    abcc:	a7 01       	movw	r20, r14
    abce:	96 01       	movw	r18, r12
    abd0:	57 d5       	rcall	.+2734   	; 0xb680 <atan2>
    abd2:	6b 01       	movw	r12, r22
    abd4:	7c 01       	movw	r14, r24
    abd6:	65 e9       	ldi	r22, 0x95	; 149
    abd8:	70 e1       	ldi	r23, 0x10	; 16
		//ph = atan(ph);
		
		Serial.print("Phase(Rad)=");
    abda:	80 ec       	ldi	r24, 0xC0	; 192
    abdc:	90 e1       	ldi	r25, 0x10	; 16
    abde:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    abe2:	22 e0       	ldi	r18, 0x02	; 2
    abe4:	30 e0       	ldi	r19, 0x00	; 0
		Serial.println(ph);
    abe6:	b7 01       	movw	r22, r14
    abe8:	a6 01       	movw	r20, r12
    abea:	80 ec       	ldi	r24, 0xC0	; 192
    abec:	90 e1       	ldi	r25, 0x10	; 16
    abee:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
    abf2:	e9 81       	ldd	r30, Y+1	; 0x01
    abf4:	fa 81       	ldd	r31, Y+2	; 0x02
		phase[i] = ph;
    abf6:	c0 82       	st	Z, r12
    abf8:	d1 82       	std	Z+1, r13	; 0x01
    abfa:	e2 82       	std	Z+2, r14	; 0x02
    abfc:	f3 82       	std	Z+3, r15	; 0x03
    abfe:	61 ea       	ldi	r22, 0xA1	; 161
    ac00:	70 e1       	ldi	r23, 0x10	; 16

		Serial.print("Phase(Degrees)=");
    ac02:	80 ec       	ldi	r24, 0xC0	; 192
    ac04:	90 e1       	ldi	r25, 0x10	; 16
    ac06:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN5Print5printEPKc>
    ac0a:	20 e0       	ldi	r18, 0x00	; 0
		Serial.println(phase[i] * 180 / PI);
    ac0c:	30 e0       	ldi	r19, 0x00	; 0
    ac0e:	44 e3       	ldi	r20, 0x34	; 52
    ac10:	53 e4       	ldi	r21, 0x43	; 67
    ac12:	e9 81       	ldd	r30, Y+1	; 0x01
    ac14:	fa 81       	ldd	r31, Y+2	; 0x02
    ac16:	61 91       	ld	r22, Z+
    ac18:	71 91       	ld	r23, Z+
    ac1a:	81 91       	ld	r24, Z+
    ac1c:	91 91       	ld	r25, Z+
    ac1e:	fa 83       	std	Y+2, r31	; 0x02
    ac20:	e9 83       	std	Y+1, r30	; 0x01
    ac22:	3c d7       	rcall	.+3704   	; 0xba9c <__mulsf3>
    ac24:	2b ed       	ldi	r18, 0xDB	; 219
    ac26:	3f e0       	ldi	r19, 0x0F	; 15
    ac28:	49 e4       	ldi	r20, 0x49	; 73
    ac2a:	50 e4       	ldi	r21, 0x40	; 64
    ac2c:	83 d5       	rcall	.+2822   	; 0xb734 <__divsf3>
    ac2e:	ab 01       	movw	r20, r22
    ac30:	bc 01       	movw	r22, r24
    ac32:	22 e0       	ldi	r18, 0x02	; 2
    ac34:	30 e0       	ldi	r19, 0x00	; 0
    ac36:	80 ec       	ldi	r24, 0xC0	; 192
    ac38:	90 e1       	ldi	r25, 0x10	; 16
    ac3a:	0e 94 30 09 	call	0x1260	; 0x1260 <_ZN5Print7printlnEdi>
    ac3e:	8d 81       	ldd	r24, Y+5	; 0x05
    ac40:	9e 81       	ldd	r25, Y+6	; 0x06
        delete [] imag;
        return false;
    }

    // For each point in the sweep, calculate the gain factor and phase
    for (int i = 0; i < n; i++) {
    ac42:	01 96       	adiw	r24, 0x01	; 1
    ac44:	9e 83       	std	Y+6, r25	; 0x06
    ac46:	8d 83       	std	Y+5, r24	; 0x05
    ac48:	2d cf       	rjmp	.-422    	; 0xaaa4 <_ZN6AD59339calibrateEPfPdii+0xea>
    ac4a:	ea 89       	ldd	r30, Y+18	; 0x12
    ac4c:	fb 89       	ldd	r31, Y+19	; 0x13

		Serial.print("Phase(Degrees)=");
		Serial.println(phase[i] * 180 / PI);
    }

    delete [] real;
    ac4e:	30 97       	sbiw	r30, 0x00	; 0
    ac50:	19 f0       	breq	.+6      	; 0xac58 <_ZN6AD59339calibrateEPfPdii+0x29e>
    ac52:	cf 01       	movw	r24, r30
    ac54:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZdaPv>
    ac58:	21 14       	cp	r2, r1
    ac5a:	31 04       	cpc	r3, r1
    delete [] imag;
    ac5c:	19 f0       	breq	.+6      	; 0xac64 <_ZN6AD59339calibrateEPfPdii+0x2aa>
    ac5e:	c1 01       	movw	r24, r2
    ac60:	0e 94 13 07 	call	0xe26	; 0xe26 <_ZdaPv>
    ac64:	89 85       	ldd	r24, Y+9	; 0x09
    ac66:	63 96       	adiw	r28, 0x13	; 19
    return true;
}
    ac68:	0f b6       	in	r0, 0x3f	; 63
    ac6a:	f8 94       	cli
    ac6c:	de bf       	out	0x3e, r29	; 62
    ac6e:	0f be       	out	0x3f, r0	; 63
    ac70:	cd bf       	out	0x3d, r28	; 61
    ac72:	df 91       	pop	r29
    ac74:	cf 91       	pop	r28
    ac76:	1f 91       	pop	r17
    ac78:	0f 91       	pop	r16
    ac7a:	ff 90       	pop	r15
    ac7c:	ef 90       	pop	r14
    ac7e:	df 90       	pop	r13
    ac80:	cf 90       	pop	r12
    ac82:	bf 90       	pop	r11
    ac84:	af 90       	pop	r10
    ac86:	9f 90       	pop	r9
    ac88:	8f 90       	pop	r8
    ac8a:	7f 90       	pop	r7
    ac8c:	6f 90       	pop	r6
    ac8e:	5f 90       	pop	r5
    ac90:	4f 90       	pop	r4
    ac92:	3f 90       	pop	r3
    ac94:	2f 90       	pop	r2
    ac96:	08 95       	ret

0000ac98 <_ZN7TwoWire5writeEi>:
    ac98:	dc 01       	movw	r26, r24
    ac9a:	ed 91       	ld	r30, X+
		temp_buffer = temp_buffer | 0b00001000;
	} else {
		// turn off 32kHz pin
		temp_buffer = temp_buffer & 0b11110111;
	}
	writeControlByte(temp_buffer, 1);
    ac9c:	fc 91       	ld	r31, X
    ac9e:	01 90       	ld	r0, Z+
    aca0:	f0 81       	ld	r31, Z
    aca2:	e0 2d       	mov	r30, r0
    aca4:	19 94       	eijmp

0000aca6 <_ZN6DS3231C1Ev>:
    aca6:	08 95       	ret

0000aca8 <_ZN6DS32319getSecondEv>:
    aca8:	68 e6       	ldi	r22, 0x68	; 104
    acaa:	70 e0       	ldi	r23, 0x00	; 0
    acac:	84 e8       	ldi	r24, 0x84	; 132
    acae:	94 e1       	ldi	r25, 0x14	; 20
    acb0:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    acb4:	60 e0       	ldi	r22, 0x00	; 0
    acb6:	70 e0       	ldi	r23, 0x00	; 0
    acb8:	84 e8       	ldi	r24, 0x84	; 132
    acba:	94 e1       	ldi	r25, 0x14	; 20
    acbc:	ed df       	rcall	.-38     	; 0xac98 <_ZN7TwoWire5writeEi>
    acbe:	84 e8       	ldi	r24, 0x84	; 132
    acc0:	94 e1       	ldi	r25, 0x14	; 20
    acc2:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    acc6:	41 e0       	ldi	r20, 0x01	; 1
    acc8:	50 e0       	ldi	r21, 0x00	; 0
    acca:	68 e6       	ldi	r22, 0x68	; 104
    accc:	70 e0       	ldi	r23, 0x00	; 0
    acce:	84 e8       	ldi	r24, 0x84	; 132
    acd0:	94 e1       	ldi	r25, 0x14	; 20
    acd2:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    acd6:	84 e8       	ldi	r24, 0x84	; 132
    acd8:	94 e1       	ldi	r25, 0x14	; 20
    acda:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    acde:	98 2f       	mov	r25, r24
    ace0:	92 95       	swap	r25
    ace2:	9f 70       	andi	r25, 0x0F	; 15
    ace4:	8f 70       	andi	r24, 0x0F	; 15
    ace6:	2a e0       	ldi	r18, 0x0A	; 10
    ace8:	92 9f       	mul	r25, r18
    acea:	80 0d       	add	r24, r0
    acec:	11 24       	eor	r1, r1
    acee:	08 95       	ret

0000acf0 <_ZN6DS32319getMinuteEv>:
    acf0:	68 e6       	ldi	r22, 0x68	; 104
    acf2:	70 e0       	ldi	r23, 0x00	; 0
    acf4:	84 e8       	ldi	r24, 0x84	; 132
    acf6:	94 e1       	ldi	r25, 0x14	; 20
    acf8:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    acfc:	61 e0       	ldi	r22, 0x01	; 1
    acfe:	70 e0       	ldi	r23, 0x00	; 0
    ad00:	84 e8       	ldi	r24, 0x84	; 132
    ad02:	94 e1       	ldi	r25, 0x14	; 20
    ad04:	c9 df       	rcall	.-110    	; 0xac98 <_ZN7TwoWire5writeEi>
    ad06:	84 e8       	ldi	r24, 0x84	; 132
    ad08:	94 e1       	ldi	r25, 0x14	; 20
    ad0a:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    ad0e:	41 e0       	ldi	r20, 0x01	; 1
    ad10:	50 e0       	ldi	r21, 0x00	; 0
    ad12:	68 e6       	ldi	r22, 0x68	; 104
    ad14:	70 e0       	ldi	r23, 0x00	; 0
    ad16:	84 e8       	ldi	r24, 0x84	; 132
    ad18:	94 e1       	ldi	r25, 0x14	; 20
    ad1a:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    ad1e:	84 e8       	ldi	r24, 0x84	; 132
    ad20:	94 e1       	ldi	r25, 0x14	; 20
    ad22:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    ad26:	98 2f       	mov	r25, r24
    ad28:	92 95       	swap	r25
    ad2a:	9f 70       	andi	r25, 0x0F	; 15
    ad2c:	8f 70       	andi	r24, 0x0F	; 15
    ad2e:	2a e0       	ldi	r18, 0x0A	; 10
    ad30:	92 9f       	mul	r25, r18
    ad32:	80 0d       	add	r24, r0
    ad34:	11 24       	eor	r1, r1
    ad36:	08 95       	ret

0000ad38 <_ZN6DS32317getHourERbS0_>:
    ad38:	0f 93       	push	r16
    ad3a:	1f 93       	push	r17
    ad3c:	cf 93       	push	r28
    ad3e:	df 93       	push	r29
    ad40:	8b 01       	movw	r16, r22
    ad42:	ea 01       	movw	r28, r20
    ad44:	68 e6       	ldi	r22, 0x68	; 104
    ad46:	70 e0       	ldi	r23, 0x00	; 0
    ad48:	84 e8       	ldi	r24, 0x84	; 132
    ad4a:	94 e1       	ldi	r25, 0x14	; 20
    ad4c:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    ad50:	62 e0       	ldi	r22, 0x02	; 2
    ad52:	70 e0       	ldi	r23, 0x00	; 0
    ad54:	84 e8       	ldi	r24, 0x84	; 132
    ad56:	94 e1       	ldi	r25, 0x14	; 20
    ad58:	9f df       	rcall	.-194    	; 0xac98 <_ZN7TwoWire5writeEi>
    ad5a:	84 e8       	ldi	r24, 0x84	; 132
    ad5c:	94 e1       	ldi	r25, 0x14	; 20
    ad5e:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    ad62:	41 e0       	ldi	r20, 0x01	; 1
    ad64:	50 e0       	ldi	r21, 0x00	; 0
    ad66:	68 e6       	ldi	r22, 0x68	; 104
    ad68:	70 e0       	ldi	r23, 0x00	; 0
    ad6a:	84 e8       	ldi	r24, 0x84	; 132
    ad6c:	94 e1       	ldi	r25, 0x14	; 20
    ad6e:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    ad72:	84 e8       	ldi	r24, 0x84	; 132
    ad74:	94 e1       	ldi	r25, 0x14	; 20
    ad76:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    ad7a:	21 e0       	ldi	r18, 0x01	; 1
    ad7c:	ac 01       	movw	r20, r24
    ad7e:	40 74       	andi	r20, 0x40	; 64
    ad80:	55 27       	eor	r21, r21
    ad82:	86 ff       	sbrs	r24, 6
    ad84:	20 e0       	ldi	r18, 0x00	; 0
    ad86:	f8 01       	movw	r30, r16
    ad88:	20 83       	st	Z, r18
    ad8a:	38 2f       	mov	r19, r24
    ad8c:	3f 70       	andi	r19, 0x0F	; 15
    ad8e:	45 2b       	or	r20, r21
    ad90:	69 f0       	breq	.+26     	; 0xadac <_ZN6DS32317getHourERbS0_+0x74>
    ad92:	85 fb       	bst	r24, 5
    ad94:	99 27       	eor	r25, r25
    ad96:	90 f9       	bld	r25, 0
    ad98:	98 83       	st	Y, r25
    ad9a:	84 fb       	bst	r24, 4
    ad9c:	22 27       	eor	r18, r18
    ad9e:	20 f9       	bld	r18, 0
    ada0:	22 0f       	add	r18, r18
    ada2:	82 2f       	mov	r24, r18
    ada4:	88 0f       	add	r24, r24
    ada6:	88 0f       	add	r24, r24
    ada8:	82 0f       	add	r24, r18
    adaa:	09 c0       	rjmp	.+18     	; 0xadbe <_ZN6DS32317getHourERbS0_+0x86>
    adac:	98 2f       	mov	r25, r24
    adae:	96 95       	lsr	r25
    adb0:	96 95       	lsr	r25
    adb2:	96 95       	lsr	r25
    adb4:	96 70       	andi	r25, 0x06	; 6
    adb6:	89 2f       	mov	r24, r25
    adb8:	88 0f       	add	r24, r24
    adba:	88 0f       	add	r24, r24
    adbc:	89 0f       	add	r24, r25
    adbe:	83 0f       	add	r24, r19
    adc0:	df 91       	pop	r29
    adc2:	cf 91       	pop	r28
    adc4:	1f 91       	pop	r17
    adc6:	0f 91       	pop	r16
    adc8:	08 95       	ret

0000adca <_ZN6DS32317getDateEv>:
    adca:	68 e6       	ldi	r22, 0x68	; 104
    adcc:	70 e0       	ldi	r23, 0x00	; 0
    adce:	84 e8       	ldi	r24, 0x84	; 132
    add0:	94 e1       	ldi	r25, 0x14	; 20
    add2:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    add6:	64 e0       	ldi	r22, 0x04	; 4
    add8:	70 e0       	ldi	r23, 0x00	; 0
    adda:	84 e8       	ldi	r24, 0x84	; 132
    addc:	94 e1       	ldi	r25, 0x14	; 20
    adde:	5c df       	rcall	.-328    	; 0xac98 <_ZN7TwoWire5writeEi>
    ade0:	84 e8       	ldi	r24, 0x84	; 132
    ade2:	94 e1       	ldi	r25, 0x14	; 20
    ade4:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    ade8:	41 e0       	ldi	r20, 0x01	; 1
    adea:	50 e0       	ldi	r21, 0x00	; 0
    adec:	68 e6       	ldi	r22, 0x68	; 104
    adee:	70 e0       	ldi	r23, 0x00	; 0
    adf0:	84 e8       	ldi	r24, 0x84	; 132
    adf2:	94 e1       	ldi	r25, 0x14	; 20
    adf4:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    adf8:	84 e8       	ldi	r24, 0x84	; 132
    adfa:	94 e1       	ldi	r25, 0x14	; 20
    adfc:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    ae00:	98 2f       	mov	r25, r24
    ae02:	92 95       	swap	r25
    ae04:	9f 70       	andi	r25, 0x0F	; 15
    ae06:	8f 70       	andi	r24, 0x0F	; 15
    ae08:	2a e0       	ldi	r18, 0x0A	; 10
    ae0a:	92 9f       	mul	r25, r18
    ae0c:	80 0d       	add	r24, r0
    ae0e:	11 24       	eor	r1, r1
    ae10:	08 95       	ret

0000ae12 <_ZN6DS32318getMonthERb>:
    ae12:	cf 93       	push	r28
    ae14:	df 93       	push	r29
    ae16:	eb 01       	movw	r28, r22
    ae18:	68 e6       	ldi	r22, 0x68	; 104
    ae1a:	70 e0       	ldi	r23, 0x00	; 0
    ae1c:	84 e8       	ldi	r24, 0x84	; 132
    ae1e:	94 e1       	ldi	r25, 0x14	; 20
    ae20:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    ae24:	65 e0       	ldi	r22, 0x05	; 5
    ae26:	70 e0       	ldi	r23, 0x00	; 0
    ae28:	84 e8       	ldi	r24, 0x84	; 132
    ae2a:	94 e1       	ldi	r25, 0x14	; 20
    ae2c:	35 df       	rcall	.-406    	; 0xac98 <_ZN7TwoWire5writeEi>
    ae2e:	84 e8       	ldi	r24, 0x84	; 132
    ae30:	94 e1       	ldi	r25, 0x14	; 20
    ae32:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    ae36:	41 e0       	ldi	r20, 0x01	; 1
    ae38:	50 e0       	ldi	r21, 0x00	; 0
    ae3a:	68 e6       	ldi	r22, 0x68	; 104
    ae3c:	70 e0       	ldi	r23, 0x00	; 0
    ae3e:	84 e8       	ldi	r24, 0x84	; 132
    ae40:	94 e1       	ldi	r25, 0x14	; 20
    ae42:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    ae46:	84 e8       	ldi	r24, 0x84	; 132
    ae48:	94 e1       	ldi	r25, 0x14	; 20
    ae4a:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    ae4e:	98 2f       	mov	r25, r24
    ae50:	99 1f       	adc	r25, r25
    ae52:	99 27       	eor	r25, r25
    ae54:	99 1f       	adc	r25, r25
    ae56:	98 83       	st	Y, r25
    ae58:	98 2f       	mov	r25, r24
    ae5a:	96 95       	lsr	r25
    ae5c:	96 95       	lsr	r25
    ae5e:	96 95       	lsr	r25
    ae60:	9e 70       	andi	r25, 0x0E	; 14
    ae62:	29 2f       	mov	r18, r25
    ae64:	22 0f       	add	r18, r18
    ae66:	22 0f       	add	r18, r18
    ae68:	92 0f       	add	r25, r18
    ae6a:	8f 70       	andi	r24, 0x0F	; 15
    ae6c:	89 0f       	add	r24, r25
    ae6e:	df 91       	pop	r29
    ae70:	cf 91       	pop	r28
    ae72:	08 95       	ret

0000ae74 <_ZN6DS32317getYearEv>:
    ae74:	68 e6       	ldi	r22, 0x68	; 104
    ae76:	70 e0       	ldi	r23, 0x00	; 0
    ae78:	84 e8       	ldi	r24, 0x84	; 132
    ae7a:	94 e1       	ldi	r25, 0x14	; 20
    ae7c:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    ae80:	66 e0       	ldi	r22, 0x06	; 6
    ae82:	70 e0       	ldi	r23, 0x00	; 0
    ae84:	84 e8       	ldi	r24, 0x84	; 132
    ae86:	94 e1       	ldi	r25, 0x14	; 20
    ae88:	07 df       	rcall	.-498    	; 0xac98 <_ZN7TwoWire5writeEi>
    ae8a:	84 e8       	ldi	r24, 0x84	; 132
    ae8c:	94 e1       	ldi	r25, 0x14	; 20
    ae8e:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    ae92:	41 e0       	ldi	r20, 0x01	; 1
    ae94:	50 e0       	ldi	r21, 0x00	; 0
    ae96:	68 e6       	ldi	r22, 0x68	; 104
    ae98:	70 e0       	ldi	r23, 0x00	; 0
    ae9a:	84 e8       	ldi	r24, 0x84	; 132
    ae9c:	94 e1       	ldi	r25, 0x14	; 20
    ae9e:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    aea2:	84 e8       	ldi	r24, 0x84	; 132
    aea4:	94 e1       	ldi	r25, 0x14	; 20
    aea6:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    aeaa:	98 2f       	mov	r25, r24
    aeac:	92 95       	swap	r25
    aeae:	9f 70       	andi	r25, 0x0F	; 15
    aeb0:	8f 70       	andi	r24, 0x0F	; 15
    aeb2:	2a e0       	ldi	r18, 0x0A	; 10
    aeb4:	92 9f       	mul	r25, r18
    aeb6:	80 0d       	add	r24, r0
    aeb8:	11 24       	eor	r1, r1
    aeba:	08 95       	ret

0000aebc <_ZN6DS323115readControlByteEb>:
    aebc:	cf 93       	push	r28
    aebe:	c6 2f       	mov	r28, r22
    aec0:	68 e6       	ldi	r22, 0x68	; 104
    aec2:	70 e0       	ldi	r23, 0x00	; 0
    aec4:	84 e8       	ldi	r24, 0x84	; 132
    aec6:	94 e1       	ldi	r25, 0x14	; 20
    aec8:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    aecc:	cc 23       	and	r28, r28
    aece:	19 f0       	breq	.+6      	; 0xaed6 <_ZN6DS323115readControlByteEb+0x1a>
    aed0:	6f e0       	ldi	r22, 0x0F	; 15
    aed2:	70 e0       	ldi	r23, 0x00	; 0
    aed4:	02 c0       	rjmp	.+4      	; 0xaeda <_ZN6DS323115readControlByteEb+0x1e>
    aed6:	6e e0       	ldi	r22, 0x0E	; 14
    aed8:	70 e0       	ldi	r23, 0x00	; 0
    aeda:	84 e8       	ldi	r24, 0x84	; 132
    aedc:	94 e1       	ldi	r25, 0x14	; 20
    aede:	dc de       	rcall	.-584    	; 0xac98 <_ZN7TwoWire5writeEi>
    aee0:	84 e8       	ldi	r24, 0x84	; 132
    aee2:	94 e1       	ldi	r25, 0x14	; 20
    aee4:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    aee8:	41 e0       	ldi	r20, 0x01	; 1
    aeea:	50 e0       	ldi	r21, 0x00	; 0
    aeec:	68 e6       	ldi	r22, 0x68	; 104
    aeee:	70 e0       	ldi	r23, 0x00	; 0
    aef0:	84 e8       	ldi	r24, 0x84	; 132
    aef2:	94 e1       	ldi	r25, 0x14	; 20
    aef4:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    aef8:	84 e8       	ldi	r24, 0x84	; 132
    aefa:	94 e1       	ldi	r25, 0x14	; 20
    aefc:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    af00:	cf 91       	pop	r28
    af02:	08 95       	ret

0000af04 <_ZN6DS32319setMinuteEh>:
    af04:	cf 93       	push	r28
    af06:	c6 2f       	mov	r28, r22
    af08:	68 e6       	ldi	r22, 0x68	; 104
    af0a:	70 e0       	ldi	r23, 0x00	; 0
    af0c:	84 e8       	ldi	r24, 0x84	; 132
    af0e:	94 e1       	ldi	r25, 0x14	; 20
    af10:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    af14:	61 e0       	ldi	r22, 0x01	; 1
    af16:	70 e0       	ldi	r23, 0x00	; 0
    af18:	84 e8       	ldi	r24, 0x84	; 132
    af1a:	94 e1       	ldi	r25, 0x14	; 20
    af1c:	bd de       	rcall	.-646    	; 0xac98 <_ZN7TwoWire5writeEi>
    af1e:	8c 2f       	mov	r24, r28
    af20:	6a e0       	ldi	r22, 0x0A	; 10
    af22:	a3 d6       	rcall	.+3398   	; 0xbc6a <__udivmodqi4>
    af24:	69 2f       	mov	r22, r25
    af26:	20 e1       	ldi	r18, 0x10	; 16
    af28:	82 9f       	mul	r24, r18
    af2a:	60 0d       	add	r22, r0
    af2c:	11 24       	eor	r1, r1
    af2e:	84 e8       	ldi	r24, 0x84	; 132
    af30:	94 e1       	ldi	r25, 0x14	; 20
    af32:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    af36:	84 e8       	ldi	r24, 0x84	; 132
    af38:	94 e1       	ldi	r25, 0x14	; 20
    af3a:	cf 91       	pop	r28
    af3c:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>

0000af40 <_ZN6DS32317setHourEh>:
    af40:	cf 93       	push	r28
    af42:	c6 2f       	mov	r28, r22
    af44:	68 e6       	ldi	r22, 0x68	; 104
    af46:	70 e0       	ldi	r23, 0x00	; 0
    af48:	84 e8       	ldi	r24, 0x84	; 132
    af4a:	94 e1       	ldi	r25, 0x14	; 20
    af4c:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    af50:	62 e0       	ldi	r22, 0x02	; 2
    af52:	70 e0       	ldi	r23, 0x00	; 0
    af54:	84 e8       	ldi	r24, 0x84	; 132
    af56:	94 e1       	ldi	r25, 0x14	; 20
    af58:	9f de       	rcall	.-706    	; 0xac98 <_ZN7TwoWire5writeEi>
    af5a:	84 e8       	ldi	r24, 0x84	; 132
    af5c:	94 e1       	ldi	r25, 0x14	; 20
    af5e:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
    af62:	41 e0       	ldi	r20, 0x01	; 1
    af64:	50 e0       	ldi	r21, 0x00	; 0
    af66:	68 e6       	ldi	r22, 0x68	; 104
    af68:	70 e0       	ldi	r23, 0x00	; 0
    af6a:	84 e8       	ldi	r24, 0x84	; 132
    af6c:	94 e1       	ldi	r25, 0x14	; 20
    af6e:	0e 94 e8 49 	call	0x93d0	; 0x93d0 <_ZN7TwoWire11requestFromEii>
    af72:	84 e8       	ldi	r24, 0x84	; 132
    af74:	94 e1       	ldi	r25, 0x14	; 20
    af76:	0e 94 cb 48 	call	0x9196	; 0x9196 <_ZN7TwoWire4readEv>
    af7a:	86 ff       	sbrs	r24, 6
    af7c:	16 c0       	rjmp	.+44     	; 0xafaa <_ZN6DS32317setHourEh+0x6a>
    af7e:	cd 30       	cpi	r28, 0x0D	; 13
    af80:	58 f0       	brcs	.+22     	; 0xaf98 <_ZN6DS32317setHourEh+0x58>
    af82:	84 ef       	ldi	r24, 0xF4	; 244
    af84:	8c 0f       	add	r24, r28
    af86:	6a e0       	ldi	r22, 0x0A	; 10
    af88:	70 d6       	rcall	.+3296   	; 0xbc6a <__udivmodqi4>
    af8a:	c9 2f       	mov	r28, r25
    af8c:	20 e1       	ldi	r18, 0x10	; 16
    af8e:	82 9f       	mul	r24, r18
    af90:	c0 0d       	add	r28, r0
    af92:	11 24       	eor	r1, r1
    af94:	c0 66       	ori	r28, 0x60	; 96
    af96:	12 c0       	rjmp	.+36     	; 0xafbc <_ZN6DS32317setHourEh+0x7c>
    af98:	8c 2f       	mov	r24, r28
    af9a:	6a e0       	ldi	r22, 0x0A	; 10
    af9c:	66 d6       	rcall	.+3276   	; 0xbc6a <__udivmodqi4>
    af9e:	c9 2f       	mov	r28, r25
    afa0:	20 e1       	ldi	r18, 0x10	; 16
    afa2:	82 9f       	mul	r24, r18
    afa4:	c0 0d       	add	r28, r0
    afa6:	11 24       	eor	r1, r1
    afa8:	09 c0       	rjmp	.+18     	; 0xafbc <_ZN6DS32317setHourEh+0x7c>
    afaa:	8c 2f       	mov	r24, r28
    afac:	6a e0       	ldi	r22, 0x0A	; 10
    afae:	5d d6       	rcall	.+3258   	; 0xbc6a <__udivmodqi4>
    afb0:	c9 2f       	mov	r28, r25
    afb2:	20 e1       	ldi	r18, 0x10	; 16
    afb4:	82 9f       	mul	r24, r18
    afb6:	c0 0d       	add	r28, r0
    afb8:	11 24       	eor	r1, r1
    afba:	cf 7b       	andi	r28, 0xBF	; 191
    afbc:	68 e6       	ldi	r22, 0x68	; 104
    afbe:	70 e0       	ldi	r23, 0x00	; 0
    afc0:	84 e8       	ldi	r24, 0x84	; 132
    afc2:	94 e1       	ldi	r25, 0x14	; 20
    afc4:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    afc8:	62 e0       	ldi	r22, 0x02	; 2
    afca:	70 e0       	ldi	r23, 0x00	; 0
    afcc:	84 e8       	ldi	r24, 0x84	; 132
    afce:	94 e1       	ldi	r25, 0x14	; 20
    afd0:	63 de       	rcall	.-826    	; 0xac98 <_ZN7TwoWire5writeEi>
    afd2:	6c 2f       	mov	r22, r28
    afd4:	84 e8       	ldi	r24, 0x84	; 132
    afd6:	94 e1       	ldi	r25, 0x14	; 20
    afd8:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    afdc:	84 e8       	ldi	r24, 0x84	; 132
    afde:	94 e1       	ldi	r25, 0x14	; 20
    afe0:	cf 91       	pop	r28
    afe2:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>

0000afe6 <_ZN6DS32317setDateEh>:
    afe6:	cf 93       	push	r28
    afe8:	c6 2f       	mov	r28, r22
    afea:	68 e6       	ldi	r22, 0x68	; 104
    afec:	70 e0       	ldi	r23, 0x00	; 0
    afee:	84 e8       	ldi	r24, 0x84	; 132
    aff0:	94 e1       	ldi	r25, 0x14	; 20
    aff2:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    aff6:	64 e0       	ldi	r22, 0x04	; 4
    aff8:	70 e0       	ldi	r23, 0x00	; 0
    affa:	84 e8       	ldi	r24, 0x84	; 132
    affc:	94 e1       	ldi	r25, 0x14	; 20
    affe:	4c de       	rcall	.-872    	; 0xac98 <_ZN7TwoWire5writeEi>
    b000:	8c 2f       	mov	r24, r28
    b002:	6a e0       	ldi	r22, 0x0A	; 10
    b004:	32 d6       	rcall	.+3172   	; 0xbc6a <__udivmodqi4>
    b006:	69 2f       	mov	r22, r25
    b008:	20 e1       	ldi	r18, 0x10	; 16
    b00a:	82 9f       	mul	r24, r18
    b00c:	60 0d       	add	r22, r0
    b00e:	11 24       	eor	r1, r1
    b010:	84 e8       	ldi	r24, 0x84	; 132
    b012:	94 e1       	ldi	r25, 0x14	; 20
    b014:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    b018:	84 e8       	ldi	r24, 0x84	; 132
    b01a:	94 e1       	ldi	r25, 0x14	; 20
    b01c:	cf 91       	pop	r28
    b01e:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>

0000b022 <_ZN6DS32318setMonthEh>:
    b022:	cf 93       	push	r28
    b024:	c6 2f       	mov	r28, r22
    b026:	68 e6       	ldi	r22, 0x68	; 104
    b028:	70 e0       	ldi	r23, 0x00	; 0
    b02a:	84 e8       	ldi	r24, 0x84	; 132
    b02c:	94 e1       	ldi	r25, 0x14	; 20
    b02e:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    b032:	65 e0       	ldi	r22, 0x05	; 5
    b034:	70 e0       	ldi	r23, 0x00	; 0
    b036:	84 e8       	ldi	r24, 0x84	; 132
    b038:	94 e1       	ldi	r25, 0x14	; 20
    b03a:	2e de       	rcall	.-932    	; 0xac98 <_ZN7TwoWire5writeEi>
    b03c:	8c 2f       	mov	r24, r28
    b03e:	6a e0       	ldi	r22, 0x0A	; 10
    b040:	14 d6       	rcall	.+3112   	; 0xbc6a <__udivmodqi4>
    b042:	69 2f       	mov	r22, r25
    b044:	20 e1       	ldi	r18, 0x10	; 16
    b046:	82 9f       	mul	r24, r18
    b048:	60 0d       	add	r22, r0
    b04a:	11 24       	eor	r1, r1
    b04c:	84 e8       	ldi	r24, 0x84	; 132
    b04e:	94 e1       	ldi	r25, 0x14	; 20
    b050:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    b054:	84 e8       	ldi	r24, 0x84	; 132
    b056:	94 e1       	ldi	r25, 0x14	; 20
    b058:	cf 91       	pop	r28
    b05a:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>

0000b05e <_ZN6DS32317setYearEh>:
    b05e:	cf 93       	push	r28
    b060:	c6 2f       	mov	r28, r22
    b062:	68 e6       	ldi	r22, 0x68	; 104
    b064:	70 e0       	ldi	r23, 0x00	; 0
    b066:	84 e8       	ldi	r24, 0x84	; 132
    b068:	94 e1       	ldi	r25, 0x14	; 20
    b06a:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    b06e:	66 e0       	ldi	r22, 0x06	; 6
    b070:	70 e0       	ldi	r23, 0x00	; 0
    b072:	84 e8       	ldi	r24, 0x84	; 132
    b074:	94 e1       	ldi	r25, 0x14	; 20
    b076:	10 de       	rcall	.-992    	; 0xac98 <_ZN7TwoWire5writeEi>
    b078:	8c 2f       	mov	r24, r28
    b07a:	6a e0       	ldi	r22, 0x0A	; 10
    b07c:	f6 d5       	rcall	.+3052   	; 0xbc6a <__udivmodqi4>
    b07e:	69 2f       	mov	r22, r25
    b080:	20 e1       	ldi	r18, 0x10	; 16
    b082:	82 9f       	mul	r24, r18
    b084:	60 0d       	add	r22, r0
    b086:	11 24       	eor	r1, r1
    b088:	84 e8       	ldi	r24, 0x84	; 132
    b08a:	94 e1       	ldi	r25, 0x14	; 20
    b08c:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    b090:	84 e8       	ldi	r24, 0x84	; 132
    b092:	94 e1       	ldi	r25, 0x14	; 20
    b094:	cf 91       	pop	r28
    b096:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>

0000b09a <_ZN6DS323116writeControlByteEhb>:
    b09a:	cf 93       	push	r28
    b09c:	df 93       	push	r29
    b09e:	c6 2f       	mov	r28, r22
    b0a0:	d4 2f       	mov	r29, r20
    b0a2:	68 e6       	ldi	r22, 0x68	; 104
    b0a4:	70 e0       	ldi	r23, 0x00	; 0
    b0a6:	84 e8       	ldi	r24, 0x84	; 132
    b0a8:	94 e1       	ldi	r25, 0x14	; 20
    b0aa:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
    b0ae:	dd 23       	and	r29, r29
    b0b0:	19 f0       	breq	.+6      	; 0xb0b8 <_ZN6DS323116writeControlByteEhb+0x1e>
    b0b2:	6f e0       	ldi	r22, 0x0F	; 15
    b0b4:	70 e0       	ldi	r23, 0x00	; 0
    b0b6:	02 c0       	rjmp	.+4      	; 0xb0bc <_ZN6DS323116writeControlByteEhb+0x22>
    b0b8:	6e e0       	ldi	r22, 0x0E	; 14
    b0ba:	70 e0       	ldi	r23, 0x00	; 0
    b0bc:	84 e8       	ldi	r24, 0x84	; 132
    b0be:	94 e1       	ldi	r25, 0x14	; 20
    b0c0:	eb dd       	rcall	.-1066   	; 0xac98 <_ZN7TwoWire5writeEi>
    b0c2:	6c 2f       	mov	r22, r28
    b0c4:	84 e8       	ldi	r24, 0x84	; 132
    b0c6:	94 e1       	ldi	r25, 0x14	; 20
    b0c8:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
    b0cc:	84 e8       	ldi	r24, 0x84	; 132
    b0ce:	94 e1       	ldi	r25, 0x14	; 20
    b0d0:	df 91       	pop	r29
    b0d2:	cf 91       	pop	r28
    b0d4:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>

0000b0d8 <_ZN6DS32319setSecondEh>:

	Wire.requestFrom(CLOCK_ADDRESS, 1);
	return bcdToDec(Wire.read());
}

void DS3231::setSecond(byte Second) {
    b0d8:	1f 93       	push	r17
    b0da:	cf 93       	push	r28
    b0dc:	df 93       	push	r29
    b0de:	ec 01       	movw	r28, r24
    b0e0:	16 2f       	mov	r17, r22
	// Sets the seconds 
	// This function also resets the Oscillator Stop Flag, which is set
	// whenever power is interrupted.
	Wire.beginTransmission(CLOCK_ADDRESS);
    b0e2:	68 e6       	ldi	r22, 0x68	; 104
    b0e4:	70 e0       	ldi	r23, 0x00	; 0
    b0e6:	84 e8       	ldi	r24, 0x84	; 132
    b0e8:	94 e1       	ldi	r25, 0x14	; 20
    b0ea:	0e 94 73 49 	call	0x92e6	; 0x92e6 <_ZN7TwoWire17beginTransmissionEi>
	Wire.write(0x00);
    b0ee:	60 e0       	ldi	r22, 0x00	; 0
    b0f0:	70 e0       	ldi	r23, 0x00	; 0
    b0f2:	84 e8       	ldi	r24, 0x84	; 132
    b0f4:	94 e1       	ldi	r25, 0x14	; 20
    b0f6:	d0 dd       	rcall	.-1120   	; 0xac98 <_ZN7TwoWire5writeEi>
	Wire.write(decToBcd(Second));	
    b0f8:	81 2f       	mov	r24, r17
    b0fa:	6a e0       	ldi	r22, 0x0A	; 10
    b0fc:	b6 d5       	rcall	.+2924   	; 0xbc6a <__udivmodqi4>
    b0fe:	69 2f       	mov	r22, r25
    b100:	20 e1       	ldi	r18, 0x10	; 16
    b102:	82 9f       	mul	r24, r18
    b104:	60 0d       	add	r22, r0
    b106:	11 24       	eor	r1, r1
    b108:	84 e8       	ldi	r24, 0x84	; 132
    b10a:	94 e1       	ldi	r25, 0x14	; 20
    b10c:	0e 94 1c 49 	call	0x9238	; 0x9238 <_ZN7TwoWire5writeEh>
	Wire.endTransmission();
    b110:	84 e8       	ldi	r24, 0x84	; 132
    b112:	94 e1       	ldi	r25, 0x14	; 20
    b114:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <_ZN7TwoWire15endTransmissionEv>
	// Clear OSF flag
	byte temp_buffer = readControlByte(1);
    b118:	61 e0       	ldi	r22, 0x01	; 1
    b11a:	ce 01       	movw	r24, r28
    b11c:	cf de       	rcall	.-610    	; 0xaebc <_ZN6DS323115readControlByteEb>
	writeControlByte((temp_buffer & 0b01111111), 1);
    b11e:	68 2f       	mov	r22, r24
    b120:	6f 77       	andi	r22, 0x7F	; 127
    b122:	41 e0       	ldi	r20, 0x01	; 1
    b124:	ce 01       	movw	r24, r28
}
    b126:	df 91       	pop	r29
    b128:	cf 91       	pop	r28
	Wire.write(0x00);
	Wire.write(decToBcd(Second));	
	Wire.endTransmission();
	// Clear OSF flag
	byte temp_buffer = readControlByte(1);
	writeControlByte((temp_buffer & 0b01111111), 1);
    b12a:	1f 91       	pop	r17
    b12c:	b6 cf       	rjmp	.-148    	; 0xb09a <_ZN6DS323116writeControlByteEhb>

0000b12e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    b12e:	10 92 e0 15 	sts	0x15E0, r1	; 0x8015e0 <twi_state>
    b132:	81 e0       	ldi	r24, 0x01	; 1
    b134:	80 93 de 15 	sts	0x15DE, r24	; 0x8015de <twi_sendStop>
    b138:	10 92 dd 15 	sts	0x15DD, r1	; 0x8015dd <twi_inRepStart>
    b13c:	61 e0       	ldi	r22, 0x01	; 1
    b13e:	84 e1       	ldi	r24, 0x14	; 20
    b140:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
    b144:	61 e0       	ldi	r22, 0x01	; 1
    b146:	85 e1       	ldi	r24, 0x15	; 21
    b148:	0e 94 40 4b 	call	0x9680	; 0x9680 <digitalWrite>
    b14c:	e9 eb       	ldi	r30, 0xB9	; 185
    b14e:	f0 e0       	ldi	r31, 0x00	; 0
    b150:	80 81       	ld	r24, Z
    b152:	8e 7f       	andi	r24, 0xFE	; 254
    b154:	80 83       	st	Z, r24
    b156:	80 81       	ld	r24, Z
    b158:	8d 7f       	andi	r24, 0xFD	; 253
    b15a:	80 83       	st	Z, r24
    b15c:	88 e4       	ldi	r24, 0x48	; 72
    b15e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    b162:	85 e4       	ldi	r24, 0x45	; 69
    b164:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b168:	08 95       	ret

0000b16a <twi_setFrequency>:
    b16a:	9b 01       	movw	r18, r22
    b16c:	ac 01       	movw	r20, r24
    b16e:	60 e0       	ldi	r22, 0x00	; 0
    b170:	74 e2       	ldi	r23, 0x24	; 36
    b172:	84 ef       	ldi	r24, 0xF4	; 244
    b174:	90 e0       	ldi	r25, 0x00	; 0
    b176:	98 d5       	rcall	.+2864   	; 0xbca8 <__udivmodsi4>
    b178:	da 01       	movw	r26, r20
    b17a:	c9 01       	movw	r24, r18
    b17c:	40 97       	sbiw	r24, 0x10	; 16
    b17e:	a1 09       	sbc	r26, r1
    b180:	b1 09       	sbc	r27, r1
    b182:	b6 95       	lsr	r27
    b184:	a7 95       	ror	r26
    b186:	97 95       	ror	r25
    b188:	87 95       	ror	r24
    b18a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    b18e:	08 95       	ret

0000b190 <twi_readFrom>:
    b190:	41 32       	cpi	r20, 0x21	; 33
    b192:	08 f0       	brcs	.+2      	; 0xb196 <twi_readFrom+0x6>
    b194:	43 c0       	rjmp	.+134    	; 0xb21c <twi_readFrom+0x8c>
    b196:	90 91 e0 15 	lds	r25, 0x15E0	; 0x8015e0 <twi_state>
    b19a:	91 11       	cpse	r25, r1
    b19c:	fc cf       	rjmp	.-8      	; 0xb196 <twi_readFrom+0x6>
    b19e:	91 e0       	ldi	r25, 0x01	; 1
    b1a0:	90 93 e0 15 	sts	0x15E0, r25	; 0x8015e0 <twi_state>
    b1a4:	20 93 de 15 	sts	0x15DE, r18	; 0x8015de <twi_sendStop>
    b1a8:	2f ef       	ldi	r18, 0xFF	; 255
    b1aa:	20 93 73 15 	sts	0x1573, r18	; 0x801573 <twi_error>
    b1ae:	10 92 b8 15 	sts	0x15B8, r1	; 0x8015b8 <twi_masterBufferIndex>
    b1b2:	24 0f       	add	r18, r20
    b1b4:	20 93 b7 15 	sts	0x15B7, r18	; 0x8015b7 <twi_masterBufferLength>
    b1b8:	90 93 df 15 	sts	0x15DF, r25	; 0x8015df <twi_slarw>
    b1bc:	90 91 df 15 	lds	r25, 0x15DF	; 0x8015df <twi_slarw>
    b1c0:	88 0f       	add	r24, r24
    b1c2:	89 2b       	or	r24, r25
    b1c4:	80 93 df 15 	sts	0x15DF, r24	; 0x8015df <twi_slarw>
    b1c8:	80 91 dd 15 	lds	r24, 0x15DD	; 0x8015dd <twi_inRepStart>
    b1cc:	81 30       	cpi	r24, 0x01	; 1
    b1ce:	61 f4       	brne	.+24     	; 0xb1e8 <twi_readFrom+0x58>
    b1d0:	10 92 dd 15 	sts	0x15DD, r1	; 0x8015dd <twi_inRepStart>
    b1d4:	80 91 df 15 	lds	r24, 0x15DF	; 0x8015df <twi_slarw>
    b1d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    b1dc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b1e0:	83 fd       	sbrc	r24, 3
    b1e2:	f8 cf       	rjmp	.-16     	; 0xb1d4 <twi_readFrom+0x44>
    b1e4:	85 ec       	ldi	r24, 0xC5	; 197
    b1e6:	01 c0       	rjmp	.+2      	; 0xb1ea <twi_readFrom+0x5a>
    b1e8:	85 ee       	ldi	r24, 0xE5	; 229
    b1ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b1ee:	80 91 e0 15 	lds	r24, 0x15E0	; 0x8015e0 <twi_state>
    b1f2:	81 30       	cpi	r24, 0x01	; 1
    b1f4:	e1 f3       	breq	.-8      	; 0xb1ee <twi_readFrom+0x5e>
    b1f6:	80 91 b8 15 	lds	r24, 0x15B8	; 0x8015b8 <twi_masterBufferIndex>
    b1fa:	84 17       	cp	r24, r20
    b1fc:	10 f4       	brcc	.+4      	; 0xb202 <twi_readFrom+0x72>
    b1fe:	40 91 b8 15 	lds	r20, 0x15B8	; 0x8015b8 <twi_masterBufferIndex>
    b202:	a9 eb       	ldi	r26, 0xB9	; 185
    b204:	b5 e1       	ldi	r27, 0x15	; 21
    b206:	96 2f       	mov	r25, r22
    b208:	fb 01       	movw	r30, r22
    b20a:	8e 2f       	mov	r24, r30
    b20c:	89 1b       	sub	r24, r25
    b20e:	84 17       	cp	r24, r20
    b210:	18 f4       	brcc	.+6      	; 0xb218 <twi_readFrom+0x88>
    b212:	8d 91       	ld	r24, X+
    b214:	81 93       	st	Z+, r24
    b216:	f9 cf       	rjmp	.-14     	; 0xb20a <twi_readFrom+0x7a>
    b218:	84 2f       	mov	r24, r20
    b21a:	08 95       	ret
    b21c:	80 e0       	ldi	r24, 0x00	; 0
    b21e:	08 95       	ret

0000b220 <twi_writeTo>:
    b220:	0f 93       	push	r16
    b222:	41 32       	cpi	r20, 0x21	; 33
    b224:	08 f0       	brcs	.+2      	; 0xb228 <twi_writeTo+0x8>
    b226:	4a c0       	rjmp	.+148    	; 0xb2bc <twi_writeTo+0x9c>
    b228:	90 91 e0 15 	lds	r25, 0x15E0	; 0x8015e0 <twi_state>
    b22c:	91 11       	cpse	r25, r1
    b22e:	fc cf       	rjmp	.-8      	; 0xb228 <twi_writeTo+0x8>
    b230:	32 e0       	ldi	r19, 0x02	; 2
    b232:	30 93 e0 15 	sts	0x15E0, r19	; 0x8015e0 <twi_state>
    b236:	00 93 de 15 	sts	0x15DE, r16	; 0x8015de <twi_sendStop>
    b23a:	3f ef       	ldi	r19, 0xFF	; 255
    b23c:	30 93 73 15 	sts	0x1573, r19	; 0x801573 <twi_error>
    b240:	10 92 b8 15 	sts	0x15B8, r1	; 0x8015b8 <twi_masterBufferIndex>
    b244:	40 93 b7 15 	sts	0x15B7, r20	; 0x8015b7 <twi_masterBufferLength>
    b248:	56 2f       	mov	r21, r22
    b24a:	a9 eb       	ldi	r26, 0xB9	; 185
    b24c:	b5 e1       	ldi	r27, 0x15	; 21
    b24e:	fb 01       	movw	r30, r22
    b250:	3e 2f       	mov	r19, r30
    b252:	35 1b       	sub	r19, r21
    b254:	34 17       	cp	r19, r20
    b256:	18 f4       	brcc	.+6      	; 0xb25e <twi_writeTo+0x3e>
    b258:	31 91       	ld	r19, Z+
    b25a:	3d 93       	st	X+, r19
    b25c:	f9 cf       	rjmp	.-14     	; 0xb250 <twi_writeTo+0x30>
    b25e:	10 92 df 15 	sts	0x15DF, r1	; 0x8015df <twi_slarw>
    b262:	30 91 df 15 	lds	r19, 0x15DF	; 0x8015df <twi_slarw>
    b266:	88 0f       	add	r24, r24
    b268:	83 2b       	or	r24, r19
    b26a:	80 93 df 15 	sts	0x15DF, r24	; 0x8015df <twi_slarw>
    b26e:	80 91 dd 15 	lds	r24, 0x15DD	; 0x8015dd <twi_inRepStart>
    b272:	81 30       	cpi	r24, 0x01	; 1
    b274:	61 f4       	brne	.+24     	; 0xb28e <twi_writeTo+0x6e>
    b276:	10 92 dd 15 	sts	0x15DD, r1	; 0x8015dd <twi_inRepStart>
    b27a:	80 91 df 15 	lds	r24, 0x15DF	; 0x8015df <twi_slarw>
    b27e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    b282:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b286:	83 fd       	sbrc	r24, 3
    b288:	f8 cf       	rjmp	.-16     	; 0xb27a <twi_writeTo+0x5a>
    b28a:	85 ec       	ldi	r24, 0xC5	; 197
    b28c:	01 c0       	rjmp	.+2      	; 0xb290 <twi_writeTo+0x70>
    b28e:	85 ee       	ldi	r24, 0xE5	; 229
    b290:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b294:	22 23       	and	r18, r18
    b296:	21 f0       	breq	.+8      	; 0xb2a0 <twi_writeTo+0x80>
    b298:	80 91 e0 15 	lds	r24, 0x15E0	; 0x8015e0 <twi_state>
    b29c:	82 30       	cpi	r24, 0x02	; 2
    b29e:	d1 f3       	breq	.-12     	; 0xb294 <twi_writeTo+0x74>
    b2a0:	80 91 73 15 	lds	r24, 0x1573	; 0x801573 <twi_error>
    b2a4:	8f 3f       	cpi	r24, 0xFF	; 255
    b2a6:	79 f0       	breq	.+30     	; 0xb2c6 <twi_writeTo+0xa6>
    b2a8:	80 91 73 15 	lds	r24, 0x1573	; 0x801573 <twi_error>
    b2ac:	80 32       	cpi	r24, 0x20	; 32
    b2ae:	41 f0       	breq	.+16     	; 0xb2c0 <twi_writeTo+0xa0>
    b2b0:	80 91 73 15 	lds	r24, 0x1573	; 0x801573 <twi_error>
    b2b4:	80 33       	cpi	r24, 0x30	; 48
    b2b6:	31 f0       	breq	.+12     	; 0xb2c4 <twi_writeTo+0xa4>
    b2b8:	94 e0       	ldi	r25, 0x04	; 4
    b2ba:	05 c0       	rjmp	.+10     	; 0xb2c6 <twi_writeTo+0xa6>
    b2bc:	91 e0       	ldi	r25, 0x01	; 1
    b2be:	03 c0       	rjmp	.+6      	; 0xb2c6 <twi_writeTo+0xa6>
    b2c0:	92 e0       	ldi	r25, 0x02	; 2
    b2c2:	01 c0       	rjmp	.+2      	; 0xb2c6 <twi_writeTo+0xa6>
    b2c4:	93 e0       	ldi	r25, 0x03	; 3
    b2c6:	89 2f       	mov	r24, r25
    b2c8:	0f 91       	pop	r16
    b2ca:	08 95       	ret

0000b2cc <twi_transmit>:
    b2cc:	40 91 95 15 	lds	r20, 0x1595	; 0x801595 <twi_txBufferLength>
    b2d0:	26 2f       	mov	r18, r22
    b2d2:	30 e0       	ldi	r19, 0x00	; 0
    b2d4:	24 0f       	add	r18, r20
    b2d6:	31 1d       	adc	r19, r1
    b2d8:	21 32       	cpi	r18, 0x21	; 33
    b2da:	31 05       	cpc	r19, r1
    b2dc:	dc f4       	brge	.+54     	; 0xb314 <twi_transmit+0x48>
    b2de:	20 91 e0 15 	lds	r18, 0x15E0	; 0x8015e0 <twi_state>
    b2e2:	24 30       	cpi	r18, 0x04	; 4
    b2e4:	c9 f4       	brne	.+50     	; 0xb318 <twi_transmit+0x4c>
    b2e6:	fc 01       	movw	r30, r24
    b2e8:	80 e0       	ldi	r24, 0x00	; 0
    b2ea:	90 e0       	ldi	r25, 0x00	; 0
    b2ec:	86 17       	cp	r24, r22
    b2ee:	58 f4       	brcc	.+22     	; 0xb306 <twi_transmit+0x3a>
    b2f0:	30 91 95 15 	lds	r19, 0x1595	; 0x801595 <twi_txBufferLength>
    b2f4:	21 91       	ld	r18, Z+
    b2f6:	dc 01       	movw	r26, r24
    b2f8:	a9 56       	subi	r26, 0x69	; 105
    b2fa:	ba 4e       	sbci	r27, 0xEA	; 234
    b2fc:	a3 0f       	add	r26, r19
    b2fe:	b1 1d       	adc	r27, r1
    b300:	2c 93       	st	X, r18
    b302:	01 96       	adiw	r24, 0x01	; 1
    b304:	f3 cf       	rjmp	.-26     	; 0xb2ec <twi_transmit+0x20>
    b306:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <twi_txBufferLength>
    b30a:	68 0f       	add	r22, r24
    b30c:	60 93 95 15 	sts	0x1595, r22	; 0x801595 <twi_txBufferLength>
    b310:	80 e0       	ldi	r24, 0x00	; 0
    b312:	08 95       	ret
    b314:	81 e0       	ldi	r24, 0x01	; 1
    b316:	08 95       	ret
    b318:	82 e0       	ldi	r24, 0x02	; 2
    b31a:	08 95       	ret

0000b31c <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    b31c:	85 ed       	ldi	r24, 0xD5	; 213
    b31e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    b322:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b326:	84 fd       	sbrc	r24, 4
    b328:	fc cf       	rjmp	.-8      	; 0xb322 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    b32a:	10 92 e0 15 	sts	0x15E0, r1	; 0x8015e0 <twi_state>
    b32e:	08 95       	ret

0000b330 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    b330:	85 ec       	ldi	r24, 0xC5	; 197
    b332:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    b336:	10 92 e0 15 	sts	0x15E0, r1	; 0x8015e0 <twi_state>
    b33a:	08 95       	ret

0000b33c <__vector_39>:
}

ISR(TWI_vect)
{
    b33c:	1f 92       	push	r1
    b33e:	0f 92       	push	r0
    b340:	0f b6       	in	r0, 0x3f	; 63
    b342:	0f 92       	push	r0
    b344:	11 24       	eor	r1, r1
    b346:	0b b6       	in	r0, 0x3b	; 59
    b348:	0f 92       	push	r0
    b34a:	2f 93       	push	r18
    b34c:	3f 93       	push	r19
    b34e:	4f 93       	push	r20
    b350:	5f 93       	push	r21
    b352:	6f 93       	push	r22
    b354:	7f 93       	push	r23
    b356:	8f 93       	push	r24
    b358:	9f 93       	push	r25
    b35a:	af 93       	push	r26
    b35c:	bf 93       	push	r27
    b35e:	ef 93       	push	r30
    b360:	ff 93       	push	r31
  switch(TW_STATUS){
    b362:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    b366:	88 7f       	andi	r24, 0xF8	; 248
    b368:	80 36       	cpi	r24, 0x60	; 96
    b36a:	09 f4       	brne	.+2      	; 0xb36e <__vector_39+0x32>
    b36c:	9d c0       	rjmp	.+314    	; 0xb4a8 <__vector_39+0x16c>
    b36e:	70 f5       	brcc	.+92     	; 0xb3cc <__vector_39+0x90>
    b370:	88 32       	cpi	r24, 0x28	; 40
    b372:	09 f4       	brne	.+2      	; 0xb376 <__vector_39+0x3a>
    b374:	5c c0       	rjmp	.+184    	; 0xb42e <__vector_39+0xf2>
    b376:	90 f4       	brcc	.+36     	; 0xb39c <__vector_39+0x60>
    b378:	80 31       	cpi	r24, 0x10	; 16
    b37a:	09 f4       	brne	.+2      	; 0xb37e <__vector_39+0x42>
    b37c:	55 c0       	rjmp	.+170    	; 0xb428 <__vector_39+0xec>
    b37e:	38 f4       	brcc	.+14     	; 0xb38e <__vector_39+0x52>
    b380:	88 23       	and	r24, r24
    b382:	09 f4       	brne	.+2      	; 0xb386 <__vector_39+0x4a>
    b384:	f3 c0       	rjmp	.+486    	; 0xb56c <__vector_39+0x230>
    b386:	88 30       	cpi	r24, 0x08	; 8
    b388:	09 f4       	brne	.+2      	; 0xb38c <__vector_39+0x50>
    b38a:	4e c0       	rjmp	.+156    	; 0xb428 <__vector_39+0xec>
    b38c:	f2 c0       	rjmp	.+484    	; 0xb572 <__vector_39+0x236>
    b38e:	88 31       	cpi	r24, 0x18	; 24
    b390:	09 f4       	brne	.+2      	; 0xb394 <__vector_39+0x58>
    b392:	4d c0       	rjmp	.+154    	; 0xb42e <__vector_39+0xf2>
    b394:	80 32       	cpi	r24, 0x20	; 32
    b396:	09 f4       	brne	.+2      	; 0xb39a <__vector_39+0x5e>
    b398:	5e c0       	rjmp	.+188    	; 0xb456 <__vector_39+0x11a>
    b39a:	eb c0       	rjmp	.+470    	; 0xb572 <__vector_39+0x236>
    b39c:	80 34       	cpi	r24, 0x40	; 64
    b39e:	09 f4       	brne	.+2      	; 0xb3a2 <__vector_39+0x66>
    b3a0:	69 c0       	rjmp	.+210    	; 0xb474 <__vector_39+0x138>
    b3a2:	50 f4       	brcc	.+20     	; 0xb3b8 <__vector_39+0x7c>
    b3a4:	80 33       	cpi	r24, 0x30	; 48
    b3a6:	09 f4       	brne	.+2      	; 0xb3aa <__vector_39+0x6e>
    b3a8:	56 c0       	rjmp	.+172    	; 0xb456 <__vector_39+0x11a>
    b3aa:	88 33       	cpi	r24, 0x38	; 56
    b3ac:	09 f0       	breq	.+2      	; 0xb3b0 <__vector_39+0x74>
    b3ae:	e1 c0       	rjmp	.+450    	; 0xb572 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    b3b0:	80 93 73 15 	sts	0x1573, r24	; 0x801573 <twi_error>
      twi_releaseBus();
    b3b4:	bd df       	rcall	.-134    	; 0xb330 <twi_releaseBus>
      break;
    b3b6:	dd c0       	rjmp	.+442    	; 0xb572 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    b3b8:	80 35       	cpi	r24, 0x50	; 80
    b3ba:	09 f4       	brne	.+2      	; 0xb3be <__vector_39+0x82>
    b3bc:	4f c0       	rjmp	.+158    	; 0xb45c <__vector_39+0x120>
    b3be:	88 35       	cpi	r24, 0x58	; 88
    b3c0:	09 f4       	brne	.+2      	; 0xb3c4 <__vector_39+0x88>
    b3c2:	5d c0       	rjmp	.+186    	; 0xb47e <__vector_39+0x142>
    b3c4:	88 34       	cpi	r24, 0x48	; 72
    b3c6:	09 f0       	breq	.+2      	; 0xb3ca <__vector_39+0x8e>
    b3c8:	d4 c0       	rjmp	.+424    	; 0xb572 <__vector_39+0x236>
    b3ca:	d2 c0       	rjmp	.+420    	; 0xb570 <__vector_39+0x234>
    b3cc:	88 39       	cpi	r24, 0x98	; 152
    b3ce:	09 f4       	brne	.+2      	; 0xb3d2 <__vector_39+0x96>
    b3d0:	c3 c0       	rjmp	.+390    	; 0xb558 <__vector_39+0x21c>
    b3d2:	a8 f4       	brcc	.+42     	; 0xb3fe <__vector_39+0xc2>
    b3d4:	88 37       	cpi	r24, 0x78	; 120
    b3d6:	09 f4       	brne	.+2      	; 0xb3da <__vector_39+0x9e>
    b3d8:	67 c0       	rjmp	.+206    	; 0xb4a8 <__vector_39+0x16c>
    b3da:	38 f4       	brcc	.+14     	; 0xb3ea <__vector_39+0xae>
    b3dc:	88 36       	cpi	r24, 0x68	; 104
    b3de:	09 f4       	brne	.+2      	; 0xb3e2 <__vector_39+0xa6>
    b3e0:	63 c0       	rjmp	.+198    	; 0xb4a8 <__vector_39+0x16c>
    b3e2:	80 37       	cpi	r24, 0x70	; 112
    b3e4:	09 f4       	brne	.+2      	; 0xb3e8 <__vector_39+0xac>
    b3e6:	60 c0       	rjmp	.+192    	; 0xb4a8 <__vector_39+0x16c>
    b3e8:	c4 c0       	rjmp	.+392    	; 0xb572 <__vector_39+0x236>
    b3ea:	88 38       	cpi	r24, 0x88	; 136
    b3ec:	09 f4       	brne	.+2      	; 0xb3f0 <__vector_39+0xb4>
    b3ee:	b4 c0       	rjmp	.+360    	; 0xb558 <__vector_39+0x21c>
    b3f0:	80 39       	cpi	r24, 0x90	; 144
    b3f2:	09 f4       	brne	.+2      	; 0xb3f6 <__vector_39+0xba>
    b3f4:	5f c0       	rjmp	.+190    	; 0xb4b4 <__vector_39+0x178>
    b3f6:	80 38       	cpi	r24, 0x80	; 128
    b3f8:	09 f0       	breq	.+2      	; 0xb3fc <__vector_39+0xc0>
    b3fa:	bb c0       	rjmp	.+374    	; 0xb572 <__vector_39+0x236>
    b3fc:	5b c0       	rjmp	.+182    	; 0xb4b4 <__vector_39+0x178>
    b3fe:	80 3b       	cpi	r24, 0xB0	; 176
    b400:	09 f4       	brne	.+2      	; 0xb404 <__vector_39+0xc8>
    b402:	82 c0       	rjmp	.+260    	; 0xb508 <__vector_39+0x1cc>
    b404:	38 f4       	brcc	.+14     	; 0xb414 <__vector_39+0xd8>
    b406:	80 3a       	cpi	r24, 0xA0	; 160
    b408:	09 f4       	brne	.+2      	; 0xb40c <__vector_39+0xd0>
    b40a:	66 c0       	rjmp	.+204    	; 0xb4d8 <__vector_39+0x19c>
    b40c:	88 3a       	cpi	r24, 0xA8	; 168
    b40e:	09 f4       	brne	.+2      	; 0xb412 <__vector_39+0xd6>
    b410:	7b c0       	rjmp	.+246    	; 0xb508 <__vector_39+0x1cc>
    b412:	af c0       	rjmp	.+350    	; 0xb572 <__vector_39+0x236>
    b414:	80 3c       	cpi	r24, 0xC0	; 192
    b416:	09 f4       	brne	.+2      	; 0xb41a <__vector_39+0xde>
    b418:	a3 c0       	rjmp	.+326    	; 0xb560 <__vector_39+0x224>
    b41a:	88 3c       	cpi	r24, 0xC8	; 200
    b41c:	09 f4       	brne	.+2      	; 0xb420 <__vector_39+0xe4>
    b41e:	a0 c0       	rjmp	.+320    	; 0xb560 <__vector_39+0x224>
    b420:	88 3b       	cpi	r24, 0xB8	; 184
    b422:	09 f4       	brne	.+2      	; 0xb426 <__vector_39+0xea>
    b424:	86 c0       	rjmp	.+268    	; 0xb532 <__vector_39+0x1f6>
    b426:	a5 c0       	rjmp	.+330    	; 0xb572 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    b428:	80 91 df 15 	lds	r24, 0x15DF	; 0x8015df <twi_slarw>
    b42c:	10 c0       	rjmp	.+32     	; 0xb44e <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    b42e:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <twi_masterBufferIndex>
    b432:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <twi_masterBufferLength>
    b436:	98 17       	cp	r25, r24
    b438:	70 f5       	brcc	.+92     	; 0xb496 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    b43a:	e0 91 b8 15 	lds	r30, 0x15B8	; 0x8015b8 <twi_masterBufferIndex>
    b43e:	81 e0       	ldi	r24, 0x01	; 1
    b440:	8e 0f       	add	r24, r30
    b442:	80 93 b8 15 	sts	0x15B8, r24	; 0x8015b8 <twi_masterBufferIndex>
    b446:	f0 e0       	ldi	r31, 0x00	; 0
    b448:	e7 54       	subi	r30, 0x47	; 71
    b44a:	fa 4e       	sbci	r31, 0xEA	; 234
    b44c:	80 81       	ld	r24, Z
    b44e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    b452:	85 ec       	ldi	r24, 0xC5	; 197
    b454:	82 c0       	rjmp	.+260    	; 0xb55a <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    b456:	80 93 73 15 	sts	0x1573, r24	; 0x801573 <twi_error>
    b45a:	8a c0       	rjmp	.+276    	; 0xb570 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    b45c:	e0 91 b8 15 	lds	r30, 0x15B8	; 0x8015b8 <twi_masterBufferIndex>
    b460:	81 e0       	ldi	r24, 0x01	; 1
    b462:	8e 0f       	add	r24, r30
    b464:	80 93 b8 15 	sts	0x15B8, r24	; 0x8015b8 <twi_masterBufferIndex>
    b468:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    b46c:	f0 e0       	ldi	r31, 0x00	; 0
    b46e:	e7 54       	subi	r30, 0x47	; 71
    b470:	fa 4e       	sbci	r31, 0xEA	; 234
    b472:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    b474:	90 91 b8 15 	lds	r25, 0x15B8	; 0x8015b8 <twi_masterBufferIndex>
    b478:	80 91 b7 15 	lds	r24, 0x15B7	; 0x8015b7 <twi_masterBufferLength>
    b47c:	6a c0       	rjmp	.+212    	; 0xb552 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    b47e:	e0 91 b8 15 	lds	r30, 0x15B8	; 0x8015b8 <twi_masterBufferIndex>
    b482:	81 e0       	ldi	r24, 0x01	; 1
    b484:	8e 0f       	add	r24, r30
    b486:	80 93 b8 15 	sts	0x15B8, r24	; 0x8015b8 <twi_masterBufferIndex>
    b48a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    b48e:	f0 e0       	ldi	r31, 0x00	; 0
    b490:	e7 54       	subi	r30, 0x47	; 71
    b492:	fa 4e       	sbci	r31, 0xEA	; 234
    b494:	80 83       	st	Z, r24
	if (twi_sendStop)
    b496:	80 91 de 15 	lds	r24, 0x15DE	; 0x8015de <twi_sendStop>
    b49a:	81 11       	cpse	r24, r1
    b49c:	69 c0       	rjmp	.+210    	; 0xb570 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    b49e:	81 e0       	ldi	r24, 0x01	; 1
    b4a0:	80 93 dd 15 	sts	0x15DD, r24	; 0x8015dd <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    b4a4:	84 ea       	ldi	r24, 0xA4	; 164
    b4a6:	5d c0       	rjmp	.+186    	; 0xb562 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    b4a8:	83 e0       	ldi	r24, 0x03	; 3
    b4aa:	80 93 e0 15 	sts	0x15E0, r24	; 0x8015e0 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    b4ae:	10 92 74 15 	sts	0x1574, r1	; 0x801574 <twi_rxBufferIndex>
    b4b2:	cf cf       	rjmp	.-98     	; 0xb452 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    b4b4:	80 91 74 15 	lds	r24, 0x1574	; 0x801574 <twi_rxBufferIndex>
    b4b8:	80 32       	cpi	r24, 0x20	; 32
    b4ba:	08 f0       	brcs	.+2      	; 0xb4be <__vector_39+0x182>
    b4bc:	4d c0       	rjmp	.+154    	; 0xb558 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    b4be:	e0 91 74 15 	lds	r30, 0x1574	; 0x801574 <twi_rxBufferIndex>
    b4c2:	81 e0       	ldi	r24, 0x01	; 1
    b4c4:	8e 0f       	add	r24, r30
    b4c6:	80 93 74 15 	sts	0x1574, r24	; 0x801574 <twi_rxBufferIndex>
    b4ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    b4ce:	f0 e0       	ldi	r31, 0x00	; 0
    b4d0:	eb 58       	subi	r30, 0x8B	; 139
    b4d2:	fa 4e       	sbci	r31, 0xEA	; 234
    b4d4:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    b4d6:	bd cf       	rjmp	.-134    	; 0xb452 <__vector_39+0x116>
    b4d8:	2b df       	rcall	.-426    	; 0xb330 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    b4da:	80 91 74 15 	lds	r24, 0x1574	; 0x801574 <twi_rxBufferIndex>
    b4de:	80 32       	cpi	r24, 0x20	; 32
    b4e0:	30 f4       	brcc	.+12     	; 0xb4ee <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    b4e2:	e0 91 74 15 	lds	r30, 0x1574	; 0x801574 <twi_rxBufferIndex>
    b4e6:	f0 e0       	ldi	r31, 0x00	; 0
    b4e8:	eb 58       	subi	r30, 0x8B	; 139
    b4ea:	fa 4e       	sbci	r31, 0xEA	; 234
    b4ec:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    b4ee:	60 91 74 15 	lds	r22, 0x1574	; 0x801574 <twi_rxBufferIndex>
    b4f2:	70 e0       	ldi	r23, 0x00	; 0
    b4f4:	e0 91 d9 15 	lds	r30, 0x15D9	; 0x8015d9 <twi_onSlaveReceive>
    b4f8:	f0 91 da 15 	lds	r31, 0x15DA	; 0x8015da <twi_onSlaveReceive+0x1>
    b4fc:	85 e7       	ldi	r24, 0x75	; 117
    b4fe:	95 e1       	ldi	r25, 0x15	; 21
    b500:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    b502:	10 92 74 15 	sts	0x1574, r1	; 0x801574 <twi_rxBufferIndex>
      break;
    b506:	35 c0       	rjmp	.+106    	; 0xb572 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    b508:	84 e0       	ldi	r24, 0x04	; 4
    b50a:	80 93 e0 15 	sts	0x15E0, r24	; 0x8015e0 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    b50e:	10 92 96 15 	sts	0x1596, r1	; 0x801596 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    b512:	10 92 95 15 	sts	0x1595, r1	; 0x801595 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    b516:	e0 91 db 15 	lds	r30, 0x15DB	; 0x8015db <twi_onSlaveTransmit>
    b51a:	f0 91 dc 15 	lds	r31, 0x15DC	; 0x8015dc <twi_onSlaveTransmit+0x1>
    b51e:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    b520:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <twi_txBufferLength>
    b524:	81 11       	cpse	r24, r1
    b526:	05 c0       	rjmp	.+10     	; 0xb532 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    b528:	81 e0       	ldi	r24, 0x01	; 1
    b52a:	80 93 95 15 	sts	0x1595, r24	; 0x801595 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    b52e:	10 92 97 15 	sts	0x1597, r1	; 0x801597 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    b532:	e0 91 96 15 	lds	r30, 0x1596	; 0x801596 <twi_txBufferIndex>
    b536:	81 e0       	ldi	r24, 0x01	; 1
    b538:	8e 0f       	add	r24, r30
    b53a:	80 93 96 15 	sts	0x1596, r24	; 0x801596 <twi_txBufferIndex>
    b53e:	f0 e0       	ldi	r31, 0x00	; 0
    b540:	e9 56       	subi	r30, 0x69	; 105
    b542:	fa 4e       	sbci	r31, 0xEA	; 234
    b544:	80 81       	ld	r24, Z
    b546:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    b54a:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <twi_txBufferIndex>
    b54e:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <twi_txBufferLength>
    b552:	98 17       	cp	r25, r24
    b554:	08 f4       	brcc	.+2      	; 0xb558 <__vector_39+0x21c>
    b556:	7d cf       	rjmp	.-262    	; 0xb452 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    b558:	85 e8       	ldi	r24, 0x85	; 133
    b55a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    b55e:	09 c0       	rjmp	.+18     	; 0xb572 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    b560:	85 ec       	ldi	r24, 0xC5	; 197
    b562:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    b566:	10 92 e0 15 	sts	0x15E0, r1	; 0x8015e0 <twi_state>
      break;
    b56a:	03 c0       	rjmp	.+6      	; 0xb572 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    b56c:	10 92 73 15 	sts	0x1573, r1	; 0x801573 <twi_error>
      twi_stop();
    b570:	d5 de       	rcall	.-598    	; 0xb31c <twi_stop>
      break;
  }
}
    b572:	ff 91       	pop	r31
    b574:	ef 91       	pop	r30
    b576:	bf 91       	pop	r27
    b578:	af 91       	pop	r26
    b57a:	9f 91       	pop	r25
    b57c:	8f 91       	pop	r24
    b57e:	7f 91       	pop	r23
    b580:	6f 91       	pop	r22
    b582:	5f 91       	pop	r21
    b584:	4f 91       	pop	r20
    b586:	3f 91       	pop	r19
    b588:	2f 91       	pop	r18
    b58a:	0f 90       	pop	r0
    b58c:	0b be       	out	0x3b, r0	; 59
    b58e:	0f 90       	pop	r0
    b590:	0f be       	out	0x3f, r0	; 63
    b592:	0f 90       	pop	r0
    b594:	1f 90       	pop	r1
    b596:	18 95       	reti

0000b598 <__subsf3>:
    b598:	50 58       	subi	r21, 0x80	; 128

0000b59a <__addsf3>:
    b59a:	bb 27       	eor	r27, r27
    b59c:	aa 27       	eor	r26, r26
    b59e:	0e d0       	rcall	.+28     	; 0xb5bc <__addsf3x>
    b5a0:	27 c2       	rjmp	.+1102   	; 0xb9f0 <__fp_round>
    b5a2:	f0 d1       	rcall	.+992    	; 0xb984 <__fp_pscA>
    b5a4:	30 f0       	brcs	.+12     	; 0xb5b2 <__addsf3+0x18>
    b5a6:	f5 d1       	rcall	.+1002   	; 0xb992 <__fp_pscB>
    b5a8:	20 f0       	brcs	.+8      	; 0xb5b2 <__addsf3+0x18>
    b5aa:	31 f4       	brne	.+12     	; 0xb5b8 <__addsf3+0x1e>
    b5ac:	9f 3f       	cpi	r25, 0xFF	; 255
    b5ae:	11 f4       	brne	.+4      	; 0xb5b4 <__addsf3+0x1a>
    b5b0:	1e f4       	brtc	.+6      	; 0xb5b8 <__addsf3+0x1e>
    b5b2:	c0 c1       	rjmp	.+896    	; 0xb934 <__fp_nan>
    b5b4:	0e f4       	brtc	.+2      	; 0xb5b8 <__addsf3+0x1e>
    b5b6:	e0 95       	com	r30
    b5b8:	e7 fb       	bst	r30, 7
    b5ba:	b6 c1       	rjmp	.+876    	; 0xb928 <__fp_inf>

0000b5bc <__addsf3x>:
    b5bc:	e9 2f       	mov	r30, r25
    b5be:	3a d2       	rcall	.+1140   	; 0xba34 <__fp_split3>
    b5c0:	80 f3       	brcs	.-32     	; 0xb5a2 <__addsf3+0x8>
    b5c2:	ba 17       	cp	r27, r26
    b5c4:	62 07       	cpc	r22, r18
    b5c6:	73 07       	cpc	r23, r19
    b5c8:	84 07       	cpc	r24, r20
    b5ca:	95 07       	cpc	r25, r21
    b5cc:	18 f0       	brcs	.+6      	; 0xb5d4 <__addsf3x+0x18>
    b5ce:	71 f4       	brne	.+28     	; 0xb5ec <__addsf3x+0x30>
    b5d0:	9e f5       	brtc	.+102    	; 0xb638 <__addsf3x+0x7c>
    b5d2:	52 c2       	rjmp	.+1188   	; 0xba78 <__fp_zero>
    b5d4:	0e f4       	brtc	.+2      	; 0xb5d8 <__addsf3x+0x1c>
    b5d6:	e0 95       	com	r30
    b5d8:	0b 2e       	mov	r0, r27
    b5da:	ba 2f       	mov	r27, r26
    b5dc:	a0 2d       	mov	r26, r0
    b5de:	0b 01       	movw	r0, r22
    b5e0:	b9 01       	movw	r22, r18
    b5e2:	90 01       	movw	r18, r0
    b5e4:	0c 01       	movw	r0, r24
    b5e6:	ca 01       	movw	r24, r20
    b5e8:	a0 01       	movw	r20, r0
    b5ea:	11 24       	eor	r1, r1
    b5ec:	ff 27       	eor	r31, r31
    b5ee:	59 1b       	sub	r21, r25
    b5f0:	99 f0       	breq	.+38     	; 0xb618 <__addsf3x+0x5c>
    b5f2:	59 3f       	cpi	r21, 0xF9	; 249
    b5f4:	50 f4       	brcc	.+20     	; 0xb60a <__addsf3x+0x4e>
    b5f6:	50 3e       	cpi	r21, 0xE0	; 224
    b5f8:	68 f1       	brcs	.+90     	; 0xb654 <__addsf3x+0x98>
    b5fa:	1a 16       	cp	r1, r26
    b5fc:	f0 40       	sbci	r31, 0x00	; 0
    b5fe:	a2 2f       	mov	r26, r18
    b600:	23 2f       	mov	r18, r19
    b602:	34 2f       	mov	r19, r20
    b604:	44 27       	eor	r20, r20
    b606:	58 5f       	subi	r21, 0xF8	; 248
    b608:	f3 cf       	rjmp	.-26     	; 0xb5f0 <__addsf3x+0x34>
    b60a:	46 95       	lsr	r20
    b60c:	37 95       	ror	r19
    b60e:	27 95       	ror	r18
    b610:	a7 95       	ror	r26
    b612:	f0 40       	sbci	r31, 0x00	; 0
    b614:	53 95       	inc	r21
    b616:	c9 f7       	brne	.-14     	; 0xb60a <__addsf3x+0x4e>
    b618:	7e f4       	brtc	.+30     	; 0xb638 <__addsf3x+0x7c>
    b61a:	1f 16       	cp	r1, r31
    b61c:	ba 0b       	sbc	r27, r26
    b61e:	62 0b       	sbc	r22, r18
    b620:	73 0b       	sbc	r23, r19
    b622:	84 0b       	sbc	r24, r20
    b624:	ba f0       	brmi	.+46     	; 0xb654 <__addsf3x+0x98>
    b626:	91 50       	subi	r25, 0x01	; 1
    b628:	a1 f0       	breq	.+40     	; 0xb652 <__addsf3x+0x96>
    b62a:	ff 0f       	add	r31, r31
    b62c:	bb 1f       	adc	r27, r27
    b62e:	66 1f       	adc	r22, r22
    b630:	77 1f       	adc	r23, r23
    b632:	88 1f       	adc	r24, r24
    b634:	c2 f7       	brpl	.-16     	; 0xb626 <__addsf3x+0x6a>
    b636:	0e c0       	rjmp	.+28     	; 0xb654 <__addsf3x+0x98>
    b638:	ba 0f       	add	r27, r26
    b63a:	62 1f       	adc	r22, r18
    b63c:	73 1f       	adc	r23, r19
    b63e:	84 1f       	adc	r24, r20
    b640:	48 f4       	brcc	.+18     	; 0xb654 <__addsf3x+0x98>
    b642:	87 95       	ror	r24
    b644:	77 95       	ror	r23
    b646:	67 95       	ror	r22
    b648:	b7 95       	ror	r27
    b64a:	f7 95       	ror	r31
    b64c:	9e 3f       	cpi	r25, 0xFE	; 254
    b64e:	08 f0       	brcs	.+2      	; 0xb652 <__addsf3x+0x96>
    b650:	b3 cf       	rjmp	.-154    	; 0xb5b8 <__addsf3+0x1e>
    b652:	93 95       	inc	r25
    b654:	88 0f       	add	r24, r24
    b656:	08 f0       	brcs	.+2      	; 0xb65a <__addsf3x+0x9e>
    b658:	99 27       	eor	r25, r25
    b65a:	ee 0f       	add	r30, r30
    b65c:	97 95       	ror	r25
    b65e:	87 95       	ror	r24
    b660:	08 95       	ret
    b662:	90 d1       	rcall	.+800    	; 0xb984 <__fp_pscA>
    b664:	58 f0       	brcs	.+22     	; 0xb67c <__addsf3x+0xc0>
    b666:	80 e8       	ldi	r24, 0x80	; 128
    b668:	91 e0       	ldi	r25, 0x01	; 1
    b66a:	09 f4       	brne	.+2      	; 0xb66e <__addsf3x+0xb2>
    b66c:	9e ef       	ldi	r25, 0xFE	; 254
    b66e:	91 d1       	rcall	.+802    	; 0xb992 <__fp_pscB>
    b670:	28 f0       	brcs	.+10     	; 0xb67c <__addsf3x+0xc0>
    b672:	40 e8       	ldi	r20, 0x80	; 128
    b674:	51 e0       	ldi	r21, 0x01	; 1
    b676:	59 f4       	brne	.+22     	; 0xb68e <atan2+0xe>
    b678:	5e ef       	ldi	r21, 0xFE	; 254
    b67a:	09 c0       	rjmp	.+18     	; 0xb68e <atan2+0xe>
    b67c:	5b c1       	rjmp	.+694    	; 0xb934 <__fp_nan>
    b67e:	fc c1       	rjmp	.+1016   	; 0xba78 <__fp_zero>

0000b680 <atan2>:
    b680:	e9 2f       	mov	r30, r25
    b682:	e0 78       	andi	r30, 0x80	; 128
    b684:	d7 d1       	rcall	.+942    	; 0xba34 <__fp_split3>
    b686:	68 f3       	brcs	.-38     	; 0xb662 <__addsf3x+0xa6>
    b688:	09 2e       	mov	r0, r25
    b68a:	05 2a       	or	r0, r21
    b68c:	c1 f3       	breq	.-16     	; 0xb67e <__addsf3x+0xc2>
    b68e:	26 17       	cp	r18, r22
    b690:	37 07       	cpc	r19, r23
    b692:	48 07       	cpc	r20, r24
    b694:	59 07       	cpc	r21, r25
    b696:	38 f0       	brcs	.+14     	; 0xb6a6 <atan2+0x26>
    b698:	0e 2e       	mov	r0, r30
    b69a:	07 f8       	bld	r0, 7
    b69c:	e0 25       	eor	r30, r0
    b69e:	69 f0       	breq	.+26     	; 0xb6ba <atan2+0x3a>
    b6a0:	e0 25       	eor	r30, r0
    b6a2:	e0 64       	ori	r30, 0x40	; 64
    b6a4:	0a c0       	rjmp	.+20     	; 0xb6ba <atan2+0x3a>
    b6a6:	ef 63       	ori	r30, 0x3F	; 63
    b6a8:	07 f8       	bld	r0, 7
    b6aa:	00 94       	com	r0
    b6ac:	07 fa       	bst	r0, 7
    b6ae:	db 01       	movw	r26, r22
    b6b0:	b9 01       	movw	r22, r18
    b6b2:	9d 01       	movw	r18, r26
    b6b4:	dc 01       	movw	r26, r24
    b6b6:	ca 01       	movw	r24, r20
    b6b8:	ad 01       	movw	r20, r26
    b6ba:	ef 93       	push	r30
    b6bc:	4a d0       	rcall	.+148    	; 0xb752 <__divsf3_pse>
    b6be:	98 d1       	rcall	.+816    	; 0xb9f0 <__fp_round>
    b6c0:	0a d0       	rcall	.+20     	; 0xb6d6 <atan>
    b6c2:	5f 91       	pop	r21
    b6c4:	55 23       	and	r21, r21
    b6c6:	31 f0       	breq	.+12     	; 0xb6d4 <atan2+0x54>
    b6c8:	2b ed       	ldi	r18, 0xDB	; 219
    b6ca:	3f e0       	ldi	r19, 0x0F	; 15
    b6cc:	49 e4       	ldi	r20, 0x49	; 73
    b6ce:	50 fd       	sbrc	r21, 0
    b6d0:	49 ec       	ldi	r20, 0xC9	; 201
    b6d2:	63 cf       	rjmp	.-314    	; 0xb59a <__addsf3>
    b6d4:	08 95       	ret

0000b6d6 <atan>:
    b6d6:	df 93       	push	r29
    b6d8:	dd 27       	eor	r29, r29
    b6da:	b9 2f       	mov	r27, r25
    b6dc:	bf 77       	andi	r27, 0x7F	; 127
    b6de:	40 e8       	ldi	r20, 0x80	; 128
    b6e0:	5f e3       	ldi	r21, 0x3F	; 63
    b6e2:	16 16       	cp	r1, r22
    b6e4:	17 06       	cpc	r1, r23
    b6e6:	48 07       	cpc	r20, r24
    b6e8:	5b 07       	cpc	r21, r27
    b6ea:	10 f4       	brcc	.+4      	; 0xb6f0 <atan+0x1a>
    b6ec:	d9 2f       	mov	r29, r25
    b6ee:	cf d1       	rcall	.+926    	; 0xba8e <inverse>
    b6f0:	9f 93       	push	r25
    b6f2:	8f 93       	push	r24
    b6f4:	7f 93       	push	r23
    b6f6:	6f 93       	push	r22
    b6f8:	7c d2       	rcall	.+1272   	; 0xbbf2 <square>
    b6fa:	e8 e0       	ldi	r30, 0x08	; 8
    b6fc:	f1 e0       	ldi	r31, 0x01	; 1
    b6fe:	1d d1       	rcall	.+570    	; 0xb93a <__fp_powser>
    b700:	77 d1       	rcall	.+750    	; 0xb9f0 <__fp_round>
    b702:	2f 91       	pop	r18
    b704:	3f 91       	pop	r19
    b706:	4f 91       	pop	r20
    b708:	5f 91       	pop	r21
    b70a:	d4 d1       	rcall	.+936    	; 0xbab4 <__mulsf3x>
    b70c:	dd 23       	and	r29, r29
    b70e:	49 f0       	breq	.+18     	; 0xb722 <atan+0x4c>
    b710:	90 58       	subi	r25, 0x80	; 128
    b712:	a2 ea       	ldi	r26, 0xA2	; 162
    b714:	2a ed       	ldi	r18, 0xDA	; 218
    b716:	3f e0       	ldi	r19, 0x0F	; 15
    b718:	49 ec       	ldi	r20, 0xC9	; 201
    b71a:	5f e3       	ldi	r21, 0x3F	; 63
    b71c:	d0 78       	andi	r29, 0x80	; 128
    b71e:	5d 27       	eor	r21, r29
    b720:	4d df       	rcall	.-358    	; 0xb5bc <__addsf3x>
    b722:	df 91       	pop	r29
    b724:	65 c1       	rjmp	.+714    	; 0xb9f0 <__fp_round>

0000b726 <__cmpsf2>:
    b726:	dc d0       	rcall	.+440    	; 0xb8e0 <__fp_cmp>
    b728:	08 f4       	brcc	.+2      	; 0xb72c <__cmpsf2+0x6>
    b72a:	81 e0       	ldi	r24, 0x01	; 1
    b72c:	08 95       	ret

0000b72e <cos>:
    b72e:	39 d1       	rcall	.+626    	; 0xb9a2 <__fp_rempio2>
    b730:	e3 95       	inc	r30
    b732:	6f c1       	rjmp	.+734    	; 0xba12 <__fp_sinus>

0000b734 <__divsf3>:
    b734:	0c d0       	rcall	.+24     	; 0xb74e <__divsf3x>
    b736:	5c c1       	rjmp	.+696    	; 0xb9f0 <__fp_round>
    b738:	2c d1       	rcall	.+600    	; 0xb992 <__fp_pscB>
    b73a:	40 f0       	brcs	.+16     	; 0xb74c <__divsf3+0x18>
    b73c:	23 d1       	rcall	.+582    	; 0xb984 <__fp_pscA>
    b73e:	30 f0       	brcs	.+12     	; 0xb74c <__divsf3+0x18>
    b740:	21 f4       	brne	.+8      	; 0xb74a <__divsf3+0x16>
    b742:	5f 3f       	cpi	r21, 0xFF	; 255
    b744:	19 f0       	breq	.+6      	; 0xb74c <__divsf3+0x18>
    b746:	f0 c0       	rjmp	.+480    	; 0xb928 <__fp_inf>
    b748:	51 11       	cpse	r21, r1
    b74a:	97 c1       	rjmp	.+814    	; 0xba7a <__fp_szero>
    b74c:	f3 c0       	rjmp	.+486    	; 0xb934 <__fp_nan>

0000b74e <__divsf3x>:
    b74e:	72 d1       	rcall	.+740    	; 0xba34 <__fp_split3>
    b750:	98 f3       	brcs	.-26     	; 0xb738 <__divsf3+0x4>

0000b752 <__divsf3_pse>:
    b752:	99 23       	and	r25, r25
    b754:	c9 f3       	breq	.-14     	; 0xb748 <__divsf3+0x14>
    b756:	55 23       	and	r21, r21
    b758:	b1 f3       	breq	.-20     	; 0xb746 <__divsf3+0x12>
    b75a:	95 1b       	sub	r25, r21
    b75c:	55 0b       	sbc	r21, r21
    b75e:	bb 27       	eor	r27, r27
    b760:	aa 27       	eor	r26, r26
    b762:	62 17       	cp	r22, r18
    b764:	73 07       	cpc	r23, r19
    b766:	84 07       	cpc	r24, r20
    b768:	38 f0       	brcs	.+14     	; 0xb778 <__divsf3_pse+0x26>
    b76a:	9f 5f       	subi	r25, 0xFF	; 255
    b76c:	5f 4f       	sbci	r21, 0xFF	; 255
    b76e:	22 0f       	add	r18, r18
    b770:	33 1f       	adc	r19, r19
    b772:	44 1f       	adc	r20, r20
    b774:	aa 1f       	adc	r26, r26
    b776:	a9 f3       	breq	.-22     	; 0xb762 <__divsf3_pse+0x10>
    b778:	33 d0       	rcall	.+102    	; 0xb7e0 <__divsf3_pse+0x8e>
    b77a:	0e 2e       	mov	r0, r30
    b77c:	3a f0       	brmi	.+14     	; 0xb78c <__divsf3_pse+0x3a>
    b77e:	e0 e8       	ldi	r30, 0x80	; 128
    b780:	30 d0       	rcall	.+96     	; 0xb7e2 <__divsf3_pse+0x90>
    b782:	91 50       	subi	r25, 0x01	; 1
    b784:	50 40       	sbci	r21, 0x00	; 0
    b786:	e6 95       	lsr	r30
    b788:	00 1c       	adc	r0, r0
    b78a:	ca f7       	brpl	.-14     	; 0xb77e <__divsf3_pse+0x2c>
    b78c:	29 d0       	rcall	.+82     	; 0xb7e0 <__divsf3_pse+0x8e>
    b78e:	fe 2f       	mov	r31, r30
    b790:	27 d0       	rcall	.+78     	; 0xb7e0 <__divsf3_pse+0x8e>
    b792:	66 0f       	add	r22, r22
    b794:	77 1f       	adc	r23, r23
    b796:	88 1f       	adc	r24, r24
    b798:	bb 1f       	adc	r27, r27
    b79a:	26 17       	cp	r18, r22
    b79c:	37 07       	cpc	r19, r23
    b79e:	48 07       	cpc	r20, r24
    b7a0:	ab 07       	cpc	r26, r27
    b7a2:	b0 e8       	ldi	r27, 0x80	; 128
    b7a4:	09 f0       	breq	.+2      	; 0xb7a8 <__divsf3_pse+0x56>
    b7a6:	bb 0b       	sbc	r27, r27
    b7a8:	80 2d       	mov	r24, r0
    b7aa:	bf 01       	movw	r22, r30
    b7ac:	ff 27       	eor	r31, r31
    b7ae:	93 58       	subi	r25, 0x83	; 131
    b7b0:	5f 4f       	sbci	r21, 0xFF	; 255
    b7b2:	2a f0       	brmi	.+10     	; 0xb7be <__divsf3_pse+0x6c>
    b7b4:	9e 3f       	cpi	r25, 0xFE	; 254
    b7b6:	51 05       	cpc	r21, r1
    b7b8:	68 f0       	brcs	.+26     	; 0xb7d4 <__divsf3_pse+0x82>
    b7ba:	b6 c0       	rjmp	.+364    	; 0xb928 <__fp_inf>
    b7bc:	5e c1       	rjmp	.+700    	; 0xba7a <__fp_szero>
    b7be:	5f 3f       	cpi	r21, 0xFF	; 255
    b7c0:	ec f3       	brlt	.-6      	; 0xb7bc <__divsf3_pse+0x6a>
    b7c2:	98 3e       	cpi	r25, 0xE8	; 232
    b7c4:	dc f3       	brlt	.-10     	; 0xb7bc <__divsf3_pse+0x6a>
    b7c6:	86 95       	lsr	r24
    b7c8:	77 95       	ror	r23
    b7ca:	67 95       	ror	r22
    b7cc:	b7 95       	ror	r27
    b7ce:	f7 95       	ror	r31
    b7d0:	9f 5f       	subi	r25, 0xFF	; 255
    b7d2:	c9 f7       	brne	.-14     	; 0xb7c6 <__divsf3_pse+0x74>
    b7d4:	88 0f       	add	r24, r24
    b7d6:	91 1d       	adc	r25, r1
    b7d8:	96 95       	lsr	r25
    b7da:	87 95       	ror	r24
    b7dc:	97 f9       	bld	r25, 7
    b7de:	08 95       	ret
    b7e0:	e1 e0       	ldi	r30, 0x01	; 1
    b7e2:	66 0f       	add	r22, r22
    b7e4:	77 1f       	adc	r23, r23
    b7e6:	88 1f       	adc	r24, r24
    b7e8:	bb 1f       	adc	r27, r27
    b7ea:	62 17       	cp	r22, r18
    b7ec:	73 07       	cpc	r23, r19
    b7ee:	84 07       	cpc	r24, r20
    b7f0:	ba 07       	cpc	r27, r26
    b7f2:	20 f0       	brcs	.+8      	; 0xb7fc <__divsf3_pse+0xaa>
    b7f4:	62 1b       	sub	r22, r18
    b7f6:	73 0b       	sbc	r23, r19
    b7f8:	84 0b       	sbc	r24, r20
    b7fa:	ba 0b       	sbc	r27, r26
    b7fc:	ee 1f       	adc	r30, r30
    b7fe:	88 f7       	brcc	.-30     	; 0xb7e2 <__divsf3_pse+0x90>
    b800:	e0 95       	com	r30
    b802:	08 95       	ret

0000b804 <__fixsfsi>:
    b804:	04 d0       	rcall	.+8      	; 0xb80e <__fixunssfsi>
    b806:	68 94       	set
    b808:	b1 11       	cpse	r27, r1
    b80a:	37 c1       	rjmp	.+622    	; 0xba7a <__fp_szero>
    b80c:	08 95       	ret

0000b80e <__fixunssfsi>:
    b80e:	1a d1       	rcall	.+564    	; 0xba44 <__fp_splitA>
    b810:	88 f0       	brcs	.+34     	; 0xb834 <__fixunssfsi+0x26>
    b812:	9f 57       	subi	r25, 0x7F	; 127
    b814:	90 f0       	brcs	.+36     	; 0xb83a <__fixunssfsi+0x2c>
    b816:	b9 2f       	mov	r27, r25
    b818:	99 27       	eor	r25, r25
    b81a:	b7 51       	subi	r27, 0x17	; 23
    b81c:	a0 f0       	brcs	.+40     	; 0xb846 <__fixunssfsi+0x38>
    b81e:	d1 f0       	breq	.+52     	; 0xb854 <__fixunssfsi+0x46>
    b820:	66 0f       	add	r22, r22
    b822:	77 1f       	adc	r23, r23
    b824:	88 1f       	adc	r24, r24
    b826:	99 1f       	adc	r25, r25
    b828:	1a f0       	brmi	.+6      	; 0xb830 <__fixunssfsi+0x22>
    b82a:	ba 95       	dec	r27
    b82c:	c9 f7       	brne	.-14     	; 0xb820 <__fixunssfsi+0x12>
    b82e:	12 c0       	rjmp	.+36     	; 0xb854 <__fixunssfsi+0x46>
    b830:	b1 30       	cpi	r27, 0x01	; 1
    b832:	81 f0       	breq	.+32     	; 0xb854 <__fixunssfsi+0x46>
    b834:	21 d1       	rcall	.+578    	; 0xba78 <__fp_zero>
    b836:	b1 e0       	ldi	r27, 0x01	; 1
    b838:	08 95       	ret
    b83a:	1e c1       	rjmp	.+572    	; 0xba78 <__fp_zero>
    b83c:	67 2f       	mov	r22, r23
    b83e:	78 2f       	mov	r23, r24
    b840:	88 27       	eor	r24, r24
    b842:	b8 5f       	subi	r27, 0xF8	; 248
    b844:	39 f0       	breq	.+14     	; 0xb854 <__fixunssfsi+0x46>
    b846:	b9 3f       	cpi	r27, 0xF9	; 249
    b848:	cc f3       	brlt	.-14     	; 0xb83c <__fixunssfsi+0x2e>
    b84a:	86 95       	lsr	r24
    b84c:	77 95       	ror	r23
    b84e:	67 95       	ror	r22
    b850:	b3 95       	inc	r27
    b852:	d9 f7       	brne	.-10     	; 0xb84a <__fixunssfsi+0x3c>
    b854:	3e f4       	brtc	.+14     	; 0xb864 <__fixunssfsi+0x56>
    b856:	90 95       	com	r25
    b858:	80 95       	com	r24
    b85a:	70 95       	com	r23
    b85c:	61 95       	neg	r22
    b85e:	7f 4f       	sbci	r23, 0xFF	; 255
    b860:	8f 4f       	sbci	r24, 0xFF	; 255
    b862:	9f 4f       	sbci	r25, 0xFF	; 255
    b864:	08 95       	ret

0000b866 <__floatunsisf>:
    b866:	e8 94       	clt
    b868:	09 c0       	rjmp	.+18     	; 0xb87c <__floatsisf+0x12>

0000b86a <__floatsisf>:
    b86a:	97 fb       	bst	r25, 7
    b86c:	3e f4       	brtc	.+14     	; 0xb87c <__floatsisf+0x12>
    b86e:	90 95       	com	r25
    b870:	80 95       	com	r24
    b872:	70 95       	com	r23
    b874:	61 95       	neg	r22
    b876:	7f 4f       	sbci	r23, 0xFF	; 255
    b878:	8f 4f       	sbci	r24, 0xFF	; 255
    b87a:	9f 4f       	sbci	r25, 0xFF	; 255
    b87c:	99 23       	and	r25, r25
    b87e:	a9 f0       	breq	.+42     	; 0xb8aa <__floatsisf+0x40>
    b880:	f9 2f       	mov	r31, r25
    b882:	96 e9       	ldi	r25, 0x96	; 150
    b884:	bb 27       	eor	r27, r27
    b886:	93 95       	inc	r25
    b888:	f6 95       	lsr	r31
    b88a:	87 95       	ror	r24
    b88c:	77 95       	ror	r23
    b88e:	67 95       	ror	r22
    b890:	b7 95       	ror	r27
    b892:	f1 11       	cpse	r31, r1
    b894:	f8 cf       	rjmp	.-16     	; 0xb886 <__floatsisf+0x1c>
    b896:	fa f4       	brpl	.+62     	; 0xb8d6 <__floatsisf+0x6c>
    b898:	bb 0f       	add	r27, r27
    b89a:	11 f4       	brne	.+4      	; 0xb8a0 <__floatsisf+0x36>
    b89c:	60 ff       	sbrs	r22, 0
    b89e:	1b c0       	rjmp	.+54     	; 0xb8d6 <__floatsisf+0x6c>
    b8a0:	6f 5f       	subi	r22, 0xFF	; 255
    b8a2:	7f 4f       	sbci	r23, 0xFF	; 255
    b8a4:	8f 4f       	sbci	r24, 0xFF	; 255
    b8a6:	9f 4f       	sbci	r25, 0xFF	; 255
    b8a8:	16 c0       	rjmp	.+44     	; 0xb8d6 <__floatsisf+0x6c>
    b8aa:	88 23       	and	r24, r24
    b8ac:	11 f0       	breq	.+4      	; 0xb8b2 <__floatsisf+0x48>
    b8ae:	96 e9       	ldi	r25, 0x96	; 150
    b8b0:	11 c0       	rjmp	.+34     	; 0xb8d4 <__floatsisf+0x6a>
    b8b2:	77 23       	and	r23, r23
    b8b4:	21 f0       	breq	.+8      	; 0xb8be <__floatsisf+0x54>
    b8b6:	9e e8       	ldi	r25, 0x8E	; 142
    b8b8:	87 2f       	mov	r24, r23
    b8ba:	76 2f       	mov	r23, r22
    b8bc:	05 c0       	rjmp	.+10     	; 0xb8c8 <__floatsisf+0x5e>
    b8be:	66 23       	and	r22, r22
    b8c0:	71 f0       	breq	.+28     	; 0xb8de <__floatsisf+0x74>
    b8c2:	96 e8       	ldi	r25, 0x86	; 134
    b8c4:	86 2f       	mov	r24, r22
    b8c6:	70 e0       	ldi	r23, 0x00	; 0
    b8c8:	60 e0       	ldi	r22, 0x00	; 0
    b8ca:	2a f0       	brmi	.+10     	; 0xb8d6 <__floatsisf+0x6c>
    b8cc:	9a 95       	dec	r25
    b8ce:	66 0f       	add	r22, r22
    b8d0:	77 1f       	adc	r23, r23
    b8d2:	88 1f       	adc	r24, r24
    b8d4:	da f7       	brpl	.-10     	; 0xb8cc <__floatsisf+0x62>
    b8d6:	88 0f       	add	r24, r24
    b8d8:	96 95       	lsr	r25
    b8da:	87 95       	ror	r24
    b8dc:	97 f9       	bld	r25, 7
    b8de:	08 95       	ret

0000b8e0 <__fp_cmp>:
    b8e0:	99 0f       	add	r25, r25
    b8e2:	00 08       	sbc	r0, r0
    b8e4:	55 0f       	add	r21, r21
    b8e6:	aa 0b       	sbc	r26, r26
    b8e8:	e0 e8       	ldi	r30, 0x80	; 128
    b8ea:	fe ef       	ldi	r31, 0xFE	; 254
    b8ec:	16 16       	cp	r1, r22
    b8ee:	17 06       	cpc	r1, r23
    b8f0:	e8 07       	cpc	r30, r24
    b8f2:	f9 07       	cpc	r31, r25
    b8f4:	c0 f0       	brcs	.+48     	; 0xb926 <__fp_cmp+0x46>
    b8f6:	12 16       	cp	r1, r18
    b8f8:	13 06       	cpc	r1, r19
    b8fa:	e4 07       	cpc	r30, r20
    b8fc:	f5 07       	cpc	r31, r21
    b8fe:	98 f0       	brcs	.+38     	; 0xb926 <__fp_cmp+0x46>
    b900:	62 1b       	sub	r22, r18
    b902:	73 0b       	sbc	r23, r19
    b904:	84 0b       	sbc	r24, r20
    b906:	95 0b       	sbc	r25, r21
    b908:	39 f4       	brne	.+14     	; 0xb918 <__fp_cmp+0x38>
    b90a:	0a 26       	eor	r0, r26
    b90c:	61 f0       	breq	.+24     	; 0xb926 <__fp_cmp+0x46>
    b90e:	23 2b       	or	r18, r19
    b910:	24 2b       	or	r18, r20
    b912:	25 2b       	or	r18, r21
    b914:	21 f4       	brne	.+8      	; 0xb91e <__fp_cmp+0x3e>
    b916:	08 95       	ret
    b918:	0a 26       	eor	r0, r26
    b91a:	09 f4       	brne	.+2      	; 0xb91e <__fp_cmp+0x3e>
    b91c:	a1 40       	sbci	r26, 0x01	; 1
    b91e:	a6 95       	lsr	r26
    b920:	8f ef       	ldi	r24, 0xFF	; 255
    b922:	81 1d       	adc	r24, r1
    b924:	81 1d       	adc	r24, r1
    b926:	08 95       	ret

0000b928 <__fp_inf>:
    b928:	97 f9       	bld	r25, 7
    b92a:	9f 67       	ori	r25, 0x7F	; 127
    b92c:	80 e8       	ldi	r24, 0x80	; 128
    b92e:	70 e0       	ldi	r23, 0x00	; 0
    b930:	60 e0       	ldi	r22, 0x00	; 0
    b932:	08 95       	ret

0000b934 <__fp_nan>:
    b934:	9f ef       	ldi	r25, 0xFF	; 255
    b936:	80 ec       	ldi	r24, 0xC0	; 192
    b938:	08 95       	ret

0000b93a <__fp_powser>:
    b93a:	df 93       	push	r29
    b93c:	cf 93       	push	r28
    b93e:	1f 93       	push	r17
    b940:	0f 93       	push	r16
    b942:	ff 92       	push	r15
    b944:	ef 92       	push	r14
    b946:	df 92       	push	r13
    b948:	7b 01       	movw	r14, r22
    b94a:	8c 01       	movw	r16, r24
    b94c:	68 94       	set
    b94e:	05 c0       	rjmp	.+10     	; 0xb95a <__fp_powser+0x20>
    b950:	da 2e       	mov	r13, r26
    b952:	ef 01       	movw	r28, r30
    b954:	af d0       	rcall	.+350    	; 0xbab4 <__mulsf3x>
    b956:	fe 01       	movw	r30, r28
    b958:	e8 94       	clt
    b95a:	a5 91       	lpm	r26, Z+
    b95c:	25 91       	lpm	r18, Z+
    b95e:	35 91       	lpm	r19, Z+
    b960:	45 91       	lpm	r20, Z+
    b962:	55 91       	lpm	r21, Z+
    b964:	ae f3       	brts	.-22     	; 0xb950 <__fp_powser+0x16>
    b966:	ef 01       	movw	r28, r30
    b968:	29 de       	rcall	.-942    	; 0xb5bc <__addsf3x>
    b96a:	fe 01       	movw	r30, r28
    b96c:	97 01       	movw	r18, r14
    b96e:	a8 01       	movw	r20, r16
    b970:	da 94       	dec	r13
    b972:	79 f7       	brne	.-34     	; 0xb952 <__fp_powser+0x18>
    b974:	df 90       	pop	r13
    b976:	ef 90       	pop	r14
    b978:	ff 90       	pop	r15
    b97a:	0f 91       	pop	r16
    b97c:	1f 91       	pop	r17
    b97e:	cf 91       	pop	r28
    b980:	df 91       	pop	r29
    b982:	08 95       	ret

0000b984 <__fp_pscA>:
    b984:	00 24       	eor	r0, r0
    b986:	0a 94       	dec	r0
    b988:	16 16       	cp	r1, r22
    b98a:	17 06       	cpc	r1, r23
    b98c:	18 06       	cpc	r1, r24
    b98e:	09 06       	cpc	r0, r25
    b990:	08 95       	ret

0000b992 <__fp_pscB>:
    b992:	00 24       	eor	r0, r0
    b994:	0a 94       	dec	r0
    b996:	12 16       	cp	r1, r18
    b998:	13 06       	cpc	r1, r19
    b99a:	14 06       	cpc	r1, r20
    b99c:	05 06       	cpc	r0, r21
    b99e:	08 95       	ret
    b9a0:	c9 cf       	rjmp	.-110    	; 0xb934 <__fp_nan>

0000b9a2 <__fp_rempio2>:
    b9a2:	50 d0       	rcall	.+160    	; 0xba44 <__fp_splitA>
    b9a4:	e8 f3       	brcs	.-6      	; 0xb9a0 <__fp_pscB+0xe>
    b9a6:	e8 94       	clt
    b9a8:	e0 e0       	ldi	r30, 0x00	; 0
    b9aa:	bb 27       	eor	r27, r27
    b9ac:	9f 57       	subi	r25, 0x7F	; 127
    b9ae:	f0 f0       	brcs	.+60     	; 0xb9ec <__fp_rempio2+0x4a>
    b9b0:	2a ed       	ldi	r18, 0xDA	; 218
    b9b2:	3f e0       	ldi	r19, 0x0F	; 15
    b9b4:	49 ec       	ldi	r20, 0xC9	; 201
    b9b6:	06 c0       	rjmp	.+12     	; 0xb9c4 <__fp_rempio2+0x22>
    b9b8:	ee 0f       	add	r30, r30
    b9ba:	bb 0f       	add	r27, r27
    b9bc:	66 1f       	adc	r22, r22
    b9be:	77 1f       	adc	r23, r23
    b9c0:	88 1f       	adc	r24, r24
    b9c2:	28 f0       	brcs	.+10     	; 0xb9ce <__fp_rempio2+0x2c>
    b9c4:	b2 3a       	cpi	r27, 0xA2	; 162
    b9c6:	62 07       	cpc	r22, r18
    b9c8:	73 07       	cpc	r23, r19
    b9ca:	84 07       	cpc	r24, r20
    b9cc:	28 f0       	brcs	.+10     	; 0xb9d8 <__fp_rempio2+0x36>
    b9ce:	b2 5a       	subi	r27, 0xA2	; 162
    b9d0:	62 0b       	sbc	r22, r18
    b9d2:	73 0b       	sbc	r23, r19
    b9d4:	84 0b       	sbc	r24, r20
    b9d6:	e3 95       	inc	r30
    b9d8:	9a 95       	dec	r25
    b9da:	72 f7       	brpl	.-36     	; 0xb9b8 <__fp_rempio2+0x16>
    b9dc:	80 38       	cpi	r24, 0x80	; 128
    b9de:	30 f4       	brcc	.+12     	; 0xb9ec <__fp_rempio2+0x4a>
    b9e0:	9a 95       	dec	r25
    b9e2:	bb 0f       	add	r27, r27
    b9e4:	66 1f       	adc	r22, r22
    b9e6:	77 1f       	adc	r23, r23
    b9e8:	88 1f       	adc	r24, r24
    b9ea:	d2 f7       	brpl	.-12     	; 0xb9e0 <__fp_rempio2+0x3e>
    b9ec:	90 48       	sbci	r25, 0x80	; 128
    b9ee:	0a c1       	rjmp	.+532    	; 0xbc04 <__fp_mpack_finite>

0000b9f0 <__fp_round>:
    b9f0:	09 2e       	mov	r0, r25
    b9f2:	03 94       	inc	r0
    b9f4:	00 0c       	add	r0, r0
    b9f6:	11 f4       	brne	.+4      	; 0xb9fc <__fp_round+0xc>
    b9f8:	88 23       	and	r24, r24
    b9fa:	52 f0       	brmi	.+20     	; 0xba10 <__fp_round+0x20>
    b9fc:	bb 0f       	add	r27, r27
    b9fe:	40 f4       	brcc	.+16     	; 0xba10 <__fp_round+0x20>
    ba00:	bf 2b       	or	r27, r31
    ba02:	11 f4       	brne	.+4      	; 0xba08 <__fp_round+0x18>
    ba04:	60 ff       	sbrs	r22, 0
    ba06:	04 c0       	rjmp	.+8      	; 0xba10 <__fp_round+0x20>
    ba08:	6f 5f       	subi	r22, 0xFF	; 255
    ba0a:	7f 4f       	sbci	r23, 0xFF	; 255
    ba0c:	8f 4f       	sbci	r24, 0xFF	; 255
    ba0e:	9f 4f       	sbci	r25, 0xFF	; 255
    ba10:	08 95       	ret

0000ba12 <__fp_sinus>:
    ba12:	ef 93       	push	r30
    ba14:	e0 ff       	sbrs	r30, 0
    ba16:	06 c0       	rjmp	.+12     	; 0xba24 <__fp_sinus+0x12>
    ba18:	a2 ea       	ldi	r26, 0xA2	; 162
    ba1a:	2a ed       	ldi	r18, 0xDA	; 218
    ba1c:	3f e0       	ldi	r19, 0x0F	; 15
    ba1e:	49 ec       	ldi	r20, 0xC9	; 201
    ba20:	5f eb       	ldi	r21, 0xBF	; 191
    ba22:	cc dd       	rcall	.-1128   	; 0xb5bc <__addsf3x>
    ba24:	e5 df       	rcall	.-54     	; 0xb9f0 <__fp_round>
    ba26:	0f 90       	pop	r0
    ba28:	03 94       	inc	r0
    ba2a:	01 fc       	sbrc	r0, 1
    ba2c:	90 58       	subi	r25, 0x80	; 128
    ba2e:	e5 e3       	ldi	r30, 0x35	; 53
    ba30:	f1 e0       	ldi	r31, 0x01	; 1
    ba32:	fb c0       	rjmp	.+502    	; 0xbc2a <__fp_powsodd>

0000ba34 <__fp_split3>:
    ba34:	57 fd       	sbrc	r21, 7
    ba36:	90 58       	subi	r25, 0x80	; 128
    ba38:	44 0f       	add	r20, r20
    ba3a:	55 1f       	adc	r21, r21
    ba3c:	59 f0       	breq	.+22     	; 0xba54 <__fp_splitA+0x10>
    ba3e:	5f 3f       	cpi	r21, 0xFF	; 255
    ba40:	71 f0       	breq	.+28     	; 0xba5e <__fp_splitA+0x1a>
    ba42:	47 95       	ror	r20

0000ba44 <__fp_splitA>:
    ba44:	88 0f       	add	r24, r24
    ba46:	97 fb       	bst	r25, 7
    ba48:	99 1f       	adc	r25, r25
    ba4a:	61 f0       	breq	.+24     	; 0xba64 <__fp_splitA+0x20>
    ba4c:	9f 3f       	cpi	r25, 0xFF	; 255
    ba4e:	79 f0       	breq	.+30     	; 0xba6e <__fp_splitA+0x2a>
    ba50:	87 95       	ror	r24
    ba52:	08 95       	ret
    ba54:	12 16       	cp	r1, r18
    ba56:	13 06       	cpc	r1, r19
    ba58:	14 06       	cpc	r1, r20
    ba5a:	55 1f       	adc	r21, r21
    ba5c:	f2 cf       	rjmp	.-28     	; 0xba42 <__fp_split3+0xe>
    ba5e:	46 95       	lsr	r20
    ba60:	f1 df       	rcall	.-30     	; 0xba44 <__fp_splitA>
    ba62:	08 c0       	rjmp	.+16     	; 0xba74 <__fp_splitA+0x30>
    ba64:	16 16       	cp	r1, r22
    ba66:	17 06       	cpc	r1, r23
    ba68:	18 06       	cpc	r1, r24
    ba6a:	99 1f       	adc	r25, r25
    ba6c:	f1 cf       	rjmp	.-30     	; 0xba50 <__fp_splitA+0xc>
    ba6e:	86 95       	lsr	r24
    ba70:	71 05       	cpc	r23, r1
    ba72:	61 05       	cpc	r22, r1
    ba74:	08 94       	sec
    ba76:	08 95       	ret

0000ba78 <__fp_zero>:
    ba78:	e8 94       	clt

0000ba7a <__fp_szero>:
    ba7a:	bb 27       	eor	r27, r27
    ba7c:	66 27       	eor	r22, r22
    ba7e:	77 27       	eor	r23, r23
    ba80:	cb 01       	movw	r24, r22
    ba82:	97 f9       	bld	r25, 7
    ba84:	08 95       	ret

0000ba86 <__gesf2>:
    ba86:	2c df       	rcall	.-424    	; 0xb8e0 <__fp_cmp>
    ba88:	08 f4       	brcc	.+2      	; 0xba8c <__gesf2+0x6>
    ba8a:	8f ef       	ldi	r24, 0xFF	; 255
    ba8c:	08 95       	ret

0000ba8e <inverse>:
    ba8e:	9b 01       	movw	r18, r22
    ba90:	ac 01       	movw	r20, r24
    ba92:	60 e0       	ldi	r22, 0x00	; 0
    ba94:	70 e0       	ldi	r23, 0x00	; 0
    ba96:	80 e8       	ldi	r24, 0x80	; 128
    ba98:	9f e3       	ldi	r25, 0x3F	; 63
    ba9a:	4c ce       	rjmp	.-872    	; 0xb734 <__divsf3>

0000ba9c <__mulsf3>:
    ba9c:	0b d0       	rcall	.+22     	; 0xbab4 <__mulsf3x>
    ba9e:	a8 cf       	rjmp	.-176    	; 0xb9f0 <__fp_round>
    baa0:	71 df       	rcall	.-286    	; 0xb984 <__fp_pscA>
    baa2:	28 f0       	brcs	.+10     	; 0xbaae <__mulsf3+0x12>
    baa4:	76 df       	rcall	.-276    	; 0xb992 <__fp_pscB>
    baa6:	18 f0       	brcs	.+6      	; 0xbaae <__mulsf3+0x12>
    baa8:	95 23       	and	r25, r21
    baaa:	09 f0       	breq	.+2      	; 0xbaae <__mulsf3+0x12>
    baac:	3d cf       	rjmp	.-390    	; 0xb928 <__fp_inf>
    baae:	42 cf       	rjmp	.-380    	; 0xb934 <__fp_nan>
    bab0:	11 24       	eor	r1, r1
    bab2:	e3 cf       	rjmp	.-58     	; 0xba7a <__fp_szero>

0000bab4 <__mulsf3x>:
    bab4:	bf df       	rcall	.-130    	; 0xba34 <__fp_split3>
    bab6:	a0 f3       	brcs	.-24     	; 0xbaa0 <__mulsf3+0x4>

0000bab8 <__mulsf3_pse>:
    bab8:	95 9f       	mul	r25, r21
    baba:	d1 f3       	breq	.-12     	; 0xbab0 <__mulsf3+0x14>
    babc:	95 0f       	add	r25, r21
    babe:	50 e0       	ldi	r21, 0x00	; 0
    bac0:	55 1f       	adc	r21, r21
    bac2:	62 9f       	mul	r22, r18
    bac4:	f0 01       	movw	r30, r0
    bac6:	72 9f       	mul	r23, r18
    bac8:	bb 27       	eor	r27, r27
    baca:	f0 0d       	add	r31, r0
    bacc:	b1 1d       	adc	r27, r1
    bace:	63 9f       	mul	r22, r19
    bad0:	aa 27       	eor	r26, r26
    bad2:	f0 0d       	add	r31, r0
    bad4:	b1 1d       	adc	r27, r1
    bad6:	aa 1f       	adc	r26, r26
    bad8:	64 9f       	mul	r22, r20
    bada:	66 27       	eor	r22, r22
    badc:	b0 0d       	add	r27, r0
    bade:	a1 1d       	adc	r26, r1
    bae0:	66 1f       	adc	r22, r22
    bae2:	82 9f       	mul	r24, r18
    bae4:	22 27       	eor	r18, r18
    bae6:	b0 0d       	add	r27, r0
    bae8:	a1 1d       	adc	r26, r1
    baea:	62 1f       	adc	r22, r18
    baec:	73 9f       	mul	r23, r19
    baee:	b0 0d       	add	r27, r0
    baf0:	a1 1d       	adc	r26, r1
    baf2:	62 1f       	adc	r22, r18
    baf4:	83 9f       	mul	r24, r19
    baf6:	a0 0d       	add	r26, r0
    baf8:	61 1d       	adc	r22, r1
    bafa:	22 1f       	adc	r18, r18
    bafc:	74 9f       	mul	r23, r20
    bafe:	33 27       	eor	r19, r19
    bb00:	a0 0d       	add	r26, r0
    bb02:	61 1d       	adc	r22, r1
    bb04:	23 1f       	adc	r18, r19
    bb06:	84 9f       	mul	r24, r20
    bb08:	60 0d       	add	r22, r0
    bb0a:	21 1d       	adc	r18, r1
    bb0c:	82 2f       	mov	r24, r18
    bb0e:	76 2f       	mov	r23, r22
    bb10:	6a 2f       	mov	r22, r26
    bb12:	11 24       	eor	r1, r1
    bb14:	9f 57       	subi	r25, 0x7F	; 127
    bb16:	50 40       	sbci	r21, 0x00	; 0
    bb18:	8a f0       	brmi	.+34     	; 0xbb3c <__mulsf3_pse+0x84>
    bb1a:	e1 f0       	breq	.+56     	; 0xbb54 <__mulsf3_pse+0x9c>
    bb1c:	88 23       	and	r24, r24
    bb1e:	4a f0       	brmi	.+18     	; 0xbb32 <__mulsf3_pse+0x7a>
    bb20:	ee 0f       	add	r30, r30
    bb22:	ff 1f       	adc	r31, r31
    bb24:	bb 1f       	adc	r27, r27
    bb26:	66 1f       	adc	r22, r22
    bb28:	77 1f       	adc	r23, r23
    bb2a:	88 1f       	adc	r24, r24
    bb2c:	91 50       	subi	r25, 0x01	; 1
    bb2e:	50 40       	sbci	r21, 0x00	; 0
    bb30:	a9 f7       	brne	.-22     	; 0xbb1c <__mulsf3_pse+0x64>
    bb32:	9e 3f       	cpi	r25, 0xFE	; 254
    bb34:	51 05       	cpc	r21, r1
    bb36:	70 f0       	brcs	.+28     	; 0xbb54 <__mulsf3_pse+0x9c>
    bb38:	f7 ce       	rjmp	.-530    	; 0xb928 <__fp_inf>
    bb3a:	9f cf       	rjmp	.-194    	; 0xba7a <__fp_szero>
    bb3c:	5f 3f       	cpi	r21, 0xFF	; 255
    bb3e:	ec f3       	brlt	.-6      	; 0xbb3a <__mulsf3_pse+0x82>
    bb40:	98 3e       	cpi	r25, 0xE8	; 232
    bb42:	dc f3       	brlt	.-10     	; 0xbb3a <__mulsf3_pse+0x82>
    bb44:	86 95       	lsr	r24
    bb46:	77 95       	ror	r23
    bb48:	67 95       	ror	r22
    bb4a:	b7 95       	ror	r27
    bb4c:	f7 95       	ror	r31
    bb4e:	e7 95       	ror	r30
    bb50:	9f 5f       	subi	r25, 0xFF	; 255
    bb52:	c1 f7       	brne	.-16     	; 0xbb44 <__mulsf3_pse+0x8c>
    bb54:	fe 2b       	or	r31, r30
    bb56:	88 0f       	add	r24, r24
    bb58:	91 1d       	adc	r25, r1
    bb5a:	96 95       	lsr	r25
    bb5c:	87 95       	ror	r24
    bb5e:	97 f9       	bld	r25, 7
    bb60:	08 95       	ret

0000bb62 <sin>:
    bb62:	9f 93       	push	r25
    bb64:	1e df       	rcall	.-452    	; 0xb9a2 <__fp_rempio2>
    bb66:	0f 90       	pop	r0
    bb68:	07 fc       	sbrc	r0, 7
    bb6a:	ee 5f       	subi	r30, 0xFE	; 254
    bb6c:	52 cf       	rjmp	.-348    	; 0xba12 <__fp_sinus>
    bb6e:	11 f4       	brne	.+4      	; 0xbb74 <sin+0x12>
    bb70:	0e f4       	brtc	.+2      	; 0xbb74 <sin+0x12>
    bb72:	e0 ce       	rjmp	.-576    	; 0xb934 <__fp_nan>
    bb74:	45 c0       	rjmp	.+138    	; 0xbc00 <__fp_mpack>

0000bb76 <sqrt>:
    bb76:	66 df       	rcall	.-308    	; 0xba44 <__fp_splitA>
    bb78:	d0 f3       	brcs	.-12     	; 0xbb6e <sin+0xc>
    bb7a:	99 23       	and	r25, r25
    bb7c:	d9 f3       	breq	.-10     	; 0xbb74 <sin+0x12>
    bb7e:	ce f3       	brts	.-14     	; 0xbb72 <sin+0x10>
    bb80:	9f 57       	subi	r25, 0x7F	; 127
    bb82:	55 0b       	sbc	r21, r21
    bb84:	87 ff       	sbrs	r24, 7
    bb86:	4a d0       	rcall	.+148    	; 0xbc1c <__fp_norm2>
    bb88:	00 24       	eor	r0, r0
    bb8a:	a0 e6       	ldi	r26, 0x60	; 96
    bb8c:	40 ea       	ldi	r20, 0xA0	; 160
    bb8e:	90 01       	movw	r18, r0
    bb90:	80 58       	subi	r24, 0x80	; 128
    bb92:	56 95       	lsr	r21
    bb94:	97 95       	ror	r25
    bb96:	28 f4       	brcc	.+10     	; 0xbba2 <sqrt+0x2c>
    bb98:	80 5c       	subi	r24, 0xC0	; 192
    bb9a:	66 0f       	add	r22, r22
    bb9c:	77 1f       	adc	r23, r23
    bb9e:	88 1f       	adc	r24, r24
    bba0:	20 f0       	brcs	.+8      	; 0xbbaa <sqrt+0x34>
    bba2:	26 17       	cp	r18, r22
    bba4:	37 07       	cpc	r19, r23
    bba6:	48 07       	cpc	r20, r24
    bba8:	30 f4       	brcc	.+12     	; 0xbbb6 <sqrt+0x40>
    bbaa:	62 1b       	sub	r22, r18
    bbac:	73 0b       	sbc	r23, r19
    bbae:	84 0b       	sbc	r24, r20
    bbb0:	20 29       	or	r18, r0
    bbb2:	31 29       	or	r19, r1
    bbb4:	4a 2b       	or	r20, r26
    bbb6:	a6 95       	lsr	r26
    bbb8:	17 94       	ror	r1
    bbba:	07 94       	ror	r0
    bbbc:	20 25       	eor	r18, r0
    bbbe:	31 25       	eor	r19, r1
    bbc0:	4a 27       	eor	r20, r26
    bbc2:	58 f7       	brcc	.-42     	; 0xbb9a <sqrt+0x24>
    bbc4:	66 0f       	add	r22, r22
    bbc6:	77 1f       	adc	r23, r23
    bbc8:	88 1f       	adc	r24, r24
    bbca:	20 f0       	brcs	.+8      	; 0xbbd4 <sqrt+0x5e>
    bbcc:	26 17       	cp	r18, r22
    bbce:	37 07       	cpc	r19, r23
    bbd0:	48 07       	cpc	r20, r24
    bbd2:	30 f4       	brcc	.+12     	; 0xbbe0 <sqrt+0x6a>
    bbd4:	62 0b       	sbc	r22, r18
    bbd6:	73 0b       	sbc	r23, r19
    bbd8:	84 0b       	sbc	r24, r20
    bbda:	20 0d       	add	r18, r0
    bbdc:	31 1d       	adc	r19, r1
    bbde:	41 1d       	adc	r20, r1
    bbe0:	a0 95       	com	r26
    bbe2:	81 f7       	brne	.-32     	; 0xbbc4 <sqrt+0x4e>
    bbe4:	b9 01       	movw	r22, r18
    bbe6:	84 2f       	mov	r24, r20
    bbe8:	91 58       	subi	r25, 0x81	; 129
    bbea:	88 0f       	add	r24, r24
    bbec:	96 95       	lsr	r25
    bbee:	87 95       	ror	r24
    bbf0:	08 95       	ret

0000bbf2 <square>:
    bbf2:	9b 01       	movw	r18, r22
    bbf4:	ac 01       	movw	r20, r24
    bbf6:	52 cf       	rjmp	.-348    	; 0xba9c <__mulsf3>

0000bbf8 <__unordsf2>:
    bbf8:	73 de       	rcall	.-794    	; 0xb8e0 <__fp_cmp>
    bbfa:	88 0b       	sbc	r24, r24
    bbfc:	99 0b       	sbc	r25, r25
    bbfe:	08 95       	ret

0000bc00 <__fp_mpack>:
    bc00:	9f 3f       	cpi	r25, 0xFF	; 255
    bc02:	31 f0       	breq	.+12     	; 0xbc10 <__fp_mpack_finite+0xc>

0000bc04 <__fp_mpack_finite>:
    bc04:	91 50       	subi	r25, 0x01	; 1
    bc06:	20 f4       	brcc	.+8      	; 0xbc10 <__fp_mpack_finite+0xc>
    bc08:	87 95       	ror	r24
    bc0a:	77 95       	ror	r23
    bc0c:	67 95       	ror	r22
    bc0e:	b7 95       	ror	r27
    bc10:	88 0f       	add	r24, r24
    bc12:	91 1d       	adc	r25, r1
    bc14:	96 95       	lsr	r25
    bc16:	87 95       	ror	r24
    bc18:	97 f9       	bld	r25, 7
    bc1a:	08 95       	ret

0000bc1c <__fp_norm2>:
    bc1c:	91 50       	subi	r25, 0x01	; 1
    bc1e:	50 40       	sbci	r21, 0x00	; 0
    bc20:	66 0f       	add	r22, r22
    bc22:	77 1f       	adc	r23, r23
    bc24:	88 1f       	adc	r24, r24
    bc26:	d2 f7       	brpl	.-12     	; 0xbc1c <__fp_norm2>
    bc28:	08 95       	ret

0000bc2a <__fp_powsodd>:
    bc2a:	9f 93       	push	r25
    bc2c:	8f 93       	push	r24
    bc2e:	7f 93       	push	r23
    bc30:	6f 93       	push	r22
    bc32:	ff 93       	push	r31
    bc34:	ef 93       	push	r30
    bc36:	9b 01       	movw	r18, r22
    bc38:	ac 01       	movw	r20, r24
    bc3a:	30 df       	rcall	.-416    	; 0xba9c <__mulsf3>
    bc3c:	ef 91       	pop	r30
    bc3e:	ff 91       	pop	r31
    bc40:	7c de       	rcall	.-776    	; 0xb93a <__fp_powser>
    bc42:	2f 91       	pop	r18
    bc44:	3f 91       	pop	r19
    bc46:	4f 91       	pop	r20
    bc48:	5f 91       	pop	r21
    bc4a:	28 cf       	rjmp	.-432    	; 0xba9c <__mulsf3>

0000bc4c <__mulsi3>:
    bc4c:	db 01       	movw	r26, r22
    bc4e:	8f 93       	push	r24
    bc50:	9f 93       	push	r25
    bc52:	7f d0       	rcall	.+254    	; 0xbd52 <__muluhisi3>
    bc54:	bf 91       	pop	r27
    bc56:	af 91       	pop	r26
    bc58:	a2 9f       	mul	r26, r18
    bc5a:	80 0d       	add	r24, r0
    bc5c:	91 1d       	adc	r25, r1
    bc5e:	a3 9f       	mul	r26, r19
    bc60:	90 0d       	add	r25, r0
    bc62:	b2 9f       	mul	r27, r18
    bc64:	90 0d       	add	r25, r0
    bc66:	11 24       	eor	r1, r1
    bc68:	08 95       	ret

0000bc6a <__udivmodqi4>:
    bc6a:	99 1b       	sub	r25, r25
    bc6c:	79 e0       	ldi	r23, 0x09	; 9
    bc6e:	04 c0       	rjmp	.+8      	; 0xbc78 <__udivmodqi4_ep>

0000bc70 <__udivmodqi4_loop>:
    bc70:	99 1f       	adc	r25, r25
    bc72:	96 17       	cp	r25, r22
    bc74:	08 f0       	brcs	.+2      	; 0xbc78 <__udivmodqi4_ep>
    bc76:	96 1b       	sub	r25, r22

0000bc78 <__udivmodqi4_ep>:
    bc78:	88 1f       	adc	r24, r24
    bc7a:	7a 95       	dec	r23
    bc7c:	c9 f7       	brne	.-14     	; 0xbc70 <__udivmodqi4_loop>
    bc7e:	80 95       	com	r24
    bc80:	08 95       	ret

0000bc82 <__divmodhi4>:
    bc82:	97 fb       	bst	r25, 7
    bc84:	07 2e       	mov	r0, r23
    bc86:	16 f4       	brtc	.+4      	; 0xbc8c <__divmodhi4+0xa>
    bc88:	00 94       	com	r0
    bc8a:	06 d0       	rcall	.+12     	; 0xbc98 <__divmodhi4_neg1>
    bc8c:	77 fd       	sbrc	r23, 7
    bc8e:	08 d0       	rcall	.+16     	; 0xbca0 <__divmodhi4_neg2>
    bc90:	6a d0       	rcall	.+212    	; 0xbd66 <__udivmodhi4>
    bc92:	07 fc       	sbrc	r0, 7
    bc94:	05 d0       	rcall	.+10     	; 0xbca0 <__divmodhi4_neg2>
    bc96:	3e f4       	brtc	.+14     	; 0xbca6 <__divmodhi4_exit>

0000bc98 <__divmodhi4_neg1>:
    bc98:	90 95       	com	r25
    bc9a:	81 95       	neg	r24
    bc9c:	9f 4f       	sbci	r25, 0xFF	; 255
    bc9e:	08 95       	ret

0000bca0 <__divmodhi4_neg2>:
    bca0:	70 95       	com	r23
    bca2:	61 95       	neg	r22
    bca4:	7f 4f       	sbci	r23, 0xFF	; 255

0000bca6 <__divmodhi4_exit>:
    bca6:	08 95       	ret

0000bca8 <__udivmodsi4>:
    bca8:	a1 e2       	ldi	r26, 0x21	; 33
    bcaa:	1a 2e       	mov	r1, r26
    bcac:	aa 1b       	sub	r26, r26
    bcae:	bb 1b       	sub	r27, r27
    bcb0:	fd 01       	movw	r30, r26
    bcb2:	0d c0       	rjmp	.+26     	; 0xbcce <__udivmodsi4_ep>

0000bcb4 <__udivmodsi4_loop>:
    bcb4:	aa 1f       	adc	r26, r26
    bcb6:	bb 1f       	adc	r27, r27
    bcb8:	ee 1f       	adc	r30, r30
    bcba:	ff 1f       	adc	r31, r31
    bcbc:	a2 17       	cp	r26, r18
    bcbe:	b3 07       	cpc	r27, r19
    bcc0:	e4 07       	cpc	r30, r20
    bcc2:	f5 07       	cpc	r31, r21
    bcc4:	20 f0       	brcs	.+8      	; 0xbcce <__udivmodsi4_ep>
    bcc6:	a2 1b       	sub	r26, r18
    bcc8:	b3 0b       	sbc	r27, r19
    bcca:	e4 0b       	sbc	r30, r20
    bccc:	f5 0b       	sbc	r31, r21

0000bcce <__udivmodsi4_ep>:
    bcce:	66 1f       	adc	r22, r22
    bcd0:	77 1f       	adc	r23, r23
    bcd2:	88 1f       	adc	r24, r24
    bcd4:	99 1f       	adc	r25, r25
    bcd6:	1a 94       	dec	r1
    bcd8:	69 f7       	brne	.-38     	; 0xbcb4 <__udivmodsi4_loop>
    bcda:	60 95       	com	r22
    bcdc:	70 95       	com	r23
    bcde:	80 95       	com	r24
    bce0:	90 95       	com	r25
    bce2:	9b 01       	movw	r18, r22
    bce4:	ac 01       	movw	r20, r24
    bce6:	bd 01       	movw	r22, r26
    bce8:	cf 01       	movw	r24, r30
    bcea:	08 95       	ret

0000bcec <__divmodsi4>:
    bcec:	05 2e       	mov	r0, r21
    bcee:	97 fb       	bst	r25, 7
    bcf0:	16 f4       	brtc	.+4      	; 0xbcf6 <__divmodsi4+0xa>
    bcf2:	00 94       	com	r0
    bcf4:	0f d0       	rcall	.+30     	; 0xbd14 <__negsi2>
    bcf6:	57 fd       	sbrc	r21, 7
    bcf8:	05 d0       	rcall	.+10     	; 0xbd04 <__divmodsi4_neg2>
    bcfa:	d6 df       	rcall	.-84     	; 0xbca8 <__udivmodsi4>
    bcfc:	07 fc       	sbrc	r0, 7
    bcfe:	02 d0       	rcall	.+4      	; 0xbd04 <__divmodsi4_neg2>
    bd00:	46 f4       	brtc	.+16     	; 0xbd12 <__divmodsi4_exit>
    bd02:	08 c0       	rjmp	.+16     	; 0xbd14 <__negsi2>

0000bd04 <__divmodsi4_neg2>:
    bd04:	50 95       	com	r21
    bd06:	40 95       	com	r20
    bd08:	30 95       	com	r19
    bd0a:	21 95       	neg	r18
    bd0c:	3f 4f       	sbci	r19, 0xFF	; 255
    bd0e:	4f 4f       	sbci	r20, 0xFF	; 255
    bd10:	5f 4f       	sbci	r21, 0xFF	; 255

0000bd12 <__divmodsi4_exit>:
    bd12:	08 95       	ret

0000bd14 <__negsi2>:
    bd14:	90 95       	com	r25
    bd16:	80 95       	com	r24
    bd18:	70 95       	com	r23
    bd1a:	61 95       	neg	r22
    bd1c:	7f 4f       	sbci	r23, 0xFF	; 255
    bd1e:	8f 4f       	sbci	r24, 0xFF	; 255
    bd20:	9f 4f       	sbci	r25, 0xFF	; 255
    bd22:	08 95       	ret

0000bd24 <__tablejump2__>:
    bd24:	ee 0f       	add	r30, r30
    bd26:	ff 1f       	adc	r31, r31
    bd28:	88 1f       	adc	r24, r24
    bd2a:	8b bf       	out	0x3b, r24	; 59
    bd2c:	07 90       	elpm	r0, Z+
    bd2e:	f6 91       	elpm	r31, Z
    bd30:	e0 2d       	mov	r30, r0
    bd32:	19 94       	eijmp

0000bd34 <__umulhisi3>:
    bd34:	a2 9f       	mul	r26, r18
    bd36:	b0 01       	movw	r22, r0
    bd38:	b3 9f       	mul	r27, r19
    bd3a:	c0 01       	movw	r24, r0
    bd3c:	a3 9f       	mul	r26, r19
    bd3e:	70 0d       	add	r23, r0
    bd40:	81 1d       	adc	r24, r1
    bd42:	11 24       	eor	r1, r1
    bd44:	91 1d       	adc	r25, r1
    bd46:	b2 9f       	mul	r27, r18
    bd48:	70 0d       	add	r23, r0
    bd4a:	81 1d       	adc	r24, r1
    bd4c:	11 24       	eor	r1, r1
    bd4e:	91 1d       	adc	r25, r1
    bd50:	08 95       	ret

0000bd52 <__muluhisi3>:
    bd52:	f0 df       	rcall	.-32     	; 0xbd34 <__umulhisi3>
    bd54:	a5 9f       	mul	r26, r21
    bd56:	90 0d       	add	r25, r0
    bd58:	b4 9f       	mul	r27, r20
    bd5a:	90 0d       	add	r25, r0
    bd5c:	a4 9f       	mul	r26, r20
    bd5e:	80 0d       	add	r24, r0
    bd60:	91 1d       	adc	r25, r1
    bd62:	11 24       	eor	r1, r1
    bd64:	08 95       	ret

0000bd66 <__udivmodhi4>:
    bd66:	aa 1b       	sub	r26, r26
    bd68:	bb 1b       	sub	r27, r27
    bd6a:	51 e1       	ldi	r21, 0x11	; 17
    bd6c:	07 c0       	rjmp	.+14     	; 0xbd7c <__udivmodhi4_ep>

0000bd6e <__udivmodhi4_loop>:
    bd6e:	aa 1f       	adc	r26, r26
    bd70:	bb 1f       	adc	r27, r27
    bd72:	a6 17       	cp	r26, r22
    bd74:	b7 07       	cpc	r27, r23
    bd76:	10 f0       	brcs	.+4      	; 0xbd7c <__udivmodhi4_ep>
    bd78:	a6 1b       	sub	r26, r22
    bd7a:	b7 0b       	sbc	r27, r23

0000bd7c <__udivmodhi4_ep>:
    bd7c:	88 1f       	adc	r24, r24
    bd7e:	99 1f       	adc	r25, r25
    bd80:	5a 95       	dec	r21
    bd82:	a9 f7       	brne	.-22     	; 0xbd6e <__udivmodhi4_loop>
    bd84:	80 95       	com	r24
    bd86:	90 95       	com	r25
    bd88:	bc 01       	movw	r22, r24
    bd8a:	cd 01       	movw	r24, r26
    bd8c:	08 95       	ret

0000bd8e <dtostrf>:
    bd8e:	ef 92       	push	r14
    bd90:	0f 93       	push	r16
    bd92:	1f 93       	push	r17
    bd94:	cf 93       	push	r28
    bd96:	df 93       	push	r29
    bd98:	e8 01       	movw	r28, r16
    bd9a:	47 fd       	sbrc	r20, 7
    bd9c:	02 c0       	rjmp	.+4      	; 0xbda2 <dtostrf+0x14>
    bd9e:	34 e0       	ldi	r19, 0x04	; 4
    bda0:	01 c0       	rjmp	.+2      	; 0xbda4 <dtostrf+0x16>
    bda2:	34 e1       	ldi	r19, 0x14	; 20
    bda4:	04 2e       	mov	r0, r20
    bda6:	00 0c       	add	r0, r0
    bda8:	55 0b       	sbc	r21, r21
    bdaa:	57 ff       	sbrs	r21, 7
    bdac:	03 c0       	rjmp	.+6      	; 0xbdb4 <dtostrf+0x26>
    bdae:	51 95       	neg	r21
    bdb0:	41 95       	neg	r20
    bdb2:	51 09       	sbc	r21, r1
    bdb4:	e3 2e       	mov	r14, r19
    bdb6:	02 2f       	mov	r16, r18
    bdb8:	24 2f       	mov	r18, r20
    bdba:	ae 01       	movw	r20, r28
    bdbc:	d6 d4       	rcall	.+2476   	; 0xc76a <dtoa_prf>
    bdbe:	ce 01       	movw	r24, r28
    bdc0:	df 91       	pop	r29
    bdc2:	cf 91       	pop	r28
    bdc4:	1f 91       	pop	r17
    bdc6:	0f 91       	pop	r16
    bdc8:	ef 90       	pop	r14
    bdca:	08 95       	ret

0000bdcc <malloc>:
    bdcc:	0f 93       	push	r16
    bdce:	1f 93       	push	r17
    bdd0:	cf 93       	push	r28
    bdd2:	df 93       	push	r29
    bdd4:	82 30       	cpi	r24, 0x02	; 2
    bdd6:	91 05       	cpc	r25, r1
    bdd8:	10 f4       	brcc	.+4      	; 0xbdde <malloc+0x12>
    bdda:	82 e0       	ldi	r24, 0x02	; 2
    bddc:	90 e0       	ldi	r25, 0x00	; 0
    bdde:	e0 91 e3 15 	lds	r30, 0x15E3	; 0x8015e3 <__flp>
    bde2:	f0 91 e4 15 	lds	r31, 0x15E4	; 0x8015e4 <__flp+0x1>
    bde6:	20 e0       	ldi	r18, 0x00	; 0
    bde8:	30 e0       	ldi	r19, 0x00	; 0
    bdea:	a0 e0       	ldi	r26, 0x00	; 0
    bdec:	b0 e0       	ldi	r27, 0x00	; 0
    bdee:	30 97       	sbiw	r30, 0x00	; 0
    bdf0:	19 f1       	breq	.+70     	; 0xbe38 <malloc+0x6c>
    bdf2:	40 81       	ld	r20, Z
    bdf4:	51 81       	ldd	r21, Z+1	; 0x01
    bdf6:	02 81       	ldd	r16, Z+2	; 0x02
    bdf8:	13 81       	ldd	r17, Z+3	; 0x03
    bdfa:	48 17       	cp	r20, r24
    bdfc:	59 07       	cpc	r21, r25
    bdfe:	c8 f0       	brcs	.+50     	; 0xbe32 <malloc+0x66>
    be00:	84 17       	cp	r24, r20
    be02:	95 07       	cpc	r25, r21
    be04:	69 f4       	brne	.+26     	; 0xbe20 <malloc+0x54>
    be06:	10 97       	sbiw	r26, 0x00	; 0
    be08:	31 f0       	breq	.+12     	; 0xbe16 <malloc+0x4a>
    be0a:	12 96       	adiw	r26, 0x02	; 2
    be0c:	0c 93       	st	X, r16
    be0e:	12 97       	sbiw	r26, 0x02	; 2
    be10:	13 96       	adiw	r26, 0x03	; 3
    be12:	1c 93       	st	X, r17
    be14:	27 c0       	rjmp	.+78     	; 0xbe64 <malloc+0x98>
    be16:	00 93 e3 15 	sts	0x15E3, r16	; 0x8015e3 <__flp>
    be1a:	10 93 e4 15 	sts	0x15E4, r17	; 0x8015e4 <__flp+0x1>
    be1e:	22 c0       	rjmp	.+68     	; 0xbe64 <malloc+0x98>
    be20:	21 15       	cp	r18, r1
    be22:	31 05       	cpc	r19, r1
    be24:	19 f0       	breq	.+6      	; 0xbe2c <malloc+0x60>
    be26:	42 17       	cp	r20, r18
    be28:	53 07       	cpc	r21, r19
    be2a:	18 f4       	brcc	.+6      	; 0xbe32 <malloc+0x66>
    be2c:	9a 01       	movw	r18, r20
    be2e:	bd 01       	movw	r22, r26
    be30:	ef 01       	movw	r28, r30
    be32:	df 01       	movw	r26, r30
    be34:	f8 01       	movw	r30, r16
    be36:	db cf       	rjmp	.-74     	; 0xbdee <malloc+0x22>
    be38:	21 15       	cp	r18, r1
    be3a:	31 05       	cpc	r19, r1
    be3c:	f9 f0       	breq	.+62     	; 0xbe7c <malloc+0xb0>
    be3e:	28 1b       	sub	r18, r24
    be40:	39 0b       	sbc	r19, r25
    be42:	24 30       	cpi	r18, 0x04	; 4
    be44:	31 05       	cpc	r19, r1
    be46:	80 f4       	brcc	.+32     	; 0xbe68 <malloc+0x9c>
    be48:	8a 81       	ldd	r24, Y+2	; 0x02
    be4a:	9b 81       	ldd	r25, Y+3	; 0x03
    be4c:	61 15       	cp	r22, r1
    be4e:	71 05       	cpc	r23, r1
    be50:	21 f0       	breq	.+8      	; 0xbe5a <malloc+0x8e>
    be52:	fb 01       	movw	r30, r22
    be54:	93 83       	std	Z+3, r25	; 0x03
    be56:	82 83       	std	Z+2, r24	; 0x02
    be58:	04 c0       	rjmp	.+8      	; 0xbe62 <malloc+0x96>
    be5a:	90 93 e4 15 	sts	0x15E4, r25	; 0x8015e4 <__flp+0x1>
    be5e:	80 93 e3 15 	sts	0x15E3, r24	; 0x8015e3 <__flp>
    be62:	fe 01       	movw	r30, r28
    be64:	32 96       	adiw	r30, 0x02	; 2
    be66:	44 c0       	rjmp	.+136    	; 0xbef0 <malloc+0x124>
    be68:	fe 01       	movw	r30, r28
    be6a:	e2 0f       	add	r30, r18
    be6c:	f3 1f       	adc	r31, r19
    be6e:	81 93       	st	Z+, r24
    be70:	91 93       	st	Z+, r25
    be72:	22 50       	subi	r18, 0x02	; 2
    be74:	31 09       	sbc	r19, r1
    be76:	39 83       	std	Y+1, r19	; 0x01
    be78:	28 83       	st	Y, r18
    be7a:	3a c0       	rjmp	.+116    	; 0xbef0 <malloc+0x124>
    be7c:	20 91 e1 15 	lds	r18, 0x15E1	; 0x8015e1 <__brkval>
    be80:	30 91 e2 15 	lds	r19, 0x15E2	; 0x8015e2 <__brkval+0x1>
    be84:	23 2b       	or	r18, r19
    be86:	41 f4       	brne	.+16     	; 0xbe98 <malloc+0xcc>
    be88:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    be8c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    be90:	30 93 e2 15 	sts	0x15E2, r19	; 0x8015e2 <__brkval+0x1>
    be94:	20 93 e1 15 	sts	0x15E1, r18	; 0x8015e1 <__brkval>
    be98:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    be9c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    bea0:	21 15       	cp	r18, r1
    bea2:	31 05       	cpc	r19, r1
    bea4:	41 f4       	brne	.+16     	; 0xbeb6 <malloc+0xea>
    bea6:	2d b7       	in	r18, 0x3d	; 61
    bea8:	3e b7       	in	r19, 0x3e	; 62
    beaa:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    beae:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    beb2:	24 1b       	sub	r18, r20
    beb4:	35 0b       	sbc	r19, r21
    beb6:	e0 91 e1 15 	lds	r30, 0x15E1	; 0x8015e1 <__brkval>
    beba:	f0 91 e2 15 	lds	r31, 0x15E2	; 0x8015e2 <__brkval+0x1>
    bebe:	e2 17       	cp	r30, r18
    bec0:	f3 07       	cpc	r31, r19
    bec2:	a0 f4       	brcc	.+40     	; 0xbeec <malloc+0x120>
    bec4:	2e 1b       	sub	r18, r30
    bec6:	3f 0b       	sbc	r19, r31
    bec8:	28 17       	cp	r18, r24
    beca:	39 07       	cpc	r19, r25
    becc:	78 f0       	brcs	.+30     	; 0xbeec <malloc+0x120>
    bece:	ac 01       	movw	r20, r24
    bed0:	4e 5f       	subi	r20, 0xFE	; 254
    bed2:	5f 4f       	sbci	r21, 0xFF	; 255
    bed4:	24 17       	cp	r18, r20
    bed6:	35 07       	cpc	r19, r21
    bed8:	48 f0       	brcs	.+18     	; 0xbeec <malloc+0x120>
    beda:	4e 0f       	add	r20, r30
    bedc:	5f 1f       	adc	r21, r31
    bede:	50 93 e2 15 	sts	0x15E2, r21	; 0x8015e2 <__brkval+0x1>
    bee2:	40 93 e1 15 	sts	0x15E1, r20	; 0x8015e1 <__brkval>
    bee6:	81 93       	st	Z+, r24
    bee8:	91 93       	st	Z+, r25
    beea:	02 c0       	rjmp	.+4      	; 0xbef0 <malloc+0x124>
    beec:	e0 e0       	ldi	r30, 0x00	; 0
    beee:	f0 e0       	ldi	r31, 0x00	; 0
    bef0:	cf 01       	movw	r24, r30
    bef2:	df 91       	pop	r29
    bef4:	cf 91       	pop	r28
    bef6:	1f 91       	pop	r17
    bef8:	0f 91       	pop	r16
    befa:	08 95       	ret

0000befc <free>:
    befc:	cf 93       	push	r28
    befe:	df 93       	push	r29
    bf00:	00 97       	sbiw	r24, 0x00	; 0
    bf02:	09 f4       	brne	.+2      	; 0xbf06 <free+0xa>
    bf04:	81 c0       	rjmp	.+258    	; 0xc008 <free+0x10c>
    bf06:	fc 01       	movw	r30, r24
    bf08:	32 97       	sbiw	r30, 0x02	; 2
    bf0a:	13 82       	std	Z+3, r1	; 0x03
    bf0c:	12 82       	std	Z+2, r1	; 0x02
    bf0e:	a0 91 e3 15 	lds	r26, 0x15E3	; 0x8015e3 <__flp>
    bf12:	b0 91 e4 15 	lds	r27, 0x15E4	; 0x8015e4 <__flp+0x1>
    bf16:	10 97       	sbiw	r26, 0x00	; 0
    bf18:	81 f4       	brne	.+32     	; 0xbf3a <free+0x3e>
    bf1a:	20 81       	ld	r18, Z
    bf1c:	31 81       	ldd	r19, Z+1	; 0x01
    bf1e:	82 0f       	add	r24, r18
    bf20:	93 1f       	adc	r25, r19
    bf22:	20 91 e1 15 	lds	r18, 0x15E1	; 0x8015e1 <__brkval>
    bf26:	30 91 e2 15 	lds	r19, 0x15E2	; 0x8015e2 <__brkval+0x1>
    bf2a:	28 17       	cp	r18, r24
    bf2c:	39 07       	cpc	r19, r25
    bf2e:	51 f5       	brne	.+84     	; 0xbf84 <free+0x88>
    bf30:	f0 93 e2 15 	sts	0x15E2, r31	; 0x8015e2 <__brkval+0x1>
    bf34:	e0 93 e1 15 	sts	0x15E1, r30	; 0x8015e1 <__brkval>
    bf38:	67 c0       	rjmp	.+206    	; 0xc008 <free+0x10c>
    bf3a:	ed 01       	movw	r28, r26
    bf3c:	20 e0       	ldi	r18, 0x00	; 0
    bf3e:	30 e0       	ldi	r19, 0x00	; 0
    bf40:	ce 17       	cp	r28, r30
    bf42:	df 07       	cpc	r29, r31
    bf44:	40 f4       	brcc	.+16     	; 0xbf56 <free+0x5a>
    bf46:	4a 81       	ldd	r20, Y+2	; 0x02
    bf48:	5b 81       	ldd	r21, Y+3	; 0x03
    bf4a:	9e 01       	movw	r18, r28
    bf4c:	41 15       	cp	r20, r1
    bf4e:	51 05       	cpc	r21, r1
    bf50:	f1 f0       	breq	.+60     	; 0xbf8e <free+0x92>
    bf52:	ea 01       	movw	r28, r20
    bf54:	f5 cf       	rjmp	.-22     	; 0xbf40 <free+0x44>
    bf56:	d3 83       	std	Z+3, r29	; 0x03
    bf58:	c2 83       	std	Z+2, r28	; 0x02
    bf5a:	40 81       	ld	r20, Z
    bf5c:	51 81       	ldd	r21, Z+1	; 0x01
    bf5e:	84 0f       	add	r24, r20
    bf60:	95 1f       	adc	r25, r21
    bf62:	c8 17       	cp	r28, r24
    bf64:	d9 07       	cpc	r29, r25
    bf66:	59 f4       	brne	.+22     	; 0xbf7e <free+0x82>
    bf68:	88 81       	ld	r24, Y
    bf6a:	99 81       	ldd	r25, Y+1	; 0x01
    bf6c:	84 0f       	add	r24, r20
    bf6e:	95 1f       	adc	r25, r21
    bf70:	02 96       	adiw	r24, 0x02	; 2
    bf72:	91 83       	std	Z+1, r25	; 0x01
    bf74:	80 83       	st	Z, r24
    bf76:	8a 81       	ldd	r24, Y+2	; 0x02
    bf78:	9b 81       	ldd	r25, Y+3	; 0x03
    bf7a:	93 83       	std	Z+3, r25	; 0x03
    bf7c:	82 83       	std	Z+2, r24	; 0x02
    bf7e:	21 15       	cp	r18, r1
    bf80:	31 05       	cpc	r19, r1
    bf82:	29 f4       	brne	.+10     	; 0xbf8e <free+0x92>
    bf84:	f0 93 e4 15 	sts	0x15E4, r31	; 0x8015e4 <__flp+0x1>
    bf88:	e0 93 e3 15 	sts	0x15E3, r30	; 0x8015e3 <__flp>
    bf8c:	3d c0       	rjmp	.+122    	; 0xc008 <free+0x10c>
    bf8e:	e9 01       	movw	r28, r18
    bf90:	fb 83       	std	Y+3, r31	; 0x03
    bf92:	ea 83       	std	Y+2, r30	; 0x02
    bf94:	49 91       	ld	r20, Y+
    bf96:	59 91       	ld	r21, Y+
    bf98:	c4 0f       	add	r28, r20
    bf9a:	d5 1f       	adc	r29, r21
    bf9c:	ec 17       	cp	r30, r28
    bf9e:	fd 07       	cpc	r31, r29
    bfa0:	61 f4       	brne	.+24     	; 0xbfba <free+0xbe>
    bfa2:	80 81       	ld	r24, Z
    bfa4:	91 81       	ldd	r25, Z+1	; 0x01
    bfa6:	84 0f       	add	r24, r20
    bfa8:	95 1f       	adc	r25, r21
    bfaa:	02 96       	adiw	r24, 0x02	; 2
    bfac:	e9 01       	movw	r28, r18
    bfae:	99 83       	std	Y+1, r25	; 0x01
    bfb0:	88 83       	st	Y, r24
    bfb2:	82 81       	ldd	r24, Z+2	; 0x02
    bfb4:	93 81       	ldd	r25, Z+3	; 0x03
    bfb6:	9b 83       	std	Y+3, r25	; 0x03
    bfb8:	8a 83       	std	Y+2, r24	; 0x02
    bfba:	e0 e0       	ldi	r30, 0x00	; 0
    bfbc:	f0 e0       	ldi	r31, 0x00	; 0
    bfbe:	12 96       	adiw	r26, 0x02	; 2
    bfc0:	8d 91       	ld	r24, X+
    bfc2:	9c 91       	ld	r25, X
    bfc4:	13 97       	sbiw	r26, 0x03	; 3
    bfc6:	00 97       	sbiw	r24, 0x00	; 0
    bfc8:	19 f0       	breq	.+6      	; 0xbfd0 <free+0xd4>
    bfca:	fd 01       	movw	r30, r26
    bfcc:	dc 01       	movw	r26, r24
    bfce:	f7 cf       	rjmp	.-18     	; 0xbfbe <free+0xc2>
    bfd0:	8d 91       	ld	r24, X+
    bfd2:	9c 91       	ld	r25, X
    bfd4:	11 97       	sbiw	r26, 0x01	; 1
    bfd6:	9d 01       	movw	r18, r26
    bfd8:	2e 5f       	subi	r18, 0xFE	; 254
    bfda:	3f 4f       	sbci	r19, 0xFF	; 255
    bfdc:	82 0f       	add	r24, r18
    bfde:	93 1f       	adc	r25, r19
    bfe0:	20 91 e1 15 	lds	r18, 0x15E1	; 0x8015e1 <__brkval>
    bfe4:	30 91 e2 15 	lds	r19, 0x15E2	; 0x8015e2 <__brkval+0x1>
    bfe8:	28 17       	cp	r18, r24
    bfea:	39 07       	cpc	r19, r25
    bfec:	69 f4       	brne	.+26     	; 0xc008 <free+0x10c>
    bfee:	30 97       	sbiw	r30, 0x00	; 0
    bff0:	29 f4       	brne	.+10     	; 0xbffc <free+0x100>
    bff2:	10 92 e4 15 	sts	0x15E4, r1	; 0x8015e4 <__flp+0x1>
    bff6:	10 92 e3 15 	sts	0x15E3, r1	; 0x8015e3 <__flp>
    bffa:	02 c0       	rjmp	.+4      	; 0xc000 <free+0x104>
    bffc:	13 82       	std	Z+3, r1	; 0x03
    bffe:	12 82       	std	Z+2, r1	; 0x02
    c000:	b0 93 e2 15 	sts	0x15E2, r27	; 0x8015e2 <__brkval+0x1>
    c004:	a0 93 e1 15 	sts	0x15E1, r26	; 0x8015e1 <__brkval>
    c008:	df 91       	pop	r29
    c00a:	cf 91       	pop	r28
    c00c:	08 95       	ret

0000c00e <strtol>:
    c00e:	3f 92       	push	r3
    c010:	4f 92       	push	r4
    c012:	5f 92       	push	r5
    c014:	6f 92       	push	r6
    c016:	7f 92       	push	r7
    c018:	8f 92       	push	r8
    c01a:	9f 92       	push	r9
    c01c:	af 92       	push	r10
    c01e:	bf 92       	push	r11
    c020:	cf 92       	push	r12
    c022:	df 92       	push	r13
    c024:	ef 92       	push	r14
    c026:	ff 92       	push	r15
    c028:	0f 93       	push	r16
    c02a:	1f 93       	push	r17
    c02c:	cf 93       	push	r28
    c02e:	df 93       	push	r29
    c030:	5c 01       	movw	r10, r24
    c032:	6b 01       	movw	r12, r22
    c034:	7a 01       	movw	r14, r20
    c036:	61 15       	cp	r22, r1
    c038:	71 05       	cpc	r23, r1
    c03a:	19 f0       	breq	.+6      	; 0xc042 <strtol+0x34>
    c03c:	fb 01       	movw	r30, r22
    c03e:	91 83       	std	Z+1, r25	; 0x01
    c040:	80 83       	st	Z, r24
    c042:	e1 14       	cp	r14, r1
    c044:	f1 04       	cpc	r15, r1
    c046:	29 f0       	breq	.+10     	; 0xc052 <strtol+0x44>
    c048:	c7 01       	movw	r24, r14
    c04a:	02 97       	sbiw	r24, 0x02	; 2
    c04c:	83 97       	sbiw	r24, 0x23	; 35
    c04e:	08 f0       	brcs	.+2      	; 0xc052 <strtol+0x44>
    c050:	e2 c0       	rjmp	.+452    	; 0xc216 <strtol+0x208>
    c052:	e5 01       	movw	r28, r10
    c054:	21 96       	adiw	r28, 0x01	; 1
    c056:	f5 01       	movw	r30, r10
    c058:	10 81       	ld	r17, Z
    c05a:	81 2f       	mov	r24, r17
    c05c:	90 e0       	ldi	r25, 0x00	; 0
    c05e:	06 d1       	rcall	.+524    	; 0xc26c <isspace>
    c060:	89 2b       	or	r24, r25
    c062:	11 f0       	breq	.+4      	; 0xc068 <strtol+0x5a>
    c064:	5e 01       	movw	r10, r28
    c066:	f5 cf       	rjmp	.-22     	; 0xc052 <strtol+0x44>
    c068:	1d 32       	cpi	r17, 0x2D	; 45
    c06a:	29 f4       	brne	.+10     	; 0xc076 <strtol+0x68>
    c06c:	21 96       	adiw	r28, 0x01	; 1
    c06e:	f5 01       	movw	r30, r10
    c070:	11 81       	ldd	r17, Z+1	; 0x01
    c072:	01 e0       	ldi	r16, 0x01	; 1
    c074:	07 c0       	rjmp	.+14     	; 0xc084 <strtol+0x76>
    c076:	1b 32       	cpi	r17, 0x2B	; 43
    c078:	21 f4       	brne	.+8      	; 0xc082 <strtol+0x74>
    c07a:	e5 01       	movw	r28, r10
    c07c:	22 96       	adiw	r28, 0x02	; 2
    c07e:	f5 01       	movw	r30, r10
    c080:	11 81       	ldd	r17, Z+1	; 0x01
    c082:	00 e0       	ldi	r16, 0x00	; 0
    c084:	e1 14       	cp	r14, r1
    c086:	f1 04       	cpc	r15, r1
    c088:	09 f1       	breq	.+66     	; 0xc0cc <strtol+0xbe>
    c08a:	f0 e1       	ldi	r31, 0x10	; 16
    c08c:	ef 16       	cp	r14, r31
    c08e:	f1 04       	cpc	r15, r1
    c090:	29 f4       	brne	.+10     	; 0xc09c <strtol+0x8e>
    c092:	3e c0       	rjmp	.+124    	; 0xc110 <strtol+0x102>
    c094:	10 e3       	ldi	r17, 0x30	; 48
    c096:	e1 14       	cp	r14, r1
    c098:	f1 04       	cpc	r15, r1
    c09a:	21 f1       	breq	.+72     	; 0xc0e4 <strtol+0xd6>
    c09c:	28 e0       	ldi	r18, 0x08	; 8
    c09e:	e2 16       	cp	r14, r18
    c0a0:	f1 04       	cpc	r15, r1
    c0a2:	01 f1       	breq	.+64     	; 0xc0e4 <strtol+0xd6>
    c0a4:	54 f4       	brge	.+20     	; 0xc0ba <strtol+0xac>
    c0a6:	e2 e0       	ldi	r30, 0x02	; 2
    c0a8:	ee 16       	cp	r14, r30
    c0aa:	f1 04       	cpc	r15, r1
    c0ac:	21 f5       	brne	.+72     	; 0xc0f6 <strtol+0xe8>
    c0ae:	81 2c       	mov	r8, r1
    c0b0:	91 2c       	mov	r9, r1
    c0b2:	a1 2c       	mov	r10, r1
    c0b4:	b0 e4       	ldi	r27, 0x40	; 64
    c0b6:	bb 2e       	mov	r11, r27
    c0b8:	3d c0       	rjmp	.+122    	; 0xc134 <strtol+0x126>
    c0ba:	fa e0       	ldi	r31, 0x0A	; 10
    c0bc:	ef 16       	cp	r14, r31
    c0be:	f1 04       	cpc	r15, r1
    c0c0:	39 f0       	breq	.+14     	; 0xc0d0 <strtol+0xc2>
    c0c2:	20 e1       	ldi	r18, 0x10	; 16
    c0c4:	e2 16       	cp	r14, r18
    c0c6:	f1 04       	cpc	r15, r1
    c0c8:	b1 f4       	brne	.+44     	; 0xc0f6 <strtol+0xe8>
    c0ca:	2f c0       	rjmp	.+94     	; 0xc12a <strtol+0x11c>
    c0cc:	10 33       	cpi	r17, 0x30	; 48
    c0ce:	11 f1       	breq	.+68     	; 0xc114 <strtol+0x106>
    c0d0:	fa e0       	ldi	r31, 0x0A	; 10
    c0d2:	ef 2e       	mov	r14, r31
    c0d4:	f1 2c       	mov	r15, r1
    c0d6:	ac ec       	ldi	r26, 0xCC	; 204
    c0d8:	8a 2e       	mov	r8, r26
    c0da:	98 2c       	mov	r9, r8
    c0dc:	a8 2c       	mov	r10, r8
    c0de:	ac e0       	ldi	r26, 0x0C	; 12
    c0e0:	ba 2e       	mov	r11, r26
    c0e2:	28 c0       	rjmp	.+80     	; 0xc134 <strtol+0x126>
    c0e4:	78 e0       	ldi	r23, 0x08	; 8
    c0e6:	e7 2e       	mov	r14, r23
    c0e8:	f1 2c       	mov	r15, r1
    c0ea:	81 2c       	mov	r8, r1
    c0ec:	91 2c       	mov	r9, r1
    c0ee:	a1 2c       	mov	r10, r1
    c0f0:	e0 e1       	ldi	r30, 0x10	; 16
    c0f2:	be 2e       	mov	r11, r30
    c0f4:	1f c0       	rjmp	.+62     	; 0xc134 <strtol+0x126>
    c0f6:	60 e0       	ldi	r22, 0x00	; 0
    c0f8:	70 e0       	ldi	r23, 0x00	; 0
    c0fa:	80 e0       	ldi	r24, 0x00	; 0
    c0fc:	90 e8       	ldi	r25, 0x80	; 128
    c0fe:	97 01       	movw	r18, r14
    c100:	0f 2c       	mov	r0, r15
    c102:	00 0c       	add	r0, r0
    c104:	44 0b       	sbc	r20, r20
    c106:	55 0b       	sbc	r21, r21
    c108:	cf dd       	rcall	.-1122   	; 0xbca8 <__udivmodsi4>
    c10a:	49 01       	movw	r8, r18
    c10c:	5a 01       	movw	r10, r20
    c10e:	12 c0       	rjmp	.+36     	; 0xc134 <strtol+0x126>
    c110:	10 33       	cpi	r17, 0x30	; 48
    c112:	59 f4       	brne	.+22     	; 0xc12a <strtol+0x11c>
    c114:	88 81       	ld	r24, Y
    c116:	8f 7d       	andi	r24, 0xDF	; 223
    c118:	88 35       	cpi	r24, 0x58	; 88
    c11a:	09 f0       	breq	.+2      	; 0xc11e <strtol+0x110>
    c11c:	bb cf       	rjmp	.-138    	; 0xc094 <strtol+0x86>
    c11e:	19 81       	ldd	r17, Y+1	; 0x01
    c120:	22 96       	adiw	r28, 0x02	; 2
    c122:	02 60       	ori	r16, 0x02	; 2
    c124:	80 e1       	ldi	r24, 0x10	; 16
    c126:	e8 2e       	mov	r14, r24
    c128:	f1 2c       	mov	r15, r1
    c12a:	81 2c       	mov	r8, r1
    c12c:	91 2c       	mov	r9, r1
    c12e:	a1 2c       	mov	r10, r1
    c130:	68 e0       	ldi	r22, 0x08	; 8
    c132:	b6 2e       	mov	r11, r22
    c134:	40 e0       	ldi	r20, 0x00	; 0
    c136:	60 e0       	ldi	r22, 0x00	; 0
    c138:	70 e0       	ldi	r23, 0x00	; 0
    c13a:	cb 01       	movw	r24, r22
    c13c:	27 01       	movw	r4, r14
    c13e:	0f 2c       	mov	r0, r15
    c140:	00 0c       	add	r0, r0
    c142:	66 08       	sbc	r6, r6
    c144:	77 08       	sbc	r7, r7
    c146:	fe 01       	movw	r30, r28
    c148:	50 ed       	ldi	r21, 0xD0	; 208
    c14a:	35 2e       	mov	r3, r21
    c14c:	31 0e       	add	r3, r17
    c14e:	29 e0       	ldi	r18, 0x09	; 9
    c150:	23 15       	cp	r18, r3
    c152:	70 f4       	brcc	.+28     	; 0xc170 <strtol+0x162>
    c154:	2f eb       	ldi	r18, 0xBF	; 191
    c156:	21 0f       	add	r18, r17
    c158:	2a 31       	cpi	r18, 0x1A	; 26
    c15a:	18 f4       	brcc	.+6      	; 0xc162 <strtol+0x154>
    c15c:	39 ec       	ldi	r19, 0xC9	; 201
    c15e:	33 2e       	mov	r3, r19
    c160:	06 c0       	rjmp	.+12     	; 0xc16e <strtol+0x160>
    c162:	2f e9       	ldi	r18, 0x9F	; 159
    c164:	21 0f       	add	r18, r17
    c166:	2a 31       	cpi	r18, 0x1A	; 26
    c168:	10 f5       	brcc	.+68     	; 0xc1ae <strtol+0x1a0>
    c16a:	29 ea       	ldi	r18, 0xA9	; 169
    c16c:	32 2e       	mov	r3, r18
    c16e:	31 0e       	add	r3, r17
    c170:	23 2d       	mov	r18, r3
    c172:	30 e0       	ldi	r19, 0x00	; 0
    c174:	2e 15       	cp	r18, r14
    c176:	3f 05       	cpc	r19, r15
    c178:	d4 f4       	brge	.+52     	; 0xc1ae <strtol+0x1a0>
    c17a:	47 fd       	sbrc	r20, 7
    c17c:	15 c0       	rjmp	.+42     	; 0xc1a8 <strtol+0x19a>
    c17e:	86 16       	cp	r8, r22
    c180:	97 06       	cpc	r9, r23
    c182:	a8 06       	cpc	r10, r24
    c184:	b9 06       	cpc	r11, r25
    c186:	68 f0       	brcs	.+26     	; 0xc1a2 <strtol+0x194>
    c188:	a3 01       	movw	r20, r6
    c18a:	92 01       	movw	r18, r4
    c18c:	5f dd       	rcall	.-1346   	; 0xbc4c <__mulsi3>
    c18e:	63 0d       	add	r22, r3
    c190:	71 1d       	adc	r23, r1
    c192:	81 1d       	adc	r24, r1
    c194:	91 1d       	adc	r25, r1
    c196:	61 30       	cpi	r22, 0x01	; 1
    c198:	71 05       	cpc	r23, r1
    c19a:	81 05       	cpc	r24, r1
    c19c:	20 e8       	ldi	r18, 0x80	; 128
    c19e:	92 07       	cpc	r25, r18
    c1a0:	10 f0       	brcs	.+4      	; 0xc1a6 <strtol+0x198>
    c1a2:	4f ef       	ldi	r20, 0xFF	; 255
    c1a4:	01 c0       	rjmp	.+2      	; 0xc1a8 <strtol+0x19a>
    c1a6:	41 e0       	ldi	r20, 0x01	; 1
    c1a8:	21 96       	adiw	r28, 0x01	; 1
    c1aa:	10 81       	ld	r17, Z
    c1ac:	cc cf       	rjmp	.-104    	; 0xc146 <strtol+0x138>
    c1ae:	20 2f       	mov	r18, r16
    c1b0:	21 70       	andi	r18, 0x01	; 1
    c1b2:	c1 14       	cp	r12, r1
    c1b4:	d1 04       	cpc	r13, r1
    c1b6:	71 f0       	breq	.+28     	; 0xc1d4 <strtol+0x1c6>
    c1b8:	44 23       	and	r20, r20
    c1ba:	29 f0       	breq	.+10     	; 0xc1c6 <strtol+0x1b8>
    c1bc:	21 97       	sbiw	r28, 0x01	; 1
    c1be:	f6 01       	movw	r30, r12
    c1c0:	d1 83       	std	Z+1, r29	; 0x01
    c1c2:	c0 83       	st	Z, r28
    c1c4:	07 c0       	rjmp	.+14     	; 0xc1d4 <strtol+0x1c6>
    c1c6:	01 ff       	sbrs	r16, 1
    c1c8:	19 c0       	rjmp	.+50     	; 0xc1fc <strtol+0x1ee>
    c1ca:	22 97       	sbiw	r28, 0x02	; 2
    c1cc:	f6 01       	movw	r30, r12
    c1ce:	d1 83       	std	Z+1, r29	; 0x01
    c1d0:	c0 83       	st	Z, r28
    c1d2:	14 c0       	rjmp	.+40     	; 0xc1fc <strtol+0x1ee>
    c1d4:	47 ff       	sbrs	r20, 7
    c1d6:	12 c0       	rjmp	.+36     	; 0xc1fc <strtol+0x1ee>
    c1d8:	22 23       	and	r18, r18
    c1da:	29 f0       	breq	.+10     	; 0xc1e6 <strtol+0x1d8>
    c1dc:	60 e0       	ldi	r22, 0x00	; 0
    c1de:	70 e0       	ldi	r23, 0x00	; 0
    c1e0:	80 e0       	ldi	r24, 0x00	; 0
    c1e2:	90 e8       	ldi	r25, 0x80	; 128
    c1e4:	04 c0       	rjmp	.+8      	; 0xc1ee <strtol+0x1e0>
    c1e6:	6f ef       	ldi	r22, 0xFF	; 255
    c1e8:	7f ef       	ldi	r23, 0xFF	; 255
    c1ea:	8f ef       	ldi	r24, 0xFF	; 255
    c1ec:	9f e7       	ldi	r25, 0x7F	; 127
    c1ee:	22 e2       	ldi	r18, 0x22	; 34
    c1f0:	30 e0       	ldi	r19, 0x00	; 0
    c1f2:	30 93 e6 15 	sts	0x15E6, r19	; 0x8015e6 <errno+0x1>
    c1f6:	20 93 e5 15 	sts	0x15E5, r18	; 0x8015e5 <errno>
    c1fa:	09 c0       	rjmp	.+18     	; 0xc20e <strtol+0x200>
    c1fc:	22 23       	and	r18, r18
    c1fe:	81 f0       	breq	.+32     	; 0xc220 <strtol+0x212>
    c200:	90 95       	com	r25
    c202:	80 95       	com	r24
    c204:	70 95       	com	r23
    c206:	61 95       	neg	r22
    c208:	7f 4f       	sbci	r23, 0xFF	; 255
    c20a:	8f 4f       	sbci	r24, 0xFF	; 255
    c20c:	9f 4f       	sbci	r25, 0xFF	; 255
    c20e:	46 2f       	mov	r20, r22
    c210:	37 2f       	mov	r19, r23
    c212:	28 2f       	mov	r18, r24
    c214:	12 c0       	rjmp	.+36     	; 0xc23a <strtol+0x22c>
    c216:	40 e0       	ldi	r20, 0x00	; 0
    c218:	30 e0       	ldi	r19, 0x00	; 0
    c21a:	20 e0       	ldi	r18, 0x00	; 0
    c21c:	90 e0       	ldi	r25, 0x00	; 0
    c21e:	0d c0       	rjmp	.+26     	; 0xc23a <strtol+0x22c>
    c220:	97 ff       	sbrs	r25, 7
    c222:	f5 cf       	rjmp	.-22     	; 0xc20e <strtol+0x200>
    c224:	82 e2       	ldi	r24, 0x22	; 34
    c226:	90 e0       	ldi	r25, 0x00	; 0
    c228:	90 93 e6 15 	sts	0x15E6, r25	; 0x8015e6 <errno+0x1>
    c22c:	80 93 e5 15 	sts	0x15E5, r24	; 0x8015e5 <errno>
    c230:	6f ef       	ldi	r22, 0xFF	; 255
    c232:	7f ef       	ldi	r23, 0xFF	; 255
    c234:	8f ef       	ldi	r24, 0xFF	; 255
    c236:	9f e7       	ldi	r25, 0x7F	; 127
    c238:	ea cf       	rjmp	.-44     	; 0xc20e <strtol+0x200>
    c23a:	64 2f       	mov	r22, r20
    c23c:	73 2f       	mov	r23, r19
    c23e:	82 2f       	mov	r24, r18
    c240:	df 91       	pop	r29
    c242:	cf 91       	pop	r28
    c244:	1f 91       	pop	r17
    c246:	0f 91       	pop	r16
    c248:	ff 90       	pop	r15
    c24a:	ef 90       	pop	r14
    c24c:	df 90       	pop	r13
    c24e:	cf 90       	pop	r12
    c250:	bf 90       	pop	r11
    c252:	af 90       	pop	r10
    c254:	9f 90       	pop	r9
    c256:	8f 90       	pop	r8
    c258:	7f 90       	pop	r7
    c25a:	6f 90       	pop	r6
    c25c:	5f 90       	pop	r5
    c25e:	4f 90       	pop	r4
    c260:	3f 90       	pop	r3
    c262:	08 95       	ret

0000c264 <abort>:
    c264:	81 e0       	ldi	r24, 0x01	; 1
    c266:	90 e0       	ldi	r25, 0x00	; 0
    c268:	f8 94       	cli
    c26a:	a6 c5       	rjmp	.+2892   	; 0xcdb8 <_exit>

0000c26c <isspace>:
    c26c:	91 11       	cpse	r25, r1
    c26e:	cb c4       	rjmp	.+2454   	; 0xcc06 <__ctype_isfalse>
    c270:	80 32       	cpi	r24, 0x20	; 32
    c272:	19 f0       	breq	.+6      	; 0xc27a <isspace+0xe>
    c274:	89 50       	subi	r24, 0x09	; 9
    c276:	85 50       	subi	r24, 0x05	; 5
    c278:	d0 f7       	brcc	.-12     	; 0xc26e <isspace+0x2>
    c27a:	08 95       	ret

0000c27c <strcat>:
    c27c:	fb 01       	movw	r30, r22
    c27e:	dc 01       	movw	r26, r24
    c280:	0d 90       	ld	r0, X+
    c282:	00 20       	and	r0, r0
    c284:	e9 f7       	brne	.-6      	; 0xc280 <strcat+0x4>
    c286:	11 97       	sbiw	r26, 0x01	; 1
    c288:	01 90       	ld	r0, Z+
    c28a:	0d 92       	st	X+, r0
    c28c:	00 20       	and	r0, r0
    c28e:	e1 f7       	brne	.-8      	; 0xc288 <strcat+0xc>
    c290:	08 95       	ret

0000c292 <strcmp>:
    c292:	fb 01       	movw	r30, r22
    c294:	dc 01       	movw	r26, r24
    c296:	8d 91       	ld	r24, X+
    c298:	01 90       	ld	r0, Z+
    c29a:	80 19       	sub	r24, r0
    c29c:	01 10       	cpse	r0, r1
    c29e:	d9 f3       	breq	.-10     	; 0xc296 <strcmp+0x4>
    c2a0:	99 0b       	sbc	r25, r25
    c2a2:	08 95       	ret

0000c2a4 <strcpy>:
    c2a4:	fb 01       	movw	r30, r22
    c2a6:	dc 01       	movw	r26, r24
    c2a8:	01 90       	ld	r0, Z+
    c2aa:	0d 92       	st	X+, r0
    c2ac:	00 20       	and	r0, r0
    c2ae:	e1 f7       	brne	.-8      	; 0xc2a8 <strcpy+0x4>
    c2b0:	08 95       	ret

0000c2b2 <__itoa_ncheck>:
    c2b2:	bb 27       	eor	r27, r27
    c2b4:	4a 30       	cpi	r20, 0x0A	; 10
    c2b6:	31 f4       	brne	.+12     	; 0xc2c4 <__itoa_ncheck+0x12>
    c2b8:	99 23       	and	r25, r25
    c2ba:	22 f4       	brpl	.+8      	; 0xc2c4 <__itoa_ncheck+0x12>
    c2bc:	bd e2       	ldi	r27, 0x2D	; 45
    c2be:	90 95       	com	r25
    c2c0:	81 95       	neg	r24
    c2c2:	9f 4f       	sbci	r25, 0xFF	; 255
    c2c4:	01 c0       	rjmp	.+2      	; 0xc2c8 <__utoa_common>

0000c2c6 <__utoa_ncheck>:
    c2c6:	bb 27       	eor	r27, r27

0000c2c8 <__utoa_common>:
    c2c8:	fb 01       	movw	r30, r22
    c2ca:	55 27       	eor	r21, r21
    c2cc:	aa 27       	eor	r26, r26
    c2ce:	88 0f       	add	r24, r24
    c2d0:	99 1f       	adc	r25, r25
    c2d2:	aa 1f       	adc	r26, r26
    c2d4:	a4 17       	cp	r26, r20
    c2d6:	10 f0       	brcs	.+4      	; 0xc2dc <__utoa_common+0x14>
    c2d8:	a4 1b       	sub	r26, r20
    c2da:	83 95       	inc	r24
    c2dc:	50 51       	subi	r21, 0x10	; 16
    c2de:	b9 f7       	brne	.-18     	; 0xc2ce <__utoa_common+0x6>
    c2e0:	a0 5d       	subi	r26, 0xD0	; 208
    c2e2:	aa 33       	cpi	r26, 0x3A	; 58
    c2e4:	08 f0       	brcs	.+2      	; 0xc2e8 <__utoa_common+0x20>
    c2e6:	a9 5d       	subi	r26, 0xD9	; 217
    c2e8:	a1 93       	st	Z+, r26
    c2ea:	00 97       	sbiw	r24, 0x00	; 0
    c2ec:	79 f7       	brne	.-34     	; 0xc2cc <__utoa_common+0x4>
    c2ee:	b1 11       	cpse	r27, r1
    c2f0:	b1 93       	st	Z+, r27
    c2f2:	11 92       	st	Z+, r1
    c2f4:	cb 01       	movw	r24, r22
    c2f6:	a0 c4       	rjmp	.+2368   	; 0xcc38 <strrev>

0000c2f8 <snprintf>:
    c2f8:	0f 93       	push	r16
    c2fa:	1f 93       	push	r17
    c2fc:	cf 93       	push	r28
    c2fe:	df 93       	push	r29
    c300:	cd b7       	in	r28, 0x3d	; 61
    c302:	de b7       	in	r29, 0x3e	; 62
    c304:	2e 97       	sbiw	r28, 0x0e	; 14
    c306:	0f b6       	in	r0, 0x3f	; 63
    c308:	f8 94       	cli
    c30a:	de bf       	out	0x3e, r29	; 62
    c30c:	0f be       	out	0x3f, r0	; 63
    c30e:	cd bf       	out	0x3d, r28	; 61
    c310:	0e 89       	ldd	r16, Y+22	; 0x16
    c312:	1f 89       	ldd	r17, Y+23	; 0x17
    c314:	88 8d       	ldd	r24, Y+24	; 0x18
    c316:	99 8d       	ldd	r25, Y+25	; 0x19
    c318:	26 e0       	ldi	r18, 0x06	; 6
    c31a:	2c 83       	std	Y+4, r18	; 0x04
    c31c:	1a 83       	std	Y+2, r17	; 0x02
    c31e:	09 83       	std	Y+1, r16	; 0x01
    c320:	97 ff       	sbrs	r25, 7
    c322:	02 c0       	rjmp	.+4      	; 0xc328 <snprintf+0x30>
    c324:	80 e0       	ldi	r24, 0x00	; 0
    c326:	90 e8       	ldi	r25, 0x80	; 128
    c328:	01 97       	sbiw	r24, 0x01	; 1
    c32a:	9e 83       	std	Y+6, r25	; 0x06
    c32c:	8d 83       	std	Y+5, r24	; 0x05
    c32e:	ae 01       	movw	r20, r28
    c330:	44 5e       	subi	r20, 0xE4	; 228
    c332:	5f 4f       	sbci	r21, 0xFF	; 255
    c334:	6a 8d       	ldd	r22, Y+26	; 0x1a
    c336:	7b 8d       	ldd	r23, Y+27	; 0x1b
    c338:	ce 01       	movw	r24, r28
    c33a:	01 96       	adiw	r24, 0x01	; 1
    c33c:	19 d0       	rcall	.+50     	; 0xc370 <vfprintf>
    c33e:	4d 81       	ldd	r20, Y+5	; 0x05
    c340:	5e 81       	ldd	r21, Y+6	; 0x06
    c342:	57 fd       	sbrc	r21, 7
    c344:	0a c0       	rjmp	.+20     	; 0xc35a <snprintf+0x62>
    c346:	2f 81       	ldd	r18, Y+7	; 0x07
    c348:	38 85       	ldd	r19, Y+8	; 0x08
    c34a:	42 17       	cp	r20, r18
    c34c:	53 07       	cpc	r21, r19
    c34e:	0c f4       	brge	.+2      	; 0xc352 <snprintf+0x5a>
    c350:	9a 01       	movw	r18, r20
    c352:	f8 01       	movw	r30, r16
    c354:	e2 0f       	add	r30, r18
    c356:	f3 1f       	adc	r31, r19
    c358:	10 82       	st	Z, r1
    c35a:	2e 96       	adiw	r28, 0x0e	; 14
    c35c:	0f b6       	in	r0, 0x3f	; 63
    c35e:	f8 94       	cli
    c360:	de bf       	out	0x3e, r29	; 62
    c362:	0f be       	out	0x3f, r0	; 63
    c364:	cd bf       	out	0x3d, r28	; 61
    c366:	df 91       	pop	r29
    c368:	cf 91       	pop	r28
    c36a:	1f 91       	pop	r17
    c36c:	0f 91       	pop	r16
    c36e:	08 95       	ret

0000c370 <vfprintf>:
    c370:	2f 92       	push	r2
    c372:	3f 92       	push	r3
    c374:	4f 92       	push	r4
    c376:	5f 92       	push	r5
    c378:	6f 92       	push	r6
    c37a:	7f 92       	push	r7
    c37c:	8f 92       	push	r8
    c37e:	9f 92       	push	r9
    c380:	af 92       	push	r10
    c382:	bf 92       	push	r11
    c384:	cf 92       	push	r12
    c386:	df 92       	push	r13
    c388:	ef 92       	push	r14
    c38a:	ff 92       	push	r15
    c38c:	0f 93       	push	r16
    c38e:	1f 93       	push	r17
    c390:	cf 93       	push	r28
    c392:	df 93       	push	r29
    c394:	cd b7       	in	r28, 0x3d	; 61
    c396:	de b7       	in	r29, 0x3e	; 62
    c398:	2b 97       	sbiw	r28, 0x0b	; 11
    c39a:	0f b6       	in	r0, 0x3f	; 63
    c39c:	f8 94       	cli
    c39e:	de bf       	out	0x3e, r29	; 62
    c3a0:	0f be       	out	0x3f, r0	; 63
    c3a2:	cd bf       	out	0x3d, r28	; 61
    c3a4:	6c 01       	movw	r12, r24
    c3a6:	7b 01       	movw	r14, r22
    c3a8:	8a 01       	movw	r16, r20
    c3aa:	fc 01       	movw	r30, r24
    c3ac:	17 82       	std	Z+7, r1	; 0x07
    c3ae:	16 82       	std	Z+6, r1	; 0x06
    c3b0:	83 81       	ldd	r24, Z+3	; 0x03
    c3b2:	81 ff       	sbrs	r24, 1
    c3b4:	bf c1       	rjmp	.+894    	; 0xc734 <vfprintf+0x3c4>
    c3b6:	ce 01       	movw	r24, r28
    c3b8:	01 96       	adiw	r24, 0x01	; 1
    c3ba:	3c 01       	movw	r6, r24
    c3bc:	f6 01       	movw	r30, r12
    c3be:	93 81       	ldd	r25, Z+3	; 0x03
    c3c0:	f7 01       	movw	r30, r14
    c3c2:	93 fd       	sbrc	r25, 3
    c3c4:	85 91       	lpm	r24, Z+
    c3c6:	93 ff       	sbrs	r25, 3
    c3c8:	81 91       	ld	r24, Z+
    c3ca:	7f 01       	movw	r14, r30
    c3cc:	88 23       	and	r24, r24
    c3ce:	09 f4       	brne	.+2      	; 0xc3d2 <vfprintf+0x62>
    c3d0:	ad c1       	rjmp	.+858    	; 0xc72c <vfprintf+0x3bc>
    c3d2:	85 32       	cpi	r24, 0x25	; 37
    c3d4:	39 f4       	brne	.+14     	; 0xc3e4 <vfprintf+0x74>
    c3d6:	93 fd       	sbrc	r25, 3
    c3d8:	85 91       	lpm	r24, Z+
    c3da:	93 ff       	sbrs	r25, 3
    c3dc:	81 91       	ld	r24, Z+
    c3de:	7f 01       	movw	r14, r30
    c3e0:	85 32       	cpi	r24, 0x25	; 37
    c3e2:	21 f4       	brne	.+8      	; 0xc3ec <vfprintf+0x7c>
    c3e4:	b6 01       	movw	r22, r12
    c3e6:	90 e0       	ldi	r25, 0x00	; 0
    c3e8:	37 d4       	rcall	.+2158   	; 0xcc58 <fputc>
    c3ea:	e8 cf       	rjmp	.-48     	; 0xc3bc <vfprintf+0x4c>
    c3ec:	91 2c       	mov	r9, r1
    c3ee:	21 2c       	mov	r2, r1
    c3f0:	31 2c       	mov	r3, r1
    c3f2:	ff e1       	ldi	r31, 0x1F	; 31
    c3f4:	f3 15       	cp	r31, r3
    c3f6:	d8 f0       	brcs	.+54     	; 0xc42e <vfprintf+0xbe>
    c3f8:	8b 32       	cpi	r24, 0x2B	; 43
    c3fa:	79 f0       	breq	.+30     	; 0xc41a <vfprintf+0xaa>
    c3fc:	38 f4       	brcc	.+14     	; 0xc40c <vfprintf+0x9c>
    c3fe:	80 32       	cpi	r24, 0x20	; 32
    c400:	79 f0       	breq	.+30     	; 0xc420 <vfprintf+0xb0>
    c402:	83 32       	cpi	r24, 0x23	; 35
    c404:	a1 f4       	brne	.+40     	; 0xc42e <vfprintf+0xbe>
    c406:	23 2d       	mov	r18, r3
    c408:	20 61       	ori	r18, 0x10	; 16
    c40a:	1d c0       	rjmp	.+58     	; 0xc446 <vfprintf+0xd6>
    c40c:	8d 32       	cpi	r24, 0x2D	; 45
    c40e:	61 f0       	breq	.+24     	; 0xc428 <vfprintf+0xb8>
    c410:	80 33       	cpi	r24, 0x30	; 48
    c412:	69 f4       	brne	.+26     	; 0xc42e <vfprintf+0xbe>
    c414:	23 2d       	mov	r18, r3
    c416:	21 60       	ori	r18, 0x01	; 1
    c418:	16 c0       	rjmp	.+44     	; 0xc446 <vfprintf+0xd6>
    c41a:	83 2d       	mov	r24, r3
    c41c:	82 60       	ori	r24, 0x02	; 2
    c41e:	38 2e       	mov	r3, r24
    c420:	e3 2d       	mov	r30, r3
    c422:	e4 60       	ori	r30, 0x04	; 4
    c424:	3e 2e       	mov	r3, r30
    c426:	2a c0       	rjmp	.+84     	; 0xc47c <vfprintf+0x10c>
    c428:	f3 2d       	mov	r31, r3
    c42a:	f8 60       	ori	r31, 0x08	; 8
    c42c:	1d c0       	rjmp	.+58     	; 0xc468 <vfprintf+0xf8>
    c42e:	37 fc       	sbrc	r3, 7
    c430:	2d c0       	rjmp	.+90     	; 0xc48c <vfprintf+0x11c>
    c432:	20 ed       	ldi	r18, 0xD0	; 208
    c434:	28 0f       	add	r18, r24
    c436:	2a 30       	cpi	r18, 0x0A	; 10
    c438:	40 f0       	brcs	.+16     	; 0xc44a <vfprintf+0xda>
    c43a:	8e 32       	cpi	r24, 0x2E	; 46
    c43c:	b9 f4       	brne	.+46     	; 0xc46c <vfprintf+0xfc>
    c43e:	36 fc       	sbrc	r3, 6
    c440:	75 c1       	rjmp	.+746    	; 0xc72c <vfprintf+0x3bc>
    c442:	23 2d       	mov	r18, r3
    c444:	20 64       	ori	r18, 0x40	; 64
    c446:	32 2e       	mov	r3, r18
    c448:	19 c0       	rjmp	.+50     	; 0xc47c <vfprintf+0x10c>
    c44a:	36 fe       	sbrs	r3, 6
    c44c:	06 c0       	rjmp	.+12     	; 0xc45a <vfprintf+0xea>
    c44e:	8a e0       	ldi	r24, 0x0A	; 10
    c450:	98 9e       	mul	r9, r24
    c452:	20 0d       	add	r18, r0
    c454:	11 24       	eor	r1, r1
    c456:	92 2e       	mov	r9, r18
    c458:	11 c0       	rjmp	.+34     	; 0xc47c <vfprintf+0x10c>
    c45a:	ea e0       	ldi	r30, 0x0A	; 10
    c45c:	2e 9e       	mul	r2, r30
    c45e:	20 0d       	add	r18, r0
    c460:	11 24       	eor	r1, r1
    c462:	22 2e       	mov	r2, r18
    c464:	f3 2d       	mov	r31, r3
    c466:	f0 62       	ori	r31, 0x20	; 32
    c468:	3f 2e       	mov	r3, r31
    c46a:	08 c0       	rjmp	.+16     	; 0xc47c <vfprintf+0x10c>
    c46c:	8c 36       	cpi	r24, 0x6C	; 108
    c46e:	21 f4       	brne	.+8      	; 0xc478 <vfprintf+0x108>
    c470:	83 2d       	mov	r24, r3
    c472:	80 68       	ori	r24, 0x80	; 128
    c474:	38 2e       	mov	r3, r24
    c476:	02 c0       	rjmp	.+4      	; 0xc47c <vfprintf+0x10c>
    c478:	88 36       	cpi	r24, 0x68	; 104
    c47a:	41 f4       	brne	.+16     	; 0xc48c <vfprintf+0x11c>
    c47c:	f7 01       	movw	r30, r14
    c47e:	93 fd       	sbrc	r25, 3
    c480:	85 91       	lpm	r24, Z+
    c482:	93 ff       	sbrs	r25, 3
    c484:	81 91       	ld	r24, Z+
    c486:	7f 01       	movw	r14, r30
    c488:	81 11       	cpse	r24, r1
    c48a:	b3 cf       	rjmp	.-154    	; 0xc3f2 <vfprintf+0x82>
    c48c:	98 2f       	mov	r25, r24
    c48e:	9f 7d       	andi	r25, 0xDF	; 223
    c490:	95 54       	subi	r25, 0x45	; 69
    c492:	93 30       	cpi	r25, 0x03	; 3
    c494:	28 f4       	brcc	.+10     	; 0xc4a0 <vfprintf+0x130>
    c496:	0c 5f       	subi	r16, 0xFC	; 252
    c498:	1f 4f       	sbci	r17, 0xFF	; 255
    c49a:	9f e3       	ldi	r25, 0x3F	; 63
    c49c:	99 83       	std	Y+1, r25	; 0x01
    c49e:	0d c0       	rjmp	.+26     	; 0xc4ba <vfprintf+0x14a>
    c4a0:	83 36       	cpi	r24, 0x63	; 99
    c4a2:	31 f0       	breq	.+12     	; 0xc4b0 <vfprintf+0x140>
    c4a4:	83 37       	cpi	r24, 0x73	; 115
    c4a6:	71 f0       	breq	.+28     	; 0xc4c4 <vfprintf+0x154>
    c4a8:	83 35       	cpi	r24, 0x53	; 83
    c4aa:	09 f0       	breq	.+2      	; 0xc4ae <vfprintf+0x13e>
    c4ac:	55 c0       	rjmp	.+170    	; 0xc558 <vfprintf+0x1e8>
    c4ae:	20 c0       	rjmp	.+64     	; 0xc4f0 <vfprintf+0x180>
    c4b0:	f8 01       	movw	r30, r16
    c4b2:	80 81       	ld	r24, Z
    c4b4:	89 83       	std	Y+1, r24	; 0x01
    c4b6:	0e 5f       	subi	r16, 0xFE	; 254
    c4b8:	1f 4f       	sbci	r17, 0xFF	; 255
    c4ba:	88 24       	eor	r8, r8
    c4bc:	83 94       	inc	r8
    c4be:	91 2c       	mov	r9, r1
    c4c0:	53 01       	movw	r10, r6
    c4c2:	12 c0       	rjmp	.+36     	; 0xc4e8 <vfprintf+0x178>
    c4c4:	28 01       	movw	r4, r16
    c4c6:	f2 e0       	ldi	r31, 0x02	; 2
    c4c8:	4f 0e       	add	r4, r31
    c4ca:	51 1c       	adc	r5, r1
    c4cc:	f8 01       	movw	r30, r16
    c4ce:	a0 80       	ld	r10, Z
    c4d0:	b1 80       	ldd	r11, Z+1	; 0x01
    c4d2:	36 fe       	sbrs	r3, 6
    c4d4:	03 c0       	rjmp	.+6      	; 0xc4dc <vfprintf+0x16c>
    c4d6:	69 2d       	mov	r22, r9
    c4d8:	70 e0       	ldi	r23, 0x00	; 0
    c4da:	02 c0       	rjmp	.+4      	; 0xc4e0 <vfprintf+0x170>
    c4dc:	6f ef       	ldi	r22, 0xFF	; 255
    c4de:	7f ef       	ldi	r23, 0xFF	; 255
    c4e0:	c5 01       	movw	r24, r10
    c4e2:	9f d3       	rcall	.+1854   	; 0xcc22 <strnlen>
    c4e4:	4c 01       	movw	r8, r24
    c4e6:	82 01       	movw	r16, r4
    c4e8:	f3 2d       	mov	r31, r3
    c4ea:	ff 77       	andi	r31, 0x7F	; 127
    c4ec:	3f 2e       	mov	r3, r31
    c4ee:	15 c0       	rjmp	.+42     	; 0xc51a <vfprintf+0x1aa>
    c4f0:	28 01       	movw	r4, r16
    c4f2:	22 e0       	ldi	r18, 0x02	; 2
    c4f4:	42 0e       	add	r4, r18
    c4f6:	51 1c       	adc	r5, r1
    c4f8:	f8 01       	movw	r30, r16
    c4fa:	a0 80       	ld	r10, Z
    c4fc:	b1 80       	ldd	r11, Z+1	; 0x01
    c4fe:	36 fe       	sbrs	r3, 6
    c500:	03 c0       	rjmp	.+6      	; 0xc508 <vfprintf+0x198>
    c502:	69 2d       	mov	r22, r9
    c504:	70 e0       	ldi	r23, 0x00	; 0
    c506:	02 c0       	rjmp	.+4      	; 0xc50c <vfprintf+0x19c>
    c508:	6f ef       	ldi	r22, 0xFF	; 255
    c50a:	7f ef       	ldi	r23, 0xFF	; 255
    c50c:	c5 01       	movw	r24, r10
    c50e:	7e d3       	rcall	.+1788   	; 0xcc0c <strnlen_P>
    c510:	4c 01       	movw	r8, r24
    c512:	f3 2d       	mov	r31, r3
    c514:	f0 68       	ori	r31, 0x80	; 128
    c516:	3f 2e       	mov	r3, r31
    c518:	82 01       	movw	r16, r4
    c51a:	33 fc       	sbrc	r3, 3
    c51c:	19 c0       	rjmp	.+50     	; 0xc550 <vfprintf+0x1e0>
    c51e:	82 2d       	mov	r24, r2
    c520:	90 e0       	ldi	r25, 0x00	; 0
    c522:	88 16       	cp	r8, r24
    c524:	99 06       	cpc	r9, r25
    c526:	a0 f4       	brcc	.+40     	; 0xc550 <vfprintf+0x1e0>
    c528:	b6 01       	movw	r22, r12
    c52a:	80 e2       	ldi	r24, 0x20	; 32
    c52c:	90 e0       	ldi	r25, 0x00	; 0
    c52e:	94 d3       	rcall	.+1832   	; 0xcc58 <fputc>
    c530:	2a 94       	dec	r2
    c532:	f5 cf       	rjmp	.-22     	; 0xc51e <vfprintf+0x1ae>
    c534:	f5 01       	movw	r30, r10
    c536:	37 fc       	sbrc	r3, 7
    c538:	85 91       	lpm	r24, Z+
    c53a:	37 fe       	sbrs	r3, 7
    c53c:	81 91       	ld	r24, Z+
    c53e:	5f 01       	movw	r10, r30
    c540:	b6 01       	movw	r22, r12
    c542:	90 e0       	ldi	r25, 0x00	; 0
    c544:	89 d3       	rcall	.+1810   	; 0xcc58 <fputc>
    c546:	21 10       	cpse	r2, r1
    c548:	2a 94       	dec	r2
    c54a:	21 e0       	ldi	r18, 0x01	; 1
    c54c:	82 1a       	sub	r8, r18
    c54e:	91 08       	sbc	r9, r1
    c550:	81 14       	cp	r8, r1
    c552:	91 04       	cpc	r9, r1
    c554:	79 f7       	brne	.-34     	; 0xc534 <vfprintf+0x1c4>
    c556:	e1 c0       	rjmp	.+450    	; 0xc71a <vfprintf+0x3aa>
    c558:	84 36       	cpi	r24, 0x64	; 100
    c55a:	11 f0       	breq	.+4      	; 0xc560 <vfprintf+0x1f0>
    c55c:	89 36       	cpi	r24, 0x69	; 105
    c55e:	39 f5       	brne	.+78     	; 0xc5ae <vfprintf+0x23e>
    c560:	f8 01       	movw	r30, r16
    c562:	37 fe       	sbrs	r3, 7
    c564:	07 c0       	rjmp	.+14     	; 0xc574 <vfprintf+0x204>
    c566:	60 81       	ld	r22, Z
    c568:	71 81       	ldd	r23, Z+1	; 0x01
    c56a:	82 81       	ldd	r24, Z+2	; 0x02
    c56c:	93 81       	ldd	r25, Z+3	; 0x03
    c56e:	0c 5f       	subi	r16, 0xFC	; 252
    c570:	1f 4f       	sbci	r17, 0xFF	; 255
    c572:	08 c0       	rjmp	.+16     	; 0xc584 <vfprintf+0x214>
    c574:	60 81       	ld	r22, Z
    c576:	71 81       	ldd	r23, Z+1	; 0x01
    c578:	07 2e       	mov	r0, r23
    c57a:	00 0c       	add	r0, r0
    c57c:	88 0b       	sbc	r24, r24
    c57e:	99 0b       	sbc	r25, r25
    c580:	0e 5f       	subi	r16, 0xFE	; 254
    c582:	1f 4f       	sbci	r17, 0xFF	; 255
    c584:	f3 2d       	mov	r31, r3
    c586:	ff 76       	andi	r31, 0x6F	; 111
    c588:	3f 2e       	mov	r3, r31
    c58a:	97 ff       	sbrs	r25, 7
    c58c:	09 c0       	rjmp	.+18     	; 0xc5a0 <vfprintf+0x230>
    c58e:	90 95       	com	r25
    c590:	80 95       	com	r24
    c592:	70 95       	com	r23
    c594:	61 95       	neg	r22
    c596:	7f 4f       	sbci	r23, 0xFF	; 255
    c598:	8f 4f       	sbci	r24, 0xFF	; 255
    c59a:	9f 4f       	sbci	r25, 0xFF	; 255
    c59c:	f0 68       	ori	r31, 0x80	; 128
    c59e:	3f 2e       	mov	r3, r31
    c5a0:	2a e0       	ldi	r18, 0x0A	; 10
    c5a2:	30 e0       	ldi	r19, 0x00	; 0
    c5a4:	a3 01       	movw	r20, r6
    c5a6:	94 d3       	rcall	.+1832   	; 0xccd0 <__ultoa_invert>
    c5a8:	88 2e       	mov	r8, r24
    c5aa:	86 18       	sub	r8, r6
    c5ac:	44 c0       	rjmp	.+136    	; 0xc636 <vfprintf+0x2c6>
    c5ae:	85 37       	cpi	r24, 0x75	; 117
    c5b0:	31 f4       	brne	.+12     	; 0xc5be <vfprintf+0x24e>
    c5b2:	23 2d       	mov	r18, r3
    c5b4:	2f 7e       	andi	r18, 0xEF	; 239
    c5b6:	b2 2e       	mov	r11, r18
    c5b8:	2a e0       	ldi	r18, 0x0A	; 10
    c5ba:	30 e0       	ldi	r19, 0x00	; 0
    c5bc:	25 c0       	rjmp	.+74     	; 0xc608 <vfprintf+0x298>
    c5be:	93 2d       	mov	r25, r3
    c5c0:	99 7f       	andi	r25, 0xF9	; 249
    c5c2:	b9 2e       	mov	r11, r25
    c5c4:	8f 36       	cpi	r24, 0x6F	; 111
    c5c6:	c1 f0       	breq	.+48     	; 0xc5f8 <vfprintf+0x288>
    c5c8:	18 f4       	brcc	.+6      	; 0xc5d0 <vfprintf+0x260>
    c5ca:	88 35       	cpi	r24, 0x58	; 88
    c5cc:	79 f0       	breq	.+30     	; 0xc5ec <vfprintf+0x27c>
    c5ce:	ae c0       	rjmp	.+348    	; 0xc72c <vfprintf+0x3bc>
    c5d0:	80 37       	cpi	r24, 0x70	; 112
    c5d2:	19 f0       	breq	.+6      	; 0xc5da <vfprintf+0x26a>
    c5d4:	88 37       	cpi	r24, 0x78	; 120
    c5d6:	21 f0       	breq	.+8      	; 0xc5e0 <vfprintf+0x270>
    c5d8:	a9 c0       	rjmp	.+338    	; 0xc72c <vfprintf+0x3bc>
    c5da:	e9 2f       	mov	r30, r25
    c5dc:	e0 61       	ori	r30, 0x10	; 16
    c5de:	be 2e       	mov	r11, r30
    c5e0:	b4 fe       	sbrs	r11, 4
    c5e2:	0d c0       	rjmp	.+26     	; 0xc5fe <vfprintf+0x28e>
    c5e4:	fb 2d       	mov	r31, r11
    c5e6:	f4 60       	ori	r31, 0x04	; 4
    c5e8:	bf 2e       	mov	r11, r31
    c5ea:	09 c0       	rjmp	.+18     	; 0xc5fe <vfprintf+0x28e>
    c5ec:	34 fe       	sbrs	r3, 4
    c5ee:	0a c0       	rjmp	.+20     	; 0xc604 <vfprintf+0x294>
    c5f0:	29 2f       	mov	r18, r25
    c5f2:	26 60       	ori	r18, 0x06	; 6
    c5f4:	b2 2e       	mov	r11, r18
    c5f6:	06 c0       	rjmp	.+12     	; 0xc604 <vfprintf+0x294>
    c5f8:	28 e0       	ldi	r18, 0x08	; 8
    c5fa:	30 e0       	ldi	r19, 0x00	; 0
    c5fc:	05 c0       	rjmp	.+10     	; 0xc608 <vfprintf+0x298>
    c5fe:	20 e1       	ldi	r18, 0x10	; 16
    c600:	30 e0       	ldi	r19, 0x00	; 0
    c602:	02 c0       	rjmp	.+4      	; 0xc608 <vfprintf+0x298>
    c604:	20 e1       	ldi	r18, 0x10	; 16
    c606:	32 e0       	ldi	r19, 0x02	; 2
    c608:	f8 01       	movw	r30, r16
    c60a:	b7 fe       	sbrs	r11, 7
    c60c:	07 c0       	rjmp	.+14     	; 0xc61c <vfprintf+0x2ac>
    c60e:	60 81       	ld	r22, Z
    c610:	71 81       	ldd	r23, Z+1	; 0x01
    c612:	82 81       	ldd	r24, Z+2	; 0x02
    c614:	93 81       	ldd	r25, Z+3	; 0x03
    c616:	0c 5f       	subi	r16, 0xFC	; 252
    c618:	1f 4f       	sbci	r17, 0xFF	; 255
    c61a:	06 c0       	rjmp	.+12     	; 0xc628 <vfprintf+0x2b8>
    c61c:	60 81       	ld	r22, Z
    c61e:	71 81       	ldd	r23, Z+1	; 0x01
    c620:	80 e0       	ldi	r24, 0x00	; 0
    c622:	90 e0       	ldi	r25, 0x00	; 0
    c624:	0e 5f       	subi	r16, 0xFE	; 254
    c626:	1f 4f       	sbci	r17, 0xFF	; 255
    c628:	a3 01       	movw	r20, r6
    c62a:	52 d3       	rcall	.+1700   	; 0xccd0 <__ultoa_invert>
    c62c:	88 2e       	mov	r8, r24
    c62e:	86 18       	sub	r8, r6
    c630:	fb 2d       	mov	r31, r11
    c632:	ff 77       	andi	r31, 0x7F	; 127
    c634:	3f 2e       	mov	r3, r31
    c636:	36 fe       	sbrs	r3, 6
    c638:	0d c0       	rjmp	.+26     	; 0xc654 <vfprintf+0x2e4>
    c63a:	23 2d       	mov	r18, r3
    c63c:	2e 7f       	andi	r18, 0xFE	; 254
    c63e:	a2 2e       	mov	r10, r18
    c640:	89 14       	cp	r8, r9
    c642:	58 f4       	brcc	.+22     	; 0xc65a <vfprintf+0x2ea>
    c644:	34 fe       	sbrs	r3, 4
    c646:	0b c0       	rjmp	.+22     	; 0xc65e <vfprintf+0x2ee>
    c648:	32 fc       	sbrc	r3, 2
    c64a:	09 c0       	rjmp	.+18     	; 0xc65e <vfprintf+0x2ee>
    c64c:	83 2d       	mov	r24, r3
    c64e:	8e 7e       	andi	r24, 0xEE	; 238
    c650:	a8 2e       	mov	r10, r24
    c652:	05 c0       	rjmp	.+10     	; 0xc65e <vfprintf+0x2ee>
    c654:	b8 2c       	mov	r11, r8
    c656:	a3 2c       	mov	r10, r3
    c658:	03 c0       	rjmp	.+6      	; 0xc660 <vfprintf+0x2f0>
    c65a:	b8 2c       	mov	r11, r8
    c65c:	01 c0       	rjmp	.+2      	; 0xc660 <vfprintf+0x2f0>
    c65e:	b9 2c       	mov	r11, r9
    c660:	a4 fe       	sbrs	r10, 4
    c662:	0f c0       	rjmp	.+30     	; 0xc682 <vfprintf+0x312>
    c664:	fe 01       	movw	r30, r28
    c666:	e8 0d       	add	r30, r8
    c668:	f1 1d       	adc	r31, r1
    c66a:	80 81       	ld	r24, Z
    c66c:	80 33       	cpi	r24, 0x30	; 48
    c66e:	21 f4       	brne	.+8      	; 0xc678 <vfprintf+0x308>
    c670:	9a 2d       	mov	r25, r10
    c672:	99 7e       	andi	r25, 0xE9	; 233
    c674:	a9 2e       	mov	r10, r25
    c676:	09 c0       	rjmp	.+18     	; 0xc68a <vfprintf+0x31a>
    c678:	a2 fe       	sbrs	r10, 2
    c67a:	06 c0       	rjmp	.+12     	; 0xc688 <vfprintf+0x318>
    c67c:	b3 94       	inc	r11
    c67e:	b3 94       	inc	r11
    c680:	04 c0       	rjmp	.+8      	; 0xc68a <vfprintf+0x31a>
    c682:	8a 2d       	mov	r24, r10
    c684:	86 78       	andi	r24, 0x86	; 134
    c686:	09 f0       	breq	.+2      	; 0xc68a <vfprintf+0x31a>
    c688:	b3 94       	inc	r11
    c68a:	a3 fc       	sbrc	r10, 3
    c68c:	10 c0       	rjmp	.+32     	; 0xc6ae <vfprintf+0x33e>
    c68e:	a0 fe       	sbrs	r10, 0
    c690:	06 c0       	rjmp	.+12     	; 0xc69e <vfprintf+0x32e>
    c692:	b2 14       	cp	r11, r2
    c694:	80 f4       	brcc	.+32     	; 0xc6b6 <vfprintf+0x346>
    c696:	28 0c       	add	r2, r8
    c698:	92 2c       	mov	r9, r2
    c69a:	9b 18       	sub	r9, r11
    c69c:	0d c0       	rjmp	.+26     	; 0xc6b8 <vfprintf+0x348>
    c69e:	b2 14       	cp	r11, r2
    c6a0:	58 f4       	brcc	.+22     	; 0xc6b8 <vfprintf+0x348>
    c6a2:	b6 01       	movw	r22, r12
    c6a4:	80 e2       	ldi	r24, 0x20	; 32
    c6a6:	90 e0       	ldi	r25, 0x00	; 0
    c6a8:	d7 d2       	rcall	.+1454   	; 0xcc58 <fputc>
    c6aa:	b3 94       	inc	r11
    c6ac:	f8 cf       	rjmp	.-16     	; 0xc69e <vfprintf+0x32e>
    c6ae:	b2 14       	cp	r11, r2
    c6b0:	18 f4       	brcc	.+6      	; 0xc6b8 <vfprintf+0x348>
    c6b2:	2b 18       	sub	r2, r11
    c6b4:	02 c0       	rjmp	.+4      	; 0xc6ba <vfprintf+0x34a>
    c6b6:	98 2c       	mov	r9, r8
    c6b8:	21 2c       	mov	r2, r1
    c6ba:	a4 fe       	sbrs	r10, 4
    c6bc:	0f c0       	rjmp	.+30     	; 0xc6dc <vfprintf+0x36c>
    c6be:	b6 01       	movw	r22, r12
    c6c0:	80 e3       	ldi	r24, 0x30	; 48
    c6c2:	90 e0       	ldi	r25, 0x00	; 0
    c6c4:	c9 d2       	rcall	.+1426   	; 0xcc58 <fputc>
    c6c6:	a2 fe       	sbrs	r10, 2
    c6c8:	16 c0       	rjmp	.+44     	; 0xc6f6 <vfprintf+0x386>
    c6ca:	a1 fc       	sbrc	r10, 1
    c6cc:	03 c0       	rjmp	.+6      	; 0xc6d4 <vfprintf+0x364>
    c6ce:	88 e7       	ldi	r24, 0x78	; 120
    c6d0:	90 e0       	ldi	r25, 0x00	; 0
    c6d2:	02 c0       	rjmp	.+4      	; 0xc6d8 <vfprintf+0x368>
    c6d4:	88 e5       	ldi	r24, 0x58	; 88
    c6d6:	90 e0       	ldi	r25, 0x00	; 0
    c6d8:	b6 01       	movw	r22, r12
    c6da:	0c c0       	rjmp	.+24     	; 0xc6f4 <vfprintf+0x384>
    c6dc:	8a 2d       	mov	r24, r10
    c6de:	86 78       	andi	r24, 0x86	; 134
    c6e0:	51 f0       	breq	.+20     	; 0xc6f6 <vfprintf+0x386>
    c6e2:	a1 fe       	sbrs	r10, 1
    c6e4:	02 c0       	rjmp	.+4      	; 0xc6ea <vfprintf+0x37a>
    c6e6:	8b e2       	ldi	r24, 0x2B	; 43
    c6e8:	01 c0       	rjmp	.+2      	; 0xc6ec <vfprintf+0x37c>
    c6ea:	80 e2       	ldi	r24, 0x20	; 32
    c6ec:	a7 fc       	sbrc	r10, 7
    c6ee:	8d e2       	ldi	r24, 0x2D	; 45
    c6f0:	b6 01       	movw	r22, r12
    c6f2:	90 e0       	ldi	r25, 0x00	; 0
    c6f4:	b1 d2       	rcall	.+1378   	; 0xcc58 <fputc>
    c6f6:	89 14       	cp	r8, r9
    c6f8:	30 f4       	brcc	.+12     	; 0xc706 <vfprintf+0x396>
    c6fa:	b6 01       	movw	r22, r12
    c6fc:	80 e3       	ldi	r24, 0x30	; 48
    c6fe:	90 e0       	ldi	r25, 0x00	; 0
    c700:	ab d2       	rcall	.+1366   	; 0xcc58 <fputc>
    c702:	9a 94       	dec	r9
    c704:	f8 cf       	rjmp	.-16     	; 0xc6f6 <vfprintf+0x386>
    c706:	8a 94       	dec	r8
    c708:	f3 01       	movw	r30, r6
    c70a:	e8 0d       	add	r30, r8
    c70c:	f1 1d       	adc	r31, r1
    c70e:	80 81       	ld	r24, Z
    c710:	b6 01       	movw	r22, r12
    c712:	90 e0       	ldi	r25, 0x00	; 0
    c714:	a1 d2       	rcall	.+1346   	; 0xcc58 <fputc>
    c716:	81 10       	cpse	r8, r1
    c718:	f6 cf       	rjmp	.-20     	; 0xc706 <vfprintf+0x396>
    c71a:	22 20       	and	r2, r2
    c71c:	09 f4       	brne	.+2      	; 0xc720 <vfprintf+0x3b0>
    c71e:	4e ce       	rjmp	.-868    	; 0xc3bc <vfprintf+0x4c>
    c720:	b6 01       	movw	r22, r12
    c722:	80 e2       	ldi	r24, 0x20	; 32
    c724:	90 e0       	ldi	r25, 0x00	; 0
    c726:	98 d2       	rcall	.+1328   	; 0xcc58 <fputc>
    c728:	2a 94       	dec	r2
    c72a:	f7 cf       	rjmp	.-18     	; 0xc71a <vfprintf+0x3aa>
    c72c:	f6 01       	movw	r30, r12
    c72e:	86 81       	ldd	r24, Z+6	; 0x06
    c730:	97 81       	ldd	r25, Z+7	; 0x07
    c732:	02 c0       	rjmp	.+4      	; 0xc738 <vfprintf+0x3c8>
    c734:	8f ef       	ldi	r24, 0xFF	; 255
    c736:	9f ef       	ldi	r25, 0xFF	; 255
    c738:	2b 96       	adiw	r28, 0x0b	; 11
    c73a:	0f b6       	in	r0, 0x3f	; 63
    c73c:	f8 94       	cli
    c73e:	de bf       	out	0x3e, r29	; 62
    c740:	0f be       	out	0x3f, r0	; 63
    c742:	cd bf       	out	0x3d, r28	; 61
    c744:	df 91       	pop	r29
    c746:	cf 91       	pop	r28
    c748:	1f 91       	pop	r17
    c74a:	0f 91       	pop	r16
    c74c:	ff 90       	pop	r15
    c74e:	ef 90       	pop	r14
    c750:	df 90       	pop	r13
    c752:	cf 90       	pop	r12
    c754:	bf 90       	pop	r11
    c756:	af 90       	pop	r10
    c758:	9f 90       	pop	r9
    c75a:	8f 90       	pop	r8
    c75c:	7f 90       	pop	r7
    c75e:	6f 90       	pop	r6
    c760:	5f 90       	pop	r5
    c762:	4f 90       	pop	r4
    c764:	3f 90       	pop	r3
    c766:	2f 90       	pop	r2
    c768:	08 95       	ret

0000c76a <dtoa_prf>:
    c76a:	8f 92       	push	r8
    c76c:	9f 92       	push	r9
    c76e:	af 92       	push	r10
    c770:	bf 92       	push	r11
    c772:	cf 92       	push	r12
    c774:	df 92       	push	r13
    c776:	ef 92       	push	r14
    c778:	ff 92       	push	r15
    c77a:	0f 93       	push	r16
    c77c:	1f 93       	push	r17
    c77e:	cf 93       	push	r28
    c780:	df 93       	push	r29
    c782:	cd b7       	in	r28, 0x3d	; 61
    c784:	de b7       	in	r29, 0x3e	; 62
    c786:	29 97       	sbiw	r28, 0x09	; 9
    c788:	0f b6       	in	r0, 0x3f	; 63
    c78a:	f8 94       	cli
    c78c:	de bf       	out	0x3e, r29	; 62
    c78e:	0f be       	out	0x3f, r0	; 63
    c790:	cd bf       	out	0x3d, r28	; 61
    c792:	6a 01       	movw	r12, r20
    c794:	12 2f       	mov	r17, r18
    c796:	b0 2e       	mov	r11, r16
    c798:	2b e3       	ldi	r18, 0x3B	; 59
    c79a:	20 17       	cp	r18, r16
    c79c:	20 f0       	brcs	.+8      	; 0xc7a6 <dtoa_prf+0x3c>
    c79e:	ff 24       	eor	r15, r15
    c7a0:	f3 94       	inc	r15
    c7a2:	f0 0e       	add	r15, r16
    c7a4:	02 c0       	rjmp	.+4      	; 0xc7aa <dtoa_prf+0x40>
    c7a6:	2c e3       	ldi	r18, 0x3C	; 60
    c7a8:	f2 2e       	mov	r15, r18
    c7aa:	0f 2d       	mov	r16, r15
    c7ac:	27 e0       	ldi	r18, 0x07	; 7
    c7ae:	ae 01       	movw	r20, r28
    c7b0:	4f 5f       	subi	r20, 0xFF	; 255
    c7b2:	5f 4f       	sbci	r21, 0xFF	; 255
    c7b4:	50 d1       	rcall	.+672    	; 0xca56 <__ftoa_engine>
    c7b6:	bc 01       	movw	r22, r24
    c7b8:	49 81       	ldd	r20, Y+1	; 0x01
    c7ba:	84 2f       	mov	r24, r20
    c7bc:	89 70       	andi	r24, 0x09	; 9
    c7be:	81 30       	cpi	r24, 0x01	; 1
    c7c0:	31 f0       	breq	.+12     	; 0xc7ce <dtoa_prf+0x64>
    c7c2:	e1 fc       	sbrc	r14, 1
    c7c4:	06 c0       	rjmp	.+12     	; 0xc7d2 <dtoa_prf+0x68>
    c7c6:	e0 fe       	sbrs	r14, 0
    c7c8:	06 c0       	rjmp	.+12     	; 0xc7d6 <dtoa_prf+0x6c>
    c7ca:	90 e2       	ldi	r25, 0x20	; 32
    c7cc:	05 c0       	rjmp	.+10     	; 0xc7d8 <dtoa_prf+0x6e>
    c7ce:	9d e2       	ldi	r25, 0x2D	; 45
    c7d0:	03 c0       	rjmp	.+6      	; 0xc7d8 <dtoa_prf+0x6e>
    c7d2:	9b e2       	ldi	r25, 0x2B	; 43
    c7d4:	01 c0       	rjmp	.+2      	; 0xc7d8 <dtoa_prf+0x6e>
    c7d6:	90 e0       	ldi	r25, 0x00	; 0
    c7d8:	5e 2d       	mov	r21, r14
    c7da:	50 71       	andi	r21, 0x10	; 16
    c7dc:	43 ff       	sbrs	r20, 3
    c7de:	3c c0       	rjmp	.+120    	; 0xc858 <dtoa_prf+0xee>
    c7e0:	91 11       	cpse	r25, r1
    c7e2:	02 c0       	rjmp	.+4      	; 0xc7e8 <dtoa_prf+0x7e>
    c7e4:	83 e0       	ldi	r24, 0x03	; 3
    c7e6:	01 c0       	rjmp	.+2      	; 0xc7ea <dtoa_prf+0x80>
    c7e8:	84 e0       	ldi	r24, 0x04	; 4
    c7ea:	81 17       	cp	r24, r17
    c7ec:	18 f4       	brcc	.+6      	; 0xc7f4 <dtoa_prf+0x8a>
    c7ee:	21 2f       	mov	r18, r17
    c7f0:	28 1b       	sub	r18, r24
    c7f2:	01 c0       	rjmp	.+2      	; 0xc7f6 <dtoa_prf+0x8c>
    c7f4:	20 e0       	ldi	r18, 0x00	; 0
    c7f6:	51 11       	cpse	r21, r1
    c7f8:	0b c0       	rjmp	.+22     	; 0xc810 <dtoa_prf+0xa6>
    c7fa:	f6 01       	movw	r30, r12
    c7fc:	82 2f       	mov	r24, r18
    c7fe:	30 e2       	ldi	r19, 0x20	; 32
    c800:	88 23       	and	r24, r24
    c802:	19 f0       	breq	.+6      	; 0xc80a <dtoa_prf+0xa0>
    c804:	31 93       	st	Z+, r19
    c806:	81 50       	subi	r24, 0x01	; 1
    c808:	fb cf       	rjmp	.-10     	; 0xc800 <dtoa_prf+0x96>
    c80a:	c2 0e       	add	r12, r18
    c80c:	d1 1c       	adc	r13, r1
    c80e:	20 e0       	ldi	r18, 0x00	; 0
    c810:	99 23       	and	r25, r25
    c812:	29 f0       	breq	.+10     	; 0xc81e <dtoa_prf+0xb4>
    c814:	d6 01       	movw	r26, r12
    c816:	9c 93       	st	X, r25
    c818:	f6 01       	movw	r30, r12
    c81a:	31 96       	adiw	r30, 0x01	; 1
    c81c:	6f 01       	movw	r12, r30
    c81e:	c6 01       	movw	r24, r12
    c820:	03 96       	adiw	r24, 0x03	; 3
    c822:	e2 fe       	sbrs	r14, 2
    c824:	0a c0       	rjmp	.+20     	; 0xc83a <dtoa_prf+0xd0>
    c826:	3e e4       	ldi	r19, 0x4E	; 78
    c828:	d6 01       	movw	r26, r12
    c82a:	3c 93       	st	X, r19
    c82c:	41 e4       	ldi	r20, 0x41	; 65
    c82e:	11 96       	adiw	r26, 0x01	; 1
    c830:	4c 93       	st	X, r20
    c832:	11 97       	sbiw	r26, 0x01	; 1
    c834:	12 96       	adiw	r26, 0x02	; 2
    c836:	3c 93       	st	X, r19
    c838:	06 c0       	rjmp	.+12     	; 0xc846 <dtoa_prf+0xdc>
    c83a:	3e e6       	ldi	r19, 0x6E	; 110
    c83c:	f6 01       	movw	r30, r12
    c83e:	30 83       	st	Z, r19
    c840:	41 e6       	ldi	r20, 0x61	; 97
    c842:	41 83       	std	Z+1, r20	; 0x01
    c844:	32 83       	std	Z+2, r19	; 0x02
    c846:	fc 01       	movw	r30, r24
    c848:	32 2f       	mov	r19, r18
    c84a:	40 e2       	ldi	r20, 0x20	; 32
    c84c:	33 23       	and	r19, r19
    c84e:	09 f4       	brne	.+2      	; 0xc852 <dtoa_prf+0xe8>
    c850:	42 c0       	rjmp	.+132    	; 0xc8d6 <dtoa_prf+0x16c>
    c852:	41 93       	st	Z+, r20
    c854:	31 50       	subi	r19, 0x01	; 1
    c856:	fa cf       	rjmp	.-12     	; 0xc84c <dtoa_prf+0xe2>
    c858:	42 ff       	sbrs	r20, 2
    c85a:	44 c0       	rjmp	.+136    	; 0xc8e4 <dtoa_prf+0x17a>
    c85c:	91 11       	cpse	r25, r1
    c85e:	02 c0       	rjmp	.+4      	; 0xc864 <dtoa_prf+0xfa>
    c860:	83 e0       	ldi	r24, 0x03	; 3
    c862:	01 c0       	rjmp	.+2      	; 0xc866 <dtoa_prf+0xfc>
    c864:	84 e0       	ldi	r24, 0x04	; 4
    c866:	81 17       	cp	r24, r17
    c868:	18 f4       	brcc	.+6      	; 0xc870 <dtoa_prf+0x106>
    c86a:	21 2f       	mov	r18, r17
    c86c:	28 1b       	sub	r18, r24
    c86e:	01 c0       	rjmp	.+2      	; 0xc872 <dtoa_prf+0x108>
    c870:	20 e0       	ldi	r18, 0x00	; 0
    c872:	51 11       	cpse	r21, r1
    c874:	0b c0       	rjmp	.+22     	; 0xc88c <dtoa_prf+0x122>
    c876:	f6 01       	movw	r30, r12
    c878:	82 2f       	mov	r24, r18
    c87a:	30 e2       	ldi	r19, 0x20	; 32
    c87c:	88 23       	and	r24, r24
    c87e:	19 f0       	breq	.+6      	; 0xc886 <dtoa_prf+0x11c>
    c880:	31 93       	st	Z+, r19
    c882:	81 50       	subi	r24, 0x01	; 1
    c884:	fb cf       	rjmp	.-10     	; 0xc87c <dtoa_prf+0x112>
    c886:	c2 0e       	add	r12, r18
    c888:	d1 1c       	adc	r13, r1
    c88a:	20 e0       	ldi	r18, 0x00	; 0
    c88c:	99 23       	and	r25, r25
    c88e:	29 f0       	breq	.+10     	; 0xc89a <dtoa_prf+0x130>
    c890:	d6 01       	movw	r26, r12
    c892:	9c 93       	st	X, r25
    c894:	f6 01       	movw	r30, r12
    c896:	31 96       	adiw	r30, 0x01	; 1
    c898:	6f 01       	movw	r12, r30
    c89a:	c6 01       	movw	r24, r12
    c89c:	03 96       	adiw	r24, 0x03	; 3
    c89e:	e2 fe       	sbrs	r14, 2
    c8a0:	0b c0       	rjmp	.+22     	; 0xc8b8 <dtoa_prf+0x14e>
    c8a2:	39 e4       	ldi	r19, 0x49	; 73
    c8a4:	d6 01       	movw	r26, r12
    c8a6:	3c 93       	st	X, r19
    c8a8:	3e e4       	ldi	r19, 0x4E	; 78
    c8aa:	11 96       	adiw	r26, 0x01	; 1
    c8ac:	3c 93       	st	X, r19
    c8ae:	11 97       	sbiw	r26, 0x01	; 1
    c8b0:	36 e4       	ldi	r19, 0x46	; 70
    c8b2:	12 96       	adiw	r26, 0x02	; 2
    c8b4:	3c 93       	st	X, r19
    c8b6:	07 c0       	rjmp	.+14     	; 0xc8c6 <dtoa_prf+0x15c>
    c8b8:	39 e6       	ldi	r19, 0x69	; 105
    c8ba:	f6 01       	movw	r30, r12
    c8bc:	30 83       	st	Z, r19
    c8be:	3e e6       	ldi	r19, 0x6E	; 110
    c8c0:	31 83       	std	Z+1, r19	; 0x01
    c8c2:	36 e6       	ldi	r19, 0x66	; 102
    c8c4:	32 83       	std	Z+2, r19	; 0x02
    c8c6:	fc 01       	movw	r30, r24
    c8c8:	32 2f       	mov	r19, r18
    c8ca:	40 e2       	ldi	r20, 0x20	; 32
    c8cc:	33 23       	and	r19, r19
    c8ce:	19 f0       	breq	.+6      	; 0xc8d6 <dtoa_prf+0x16c>
    c8d0:	41 93       	st	Z+, r20
    c8d2:	31 50       	subi	r19, 0x01	; 1
    c8d4:	fb cf       	rjmp	.-10     	; 0xc8cc <dtoa_prf+0x162>
    c8d6:	fc 01       	movw	r30, r24
    c8d8:	e2 0f       	add	r30, r18
    c8da:	f1 1d       	adc	r31, r1
    c8dc:	10 82       	st	Z, r1
    c8de:	8e ef       	ldi	r24, 0xFE	; 254
    c8e0:	9f ef       	ldi	r25, 0xFF	; 255
    c8e2:	a6 c0       	rjmp	.+332    	; 0xca30 <dtoa_prf+0x2c6>
    c8e4:	21 e0       	ldi	r18, 0x01	; 1
    c8e6:	30 e0       	ldi	r19, 0x00	; 0
    c8e8:	91 11       	cpse	r25, r1
    c8ea:	02 c0       	rjmp	.+4      	; 0xc8f0 <dtoa_prf+0x186>
    c8ec:	20 e0       	ldi	r18, 0x00	; 0
    c8ee:	30 e0       	ldi	r19, 0x00	; 0
    c8f0:	16 16       	cp	r1, r22
    c8f2:	17 06       	cpc	r1, r23
    c8f4:	1c f4       	brge	.+6      	; 0xc8fc <dtoa_prf+0x192>
    c8f6:	fb 01       	movw	r30, r22
    c8f8:	31 96       	adiw	r30, 0x01	; 1
    c8fa:	02 c0       	rjmp	.+4      	; 0xc900 <dtoa_prf+0x196>
    c8fc:	e1 e0       	ldi	r30, 0x01	; 1
    c8fe:	f0 e0       	ldi	r31, 0x00	; 0
    c900:	2e 0f       	add	r18, r30
    c902:	3f 1f       	adc	r19, r31
    c904:	bb 20       	and	r11, r11
    c906:	21 f0       	breq	.+8      	; 0xc910 <dtoa_prf+0x1a6>
    c908:	eb 2d       	mov	r30, r11
    c90a:	f0 e0       	ldi	r31, 0x00	; 0
    c90c:	31 96       	adiw	r30, 0x01	; 1
    c90e:	02 c0       	rjmp	.+4      	; 0xc914 <dtoa_prf+0x1aa>
    c910:	e0 e0       	ldi	r30, 0x00	; 0
    c912:	f0 e0       	ldi	r31, 0x00	; 0
    c914:	2e 0f       	add	r18, r30
    c916:	3f 1f       	adc	r19, r31
    c918:	e1 2f       	mov	r30, r17
    c91a:	f0 e0       	ldi	r31, 0x00	; 0
    c91c:	2e 17       	cp	r18, r30
    c91e:	3f 07       	cpc	r19, r31
    c920:	1c f4       	brge	.+6      	; 0xc928 <dtoa_prf+0x1be>
    c922:	12 1b       	sub	r17, r18
    c924:	21 2f       	mov	r18, r17
    c926:	01 c0       	rjmp	.+2      	; 0xc92a <dtoa_prf+0x1c0>
    c928:	20 e0       	ldi	r18, 0x00	; 0
    c92a:	8e 2d       	mov	r24, r14
    c92c:	88 71       	andi	r24, 0x18	; 24
    c92e:	59 f4       	brne	.+22     	; 0xc946 <dtoa_prf+0x1dc>
    c930:	f6 01       	movw	r30, r12
    c932:	82 2f       	mov	r24, r18
    c934:	30 e2       	ldi	r19, 0x20	; 32
    c936:	88 23       	and	r24, r24
    c938:	19 f0       	breq	.+6      	; 0xc940 <dtoa_prf+0x1d6>
    c93a:	31 93       	st	Z+, r19
    c93c:	81 50       	subi	r24, 0x01	; 1
    c93e:	fb cf       	rjmp	.-10     	; 0xc936 <dtoa_prf+0x1cc>
    c940:	c2 0e       	add	r12, r18
    c942:	d1 1c       	adc	r13, r1
    c944:	20 e0       	ldi	r18, 0x00	; 0
    c946:	99 23       	and	r25, r25
    c948:	29 f0       	breq	.+10     	; 0xc954 <dtoa_prf+0x1ea>
    c94a:	d6 01       	movw	r26, r12
    c94c:	9c 93       	st	X, r25
    c94e:	f6 01       	movw	r30, r12
    c950:	31 96       	adiw	r30, 0x01	; 1
    c952:	6f 01       	movw	r12, r30
    c954:	51 11       	cpse	r21, r1
    c956:	0b c0       	rjmp	.+22     	; 0xc96e <dtoa_prf+0x204>
    c958:	f6 01       	movw	r30, r12
    c95a:	82 2f       	mov	r24, r18
    c95c:	90 e3       	ldi	r25, 0x30	; 48
    c95e:	88 23       	and	r24, r24
    c960:	19 f0       	breq	.+6      	; 0xc968 <dtoa_prf+0x1fe>
    c962:	91 93       	st	Z+, r25
    c964:	81 50       	subi	r24, 0x01	; 1
    c966:	fb cf       	rjmp	.-10     	; 0xc95e <dtoa_prf+0x1f4>
    c968:	c2 0e       	add	r12, r18
    c96a:	d1 1c       	adc	r13, r1
    c96c:	20 e0       	ldi	r18, 0x00	; 0
    c96e:	0f 2d       	mov	r16, r15
    c970:	06 0f       	add	r16, r22
    c972:	9a 81       	ldd	r25, Y+2	; 0x02
    c974:	34 2f       	mov	r19, r20
    c976:	30 71       	andi	r19, 0x10	; 16
    c978:	44 ff       	sbrs	r20, 4
    c97a:	03 c0       	rjmp	.+6      	; 0xc982 <dtoa_prf+0x218>
    c97c:	91 33       	cpi	r25, 0x31	; 49
    c97e:	09 f4       	brne	.+2      	; 0xc982 <dtoa_prf+0x218>
    c980:	01 50       	subi	r16, 0x01	; 1
    c982:	10 16       	cp	r1, r16
    c984:	24 f4       	brge	.+8      	; 0xc98e <dtoa_prf+0x224>
    c986:	09 30       	cpi	r16, 0x09	; 9
    c988:	18 f0       	brcs	.+6      	; 0xc990 <dtoa_prf+0x226>
    c98a:	08 e0       	ldi	r16, 0x08	; 8
    c98c:	01 c0       	rjmp	.+2      	; 0xc990 <dtoa_prf+0x226>
    c98e:	01 e0       	ldi	r16, 0x01	; 1
    c990:	ab 01       	movw	r20, r22
    c992:	77 ff       	sbrs	r23, 7
    c994:	02 c0       	rjmp	.+4      	; 0xc99a <dtoa_prf+0x230>
    c996:	40 e0       	ldi	r20, 0x00	; 0
    c998:	50 e0       	ldi	r21, 0x00	; 0
    c99a:	fb 01       	movw	r30, r22
    c99c:	e4 1b       	sub	r30, r20
    c99e:	f5 0b       	sbc	r31, r21
    c9a0:	a1 e0       	ldi	r26, 0x01	; 1
    c9a2:	b0 e0       	ldi	r27, 0x00	; 0
    c9a4:	ac 0f       	add	r26, r28
    c9a6:	bd 1f       	adc	r27, r29
    c9a8:	ea 0f       	add	r30, r26
    c9aa:	fb 1f       	adc	r31, r27
    c9ac:	8e e2       	ldi	r24, 0x2E	; 46
    c9ae:	a8 2e       	mov	r10, r24
    c9b0:	4b 01       	movw	r8, r22
    c9b2:	80 1a       	sub	r8, r16
    c9b4:	91 08       	sbc	r9, r1
    c9b6:	0b 2d       	mov	r16, r11
    c9b8:	10 e0       	ldi	r17, 0x00	; 0
    c9ba:	11 95       	neg	r17
    c9bc:	01 95       	neg	r16
    c9be:	11 09       	sbc	r17, r1
    c9c0:	4f 3f       	cpi	r20, 0xFF	; 255
    c9c2:	bf ef       	ldi	r27, 0xFF	; 255
    c9c4:	5b 07       	cpc	r21, r27
    c9c6:	21 f4       	brne	.+8      	; 0xc9d0 <dtoa_prf+0x266>
    c9c8:	d6 01       	movw	r26, r12
    c9ca:	ac 92       	st	X, r10
    c9cc:	11 96       	adiw	r26, 0x01	; 1
    c9ce:	6d 01       	movw	r12, r26
    c9d0:	64 17       	cp	r22, r20
    c9d2:	75 07       	cpc	r23, r21
    c9d4:	2c f0       	brlt	.+10     	; 0xc9e0 <dtoa_prf+0x276>
    c9d6:	84 16       	cp	r8, r20
    c9d8:	95 06       	cpc	r9, r21
    c9da:	14 f4       	brge	.+4      	; 0xc9e0 <dtoa_prf+0x276>
    c9dc:	81 81       	ldd	r24, Z+1	; 0x01
    c9de:	01 c0       	rjmp	.+2      	; 0xc9e2 <dtoa_prf+0x278>
    c9e0:	80 e3       	ldi	r24, 0x30	; 48
    c9e2:	41 50       	subi	r20, 0x01	; 1
    c9e4:	51 09       	sbc	r21, r1
    c9e6:	31 96       	adiw	r30, 0x01	; 1
    c9e8:	d6 01       	movw	r26, r12
    c9ea:	11 96       	adiw	r26, 0x01	; 1
    c9ec:	7d 01       	movw	r14, r26
    c9ee:	40 17       	cp	r20, r16
    c9f0:	51 07       	cpc	r21, r17
    c9f2:	24 f0       	brlt	.+8      	; 0xc9fc <dtoa_prf+0x292>
    c9f4:	d6 01       	movw	r26, r12
    c9f6:	8c 93       	st	X, r24
    c9f8:	67 01       	movw	r12, r14
    c9fa:	e2 cf       	rjmp	.-60     	; 0xc9c0 <dtoa_prf+0x256>
    c9fc:	64 17       	cp	r22, r20
    c9fe:	75 07       	cpc	r23, r21
    ca00:	39 f4       	brne	.+14     	; 0xca10 <dtoa_prf+0x2a6>
    ca02:	96 33       	cpi	r25, 0x36	; 54
    ca04:	20 f4       	brcc	.+8      	; 0xca0e <dtoa_prf+0x2a4>
    ca06:	95 33       	cpi	r25, 0x35	; 53
    ca08:	19 f4       	brne	.+6      	; 0xca10 <dtoa_prf+0x2a6>
    ca0a:	31 11       	cpse	r19, r1
    ca0c:	01 c0       	rjmp	.+2      	; 0xca10 <dtoa_prf+0x2a6>
    ca0e:	81 e3       	ldi	r24, 0x31	; 49
    ca10:	f6 01       	movw	r30, r12
    ca12:	80 83       	st	Z, r24
    ca14:	f7 01       	movw	r30, r14
    ca16:	82 2f       	mov	r24, r18
    ca18:	90 e2       	ldi	r25, 0x20	; 32
    ca1a:	88 23       	and	r24, r24
    ca1c:	19 f0       	breq	.+6      	; 0xca24 <dtoa_prf+0x2ba>
    ca1e:	91 93       	st	Z+, r25
    ca20:	81 50       	subi	r24, 0x01	; 1
    ca22:	fb cf       	rjmp	.-10     	; 0xca1a <dtoa_prf+0x2b0>
    ca24:	f7 01       	movw	r30, r14
    ca26:	e2 0f       	add	r30, r18
    ca28:	f1 1d       	adc	r31, r1
    ca2a:	10 82       	st	Z, r1
    ca2c:	80 e0       	ldi	r24, 0x00	; 0
    ca2e:	90 e0       	ldi	r25, 0x00	; 0
    ca30:	29 96       	adiw	r28, 0x09	; 9
    ca32:	0f b6       	in	r0, 0x3f	; 63
    ca34:	f8 94       	cli
    ca36:	de bf       	out	0x3e, r29	; 62
    ca38:	0f be       	out	0x3f, r0	; 63
    ca3a:	cd bf       	out	0x3d, r28	; 61
    ca3c:	df 91       	pop	r29
    ca3e:	cf 91       	pop	r28
    ca40:	1f 91       	pop	r17
    ca42:	0f 91       	pop	r16
    ca44:	ff 90       	pop	r15
    ca46:	ef 90       	pop	r14
    ca48:	df 90       	pop	r13
    ca4a:	cf 90       	pop	r12
    ca4c:	bf 90       	pop	r11
    ca4e:	af 90       	pop	r10
    ca50:	9f 90       	pop	r9
    ca52:	8f 90       	pop	r8
    ca54:	08 95       	ret

0000ca56 <__ftoa_engine>:
    ca56:	28 30       	cpi	r18, 0x08	; 8
    ca58:	08 f0       	brcs	.+2      	; 0xca5c <__ftoa_engine+0x6>
    ca5a:	27 e0       	ldi	r18, 0x07	; 7
    ca5c:	33 27       	eor	r19, r19
    ca5e:	da 01       	movw	r26, r20
    ca60:	99 0f       	add	r25, r25
    ca62:	31 1d       	adc	r19, r1
    ca64:	87 fd       	sbrc	r24, 7
    ca66:	91 60       	ori	r25, 0x01	; 1
    ca68:	00 96       	adiw	r24, 0x00	; 0
    ca6a:	61 05       	cpc	r22, r1
    ca6c:	71 05       	cpc	r23, r1
    ca6e:	39 f4       	brne	.+14     	; 0xca7e <__ftoa_engine+0x28>
    ca70:	32 60       	ori	r19, 0x02	; 2
    ca72:	2e 5f       	subi	r18, 0xFE	; 254
    ca74:	3d 93       	st	X+, r19
    ca76:	30 e3       	ldi	r19, 0x30	; 48
    ca78:	2a 95       	dec	r18
    ca7a:	e1 f7       	brne	.-8      	; 0xca74 <__ftoa_engine+0x1e>
    ca7c:	08 95       	ret
    ca7e:	9f 3f       	cpi	r25, 0xFF	; 255
    ca80:	30 f0       	brcs	.+12     	; 0xca8e <__ftoa_engine+0x38>
    ca82:	80 38       	cpi	r24, 0x80	; 128
    ca84:	71 05       	cpc	r23, r1
    ca86:	61 05       	cpc	r22, r1
    ca88:	09 f0       	breq	.+2      	; 0xca8c <__ftoa_engine+0x36>
    ca8a:	3c 5f       	subi	r19, 0xFC	; 252
    ca8c:	3c 5f       	subi	r19, 0xFC	; 252
    ca8e:	3d 93       	st	X+, r19
    ca90:	91 30       	cpi	r25, 0x01	; 1
    ca92:	08 f0       	brcs	.+2      	; 0xca96 <__ftoa_engine+0x40>
    ca94:	80 68       	ori	r24, 0x80	; 128
    ca96:	91 1d       	adc	r25, r1
    ca98:	df 93       	push	r29
    ca9a:	cf 93       	push	r28
    ca9c:	1f 93       	push	r17
    ca9e:	0f 93       	push	r16
    caa0:	ff 92       	push	r15
    caa2:	ef 92       	push	r14
    caa4:	19 2f       	mov	r17, r25
    caa6:	98 7f       	andi	r25, 0xF8	; 248
    caa8:	96 95       	lsr	r25
    caaa:	e9 2f       	mov	r30, r25
    caac:	96 95       	lsr	r25
    caae:	96 95       	lsr	r25
    cab0:	e9 0f       	add	r30, r25
    cab2:	ff 27       	eor	r31, r31
    cab4:	e2 55       	subi	r30, 0x52	; 82
    cab6:	fe 4f       	sbci	r31, 0xFE	; 254
    cab8:	99 27       	eor	r25, r25
    caba:	33 27       	eor	r19, r19
    cabc:	ee 24       	eor	r14, r14
    cabe:	ff 24       	eor	r15, r15
    cac0:	a7 01       	movw	r20, r14
    cac2:	e7 01       	movw	r28, r14
    cac4:	05 90       	lpm	r0, Z+
    cac6:	08 94       	sec
    cac8:	07 94       	ror	r0
    caca:	28 f4       	brcc	.+10     	; 0xcad6 <__ftoa_engine+0x80>
    cacc:	36 0f       	add	r19, r22
    cace:	e7 1e       	adc	r14, r23
    cad0:	f8 1e       	adc	r15, r24
    cad2:	49 1f       	adc	r20, r25
    cad4:	51 1d       	adc	r21, r1
    cad6:	66 0f       	add	r22, r22
    cad8:	77 1f       	adc	r23, r23
    cada:	88 1f       	adc	r24, r24
    cadc:	99 1f       	adc	r25, r25
    cade:	06 94       	lsr	r0
    cae0:	a1 f7       	brne	.-24     	; 0xcaca <__ftoa_engine+0x74>
    cae2:	05 90       	lpm	r0, Z+
    cae4:	07 94       	ror	r0
    cae6:	28 f4       	brcc	.+10     	; 0xcaf2 <__ftoa_engine+0x9c>
    cae8:	e7 0e       	add	r14, r23
    caea:	f8 1e       	adc	r15, r24
    caec:	49 1f       	adc	r20, r25
    caee:	56 1f       	adc	r21, r22
    caf0:	c1 1d       	adc	r28, r1
    caf2:	77 0f       	add	r23, r23
    caf4:	88 1f       	adc	r24, r24
    caf6:	99 1f       	adc	r25, r25
    caf8:	66 1f       	adc	r22, r22
    cafa:	06 94       	lsr	r0
    cafc:	a1 f7       	brne	.-24     	; 0xcae6 <__ftoa_engine+0x90>
    cafe:	05 90       	lpm	r0, Z+
    cb00:	07 94       	ror	r0
    cb02:	28 f4       	brcc	.+10     	; 0xcb0e <__ftoa_engine+0xb8>
    cb04:	f8 0e       	add	r15, r24
    cb06:	49 1f       	adc	r20, r25
    cb08:	56 1f       	adc	r21, r22
    cb0a:	c7 1f       	adc	r28, r23
    cb0c:	d1 1d       	adc	r29, r1
    cb0e:	88 0f       	add	r24, r24
    cb10:	99 1f       	adc	r25, r25
    cb12:	66 1f       	adc	r22, r22
    cb14:	77 1f       	adc	r23, r23
    cb16:	06 94       	lsr	r0
    cb18:	a1 f7       	brne	.-24     	; 0xcb02 <__ftoa_engine+0xac>
    cb1a:	05 90       	lpm	r0, Z+
    cb1c:	07 94       	ror	r0
    cb1e:	20 f4       	brcc	.+8      	; 0xcb28 <__ftoa_engine+0xd2>
    cb20:	49 0f       	add	r20, r25
    cb22:	56 1f       	adc	r21, r22
    cb24:	c7 1f       	adc	r28, r23
    cb26:	d8 1f       	adc	r29, r24
    cb28:	99 0f       	add	r25, r25
    cb2a:	66 1f       	adc	r22, r22
    cb2c:	77 1f       	adc	r23, r23
    cb2e:	88 1f       	adc	r24, r24
    cb30:	06 94       	lsr	r0
    cb32:	a9 f7       	brne	.-22     	; 0xcb1e <__ftoa_engine+0xc8>
    cb34:	84 91       	lpm	r24, Z
    cb36:	10 95       	com	r17
    cb38:	17 70       	andi	r17, 0x07	; 7
    cb3a:	41 f0       	breq	.+16     	; 0xcb4c <__ftoa_engine+0xf6>
    cb3c:	d6 95       	lsr	r29
    cb3e:	c7 95       	ror	r28
    cb40:	57 95       	ror	r21
    cb42:	47 95       	ror	r20
    cb44:	f7 94       	ror	r15
    cb46:	e7 94       	ror	r14
    cb48:	1a 95       	dec	r17
    cb4a:	c1 f7       	brne	.-16     	; 0xcb3c <__ftoa_engine+0xe6>
    cb4c:	e4 e5       	ldi	r30, 0x54	; 84
    cb4e:	f1 e0       	ldi	r31, 0x01	; 1
    cb50:	68 94       	set
    cb52:	15 90       	lpm	r1, Z+
    cb54:	15 91       	lpm	r17, Z+
    cb56:	35 91       	lpm	r19, Z+
    cb58:	65 91       	lpm	r22, Z+
    cb5a:	95 91       	lpm	r25, Z+
    cb5c:	05 90       	lpm	r0, Z+
    cb5e:	7f e2       	ldi	r23, 0x2F	; 47
    cb60:	73 95       	inc	r23
    cb62:	e1 18       	sub	r14, r1
    cb64:	f1 0a       	sbc	r15, r17
    cb66:	43 0b       	sbc	r20, r19
    cb68:	56 0b       	sbc	r21, r22
    cb6a:	c9 0b       	sbc	r28, r25
    cb6c:	d0 09       	sbc	r29, r0
    cb6e:	c0 f7       	brcc	.-16     	; 0xcb60 <__ftoa_engine+0x10a>
    cb70:	e1 0c       	add	r14, r1
    cb72:	f1 1e       	adc	r15, r17
    cb74:	43 1f       	adc	r20, r19
    cb76:	56 1f       	adc	r21, r22
    cb78:	c9 1f       	adc	r28, r25
    cb7a:	d0 1d       	adc	r29, r0
    cb7c:	7e f4       	brtc	.+30     	; 0xcb9c <__ftoa_engine+0x146>
    cb7e:	70 33       	cpi	r23, 0x30	; 48
    cb80:	11 f4       	brne	.+4      	; 0xcb86 <__ftoa_engine+0x130>
    cb82:	8a 95       	dec	r24
    cb84:	e6 cf       	rjmp	.-52     	; 0xcb52 <__ftoa_engine+0xfc>
    cb86:	e8 94       	clt
    cb88:	01 50       	subi	r16, 0x01	; 1
    cb8a:	30 f0       	brcs	.+12     	; 0xcb98 <__ftoa_engine+0x142>
    cb8c:	08 0f       	add	r16, r24
    cb8e:	0a f4       	brpl	.+2      	; 0xcb92 <__ftoa_engine+0x13c>
    cb90:	00 27       	eor	r16, r16
    cb92:	02 17       	cp	r16, r18
    cb94:	08 f4       	brcc	.+2      	; 0xcb98 <__ftoa_engine+0x142>
    cb96:	20 2f       	mov	r18, r16
    cb98:	23 95       	inc	r18
    cb9a:	02 2f       	mov	r16, r18
    cb9c:	7a 33       	cpi	r23, 0x3A	; 58
    cb9e:	28 f0       	brcs	.+10     	; 0xcbaa <__ftoa_engine+0x154>
    cba0:	79 e3       	ldi	r23, 0x39	; 57
    cba2:	7d 93       	st	X+, r23
    cba4:	2a 95       	dec	r18
    cba6:	e9 f7       	brne	.-6      	; 0xcba2 <__ftoa_engine+0x14c>
    cba8:	10 c0       	rjmp	.+32     	; 0xcbca <__ftoa_engine+0x174>
    cbaa:	7d 93       	st	X+, r23
    cbac:	2a 95       	dec	r18
    cbae:	89 f6       	brne	.-94     	; 0xcb52 <__ftoa_engine+0xfc>
    cbb0:	06 94       	lsr	r0
    cbb2:	97 95       	ror	r25
    cbb4:	67 95       	ror	r22
    cbb6:	37 95       	ror	r19
    cbb8:	17 95       	ror	r17
    cbba:	17 94       	ror	r1
    cbbc:	e1 18       	sub	r14, r1
    cbbe:	f1 0a       	sbc	r15, r17
    cbc0:	43 0b       	sbc	r20, r19
    cbc2:	56 0b       	sbc	r21, r22
    cbc4:	c9 0b       	sbc	r28, r25
    cbc6:	d0 09       	sbc	r29, r0
    cbc8:	98 f0       	brcs	.+38     	; 0xcbf0 <__ftoa_engine+0x19a>
    cbca:	23 95       	inc	r18
    cbcc:	7e 91       	ld	r23, -X
    cbce:	73 95       	inc	r23
    cbd0:	7a 33       	cpi	r23, 0x3A	; 58
    cbd2:	08 f0       	brcs	.+2      	; 0xcbd6 <__ftoa_engine+0x180>
    cbd4:	70 e3       	ldi	r23, 0x30	; 48
    cbd6:	7c 93       	st	X, r23
    cbd8:	20 13       	cpse	r18, r16
    cbda:	b8 f7       	brcc	.-18     	; 0xcbca <__ftoa_engine+0x174>
    cbdc:	7e 91       	ld	r23, -X
    cbde:	70 61       	ori	r23, 0x10	; 16
    cbe0:	7d 93       	st	X+, r23
    cbe2:	30 f0       	brcs	.+12     	; 0xcbf0 <__ftoa_engine+0x19a>
    cbe4:	83 95       	inc	r24
    cbe6:	71 e3       	ldi	r23, 0x31	; 49
    cbe8:	7d 93       	st	X+, r23
    cbea:	70 e3       	ldi	r23, 0x30	; 48
    cbec:	2a 95       	dec	r18
    cbee:	e1 f7       	brne	.-8      	; 0xcbe8 <__ftoa_engine+0x192>
    cbf0:	11 24       	eor	r1, r1
    cbf2:	ef 90       	pop	r14
    cbf4:	ff 90       	pop	r15
    cbf6:	0f 91       	pop	r16
    cbf8:	1f 91       	pop	r17
    cbfa:	cf 91       	pop	r28
    cbfc:	df 91       	pop	r29
    cbfe:	99 27       	eor	r25, r25
    cc00:	87 fd       	sbrc	r24, 7
    cc02:	90 95       	com	r25
    cc04:	08 95       	ret

0000cc06 <__ctype_isfalse>:
    cc06:	99 27       	eor	r25, r25
    cc08:	88 27       	eor	r24, r24

0000cc0a <__ctype_istrue>:
    cc0a:	08 95       	ret

0000cc0c <strnlen_P>:
    cc0c:	fc 01       	movw	r30, r24
    cc0e:	05 90       	lpm	r0, Z+
    cc10:	61 50       	subi	r22, 0x01	; 1
    cc12:	70 40       	sbci	r23, 0x00	; 0
    cc14:	01 10       	cpse	r0, r1
    cc16:	d8 f7       	brcc	.-10     	; 0xcc0e <strnlen_P+0x2>
    cc18:	80 95       	com	r24
    cc1a:	90 95       	com	r25
    cc1c:	8e 0f       	add	r24, r30
    cc1e:	9f 1f       	adc	r25, r31
    cc20:	08 95       	ret

0000cc22 <strnlen>:
    cc22:	fc 01       	movw	r30, r24
    cc24:	61 50       	subi	r22, 0x01	; 1
    cc26:	70 40       	sbci	r23, 0x00	; 0
    cc28:	01 90       	ld	r0, Z+
    cc2a:	01 10       	cpse	r0, r1
    cc2c:	d8 f7       	brcc	.-10     	; 0xcc24 <strnlen+0x2>
    cc2e:	80 95       	com	r24
    cc30:	90 95       	com	r25
    cc32:	8e 0f       	add	r24, r30
    cc34:	9f 1f       	adc	r25, r31
    cc36:	08 95       	ret

0000cc38 <strrev>:
    cc38:	dc 01       	movw	r26, r24
    cc3a:	fc 01       	movw	r30, r24
    cc3c:	67 2f       	mov	r22, r23
    cc3e:	71 91       	ld	r23, Z+
    cc40:	77 23       	and	r23, r23
    cc42:	e1 f7       	brne	.-8      	; 0xcc3c <strrev+0x4>
    cc44:	32 97       	sbiw	r30, 0x02	; 2
    cc46:	04 c0       	rjmp	.+8      	; 0xcc50 <strrev+0x18>
    cc48:	7c 91       	ld	r23, X
    cc4a:	6d 93       	st	X+, r22
    cc4c:	70 83       	st	Z, r23
    cc4e:	62 91       	ld	r22, -Z
    cc50:	ae 17       	cp	r26, r30
    cc52:	bf 07       	cpc	r27, r31
    cc54:	c8 f3       	brcs	.-14     	; 0xcc48 <strrev+0x10>
    cc56:	08 95       	ret

0000cc58 <fputc>:
    cc58:	0f 93       	push	r16
    cc5a:	1f 93       	push	r17
    cc5c:	cf 93       	push	r28
    cc5e:	df 93       	push	r29
    cc60:	fb 01       	movw	r30, r22
    cc62:	23 81       	ldd	r18, Z+3	; 0x03
    cc64:	21 fd       	sbrc	r18, 1
    cc66:	03 c0       	rjmp	.+6      	; 0xcc6e <fputc+0x16>
    cc68:	8f ef       	ldi	r24, 0xFF	; 255
    cc6a:	9f ef       	ldi	r25, 0xFF	; 255
    cc6c:	2c c0       	rjmp	.+88     	; 0xccc6 <fputc+0x6e>
    cc6e:	22 ff       	sbrs	r18, 2
    cc70:	16 c0       	rjmp	.+44     	; 0xcc9e <fputc+0x46>
    cc72:	46 81       	ldd	r20, Z+6	; 0x06
    cc74:	57 81       	ldd	r21, Z+7	; 0x07
    cc76:	24 81       	ldd	r18, Z+4	; 0x04
    cc78:	35 81       	ldd	r19, Z+5	; 0x05
    cc7a:	42 17       	cp	r20, r18
    cc7c:	53 07       	cpc	r21, r19
    cc7e:	44 f4       	brge	.+16     	; 0xcc90 <fputc+0x38>
    cc80:	a0 81       	ld	r26, Z
    cc82:	b1 81       	ldd	r27, Z+1	; 0x01
    cc84:	9d 01       	movw	r18, r26
    cc86:	2f 5f       	subi	r18, 0xFF	; 255
    cc88:	3f 4f       	sbci	r19, 0xFF	; 255
    cc8a:	31 83       	std	Z+1, r19	; 0x01
    cc8c:	20 83       	st	Z, r18
    cc8e:	8c 93       	st	X, r24
    cc90:	26 81       	ldd	r18, Z+6	; 0x06
    cc92:	37 81       	ldd	r19, Z+7	; 0x07
    cc94:	2f 5f       	subi	r18, 0xFF	; 255
    cc96:	3f 4f       	sbci	r19, 0xFF	; 255
    cc98:	37 83       	std	Z+7, r19	; 0x07
    cc9a:	26 83       	std	Z+6, r18	; 0x06
    cc9c:	14 c0       	rjmp	.+40     	; 0xccc6 <fputc+0x6e>
    cc9e:	8b 01       	movw	r16, r22
    cca0:	ec 01       	movw	r28, r24
    cca2:	fb 01       	movw	r30, r22
    cca4:	00 84       	ldd	r0, Z+8	; 0x08
    cca6:	f1 85       	ldd	r31, Z+9	; 0x09
    cca8:	e0 2d       	mov	r30, r0
    ccaa:	19 95       	eicall
    ccac:	89 2b       	or	r24, r25
    ccae:	e1 f6       	brne	.-72     	; 0xcc68 <fputc+0x10>
    ccb0:	d8 01       	movw	r26, r16
    ccb2:	16 96       	adiw	r26, 0x06	; 6
    ccb4:	8d 91       	ld	r24, X+
    ccb6:	9c 91       	ld	r25, X
    ccb8:	17 97       	sbiw	r26, 0x07	; 7
    ccba:	01 96       	adiw	r24, 0x01	; 1
    ccbc:	17 96       	adiw	r26, 0x07	; 7
    ccbe:	9c 93       	st	X, r25
    ccc0:	8e 93       	st	-X, r24
    ccc2:	16 97       	sbiw	r26, 0x06	; 6
    ccc4:	ce 01       	movw	r24, r28
    ccc6:	df 91       	pop	r29
    ccc8:	cf 91       	pop	r28
    ccca:	1f 91       	pop	r17
    cccc:	0f 91       	pop	r16
    ccce:	08 95       	ret

0000ccd0 <__ultoa_invert>:
    ccd0:	fa 01       	movw	r30, r20
    ccd2:	aa 27       	eor	r26, r26
    ccd4:	28 30       	cpi	r18, 0x08	; 8
    ccd6:	51 f1       	breq	.+84     	; 0xcd2c <__ultoa_invert+0x5c>
    ccd8:	20 31       	cpi	r18, 0x10	; 16
    ccda:	81 f1       	breq	.+96     	; 0xcd3c <__ultoa_invert+0x6c>
    ccdc:	e8 94       	clt
    ccde:	6f 93       	push	r22
    cce0:	6e 7f       	andi	r22, 0xFE	; 254
    cce2:	6e 5f       	subi	r22, 0xFE	; 254
    cce4:	7f 4f       	sbci	r23, 0xFF	; 255
    cce6:	8f 4f       	sbci	r24, 0xFF	; 255
    cce8:	9f 4f       	sbci	r25, 0xFF	; 255
    ccea:	af 4f       	sbci	r26, 0xFF	; 255
    ccec:	b1 e0       	ldi	r27, 0x01	; 1
    ccee:	3e d0       	rcall	.+124    	; 0xcd6c <__ultoa_invert+0x9c>
    ccf0:	b4 e0       	ldi	r27, 0x04	; 4
    ccf2:	3c d0       	rcall	.+120    	; 0xcd6c <__ultoa_invert+0x9c>
    ccf4:	67 0f       	add	r22, r23
    ccf6:	78 1f       	adc	r23, r24
    ccf8:	89 1f       	adc	r24, r25
    ccfa:	9a 1f       	adc	r25, r26
    ccfc:	a1 1d       	adc	r26, r1
    ccfe:	68 0f       	add	r22, r24
    cd00:	79 1f       	adc	r23, r25
    cd02:	8a 1f       	adc	r24, r26
    cd04:	91 1d       	adc	r25, r1
    cd06:	a1 1d       	adc	r26, r1
    cd08:	6a 0f       	add	r22, r26
    cd0a:	71 1d       	adc	r23, r1
    cd0c:	81 1d       	adc	r24, r1
    cd0e:	91 1d       	adc	r25, r1
    cd10:	a1 1d       	adc	r26, r1
    cd12:	20 d0       	rcall	.+64     	; 0xcd54 <__ultoa_invert+0x84>
    cd14:	09 f4       	brne	.+2      	; 0xcd18 <__ultoa_invert+0x48>
    cd16:	68 94       	set
    cd18:	3f 91       	pop	r19
    cd1a:	2a e0       	ldi	r18, 0x0A	; 10
    cd1c:	26 9f       	mul	r18, r22
    cd1e:	11 24       	eor	r1, r1
    cd20:	30 19       	sub	r19, r0
    cd22:	30 5d       	subi	r19, 0xD0	; 208
    cd24:	31 93       	st	Z+, r19
    cd26:	de f6       	brtc	.-74     	; 0xccde <__ultoa_invert+0xe>
    cd28:	cf 01       	movw	r24, r30
    cd2a:	08 95       	ret
    cd2c:	46 2f       	mov	r20, r22
    cd2e:	47 70       	andi	r20, 0x07	; 7
    cd30:	40 5d       	subi	r20, 0xD0	; 208
    cd32:	41 93       	st	Z+, r20
    cd34:	b3 e0       	ldi	r27, 0x03	; 3
    cd36:	0f d0       	rcall	.+30     	; 0xcd56 <__ultoa_invert+0x86>
    cd38:	c9 f7       	brne	.-14     	; 0xcd2c <__ultoa_invert+0x5c>
    cd3a:	f6 cf       	rjmp	.-20     	; 0xcd28 <__ultoa_invert+0x58>
    cd3c:	46 2f       	mov	r20, r22
    cd3e:	4f 70       	andi	r20, 0x0F	; 15
    cd40:	40 5d       	subi	r20, 0xD0	; 208
    cd42:	4a 33       	cpi	r20, 0x3A	; 58
    cd44:	18 f0       	brcs	.+6      	; 0xcd4c <__ultoa_invert+0x7c>
    cd46:	49 5d       	subi	r20, 0xD9	; 217
    cd48:	31 fd       	sbrc	r19, 1
    cd4a:	40 52       	subi	r20, 0x20	; 32
    cd4c:	41 93       	st	Z+, r20
    cd4e:	02 d0       	rcall	.+4      	; 0xcd54 <__ultoa_invert+0x84>
    cd50:	a9 f7       	brne	.-22     	; 0xcd3c <__ultoa_invert+0x6c>
    cd52:	ea cf       	rjmp	.-44     	; 0xcd28 <__ultoa_invert+0x58>
    cd54:	b4 e0       	ldi	r27, 0x04	; 4
    cd56:	a6 95       	lsr	r26
    cd58:	97 95       	ror	r25
    cd5a:	87 95       	ror	r24
    cd5c:	77 95       	ror	r23
    cd5e:	67 95       	ror	r22
    cd60:	ba 95       	dec	r27
    cd62:	c9 f7       	brne	.-14     	; 0xcd56 <__ultoa_invert+0x86>
    cd64:	00 97       	sbiw	r24, 0x00	; 0
    cd66:	61 05       	cpc	r22, r1
    cd68:	71 05       	cpc	r23, r1
    cd6a:	08 95       	ret
    cd6c:	9b 01       	movw	r18, r22
    cd6e:	ac 01       	movw	r20, r24
    cd70:	0a 2e       	mov	r0, r26
    cd72:	06 94       	lsr	r0
    cd74:	57 95       	ror	r21
    cd76:	47 95       	ror	r20
    cd78:	37 95       	ror	r19
    cd7a:	27 95       	ror	r18
    cd7c:	ba 95       	dec	r27
    cd7e:	c9 f7       	brne	.-14     	; 0xcd72 <__ultoa_invert+0xa2>
    cd80:	62 0f       	add	r22, r18
    cd82:	73 1f       	adc	r23, r19
    cd84:	84 1f       	adc	r24, r20
    cd86:	95 1f       	adc	r25, r21
    cd88:	a0 1d       	adc	r26, r0
    cd8a:	08 95       	ret

0000cd8c <eeprom_read_byte>:
    cd8c:	f9 99       	sbic	0x1f, 1	; 31
    cd8e:	fe cf       	rjmp	.-4      	; 0xcd8c <eeprom_read_byte>
    cd90:	92 bd       	out	0x22, r25	; 34
    cd92:	81 bd       	out	0x21, r24	; 33
    cd94:	f8 9a       	sbi	0x1f, 0	; 31
    cd96:	99 27       	eor	r25, r25
    cd98:	80 b5       	in	r24, 0x20	; 32
    cd9a:	08 95       	ret

0000cd9c <eeprom_write_byte>:
    cd9c:	26 2f       	mov	r18, r22

0000cd9e <eeprom_write_r18>:
    cd9e:	f9 99       	sbic	0x1f, 1	; 31
    cda0:	fe cf       	rjmp	.-4      	; 0xcd9e <eeprom_write_r18>
    cda2:	1f ba       	out	0x1f, r1	; 31
    cda4:	92 bd       	out	0x22, r25	; 34
    cda6:	81 bd       	out	0x21, r24	; 33
    cda8:	20 bd       	out	0x20, r18	; 32
    cdaa:	0f b6       	in	r0, 0x3f	; 63
    cdac:	f8 94       	cli
    cdae:	fa 9a       	sbi	0x1f, 2	; 31
    cdb0:	f9 9a       	sbi	0x1f, 1	; 31
    cdb2:	0f be       	out	0x3f, r0	; 63
    cdb4:	01 96       	adiw	r24, 0x01	; 1
    cdb6:	08 95       	ret

0000cdb8 <_exit>:
    cdb8:	f8 94       	cli

0000cdba <__stop_program>:
    cdba:	ff cf       	rjmp	.-2      	; 0xcdba <__stop_program>
